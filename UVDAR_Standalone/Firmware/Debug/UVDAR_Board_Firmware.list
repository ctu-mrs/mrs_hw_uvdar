
UVDAR_Board_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d54  08006d54  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08006d54  08006d54  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d54  08006d54  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000178  08006ed0  00020178  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  08006ed0  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b67a  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb1  00000000  00000000  0003b816  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  0003f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019478  00000000  00000000  00041130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e9f  00000000  00000000  0005a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007680d  00000000  00000000  0006b447  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1c54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  000e1cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bd4 	.word	0x08006bd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	08006bd4 	.word	0x08006bd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f005 fbed 	bl	8005a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f005 fba9 	bl	800598c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  uwTick++;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_IncTick+0x14>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	1c5a      	adds	r2, r3, #1
 8000252:	4b02      	ldr	r3, [pc, #8]	; (800025c <HAL_IncTick+0x14>)
 8000254:	601a      	str	r2, [r3, #0]
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200003b8 	.word	0x200003b8

08000260 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  return uwTick;
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_GetTick+0x10>)
 8000266:	681b      	ldr	r3, [r3, #0]
}
 8000268:	0018      	movs	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	200003b8 	.word	0x200003b8

08000274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800027c:	f7ff fff0 	bl	8000260 <HAL_GetTick>
 8000280:	0003      	movs	r3, r0
 8000282:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	3301      	adds	r3, #1
 800028c:	d002      	beq.n	8000294 <HAL_Delay+0x20>
  {
     wait++;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	f7ff ffe3 	bl	8000260 <HAL_GetTick>
 800029a:	0002      	movs	r2, r0
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d8f7      	bhi.n	8000296 <HAL_Delay+0x22>
  {
  }
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b004      	add	sp, #16
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	001a      	movs	r2, r3
 80002c2:	231f      	movs	r3, #31
 80002c4:	401a      	ands	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <NVIC_EnableIRQ+0x28>)
 80002c8:	2101      	movs	r1, #1
 80002ca:	4091      	lsls	r1, r2
 80002cc:	000a      	movs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	e000e100 	.word	0xe000e100

080002dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b7f      	cmp	r3, #127	; 0x7f
 80002f0:	d932      	bls.n	8000358 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f2:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <NVIC_SetPriority+0xd4>)
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	0019      	movs	r1, r3
 80002fa:	230f      	movs	r3, #15
 80002fc:	400b      	ands	r3, r1
 80002fe:	3b08      	subs	r3, #8
 8000300:	089b      	lsrs	r3, r3, #2
 8000302:	3306      	adds	r3, #6
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	18d3      	adds	r3, r2, r3
 8000308:	3304      	adds	r3, #4
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	1dfa      	adds	r2, r7, #7
 800030e:	7812      	ldrb	r2, [r2, #0]
 8000310:	0011      	movs	r1, r2
 8000312:	2203      	movs	r2, #3
 8000314:	400a      	ands	r2, r1
 8000316:	00d2      	lsls	r2, r2, #3
 8000318:	21ff      	movs	r1, #255	; 0xff
 800031a:	4091      	lsls	r1, r2
 800031c:	000a      	movs	r2, r1
 800031e:	43d2      	mvns	r2, r2
 8000320:	401a      	ands	r2, r3
 8000322:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	019b      	lsls	r3, r3, #6
 8000328:	22ff      	movs	r2, #255	; 0xff
 800032a:	401a      	ands	r2, r3
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0018      	movs	r0, r3
 8000332:	2303      	movs	r3, #3
 8000334:	4003      	ands	r3, r0
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	481d      	ldr	r0, [pc, #116]	; (80003b0 <NVIC_SetPriority+0xd4>)
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	001c      	movs	r4, r3
 8000342:	230f      	movs	r3, #15
 8000344:	4023      	ands	r3, r4
 8000346:	3b08      	subs	r3, #8
 8000348:	089b      	lsrs	r3, r3, #2
 800034a:	430a      	orrs	r2, r1
 800034c:	3306      	adds	r3, #6
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	18c3      	adds	r3, r0, r3
 8000352:	3304      	adds	r3, #4
 8000354:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000356:	e027      	b.n	80003a8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000358:	4a16      	ldr	r2, [pc, #88]	; (80003b4 <NVIC_SetPriority+0xd8>)
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	b25b      	sxtb	r3, r3
 8000360:	089b      	lsrs	r3, r3, #2
 8000362:	33c0      	adds	r3, #192	; 0xc0
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	589b      	ldr	r3, [r3, r2]
 8000368:	1dfa      	adds	r2, r7, #7
 800036a:	7812      	ldrb	r2, [r2, #0]
 800036c:	0011      	movs	r1, r2
 800036e:	2203      	movs	r2, #3
 8000370:	400a      	ands	r2, r1
 8000372:	00d2      	lsls	r2, r2, #3
 8000374:	21ff      	movs	r1, #255	; 0xff
 8000376:	4091      	lsls	r1, r2
 8000378:	000a      	movs	r2, r1
 800037a:	43d2      	mvns	r2, r2
 800037c:	401a      	ands	r2, r3
 800037e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	019b      	lsls	r3, r3, #6
 8000384:	22ff      	movs	r2, #255	; 0xff
 8000386:	401a      	ands	r2, r3
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	0018      	movs	r0, r3
 800038e:	2303      	movs	r3, #3
 8000390:	4003      	ands	r3, r0
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <NVIC_SetPriority+0xd8>)
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b25b      	sxtb	r3, r3
 800039e:	089b      	lsrs	r3, r3, #2
 80003a0:	430a      	orrs	r2, r1
 80003a2:	33c0      	adds	r3, #192	; 0xc0
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	501a      	str	r2, [r3, r0]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b003      	add	sp, #12
 80003ae:	bd90      	pop	{r4, r7, pc}
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	e000e100 	.word	0xe000e100

080003b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	210f      	movs	r1, #15
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	1c02      	adds	r2, r0, #0
 80003c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f7ff ff81 	bl	80002dc <NVIC_SetPriority>
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b004      	add	sp, #16
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	0002      	movs	r2, r0
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b25b      	sxtb	r3, r3
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff ff5b 	bl	80002b0 <NVIC_EnableIRQ>
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	603a      	str	r2, [r7, #0]
 8000410:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000412:	2317      	movs	r3, #23
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800041a:	2316      	movs	r3, #22
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000422:	2315      	movs	r3, #21
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800042a:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <HAL_FLASH_Program+0x120>)
 800042c:	7e1b      	ldrb	r3, [r3, #24]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d101      	bne.n	8000436 <HAL_FLASH_Program+0x32>
 8000432:	2302      	movs	r3, #2
 8000434:	e072      	b.n	800051c <HAL_FLASH_Program+0x118>
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <HAL_FLASH_Program+0x120>)
 8000438:	2201      	movs	r2, #1
 800043a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800043c:	2317      	movs	r3, #23
 800043e:	18fe      	adds	r6, r7, r3
 8000440:	4b39      	ldr	r3, [pc, #228]	; (8000528 <HAL_FLASH_Program+0x124>)
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f8c4 	bl	80005d0 <FLASH_WaitForLastOperation>
 8000448:	0003      	movs	r3, r0
 800044a:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 800044c:	2317      	movs	r3, #23
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d15c      	bne.n	8000510 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d104      	bne.n	8000466 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800045c:	2315      	movs	r3, #21
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	e00b      	b.n	800047e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d104      	bne.n	8000476 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800046c:	2315      	movs	r3, #21
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	2202      	movs	r2, #2
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	e003      	b.n	800047e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000476:	2315      	movs	r3, #21
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	2204      	movs	r2, #4
 800047c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800047e:	2316      	movs	r3, #22
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e039      	b.n	80004fc <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000488:	2116      	movs	r1, #22
 800048a:	187b      	adds	r3, r7, r1
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	005a      	lsls	r2, r3, #1
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	18d0      	adds	r0, r2, r3
 8000494:	187b      	adds	r3, r7, r1
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	001a      	movs	r2, r3
 800049c:	3a20      	subs	r2, #32
 800049e:	2a00      	cmp	r2, #0
 80004a0:	db03      	blt.n	80004aa <HAL_FLASH_Program+0xa6>
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	40d1      	lsrs	r1, r2
 80004a6:	000c      	movs	r4, r1
 80004a8:	e008      	b.n	80004bc <HAL_FLASH_Program+0xb8>
 80004aa:	2220      	movs	r2, #32
 80004ac:	1ad2      	subs	r2, r2, r3
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	4091      	lsls	r1, r2
 80004b2:	000a      	movs	r2, r1
 80004b4:	6839      	ldr	r1, [r7, #0]
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	000c      	movs	r4, r1
 80004ba:	4314      	orrs	r4, r2
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	40da      	lsrs	r2, r3
 80004c0:	0015      	movs	r5, r2
 80004c2:	b2a3      	uxth	r3, r4
 80004c4:	0019      	movs	r1, r3
 80004c6:	f000 f867 	bl	8000598 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004ca:	2317      	movs	r3, #23
 80004cc:	18fe      	adds	r6, r7, r3
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_FLASH_Program+0x124>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f87d 	bl	80005d0 <FLASH_WaitForLastOperation>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_FLASH_Program+0x128>)
 80004dc:	691a      	ldr	r2, [r3, #16]
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_FLASH_Program+0x128>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	438a      	bics	r2, r1
 80004e4:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80004e6:	2317      	movs	r3, #23
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d10e      	bne.n	800050e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80004f0:	2116      	movs	r1, #22
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	3201      	adds	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	2316      	movs	r3, #22
 80004fe:	18fa      	adds	r2, r7, r3
 8000500:	2315      	movs	r3, #21
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	7812      	ldrb	r2, [r2, #0]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	d3bd      	bcc.n	8000488 <HAL_FLASH_Program+0x84>
 800050c:	e000      	b.n	8000510 <HAL_FLASH_Program+0x10c>
      {
        break;
 800050e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_FLASH_Program+0x120>)
 8000512:	2200      	movs	r2, #0
 8000514:	761a      	strb	r2, [r3, #24]

  return status;
 8000516:	2317      	movs	r3, #23
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b007      	add	sp, #28
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	200003c0 	.word	0x200003c0
 8000528:	0000c350 	.word	0x0000c350
 800052c:	40022000 	.word	0x40022000

08000530 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	4013      	ands	r3, r2
 8000544:	d00d      	beq.n	8000562 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_FLASH_Unlock+0x44>)
 800054a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_FLASH_Unlock+0x48>)
 8000550:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	4013      	ands	r3, r2
 800055a:	d002      	beq.n	8000562 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40022000 	.word	0x40022000
 8000574:	45670123 	.word	0x45670123
 8000578:	cdef89ab 	.word	0xcdef89ab

0800057c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_FLASH_Lock+0x18>)
 8000582:	691a      	ldr	r2, [r3, #16]
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_FLASH_Lock+0x18>)
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	430a      	orrs	r2, r1
 800058a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800058c:	2300      	movs	r3, #0
}
 800058e:	0018      	movs	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40022000 	.word	0x40022000

08000598 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	000a      	movs	r2, r1
 80005a2:	1cbb      	adds	r3, r7, #2
 80005a4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <FLASH_Program_HalfWord+0x30>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <FLASH_Program_HalfWord+0x34>)
 80005ae:	691a      	ldr	r2, [r3, #16]
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <FLASH_Program_HalfWord+0x34>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	430a      	orrs	r2, r1
 80005b6:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1cba      	adds	r2, r7, #2
 80005bc:	8812      	ldrh	r2, [r2, #0]
 80005be:	801a      	strh	r2, [r3, #0]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003c0 	.word	0x200003c0
 80005cc:	40022000 	.word	0x40022000

080005d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff fe42 	bl	8000260 <HAL_GetTick>
 80005dc:	0003      	movs	r3, r0
 80005de:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005e0:	e00f      	b.n	8000602 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	d00c      	beq.n	8000602 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <FLASH_WaitForLastOperation+0x2e>
 80005ee:	f7ff fe37 	bl	8000260 <HAL_GetTick>
 80005f2:	0002      	movs	r2, r0
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d201      	bcs.n	8000602 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80005fe:	2303      	movs	r3, #3
 8000600:	e01f      	b.n	8000642 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <FLASH_WaitForLastOperation+0x7c>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	2b01      	cmp	r3, #1
 800060c:	d0e9      	beq.n	80005e2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <FLASH_WaitForLastOperation+0x7c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	2220      	movs	r2, #32
 8000614:	4013      	ands	r3, r2
 8000616:	2b20      	cmp	r3, #32
 8000618:	d102      	bne.n	8000620 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <FLASH_WaitForLastOperation+0x7c>)
 800061c:	2220      	movs	r2, #32
 800061e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <FLASH_WaitForLastOperation+0x7c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	2210      	movs	r2, #16
 8000626:	4013      	ands	r3, r2
 8000628:	2b10      	cmp	r3, #16
 800062a:	d005      	beq.n	8000638 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <FLASH_WaitForLastOperation+0x7c>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	2204      	movs	r2, #4
 8000632:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000634:	2b04      	cmp	r3, #4
 8000636:	d103      	bne.n	8000640 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000638:	f000 f80a 	bl	8000650 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40022000 	.word	0x40022000

08000650 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <FLASH_SetErrorCode+0x58>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	2210      	movs	r2, #16
 8000660:	4013      	ands	r3, r2
 8000662:	2b10      	cmp	r3, #16
 8000664:	d109      	bne.n	800067a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <FLASH_SetErrorCode+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	2202      	movs	r2, #2
 800066c:	431a      	orrs	r2, r3
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <FLASH_SetErrorCode+0x5c>)
 8000670:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2210      	movs	r2, #16
 8000676:	4313      	orrs	r3, r2
 8000678:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <FLASH_SetErrorCode+0x58>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d109      	bne.n	800069a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <FLASH_SetErrorCode+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	2201      	movs	r2, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <FLASH_SetErrorCode+0x5c>)
 8000690:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2204      	movs	r2, #4
 8000696:	4313      	orrs	r3, r2
 8000698:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <FLASH_SetErrorCode+0x58>)
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	60da      	str	r2, [r3, #12]
}  
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40022000 	.word	0x40022000
 80006ac:	200003c0 	.word	0x200003c0

080006b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80006ba:	230f      	movs	r3, #15
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <HAL_FLASHEx_Erase+0xe0>)
 80006c8:	7e1b      	ldrb	r3, [r3, #24]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d101      	bne.n	80006d2 <HAL_FLASHEx_Erase+0x22>
 80006ce:	2302      	movs	r3, #2
 80006d0:	e05a      	b.n	8000788 <HAL_FLASHEx_Erase+0xd8>
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <HAL_FLASHEx_Erase+0xe0>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d116      	bne.n	800070e <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <HAL_FLASHEx_Erase+0xe4>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff ff74 	bl	80005d0 <FLASH_WaitForLastOperation>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d147      	bne.n	800077c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80006ec:	f000 f856 	bl	800079c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fc      	adds	r4, r7, r3
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <HAL_FLASHEx_Erase+0xe4>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ff6a 	bl	80005d0 <FLASH_WaitForLastOperation>
 80006fc:	0003      	movs	r3, r0
 80006fe:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <HAL_FLASHEx_Erase+0xe8>)
 8000702:	691a      	ldr	r2, [r3, #16]
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_FLASHEx_Erase+0xe8>)
 8000706:	2104      	movs	r1, #4
 8000708:	438a      	bics	r2, r1
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	e036      	b.n	800077c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_FLASHEx_Erase+0xe4>)
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff ff5d 	bl	80005d0 <FLASH_WaitForLastOperation>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d130      	bne.n	800077c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2201      	movs	r2, #1
 800071e:	4252      	negs	r2, r2
 8000720:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e01f      	b.n	800076a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	0018      	movs	r0, r3
 800072e:	f000 f84d 	bl	80007cc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000732:	250f      	movs	r5, #15
 8000734:	197c      	adds	r4, r7, r5
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_FLASHEx_Erase+0xe4>)
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff ff49 	bl	80005d0 <FLASH_WaitForLastOperation>
 800073e:	0003      	movs	r3, r0
 8000740:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_FLASHEx_Erase+0xe8>)
 8000744:	691a      	ldr	r2, [r3, #16]
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_FLASHEx_Erase+0xe8>)
 8000748:	2102      	movs	r1, #2
 800074a:	438a      	bics	r2, r1
 800074c:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 800074e:	197b      	adds	r3, r7, r5
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	601a      	str	r2, [r3, #0]
            break;
 800075c:	e00e      	b.n	800077c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	4694      	mov	ip, r2
 8000766:	4463      	add	r3, ip
 8000768:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	029a      	lsls	r2, r3, #10
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3d6      	bcc.n	800072a <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <HAL_FLASHEx_Erase+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]

  return status;
 8000782:	230f      	movs	r3, #15
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	781b      	ldrb	r3, [r3, #0]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	b004      	add	sp, #16
 800078e:	bdb0      	pop	{r4, r5, r7, pc}
 8000790:	200003c0 	.word	0x200003c0
 8000794:	0000c350 	.word	0x0000c350
 8000798:	40022000 	.word	0x40022000

0800079c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <FLASH_MassErase+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <FLASH_MassErase+0x2c>)
 80007a8:	691a      	ldr	r2, [r3, #16]
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <FLASH_MassErase+0x2c>)
 80007ac:	2104      	movs	r1, #4
 80007ae:	430a      	orrs	r2, r1
 80007b0:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <FLASH_MassErase+0x2c>)
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <FLASH_MassErase+0x2c>)
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	430a      	orrs	r2, r1
 80007bc:	611a      	str	r2, [r3, #16]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200003c0 	.word	0x200003c0
 80007c8:	40022000 	.word	0x40022000

080007cc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <FLASH_PageErase+0x34>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <FLASH_PageErase+0x38>)
 80007dc:	691a      	ldr	r2, [r3, #16]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <FLASH_PageErase+0x38>)
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <FLASH_PageErase+0x38>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <FLASH_PageErase+0x38>)
 80007ee:	691a      	ldr	r2, [r3, #16]
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <FLASH_PageErase+0x38>)
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	430a      	orrs	r2, r1
 80007f6:	611a      	str	r2, [r3, #16]
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200003c0 	.word	0x200003c0
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800081e:	e149      	b.n	8000ab4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <HAL_GPIO_Init+0x30>
 8000836:	e13a      	b.n	8000aae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x40>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b12      	cmp	r3, #18
 8000846:	d123      	bne.n	8000890 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2207      	movs	r2, #7
 800085a:	4013      	ands	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	409a      	lsls	r2, r3
 8000862:	0013      	movs	r3, r2
 8000864:	43da      	mvns	r2, r3
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	2107      	movs	r1, #7
 8000874:	400b      	ands	r3, r1
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	6939      	ldr	r1, [r7, #16]
 800088e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	409a      	lsls	r2, r3
 800089e:	0013      	movs	r3, r2
 80008a0:	43da      	mvns	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2203      	movs	r2, #3
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	409a      	lsls	r2, r3
 80008b6:	0013      	movs	r3, r2
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d00b      	beq.n	80008e4 <HAL_GPIO_Init+0xdc>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d007      	beq.n	80008e4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d8:	2b11      	cmp	r3, #17
 80008da:	d003      	beq.n	80008e4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b12      	cmp	r3, #18
 80008e2:	d130      	bne.n	8000946 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	2203      	movs	r2, #3
 80008f0:	409a      	lsls	r2, r3
 80008f2:	0013      	movs	r3, r2
 80008f4:	43da      	mvns	r2, r3
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4313      	orrs	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800091a:	2201      	movs	r2, #1
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	43da      	mvns	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	2201      	movs	r2, #1
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
 8000938:	0013      	movs	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	055b      	lsls	r3, r3, #21
 800097e:	4013      	ands	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_GPIO_Init+0x17c>
 8000982:	e094      	b.n	8000aae <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b51      	ldr	r3, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x2c4>)
 8000986:	699a      	ldr	r2, [r3, #24]
 8000988:	4b50      	ldr	r3, [pc, #320]	; (8000acc <HAL_GPIO_Init+0x2c4>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <HAL_GPIO_Init+0x2c4>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800099c:	4a4c      	ldr	r2, [pc, #304]	; (8000ad0 <HAL_GPIO_Init+0x2c8>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	589b      	ldr	r3, [r3, r2]
 80009a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d00d      	beq.n	80009e6 <HAL_GPIO_Init+0x1de>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <HAL_GPIO_Init+0x2cc>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d007      	beq.n	80009e2 <HAL_GPIO_Init+0x1da>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <HAL_GPIO_Init+0x2d0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_GPIO_Init+0x1d6>
 80009da:	2302      	movs	r3, #2
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009de:	2305      	movs	r3, #5
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009e6:	2300      	movs	r3, #0
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	2103      	movs	r1, #3
 80009ec:	400a      	ands	r2, r1
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4093      	lsls	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009f8:	4935      	ldr	r1, [pc, #212]	; (8000ad0 <HAL_GPIO_Init+0x2c8>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x222>
        {
          SET_BIT(temp, iocurrent); 
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	029b      	lsls	r3, r3, #10
 8000a48:	4013      	ands	r3, r2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x24c>
        { 
          SET_BIT(temp, iocurrent); 
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	035b      	lsls	r3, r3, #13
 8000a72:	4013      	ands	r3, r2
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(temp, iocurrent); 
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	039b      	lsls	r3, r3, #14
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x2a0>
        {
          SET_BIT(temp, iocurrent); 
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	40da      	lsrs	r2, r3
 8000abc:	1e13      	subs	r3, r2, #0
 8000abe:	d000      	beq.n	8000ac2 <HAL_GPIO_Init+0x2ba>
 8000ac0:	e6ae      	b.n	8000820 <HAL_GPIO_Init+0x18>
  } 
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b006      	add	sp, #24
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	40010400 	.word	0x40010400

08000ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	000a      	movs	r2, r1
 8000aea:	1cbb      	adds	r3, r7, #2
 8000aec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	1cba      	adds	r2, r7, #2
 8000af4:	8812      	ldrh	r2, [r2, #0]
 8000af6:	4013      	ands	r3, r2
 8000af8:	d004      	beq.n	8000b04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e003      	b.n	8000b0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
  }
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	0008      	movs	r0, r1
 8000b24:	0011      	movs	r1, r2
 8000b26:	1cbb      	adds	r3, r7, #2
 8000b28:	1c02      	adds	r2, r0, #0
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	1c7b      	adds	r3, r7, #1
 8000b2e:	1c0a      	adds	r2, r1, #0
 8000b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b32:	1c7b      	adds	r3, r7, #1
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3a:	1cbb      	adds	r3, r7, #2
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b42:	e003      	b.n	8000b4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b44:	1cbb      	adds	r3, r7, #2
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e0de      	b.n	8000d2c <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	23ea      	movs	r3, #234	; 0xea
 8000b72:	33ff      	adds	r3, #255	; 0xff
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d108      	bne.n	8000b8e <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	23f4      	movs	r3, #244	; 0xf4
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2100      	movs	r1, #0
 8000b84:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f005 f94d 	bl	8005e28 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	23ea      	movs	r3, #234	; 0xea
 8000b92:	33ff      	adds	r3, #255	; 0xff
 8000b94:	2103      	movs	r1, #3
 8000b96:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e043      	b.n	8000c26 <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	2029      	movs	r0, #41	; 0x29
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	1a9b      	subs	r3, r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	18cb      	adds	r3, r1, r3
 8000bae:	181b      	adds	r3, r3, r0
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	b2dc      	uxtb	r4, r3
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	2028      	movs	r0, #40	; 0x28
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	18cb      	adds	r3, r1, r3
 8000bc8:	181b      	adds	r3, r3, r0
 8000bca:	1c22      	adds	r2, r4, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	202b      	movs	r0, #43	; 0x2b
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	18cb      	adds	r3, r1, r3
 8000bde:	181b      	adds	r3, r3, r0
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	0013      	movs	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	1a9b      	subs	r3, r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18cb      	adds	r3, r1, r3
 8000bf2:	3334      	adds	r3, #52	; 0x34
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	1a9b      	subs	r3, r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	18cb      	adds	r3, r1, r3
 8000c06:	3338      	adds	r3, #56	; 0x38
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	0013      	movs	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	1a9b      	subs	r3, r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18cb      	adds	r3, r1, r3
 8000c1a:	333c      	adds	r3, #60	; 0x3c
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3b6      	bcc.n	8000b9e <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e04e      	b.n	8000cd4 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	33ff      	adds	r3, #255	; 0xff
 8000c3e:	0019      	movs	r1, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	1a9b      	subs	r3, r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	18c3      	adds	r3, r0, r3
 8000c4a:	185b      	adds	r3, r3, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	b2dc      	uxtb	r4, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	2384      	movs	r3, #132	; 0x84
 8000c5a:	0059      	lsls	r1, r3, #1
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	18c3      	adds	r3, r0, r3
 8000c66:	185b      	adds	r3, r3, r1
 8000c68:	1c22      	adds	r2, r4, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	230c      	movs	r3, #12
 8000c72:	33ff      	adds	r3, #255	; 0xff
 8000c74:	0019      	movs	r1, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	18c3      	adds	r3, r0, r3
 8000c80:	185b      	adds	r3, r3, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	238a      	movs	r3, #138	; 0x8a
 8000c8c:	0059      	lsls	r1, r3, #1
 8000c8e:	0013      	movs	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	18c3      	adds	r3, r0, r3
 8000c98:	185b      	adds	r3, r3, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	238c      	movs	r3, #140	; 0x8c
 8000ca4:	0059      	lsls	r1, r3, #1
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	18c3      	adds	r3, r0, r3
 8000cb0:	185b      	adds	r3, r3, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	238e      	movs	r3, #142	; 0x8e
 8000cbc:	0059      	lsls	r1, r3, #1
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	18c3      	adds	r3, r0, r3
 8000cc8:	185b      	adds	r3, r3, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3ab      	bcc.n	8000c36 <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2240      	movs	r2, #64	; 0x40
 8000cee:	2100      	movs	r1, #0
 8000cf0:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2244      	movs	r2, #68	; 0x44
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2250      	movs	r2, #80	; 0x50
 8000d02:	2100      	movs	r1, #0
 8000d04:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000d06:	23bf      	movs	r3, #191	; 0xbf
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	b291      	uxth	r1, r2
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2224      	movs	r2, #36	; 0x24
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	23ea      	movs	r3, #234	; 0xea
 8000d24:	33ff      	adds	r3, #255	; 0xff
 8000d26:	2101      	movs	r1, #1
 8000d28:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b005      	add	sp, #20
 8000d32:	bd90      	pop	{r4, r7, pc}

08000d34 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2258      	movs	r2, #88	; 0x58
 8000d42:	5a9b      	ldrh	r3, [r3, r2]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <HAL_PCD_Start+0x2c>)
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	b291      	uxth	r1, r2
 8000d50:	2258      	movs	r2, #88	; 0x58
 8000d52:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	ffff8000 	.word	0xffff8000

08000d64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2244      	movs	r2, #68	; 0x44
 8000d76:	5a9b      	ldrh	r3, [r3, r2]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	401a      	ands	r2, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d103      	bne.n	8000d92 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 fc11 	bl	80025b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2244      	movs	r2, #68	; 0x44
 8000d98:	5a9b      	ldrh	r3, [r3, r2]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	401a      	ands	r2, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d114      	bne.n	8000dd6 <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2244      	movs	r2, #68	; 0x44
 8000db2:	5a9b      	ldrh	r3, [r3, r2]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4977      	ldr	r1, [pc, #476]	; (8000f98 <HAL_PCD_IRQHandler+0x234>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	b291      	uxth	r1, r2
 8000dc0:	2244      	movs	r2, #68	; 0x44
 8000dc2:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f005 f8b7 	bl	8005f3a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f8ef 	bl	8000fb4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	5a9b      	ldrh	r3, [r3, r2]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	001a      	movs	r2, r3
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	01db      	lsls	r3, r3, #7
 8000de6:	401a      	ands	r2, r3
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	01db      	lsls	r3, r3, #7
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10b      	bne.n	8000e08 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2244      	movs	r2, #68	; 0x44
 8000df6:	5a9b      	ldrh	r3, [r3, r2]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4967      	ldr	r1, [pc, #412]	; (8000f9c <HAL_PCD_IRQHandler+0x238>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	b291      	uxth	r1, r2
 8000e04:	2244      	movs	r2, #68	; 0x44
 8000e06:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2244      	movs	r2, #68	; 0x44
 8000e0e:	5a9b      	ldrh	r3, [r3, r2]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	001a      	movs	r2, r3
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	019b      	lsls	r3, r3, #6
 8000e18:	401a      	ands	r2, r3
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d10b      	bne.n	8000e3a <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2244      	movs	r2, #68	; 0x44
 8000e28:	5a9b      	ldrh	r3, [r3, r2]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	495b      	ldr	r1, [pc, #364]	; (8000fa0 <HAL_PCD_IRQHandler+0x23c>)
 8000e32:	400a      	ands	r2, r1
 8000e34:	b291      	uxth	r1, r2
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2244      	movs	r2, #68	; 0x44
 8000e40:	5a9b      	ldrh	r3, [r3, r2]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	001a      	movs	r2, r3
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	015b      	lsls	r3, r3, #5
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	015b      	lsls	r3, r3, #5
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d124      	bne.n	8000e9e <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	5a9b      	ldrh	r3, [r3, r2]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	438a      	bics	r2, r1
 8000e66:	b291      	uxth	r1, r2
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000e6c:	23bd      	movs	r3, #189	; 0xbd
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	b291      	uxth	r1, r2
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f005 f89b 	bl	8005fbc <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2244      	movs	r2, #68	; 0x44
 8000e8c:	5a9b      	ldrh	r3, [r3, r2]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4943      	ldr	r1, [pc, #268]	; (8000fa4 <HAL_PCD_IRQHandler+0x240>)
 8000e96:	400a      	ands	r2, r1
 8000e98:	b291      	uxth	r1, r2
 8000e9a:	2244      	movs	r2, #68	; 0x44
 8000e9c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2244      	movs	r2, #68	; 0x44
 8000ea4:	5a9b      	ldrh	r3, [r3, r2]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	401a      	ands	r2, r3
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d134      	bne.n	8000f22 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2244      	movs	r2, #68	; 0x44
 8000ebe:	5a9b      	ldrh	r3, [r3, r2]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4938      	ldr	r1, [pc, #224]	; (8000fa8 <HAL_PCD_IRQHandler+0x244>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	b291      	uxth	r1, r2
 8000ecc:	2244      	movs	r2, #68	; 0x44
 8000ece:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2240      	movs	r2, #64	; 0x40
 8000ed6:	5a9b      	ldrh	r3, [r3, r2]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2108      	movs	r1, #8
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	b291      	uxth	r1, r2
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	5a9b      	ldrh	r3, [r3, r2]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	b291      	uxth	r1, r2
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2244      	movs	r2, #68	; 0x44
 8000f06:	5a9b      	ldrh	r3, [r3, r2]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	015b      	lsls	r3, r3, #5
 8000f10:	401a      	ands	r2, r3
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d003      	beq.n	8000f22 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f005 f831 	bl	8005f84 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2244      	movs	r2, #68	; 0x44
 8000f28:	5a9b      	ldrh	r3, [r3, r2]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	401a      	ands	r2, r3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10f      	bne.n	8000f5c <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2244      	movs	r2, #68	; 0x44
 8000f42:	5a9b      	ldrh	r3, [r3, r2]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4918      	ldr	r1, [pc, #96]	; (8000fac <HAL_PCD_IRQHandler+0x248>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	b291      	uxth	r1, r2
 8000f50:	2244      	movs	r2, #68	; 0x44
 8000f52:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f004 ffe0 	bl	8005f1c <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2244      	movs	r2, #68	; 0x44
 8000f62:	5a9b      	ldrh	r3, [r3, r2]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	001a      	movs	r2, r3
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10b      	bne.n	8000f8e <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	5a9b      	ldrh	r3, [r3, r2]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <HAL_PCD_IRQHandler+0x24c>)
 8000f86:	400a      	ands	r2, r1
 8000f88:	b291      	uxth	r1, r2
 8000f8a:	2244      	movs	r2, #68	; 0x44
 8000f8c:	5299      	strh	r1, [r3, r2]
  }
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	fffffbff 	.word	0xfffffbff
 8000f9c:	ffffbfff 	.word	0xffffbfff
 8000fa0:	ffffdfff 	.word	0xffffdfff
 8000fa4:	ffffefff 	.word	0xffffefff
 8000fa8:	fffff7ff 	.word	0xfffff7ff
 8000fac:	fffffdff 	.word	0xfffffdff
 8000fb0:	fffffeff 	.word	0xfffffeff

08000fb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	1cfb      	adds	r3, r7, #3
 8000fc0:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	23f4      	movs	r3, #244	; 0xf4
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_PCD_SetAddress+0x1e>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e019      	b.n	8001006 <HAL_PCD_SetAddress+0x52>
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	23f4      	movs	r3, #244	; 0xf4
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2101      	movs	r1, #1
 8000fda:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8000fdc:	1cfb      	adds	r3, r7, #3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	224c      	movs	r2, #76	; 0x4c
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	5299      	strh	r1, [r3, r2]
 8000fee:	e004      	b.n	8000ffa <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1cfa      	adds	r2, r7, #3
 8000ff4:	2124      	movs	r1, #36	; 0x24
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	23f4      	movs	r3, #244	; 0xf4
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2100      	movs	r1, #0
 8001002:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	000c      	movs	r4, r1
 800101a:	0010      	movs	r0, r2
 800101c:	0019      	movs	r1, r3
 800101e:	1cfb      	adds	r3, r7, #3
 8001020:	1c22      	adds	r2, r4, #0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	003b      	movs	r3, r7
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	1c0a      	adds	r2, r1, #0
 800102e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001030:	2311      	movs	r3, #17
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001038:	1cfb      	adds	r3, r7, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0c      	bge.n	800105c <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001042:	1cfb      	adds	r3, r7, #3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	227f      	movs	r2, #127	; 0x7f
 8001048:	401a      	ands	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	3328      	adds	r3, #40	; 0x28
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	18d3      	adds	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e00c      	b.n	8001076 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800105c:	1cfb      	adds	r3, r7, #3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	227f      	movs	r2, #127	; 0x7f
 8001062:	401a      	ands	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	3309      	adds	r3, #9
 800106e:	33ff      	adds	r3, #255	; 0xff
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	18d3      	adds	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8001076:	1cfb      	adds	r3, r7, #3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	227f      	movs	r2, #127	; 0x7f
 800107c:	4013      	ands	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001084:	1cfb      	adds	r3, r7, #3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	09db      	lsrs	r3, r3, #7
 800108e:	b2db      	uxtb	r3, r3
 8001090:	001a      	movs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001096:	003b      	movs	r3, r7
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	1cba      	adds	r2, r7, #2
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	23f4      	movs	r3, #244	; 0xf4
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_PCD_EP_Open+0xa6>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e317      	b.n	80016e6 <HAL_PCD_EP_Open+0x6d6>
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	23f4      	movs	r3, #244	; 0xf4
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2101      	movs	r1, #1
 80010be:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	78db      	ldrb	r3, [r3, #3]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d04d      	beq.n	8001164 <HAL_PCD_EP_Open+0x154>
 80010c8:	dc02      	bgt.n	80010d0 <HAL_PCD_EP_Open+0xc0>
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 80010ce:	e060      	b.n	8001192 <HAL_PCD_EP_Open+0x182>
  switch (ep->type)
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d019      	beq.n	8001108 <HAL_PCD_EP_Open+0xf8>
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d02e      	beq.n	8001136 <HAL_PCD_EP_Open+0x126>
    break;
 80010d8:	e05b      	b.n	8001192 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4aba      	ldr	r2, [pc, #744]	; (80013d4 <HAL_PCD_EP_Open+0x3c4>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0019      	movs	r1, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18cb      	adds	r3, r1, r3
 80010fe:	49b6      	ldr	r1, [pc, #728]	; (80013d8 <HAL_PCD_EP_Open+0x3c8>)
 8001100:	430a      	orrs	r2, r1
 8001102:	b292      	uxth	r2, r2
 8001104:	801a      	strh	r2, [r3, #0]
    break;
 8001106:	e044      	b.n	8001192 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4aae      	ldr	r2, [pc, #696]	; (80013d4 <HAL_PCD_EP_Open+0x3c4>)
 800111a:	4013      	ands	r3, r2
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0019      	movs	r1, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	18cb      	adds	r3, r1, r3
 800112c:	49ab      	ldr	r1, [pc, #684]	; (80013dc <HAL_PCD_EP_Open+0x3cc>)
 800112e:	430a      	orrs	r2, r1
 8001130:	b292      	uxth	r2, r2
 8001132:	801a      	strh	r2, [r3, #0]
    break;
 8001134:	e02d      	b.n	8001192 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	001a      	movs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	18d3      	adds	r3, r2, r3
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4aa3      	ldr	r2, [pc, #652]	; (80013d4 <HAL_PCD_EP_Open+0x3c4>)
 8001148:	4013      	ands	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0019      	movs	r1, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	18cb      	adds	r3, r1, r3
 800115a:	49a1      	ldr	r1, [pc, #644]	; (80013e0 <HAL_PCD_EP_Open+0x3d0>)
 800115c:	430a      	orrs	r2, r1
 800115e:	b292      	uxth	r2, r2
 8001160:	801a      	strh	r2, [r3, #0]
    break;
 8001162:	e016      	b.n	8001192 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4a97      	ldr	r2, [pc, #604]	; (80013d4 <HAL_PCD_EP_Open+0x3c4>)
 8001176:	4013      	ands	r3, r2
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0019      	movs	r1, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	18cb      	adds	r3, r1, r3
 8001188:	4996      	ldr	r1, [pc, #600]	; (80013e4 <HAL_PCD_EP_Open+0x3d4>)
 800118a:	430a      	orrs	r2, r1
 800118c:	b292      	uxth	r2, r2
 800118e:	801a      	strh	r2, [r3, #0]
    break;
 8001190:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	001a      	movs	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4a91      	ldr	r2, [pc, #580]	; (80013e8 <HAL_PCD_EP_Open+0x3d8>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0019      	movs	r1, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	18cb      	adds	r3, r1, r3
 80011c0:	4986      	ldr	r1, [pc, #536]	; (80013dc <HAL_PCD_EP_Open+0x3cc>)
 80011c2:	430a      	orrs	r2, r1
 80011c4:	b292      	uxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d000      	beq.n	80011d2 <HAL_PCD_EP_Open+0x1c2>
 80011d0:	e11a      	b.n	8001408 <HAL_PCD_EP_Open+0x3f8>
  {
    if (ep->is_in)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d056      	beq.n	8001288 <HAL_PCD_EP_Open+0x278>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	889b      	ldrh	r3, [r3, #4]
 80011de:	085b      	lsrs	r3, r3, #1
 80011e0:	b299      	uxth	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2250      	movs	r2, #80	; 0x50
 80011e8:	5a9b      	ldrh	r3, [r3, r2]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	001a      	movs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	001a      	movs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	4694      	mov	ip, r2
 8001204:	4463      	add	r3, ip
 8001206:	001a      	movs	r2, r3
 8001208:	1c0b      	adds	r3, r1, #0
 800120a:	18db      	adds	r3, r3, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	4013      	ands	r3, r2
 8001226:	d015      	beq.n	8001254 <HAL_PCD_EP_Open+0x244>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	4a6b      	ldr	r2, [pc, #428]	; (80013e8 <HAL_PCD_EP_Open+0x3d8>)
 800123a:	4013      	ands	r3, r2
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0019      	movs	r1, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	18cb      	adds	r3, r1, r3
 800124c:	4967      	ldr	r1, [pc, #412]	; (80013ec <HAL_PCD_EP_Open+0x3dc>)
 800124e:	430a      	orrs	r2, r1
 8001250:	b292      	uxth	r2, r2
 8001252:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4a62      	ldr	r2, [pc, #392]	; (80013f0 <HAL_PCD_EP_Open+0x3e0>)
 8001266:	4013      	ands	r3, r2
 8001268:	b29c      	uxth	r4, r3
 800126a:	2320      	movs	r3, #32
 800126c:	4063      	eors	r3, r4
 800126e:	b29c      	uxth	r4, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	001a      	movs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_PCD_EP_Open+0x3cc>)
 8001280:	4322      	orrs	r2, r4
 8001282:	b292      	uxth	r2, r2
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	e226      	b.n	80016d6 <HAL_PCD_EP_Open+0x6c6>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	b299      	uxth	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2250      	movs	r2, #80	; 0x50
 8001296:	5a9b      	ldrh	r3, [r3, r2]
 8001298:	b29b      	uxth	r3, r3
 800129a:	001a      	movs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	18d3      	adds	r3, r2, r3
 80012a4:	001a      	movs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	18d3      	adds	r3, r2, r3
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <HAL_PCD_EP_Open+0x3e4>)
 80012ae:	4694      	mov	ip, r2
 80012b0:	4463      	add	r3, ip
 80012b2:	001a      	movs	r2, r3
 80012b4:	1c0b      	adds	r3, r1, #0
 80012b6:	18db      	adds	r3, r3, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2250      	movs	r2, #80	; 0x50
 80012c2:	5a9b      	ldrh	r3, [r3, r2]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	001a      	movs	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	001a      	movs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	18d3      	adds	r3, r2, r3
 80012d8:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <HAL_PCD_EP_Open+0x3e8>)
 80012da:	4694      	mov	ip, r2
 80012dc:	4463      	add	r3, ip
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b3e      	cmp	r3, #62	; 0x3e
 80012e6:	d91b      	bls.n	8001320 <HAL_PCD_EP_Open+0x310>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	095a      	lsrs	r2, r3, #5
 80012ee:	2312      	movs	r3, #18
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	221f      	movs	r2, #31
 80012fa:	4013      	ands	r3, r2
 80012fc:	d105      	bne.n	800130a <HAL_PCD_EP_Open+0x2fa>
 80012fe:	2112      	movs	r1, #18
 8001300:	187b      	adds	r3, r7, r1
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	187b      	adds	r3, r7, r1
 8001306:	3a01      	subs	r2, #1
 8001308:	801a      	strh	r2, [r3, #0]
 800130a:	2312      	movs	r3, #18
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	b29b      	uxth	r3, r3
 8001314:	4a39      	ldr	r2, [pc, #228]	; (80013fc <HAL_PCD_EP_Open+0x3ec>)
 8001316:	4313      	orrs	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	801a      	strh	r2, [r3, #0]
 800131e:	e017      	b.n	8001350 <HAL_PCD_EP_Open+0x340>
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	085a      	lsrs	r2, r3, #1
 8001326:	2312      	movs	r3, #18
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	d005      	beq.n	8001342 <HAL_PCD_EP_Open+0x332>
 8001336:	2112      	movs	r1, #18
 8001338:	187b      	adds	r3, r7, r1
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	187b      	adds	r3, r7, r1
 800133e:	3201      	adds	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	2312      	movs	r3, #18
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	b29a      	uxth	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	001a      	movs	r2, r3
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	01db      	lsls	r3, r3, #7
 8001366:	4013      	ands	r3, r2
 8001368:	d015      	beq.n	8001396 <HAL_PCD_EP_Open+0x386>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	18d3      	adds	r3, r2, r3
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_PCD_EP_Open+0x3d8>)
 800137c:	4013      	ands	r3, r2
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0019      	movs	r1, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	18cb      	adds	r3, r1, r3
 800138e:	491c      	ldr	r1, [pc, #112]	; (8001400 <HAL_PCD_EP_Open+0x3f0>)
 8001390:	430a      	orrs	r2, r1
 8001392:	b292      	uxth	r2, r2
 8001394:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	001a      	movs	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_PCD_EP_Open+0x3f4>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	b29c      	uxth	r4, r3
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	4063      	eors	r3, r4
 80013b2:	b29c      	uxth	r4, r3
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	4063      	eors	r3, r4
 80013ba:	b29c      	uxth	r4, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_PCD_EP_Open+0x3cc>)
 80013cc:	4322      	orrs	r2, r4
 80013ce:	b292      	uxth	r2, r2
 80013d0:	801a      	strh	r2, [r3, #0]
 80013d2:	e180      	b.n	80016d6 <HAL_PCD_EP_Open+0x6c6>
 80013d4:	0000090f 	.word	0x0000090f
 80013d8:	ffff8280 	.word	0xffff8280
 80013dc:	ffff8080 	.word	0xffff8080
 80013e0:	ffff8680 	.word	0xffff8680
 80013e4:	ffff8480 	.word	0xffff8480
 80013e8:	00000f0f 	.word	0x00000f0f
 80013ec:	ffff80c0 	.word	0xffff80c0
 80013f0:	ffff8fbf 	.word	0xffff8fbf
 80013f4:	00000404 	.word	0x00000404
 80013f8:	00000406 	.word	0x00000406
 80013fc:	ffff8000 	.word	0xffff8000
 8001400:	ffffc080 	.word	0xffffc080
 8001404:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	18d3      	adds	r3, r2, r3
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	4ab5      	ldr	r2, [pc, #724]	; (80016f0 <HAL_PCD_EP_Open+0x6e0>)
 800141a:	4013      	ands	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0019      	movs	r1, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	18cb      	adds	r3, r1, r3
 800142c:	49b1      	ldr	r1, [pc, #708]	; (80016f4 <HAL_PCD_EP_Open+0x6e4>)
 800142e:	430a      	orrs	r2, r1
 8001430:	b292      	uxth	r2, r2
 8001432:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	88db      	ldrh	r3, [r3, #6]
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	b299      	uxth	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2250      	movs	r2, #80	; 0x50
 8001442:	5a9b      	ldrh	r3, [r3, r2]
 8001444:	b29b      	uxth	r3, r3
 8001446:	001a      	movs	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	18d3      	adds	r3, r2, r3
 8001450:	001a      	movs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	00d2      	lsls	r2, r2, #3
 800145c:	4694      	mov	ip, r2
 800145e:	4463      	add	r3, ip
 8001460:	001a      	movs	r2, r3
 8001462:	1c0b      	adds	r3, r1, #0
 8001464:	18db      	adds	r3, r3, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	8013      	strh	r3, [r2, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	891b      	ldrh	r3, [r3, #8]
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	b299      	uxth	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2250      	movs	r2, #80	; 0x50
 8001478:	5a9b      	ldrh	r3, [r3, r2]
 800147a:	b29b      	uxth	r3, r3
 800147c:	001a      	movs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	18d3      	adds	r3, r2, r3
 8001486:	001a      	movs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	4a9a      	ldr	r2, [pc, #616]	; (80016f8 <HAL_PCD_EP_Open+0x6e8>)
 8001490:	4694      	mov	ip, r2
 8001492:	4463      	add	r3, ip
 8001494:	001a      	movs	r2, r3
 8001496:	1c0b      	adds	r3, r1, #0
 8001498:	18db      	adds	r3, r3, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d000      	beq.n	80014a8 <HAL_PCD_EP_Open+0x498>
 80014a6:	e08f      	b.n	80015c8 <HAL_PCD_EP_Open+0x5b8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	001a      	movs	r2, r3
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	4013      	ands	r3, r2
 80014c0:	d015      	beq.n	80014ee <HAL_PCD_EP_Open+0x4de>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	001a      	movs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	18d3      	adds	r3, r2, r3
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4a8a      	ldr	r2, [pc, #552]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0019      	movs	r1, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	18cb      	adds	r3, r1, r3
 80014e6:	4986      	ldr	r1, [pc, #536]	; (8001700 <HAL_PCD_EP_Open+0x6f0>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	b292      	uxth	r2, r2
 80014ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	001a      	movs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	18d3      	adds	r3, r2, r3
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	001a      	movs	r2, r3
 8001500:	2340      	movs	r3, #64	; 0x40
 8001502:	4013      	ands	r3, r2
 8001504:	d015      	beq.n	8001532 <HAL_PCD_EP_Open+0x522>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	001a      	movs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4a79      	ldr	r2, [pc, #484]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 8001518:	4013      	ands	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0019      	movs	r1, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	18cb      	adds	r3, r1, r3
 800152a:	4976      	ldr	r1, [pc, #472]	; (8001704 <HAL_PCD_EP_Open+0x6f4>)
 800152c:	430a      	orrs	r2, r1
 800152e:	b292      	uxth	r2, r2
 8001530:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	001a      	movs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 8001544:	4013      	ands	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0019      	movs	r1, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	18cb      	adds	r3, r1, r3
 8001556:	496b      	ldr	r1, [pc, #428]	; (8001704 <HAL_PCD_EP_Open+0x6f4>)
 8001558:	430a      	orrs	r2, r1
 800155a:	b292      	uxth	r2, r2
 800155c:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	001a      	movs	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_PCD_EP_Open+0x6f8>)
 8001570:	4013      	ands	r3, r2
 8001572:	b29c      	uxth	r4, r3
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	4063      	eors	r3, r4
 800157a:	b29c      	uxth	r4, r3
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	019b      	lsls	r3, r3, #6
 8001580:	4063      	eors	r3, r4
 8001582:	b29c      	uxth	r4, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	4a5e      	ldr	r2, [pc, #376]	; (800170c <HAL_PCD_EP_Open+0x6fc>)
 8001594:	4322      	orrs	r2, r4
 8001596:	b292      	uxth	r2, r2
 8001598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	001a      	movs	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	18d3      	adds	r3, r2, r3
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	4a59      	ldr	r2, [pc, #356]	; (8001710 <HAL_PCD_EP_Open+0x700>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	b29c      	uxth	r4, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	18d3      	adds	r3, r2, r3
 80015be:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_PCD_EP_Open+0x6fc>)
 80015c0:	4322      	orrs	r2, r4
 80015c2:	b292      	uxth	r2, r2
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e086      	b.n	80016d6 <HAL_PCD_EP_Open+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	001a      	movs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	4013      	ands	r3, r2
 80015e0:	d015      	beq.n	800160e <HAL_PCD_EP_Open+0x5fe>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	001a      	movs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	18d3      	adds	r3, r2, r3
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4a42      	ldr	r2, [pc, #264]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0019      	movs	r1, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	18cb      	adds	r3, r1, r3
 8001606:	493e      	ldr	r1, [pc, #248]	; (8001700 <HAL_PCD_EP_Open+0x6f0>)
 8001608:	430a      	orrs	r2, r1
 800160a:	b292      	uxth	r2, r2
 800160c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	001a      	movs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	001a      	movs	r2, r3
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	4013      	ands	r3, r2
 8001624:	d015      	beq.n	8001652 <HAL_PCD_EP_Open+0x642>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	001a      	movs	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	18d3      	adds	r3, r2, r3
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 8001638:	4013      	ands	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0019      	movs	r1, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	18cb      	adds	r3, r1, r3
 800164a:	492e      	ldr	r1, [pc, #184]	; (8001704 <HAL_PCD_EP_Open+0x6f4>)
 800164c:	430a      	orrs	r2, r1
 800164e:	b292      	uxth	r2, r2
 8001650:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	001a      	movs	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18d3      	adds	r3, r2, r3
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_PCD_EP_Open+0x6ec>)
 8001664:	4013      	ands	r3, r2
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0019      	movs	r1, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	18cb      	adds	r3, r1, r3
 8001676:	4922      	ldr	r1, [pc, #136]	; (8001700 <HAL_PCD_EP_Open+0x6f0>)
 8001678:	430a      	orrs	r2, r1
 800167a:	b292      	uxth	r2, r2
 800167c:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	001a      	movs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_PCD_EP_Open+0x700>)
 8001690:	4013      	ands	r3, r2
 8001692:	b29c      	uxth	r4, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	18d3      	adds	r3, r2, r3
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_PCD_EP_Open+0x6fc>)
 80016a4:	4322      	orrs	r2, r4
 80016a6:	b292      	uxth	r2, r2
 80016a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	001a      	movs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	18d3      	adds	r3, r2, r3
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_PCD_EP_Open+0x6f8>)
 80016bc:	4013      	ands	r3, r2
 80016be:	b29c      	uxth	r4, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	001a      	movs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_PCD_EP_Open+0x6fc>)
 80016d0:	4322      	orrs	r2, r4
 80016d2:	b292      	uxth	r2, r2
 80016d4:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	23f4      	movs	r3, #244	; 0xf4
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2100      	movs	r1, #0
 80016de:	54d1      	strb	r1, [r2, r3]
  return ret;
 80016e0:	2311      	movs	r3, #17
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b007      	add	sp, #28
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	00000e0f 	.word	0x00000e0f
 80016f4:	ffff8180 	.word	0xffff8180
 80016f8:	00000404 	.word	0x00000404
 80016fc:	00000f0f 	.word	0x00000f0f
 8001700:	ffffc080 	.word	0xffffc080
 8001704:	ffff80c0 	.word	0xffff80c0
 8001708:	ffffbf8f 	.word	0xffffbf8f
 800170c:	ffff8080 	.word	0xffff8080
 8001710:	ffff8fbf 	.word	0xffff8fbf

08001714 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	000a      	movs	r2, r1
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001722:	1cfb      	adds	r3, r7, #3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25b      	sxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	da0c      	bge.n	8001746 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800172c:	1cfb      	adds	r3, r7, #3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	227f      	movs	r2, #127	; 0x7f
 8001732:	401a      	ands	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	3328      	adds	r3, #40	; 0x28
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e00c      	b.n	8001760 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001746:	1cfb      	adds	r3, r7, #3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	227f      	movs	r2, #127	; 0x7f
 800174c:	401a      	ands	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	3309      	adds	r3, #9
 8001758:	33ff      	adds	r3, #255	; 0xff
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001760:	1cfb      	adds	r3, r7, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	227f      	movs	r2, #127	; 0x7f
 8001766:	4013      	ands	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800176e:	1cfb      	adds	r3, r7, #3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	09db      	lsrs	r3, r3, #7
 8001778:	b2db      	uxtb	r3, r3
 800177a:	001a      	movs	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	23f4      	movs	r3, #244	; 0xf4
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_PCD_EP_Close+0x7c>
 800178c:	2302      	movs	r3, #2
 800178e:	e19a      	b.n	8001ac6 <HAL_PCD_EP_Close+0x3b2>
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	23f4      	movs	r3, #244	; 0xf4
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2101      	movs	r1, #1
 8001798:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	7a9b      	ldrb	r3, [r3, #10]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d000      	beq.n	80017a4 <HAL_PCD_EP_Close+0x90>
 80017a2:	e076      	b.n	8001892 <HAL_PCD_EP_Close+0x17e>
  {
    if (ep->is_in)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d038      	beq.n	800181e <HAL_PCD_EP_Close+0x10a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	001a      	movs	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	001a      	movs	r2, r3
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	4013      	ands	r3, r2
 80017c2:	d015      	beq.n	80017f0 <HAL_PCD_EP_Close+0xdc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4abe      	ldr	r2, [pc, #760]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0019      	movs	r1, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18cb      	adds	r3, r1, r3
 80017e8:	49ba      	ldr	r1, [pc, #744]	; (8001ad4 <HAL_PCD_EP_Close+0x3c0>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	b292      	uxth	r2, r2
 80017ee:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	4ab5      	ldr	r2, [pc, #724]	; (8001ad8 <HAL_PCD_EP_Close+0x3c4>)
 8001802:	4013      	ands	r3, r2
 8001804:	b29c      	uxth	r4, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	001a      	movs	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	18d3      	adds	r3, r2, r3
 8001814:	4ab1      	ldr	r2, [pc, #708]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 8001816:	4322      	orrs	r2, r4
 8001818:	b292      	uxth	r2, r2
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e14d      	b.n	8001aba <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	001a      	movs	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	18d3      	adds	r3, r2, r3
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	001a      	movs	r2, r3
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4013      	ands	r3, r2
 8001836:	d015      	beq.n	8001864 <HAL_PCD_EP_Close+0x150>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	001a      	movs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	18d3      	adds	r3, r2, r3
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4aa1      	ldr	r2, [pc, #644]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 800184a:	4013      	ands	r3, r2
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0019      	movs	r1, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	18cb      	adds	r3, r1, r3
 800185c:	49a0      	ldr	r1, [pc, #640]	; (8001ae0 <HAL_PCD_EP_Close+0x3cc>)
 800185e:	430a      	orrs	r2, r1
 8001860:	b292      	uxth	r2, r2
 8001862:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	18d3      	adds	r3, r2, r3
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4a9b      	ldr	r2, [pc, #620]	; (8001ae4 <HAL_PCD_EP_Close+0x3d0>)
 8001876:	4013      	ands	r3, r2
 8001878:	b29c      	uxth	r4, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	001a      	movs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 800188a:	4322      	orrs	r2, r4
 800188c:	b292      	uxth	r2, r2
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	e113      	b.n	8001aba <HAL_PCD_EP_Close+0x3a6>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d000      	beq.n	800189c <HAL_PCD_EP_Close+0x188>
 800189a:	e087      	b.n	80019ac <HAL_PCD_EP_Close+0x298>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	001a      	movs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	001a      	movs	r2, r3
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	01db      	lsls	r3, r3, #7
 80018b2:	4013      	ands	r3, r2
 80018b4:	d015      	beq.n	80018e2 <HAL_PCD_EP_Close+0x1ce>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	001a      	movs	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	18d3      	adds	r3, r2, r3
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	4a82      	ldr	r2, [pc, #520]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0019      	movs	r1, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	18cb      	adds	r3, r1, r3
 80018da:	4981      	ldr	r1, [pc, #516]	; (8001ae0 <HAL_PCD_EP_Close+0x3cc>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	b292      	uxth	r2, r2
 80018e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	001a      	movs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	18d3      	adds	r3, r2, r3
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	4013      	ands	r3, r2
 80018f8:	d015      	beq.n	8001926 <HAL_PCD_EP_Close+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	18d3      	adds	r3, r2, r3
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4a71      	ldr	r2, [pc, #452]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 800190c:	4013      	ands	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0019      	movs	r1, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	18cb      	adds	r3, r1, r3
 800191e:	496d      	ldr	r1, [pc, #436]	; (8001ad4 <HAL_PCD_EP_Close+0x3c0>)
 8001920:	430a      	orrs	r2, r1
 8001922:	b292      	uxth	r2, r2
 8001924:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	001a      	movs	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	18d3      	adds	r3, r2, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	4a66      	ldr	r2, [pc, #408]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 8001938:	4013      	ands	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0019      	movs	r1, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	18cb      	adds	r3, r1, r3
 800194a:	4962      	ldr	r1, [pc, #392]	; (8001ad4 <HAL_PCD_EP_Close+0x3c0>)
 800194c:	430a      	orrs	r2, r1
 800194e:	b292      	uxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	001a      	movs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	18d3      	adds	r3, r2, r3
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <HAL_PCD_EP_Close+0x3d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	b29c      	uxth	r4, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	001a      	movs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	4a59      	ldr	r2, [pc, #356]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 8001978:	4322      	orrs	r2, r4
 800197a:	b292      	uxth	r2, r2
 800197c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	001a      	movs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	18d3      	adds	r3, r2, r3
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_PCD_EP_Close+0x3c4>)
 8001990:	4013      	ands	r3, r2
 8001992:	b29c      	uxth	r4, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	4a4e      	ldr	r2, [pc, #312]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 80019a4:	4322      	orrs	r2, r4
 80019a6:	b292      	uxth	r2, r2
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e086      	b.n	8001aba <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	001a      	movs	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	001a      	movs	r2, r3
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	01db      	lsls	r3, r3, #7
 80019c2:	4013      	ands	r3, r2
 80019c4:	d015      	beq.n	80019f2 <HAL_PCD_EP_Close+0x2de>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	001a      	movs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 80019d8:	4013      	ands	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0019      	movs	r1, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	18cb      	adds	r3, r1, r3
 80019ea:	493d      	ldr	r1, [pc, #244]	; (8001ae0 <HAL_PCD_EP_Close+0x3cc>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	b292      	uxth	r2, r2
 80019f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	001a      	movs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	001a      	movs	r2, r3
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	4013      	ands	r3, r2
 8001a08:	d015      	beq.n	8001a36 <HAL_PCD_EP_Close+0x322>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	001a      	movs	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	18d3      	adds	r3, r2, r3
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0019      	movs	r1, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	18cb      	adds	r3, r1, r3
 8001a2e:	4929      	ldr	r1, [pc, #164]	; (8001ad4 <HAL_PCD_EP_Close+0x3c0>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	b292      	uxth	r2, r2
 8001a34:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	18d3      	adds	r3, r2, r3
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_PCD_EP_Close+0x3bc>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0019      	movs	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	18cb      	adds	r3, r1, r3
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <HAL_PCD_EP_Close+0x3cc>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_PCD_EP_Close+0x3c4>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	b29c      	uxth	r4, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 8001a88:	4322      	orrs	r2, r4
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	18d3      	adds	r3, r2, r3
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_PCD_EP_Close+0x3d0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29c      	uxth	r4, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	18d3      	adds	r3, r2, r3
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_PCD_EP_Close+0x3c8>)
 8001ab4:	4322      	orrs	r2, r4
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	23f4      	movs	r3, #244	; 0xf4
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b005      	add	sp, #20
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	00000f0f 	.word	0x00000f0f
 8001ad4:	ffff80c0 	.word	0xffff80c0
 8001ad8:	ffff8fbf 	.word	0xffff8fbf
 8001adc:	ffff8080 	.word	0xffff8080
 8001ae0:	ffffc080 	.word	0xffffc080
 8001ae4:	ffffbf8f 	.word	0xffffbf8f

08001ae8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	200b      	movs	r0, #11
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001afc:	0001      	movs	r1, r0
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	227f      	movs	r2, #127	; 0x7f
 8001b04:	401a      	ands	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3309      	adds	r3, #9
 8001b10:	33ff      	adds	r3, #255	; 0xff
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	227f      	movs	r2, #127	; 0x7f
 8001b36:	4013      	ands	r3, r2
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d909      	bls.n	8001b5e <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	1ad2      	subs	r2, r2, r3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	e005      	b.n	8001b6a <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	7a9b      	ldrb	r3, [r3, #10]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d145      	bne.n	8001bfe <HAL_PCD_EP_Receive+0x116>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2250      	movs	r2, #80	; 0x50
 8001b78:	5a9b      	ldrh	r3, [r3, r2]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	18d3      	adds	r3, r2, r3
 8001b86:	001a      	movs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	4a8f      	ldr	r2, [pc, #572]	; (8001dcc <HAL_PCD_EP_Receive+0x2e4>)
 8001b90:	4694      	mov	ip, r2
 8001b92:	4463      	add	r3, ip
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b3e      	cmp	r3, #62	; 0x3e
 8001b9a:	d919      	bls.n	8001bd0 <HAL_PCD_EP_Receive+0xe8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	095a      	lsrs	r2, r3, #5
 8001ba0:	2326      	movs	r3, #38	; 0x26
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	221f      	movs	r2, #31
 8001baa:	4013      	ands	r3, r2
 8001bac:	d105      	bne.n	8001bba <HAL_PCD_EP_Receive+0xd2>
 8001bae:	2126      	movs	r1, #38	; 0x26
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	2326      	movs	r3, #38	; 0x26
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4a82      	ldr	r2, [pc, #520]	; (8001dd0 <HAL_PCD_EP_Receive+0x2e8>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	e0da      	b.n	8001d86 <HAL_PCD_EP_Receive+0x29e>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	085a      	lsrs	r2, r3, #1
 8001bd4:	2326      	movs	r3, #38	; 0x26
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	d005      	beq.n	8001bee <HAL_PCD_EP_Receive+0x106>
 8001be2:	2126      	movs	r1, #38	; 0x26
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	3201      	adds	r2, #1
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	2326      	movs	r3, #38	; 0x26
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	e0c3      	b.n	8001d86 <HAL_PCD_EP_Receive+0x29e>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d145      	bne.n	8001c92 <HAL_PCD_EP_Receive+0x1aa>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2250      	movs	r2, #80	; 0x50
 8001c0c:	5a9b      	ldrh	r3, [r3, r2]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	001a      	movs	r2, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	18d3      	adds	r3, r2, r3
 8001c22:	4a6c      	ldr	r2, [pc, #432]	; (8001dd4 <HAL_PCD_EP_Receive+0x2ec>)
 8001c24:	4694      	mov	ip, r2
 8001c26:	4463      	add	r3, ip
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8001c2e:	d919      	bls.n	8001c64 <HAL_PCD_EP_Receive+0x17c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	095a      	lsrs	r2, r3, #5
 8001c34:	2324      	movs	r3, #36	; 0x24
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d105      	bne.n	8001c4e <HAL_PCD_EP_Receive+0x166>
 8001c42:	2124      	movs	r1, #36	; 0x24
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	2324      	movs	r3, #36	; 0x24
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <HAL_PCD_EP_Receive+0x2e8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e02e      	b.n	8001cc2 <HAL_PCD_EP_Receive+0x1da>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	085a      	lsrs	r2, r3, #1
 8001c68:	2324      	movs	r3, #36	; 0x24
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d005      	beq.n	8001c82 <HAL_PCD_EP_Receive+0x19a>
 8001c76:	2124      	movs	r1, #36	; 0x24
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	3201      	adds	r2, #1
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	2324      	movs	r3, #36	; 0x24
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	e017      	b.n	8001cc2 <HAL_PCD_EP_Receive+0x1da>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d113      	bne.n	8001cc2 <HAL_PCD_EP_Receive+0x1da>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2250      	movs	r2, #80	; 0x50
 8001ca0:	5a9b      	ldrh	r3, [r3, r2]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	18d3      	adds	r3, r2, r3
 8001cae:	001a      	movs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_PCD_EP_Receive+0x2ec>)
 8001cb8:	4694      	mov	ip, r2
 8001cba:	4463      	add	r3, ip
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d145      	bne.n	8001d56 <HAL_PCD_EP_Receive+0x26e>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2250      	movs	r2, #80	; 0x50
 8001cd0:	5a9b      	ldrh	r3, [r3, r2]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	001a      	movs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	4a39      	ldr	r2, [pc, #228]	; (8001dcc <HAL_PCD_EP_Receive+0x2e4>)
 8001ce8:	4694      	mov	ip, r2
 8001cea:	4463      	add	r3, ip
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf2:	d919      	bls.n	8001d28 <HAL_PCD_EP_Receive+0x240>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	095a      	lsrs	r2, r3, #5
 8001cf8:	2322      	movs	r3, #34	; 0x22
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	221f      	movs	r2, #31
 8001d02:	4013      	ands	r3, r2
 8001d04:	d105      	bne.n	8001d12 <HAL_PCD_EP_Receive+0x22a>
 8001d06:	2122      	movs	r1, #34	; 0x22
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	881a      	ldrh	r2, [r3, #0]
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	2322      	movs	r3, #34	; 0x22
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_PCD_EP_Receive+0x2e8>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	e02e      	b.n	8001d86 <HAL_PCD_EP_Receive+0x29e>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	085a      	lsrs	r2, r3, #1
 8001d2c:	2322      	movs	r3, #34	; 0x22
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_PCD_EP_Receive+0x25e>
 8001d3a:	2122      	movs	r1, #34	; 0x22
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	3201      	adds	r2, #1
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	2322      	movs	r3, #34	; 0x22
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e017      	b.n	8001d86 <HAL_PCD_EP_Receive+0x29e>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d113      	bne.n	8001d86 <HAL_PCD_EP_Receive+0x29e>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2250      	movs	r2, #80	; 0x50
 8001d64:	5a9b      	ldrh	r3, [r3, r2]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	001a      	movs	r2, r3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	18d3      	adds	r3, r2, r3
 8001d72:	001a      	movs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	18d3      	adds	r3, r2, r3
 8001d7a:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_PCD_EP_Receive+0x2e4>)
 8001d7c:	4694      	mov	ip, r2
 8001d7e:	4463      	add	r3, ip
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	b292      	uxth	r2, r2
 8001d84:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_PCD_EP_Receive+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b29c      	uxth	r4, r3
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	4063      	eors	r3, r4
 8001da2:	b29c      	uxth	r4, r3
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	4063      	eors	r3, r4
 8001daa:	b29c      	uxth	r4, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_PCD_EP_Receive+0x2f4>)
 8001dbc:	4322      	orrs	r2, r4
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b00b      	add	sp, #44	; 0x2c
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	00000406 	.word	0x00000406
 8001dd0:	ffff8000 	.word	0xffff8000
 8001dd4:	00000402 	.word	0x00000402
 8001dd8:	ffffbf8f 	.word	0xffffbf8f
 8001ddc:	ffff8080 	.word	0xffff8080

08001de0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	000a      	movs	r2, r1
 8001dea:	1cfb      	adds	r3, r7, #3
 8001dec:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8001dee:	1cfb      	adds	r3, r7, #3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	227f      	movs	r2, #127	; 0x7f
 8001df4:	401a      	ands	r2, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	2390      	movs	r3, #144	; 0x90
 8001dfa:	0059      	lsls	r1, r3, #1
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18c3      	adds	r3, r0, r3
 8001e06:	185b      	adds	r3, r3, r1
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	200b      	movs	r0, #11
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	1c0a      	adds	r2, r1, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8001e28:	2326      	movs	r3, #38	; 0x26
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001e30:	0001      	movs	r1, r0
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	227f      	movs	r2, #127	; 0x7f
 8001e38:	401a      	ands	r2, r3
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3328      	adds	r3, #40	; 0x28
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	227f      	movs	r2, #127	; 0x7f
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d909      	bls.n	8001e90 <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	1ad2      	subs	r2, r2, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	e005      	b.n	8001e9c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	7a9b      	ldrb	r3, [r3, #10]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11e      	bne.n	8001ee2 <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	6919      	ldr	r1, [r3, #16]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	889a      	ldrh	r2, [r3, #4]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f000 faf2 	bl	800249c <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2250      	movs	r2, #80	; 0x50
 8001ebe:	5a9b      	ldrh	r3, [r3, r2]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	18d3      	adds	r3, r2, r3
 8001ecc:	001a      	movs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	18d3      	adds	r3, r2, r3
 8001ed4:	4aa1      	ldr	r2, [pc, #644]	; (800215c <HAL_PCD_EP_Transmit+0x348>)
 8001ed6:	4694      	mov	ip, r2
 8001ed8:	4463      	add	r3, ip
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	b292      	uxth	r2, r2
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	e11b      	b.n	800211a <HAL_PCD_EP_Transmit+0x306>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	18d3      	adds	r3, r2, r3
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d067      	beq.n	8001fca <HAL_PCD_EP_Transmit+0x1b6>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d145      	bne.n	8001f8e <HAL_PCD_EP_Transmit+0x17a>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2250      	movs	r2, #80	; 0x50
 8001f08:	5a9b      	ldrh	r3, [r3, r2]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	001a      	movs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	4a90      	ldr	r2, [pc, #576]	; (8002160 <HAL_PCD_EP_Transmit+0x34c>)
 8001f20:	4694      	mov	ip, r2
 8001f22:	4463      	add	r3, ip
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b3e      	cmp	r3, #62	; 0x3e
 8001f2a:	d919      	bls.n	8001f60 <HAL_PCD_EP_Transmit+0x14c>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	095a      	lsrs	r2, r3, #5
 8001f30:	2324      	movs	r3, #36	; 0x24
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	221f      	movs	r2, #31
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d105      	bne.n	8001f4a <HAL_PCD_EP_Transmit+0x136>
 8001f3e:	2124      	movs	r1, #36	; 0x24
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	881a      	ldrh	r2, [r3, #0]
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	3a01      	subs	r2, #1
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	2324      	movs	r3, #36	; 0x24
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4a83      	ldr	r2, [pc, #524]	; (8002164 <HAL_PCD_EP_Transmit+0x350>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	e02e      	b.n	8001fbe <HAL_PCD_EP_Transmit+0x1aa>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	085a      	lsrs	r2, r3, #1
 8001f64:	2324      	movs	r3, #36	; 0x24
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d005      	beq.n	8001f7e <HAL_PCD_EP_Transmit+0x16a>
 8001f72:	2124      	movs	r1, #36	; 0x24
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	3201      	adds	r2, #1
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	2324      	movs	r3, #36	; 0x24
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e017      	b.n	8001fbe <HAL_PCD_EP_Transmit+0x1aa>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d113      	bne.n	8001fbe <HAL_PCD_EP_Transmit+0x1aa>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2250      	movs	r2, #80	; 0x50
 8001f9c:	5a9b      	ldrh	r3, [r3, r2]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	001a      	movs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_PCD_EP_Transmit+0x34c>)
 8001fb4:	4694      	mov	ip, r2
 8001fb6:	4463      	add	r3, ip
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8001fbe:	2326      	movs	r3, #38	; 0x26
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	8912      	ldrh	r2, [r2, #8]
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e066      	b.n	8002098 <HAL_PCD_EP_Transmit+0x284>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d145      	bne.n	800205e <HAL_PCD_EP_Transmit+0x24a>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2250      	movs	r2, #80	; 0x50
 8001fd8:	5a9b      	ldrh	r3, [r3, r2]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	001a      	movs	r2, r3
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <HAL_PCD_EP_Transmit+0x348>)
 8001ff0:	4694      	mov	ip, r2
 8001ff2:	4463      	add	r3, ip
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8001ffa:	d919      	bls.n	8002030 <HAL_PCD_EP_Transmit+0x21c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	095a      	lsrs	r2, r3, #5
 8002000:	2322      	movs	r3, #34	; 0x22
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	221f      	movs	r2, #31
 800200a:	4013      	ands	r3, r2
 800200c:	d105      	bne.n	800201a <HAL_PCD_EP_Transmit+0x206>
 800200e:	2122      	movs	r1, #34	; 0x22
 8002010:	187b      	adds	r3, r7, r1
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	187b      	adds	r3, r7, r1
 8002016:	3a01      	subs	r2, #1
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	2322      	movs	r3, #34	; 0x22
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	b29b      	uxth	r3, r3
 8002024:	4a4f      	ldr	r2, [pc, #316]	; (8002164 <HAL_PCD_EP_Transmit+0x350>)
 8002026:	4313      	orrs	r3, r2
 8002028:	b29a      	uxth	r2, r3
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	e02e      	b.n	800208e <HAL_PCD_EP_Transmit+0x27a>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	085a      	lsrs	r2, r3, #1
 8002034:	2322      	movs	r3, #34	; 0x22
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	4013      	ands	r3, r2
 8002040:	d005      	beq.n	800204e <HAL_PCD_EP_Transmit+0x23a>
 8002042:	2122      	movs	r1, #34	; 0x22
 8002044:	187b      	adds	r3, r7, r1
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	187b      	adds	r3, r7, r1
 800204a:	3201      	adds	r2, #1
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	2322      	movs	r3, #34	; 0x22
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	b29a      	uxth	r2, r3
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	801a      	strh	r2, [r3, #0]
 800205c:	e017      	b.n	800208e <HAL_PCD_EP_Transmit+0x27a>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d113      	bne.n	800208e <HAL_PCD_EP_Transmit+0x27a>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2250      	movs	r2, #80	; 0x50
 800206c:	5a9b      	ldrh	r3, [r3, r2]
 800206e:	b29b      	uxth	r3, r3
 8002070:	001a      	movs	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	001a      	movs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	4a36      	ldr	r2, [pc, #216]	; (800215c <HAL_PCD_EP_Transmit+0x348>)
 8002084:	4694      	mov	ip, r2
 8002086:	4463      	add	r3, ip
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b292      	uxth	r2, r2
 800208c:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 800208e:	2326      	movs	r3, #38	; 0x26
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	88d2      	ldrh	r2, [r2, #6]
 8002096:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b29c      	uxth	r4, r3
 80020a4:	2326      	movs	r3, #38	; 0x26
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	0023      	movs	r3, r4
 80020ac:	f000 f9f6 	bl	800249c <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <HAL_PCD_EP_Transmit+0x2d2>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <HAL_PCD_EP_Transmit+0x354>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0019      	movs	r1, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	18cb      	adds	r3, r1, r3
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <HAL_PCD_EP_Transmit+0x358>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	b292      	uxth	r2, r2
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e019      	b.n	800211a <HAL_PCD_EP_Transmit+0x306>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d115      	bne.n	800211a <HAL_PCD_EP_Transmit+0x306>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	001a      	movs	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_PCD_EP_Transmit+0x354>)
 8002100:	4013      	ands	r3, r2
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0019      	movs	r1, r3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	18cb      	adds	r3, r1, r3
 8002112:	4917      	ldr	r1, [pc, #92]	; (8002170 <HAL_PCD_EP_Transmit+0x35c>)
 8002114:	430a      	orrs	r2, r1
 8002116:	b292      	uxth	r2, r2
 8002118:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	001a      	movs	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	18d3      	adds	r3, r2, r3
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_PCD_EP_Transmit+0x360>)
 800212c:	4013      	ands	r3, r2
 800212e:	b29c      	uxth	r4, r3
 8002130:	2310      	movs	r3, #16
 8002132:	4063      	eors	r3, r4
 8002134:	b29c      	uxth	r4, r3
 8002136:	2320      	movs	r3, #32
 8002138:	4063      	eors	r3, r4
 800213a:	b29c      	uxth	r4, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	001a      	movs	r2, r3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_PCD_EP_Transmit+0x364>)
 800214c:	4322      	orrs	r2, r4
 800214e:	b292      	uxth	r2, r2
 8002150:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b00b      	add	sp, #44	; 0x2c
 800215a:	bd90      	pop	{r4, r7, pc}
 800215c:	00000402 	.word	0x00000402
 8002160:	00000406 	.word	0x00000406
 8002164:	ffff8000 	.word	0xffff8000
 8002168:	00000f0f 	.word	0x00000f0f
 800216c:	ffff80c0 	.word	0xffff80c0
 8002170:	ffffc080 	.word	0xffffc080
 8002174:	ffff8fbf 	.word	0xffff8fbf
 8002178:	ffff8080 	.word	0xffff8080

0800217c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	000a      	movs	r2, r1
 8002186:	1cfb      	adds	r3, r7, #3
 8002188:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	23f4      	movs	r3, #244	; 0xf4
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_PCD_EP_SetStall+0x1e>
 8002196:	2302      	movs	r3, #2
 8002198:	e096      	b.n	80022c8 <HAL_PCD_EP_SetStall+0x14c>
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	23f4      	movs	r3, #244	; 0xf4
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2101      	movs	r1, #1
 80021a2:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 80021a4:	1cfb      	adds	r3, r7, #3
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da0c      	bge.n	80021c8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80021ae:	1cfb      	adds	r3, r7, #3
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	227f      	movs	r2, #127	; 0x7f
 80021b4:	401a      	ands	r2, r3
 80021b6:	0013      	movs	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	3328      	adds	r3, #40	; 0x28
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e00a      	b.n	80021de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021c8:	1cfb      	adds	r3, r7, #3
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	0013      	movs	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	3309      	adds	r3, #9
 80021d6:	33ff      	adds	r3, #255	; 0xff
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	18d3      	adds	r3, r2, r3
 80021dc:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80021e4:	1cfb      	adds	r3, r7, #3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	227f      	movs	r2, #127	; 0x7f
 80021ea:	4013      	ands	r3, r2
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80021f2:	1cfb      	adds	r3, r7, #3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	09db      	lsrs	r3, r3, #7
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d11f      	bne.n	800224c <HAL_PCD_EP_SetStall+0xd0>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	001a      	movs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_PCD_EP_SetStall+0x154>)
 8002220:	401a      	ands	r2, r3
 8002222:	0014      	movs	r4, r2
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	4063      	eors	r3, r4
 800222a:	001c      	movs	r4, r3
 800222c:	2310      	movs	r3, #16
 800222e:	4063      	eors	r3, r4
 8002230:	001c      	movs	r4, r3
 8002232:	b2a2      	uxth	r2, r4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0019      	movs	r1, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	18cb      	adds	r3, r1, r3
 8002242:	4924      	ldr	r1, [pc, #144]	; (80022d4 <HAL_PCD_EP_SetStall+0x158>)
 8002244:	430a      	orrs	r2, r1
 8002246:	b292      	uxth	r2, r2
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	e037      	b.n	80022bc <HAL_PCD_EP_SetStall+0x140>
  }
  else
  {
    if (ep->is_in)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <HAL_PCD_EP_SetStall+0x10c>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	001a      	movs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	18d3      	adds	r3, r2, r3
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_PCD_EP_SetStall+0x15c>)
 8002266:	4013      	ands	r3, r2
 8002268:	b29c      	uxth	r4, r3
 800226a:	2310      	movs	r3, #16
 800226c:	4063      	eors	r3, r4
 800226e:	b29c      	uxth	r4, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	001a      	movs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_PCD_EP_SetStall+0x158>)
 8002280:	4322      	orrs	r2, r4
 8002282:	b292      	uxth	r2, r2
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	e019      	b.n	80022bc <HAL_PCD_EP_SetStall+0x140>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	001a      	movs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_PCD_EP_SetStall+0x160>)
 800229a:	4013      	ands	r3, r2
 800229c:	b29c      	uxth	r4, r3
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	4063      	eors	r3, r4
 80022a4:	b29c      	uxth	r4, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	001a      	movs	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	18d3      	adds	r3, r2, r3
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_PCD_EP_SetStall+0x158>)
 80022b6:	4322      	orrs	r2, r4
 80022b8:	b292      	uxth	r2, r2
 80022ba:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	23f4      	movs	r3, #244	; 0xf4
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2100      	movs	r1, #0
 80022c4:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b005      	add	sp, #20
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	0000bfbf 	.word	0x0000bfbf
 80022d4:	ffff8080 	.word	0xffff8080
 80022d8:	ffff8fbf 	.word	0xffff8fbf
 80022dc:	ffffbf8f 	.word	0xffffbf8f

080022e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	000a      	movs	r2, r1
 80022ea:	1cfb      	adds	r3, r7, #3
 80022ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80022ee:	1cfb      	adds	r3, r7, #3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0c      	bge.n	8002312 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80022f8:	1cfb      	adds	r3, r7, #3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	227f      	movs	r2, #127	; 0x7f
 80022fe:	401a      	ands	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3328      	adds	r3, #40	; 0x28
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00a      	b.n	8002328 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002312:	1cfb      	adds	r3, r7, #3
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	0013      	movs	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	3309      	adds	r3, #9
 8002320:	33ff      	adds	r3, #255	; 0xff
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	18d3      	adds	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800232e:	1cfb      	adds	r3, r7, #3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	227f      	movs	r2, #127	; 0x7f
 8002334:	4013      	ands	r3, r2
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800233c:	1cfb      	adds	r3, r7, #3
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	09db      	lsrs	r3, r3, #7
 8002346:	b2db      	uxtb	r3, r3
 8002348:	001a      	movs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	23f4      	movs	r3, #244	; 0xf4
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_ClrStall+0x7e>
 800235a:	2302      	movs	r3, #2
 800235c:	e08e      	b.n	800247c <HAL_PCD_EP_ClrStall+0x19c>
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	23f4      	movs	r3, #244	; 0xf4
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2101      	movs	r1, #1
 8002366:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	785b      	ldrb	r3, [r3, #1]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d03e      	beq.n	80023ee <HAL_PCD_EP_ClrStall+0x10e>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	001a      	movs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	4013      	ands	r3, r2
 8002386:	d015      	beq.n	80023b4 <HAL_PCD_EP_ClrStall+0xd4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	001a      	movs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_PCD_EP_ClrStall+0x1a4>)
 800239a:	4013      	ands	r3, r2
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0019      	movs	r1, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	18cb      	adds	r3, r1, r3
 80023ac:	4936      	ldr	r1, [pc, #216]	; (8002488 <HAL_PCD_EP_ClrStall+0x1a8>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	b292      	uxth	r2, r2
 80023b2:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	001a      	movs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_PCD_EP_ClrStall+0x1ac>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	b29c      	uxth	r4, r3
 80023ca:	2310      	movs	r3, #16
 80023cc:	4063      	eors	r3, r4
 80023ce:	b29c      	uxth	r4, r3
 80023d0:	2320      	movs	r3, #32
 80023d2:	4063      	eors	r3, r4
 80023d4:	b29c      	uxth	r4, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	001a      	movs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	18d3      	adds	r3, r2, r3
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_PCD_EP_ClrStall+0x1b0>)
 80023e6:	4322      	orrs	r2, r4
 80023e8:	b292      	uxth	r2, r2
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	e040      	b.n	8002470 <HAL_PCD_EP_ClrStall+0x190>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	001a      	movs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	001a      	movs	r2, r3
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	01db      	lsls	r3, r3, #7
 8002404:	4013      	ands	r3, r2
 8002406:	d015      	beq.n	8002434 <HAL_PCD_EP_ClrStall+0x154>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	18d3      	adds	r3, r2, r3
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <HAL_PCD_EP_ClrStall+0x1a4>)
 800241a:	4013      	ands	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0019      	movs	r1, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	18cb      	adds	r3, r1, r3
 800242c:	4919      	ldr	r1, [pc, #100]	; (8002494 <HAL_PCD_EP_ClrStall+0x1b4>)
 800242e:	430a      	orrs	r2, r1
 8002430:	b292      	uxth	r2, r2
 8002432:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <HAL_PCD_EP_ClrStall+0x1b8>)
 8002446:	4013      	ands	r3, r2
 8002448:	b29c      	uxth	r4, r3
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	4063      	eors	r3, r4
 8002450:	b29c      	uxth	r4, r3
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	4063      	eors	r3, r4
 8002458:	b29c      	uxth	r4, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	001a      	movs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	18d3      	adds	r3, r2, r3
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_PCD_EP_ClrStall+0x1b0>)
 800246a:	4322      	orrs	r2, r4
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	23f4      	movs	r3, #244	; 0xf4
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2100      	movs	r1, #0
 8002478:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b005      	add	sp, #20
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	00000f0f 	.word	0x00000f0f
 8002488:	ffff80c0 	.word	0xffff80c0
 800248c:	ffff8fbf 	.word	0xffff8fbf
 8002490:	ffff8080 	.word	0xffff8080
 8002494:	ffffc080 	.word	0xffffc080
 8002498:	ffffbf8f 	.word	0xffffbf8f

0800249c <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	0019      	movs	r1, r3
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	1c0a      	adds	r2, r1, #0
 80024b0:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80024bc:	1dbb      	adds	r3, r7, #6
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	00d2      	lsls	r2, r2, #3
 80024c8:	4694      	mov	ip, r2
 80024ca:	4463      	add	r3, ip
 80024cc:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e01e      	b.n	8002512 <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	2012      	movs	r0, #18
 80024da:	183b      	adds	r3, r7, r0
 80024dc:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b299      	uxth	r1, r3
 80024ee:	2410      	movs	r4, #16
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	183a      	adds	r2, r7, r0
 80024f4:	8812      	ldrh	r2, [r2, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1c9a      	adds	r2, r3, #2
 80024fe:	61ba      	str	r2, [r7, #24]
 8002500:	193a      	adds	r2, r7, r4
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	3b01      	subs	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1dd      	bne.n	80024d4 <PCD_WritePMA+0x38>
  }
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b009      	add	sp, #36	; 0x24
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	0019      	movs	r1, r3
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	1c0a      	adds	r2, r1, #0
 8002534:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	4694      	mov	ip, r2
 800254e:	4463      	add	r3, ip
 8002550:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e014      	b.n	8002582 <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	61ba      	str	r2, [r7, #24]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	60ba      	str	r2, [r7, #8]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	0a19      	lsrs	r1, r3, #8
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3b01      	subs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e7      	bne.n	8002558 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1c9a      	adds	r2, r3, #2
 800259a:	61ba      	str	r2, [r7, #24]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
  }
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b008      	add	sp, #32
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 80025bc:	231e      	movs	r3, #30
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 80025c4:	230c      	movs	r3, #12
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80025cc:	e33f      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025ce:	230e      	movs	r3, #14
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	201d      	movs	r0, #29
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	210f      	movs	r1, #15
 80025de:	400a      	ands	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 80025e2:	183b      	adds	r3, r7, r0
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <PCD_EP_ISR_Handler+0x38>
 80025ea:	e136      	b.n	800285a <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025ec:	230e      	movs	r3, #14
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	001a      	movs	r2, r3
 80025f6:	2310      	movs	r3, #16
 80025f8:	4013      	ands	r3, r2
 80025fa:	d14c      	bne.n	8002696 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0019      	movs	r1, r3
 8002608:	4bdd      	ldr	r3, [pc, #884]	; (8002980 <PCD_EP_ISR_Handler+0x3cc>)
 800260a:	4013      	ands	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	800b      	strh	r3, [r1, #0]
        ep = &hpcd->IN_ep[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3328      	adds	r3, #40	; 0x28
 8002614:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2250      	movs	r2, #80	; 0x50
 800261c:	5a9b      	ldrh	r3, [r3, r2]
 800261e:	b29b      	uxth	r3, r3
 8002620:	001a      	movs	r2, r3
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	001a      	movs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	18d3      	adds	r3, r2, r3
 8002632:	4ad4      	ldr	r2, [pc, #848]	; (8002984 <PCD_EP_ISR_Handler+0x3d0>)
 8002634:	4694      	mov	ip, r2
 8002636:	4463      	add	r3, ip
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	059b      	lsls	r3, r3, #22
 800263c:	0d9a      	lsrs	r2, r3, #22
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	18d2      	adds	r2, r2, r3
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2100      	movs	r1, #0
 8002654:	0018      	movs	r0, r3
 8002656:	f003 fc43 	bl	8005ee0 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2224      	movs	r2, #36	; 0x24
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d100      	bne.n	8002668 <PCD_EP_ISR_Handler+0xb4>
 8002666:	e2f2      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d000      	beq.n	8002672 <PCD_EP_ISR_Handler+0xbe>
 8002670:	e2ed      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	4252      	negs	r2, r2
 800267e:	4313      	orrs	r3, r2
 8002680:	b2da      	uxtb	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b291      	uxth	r1, r2
 8002688:	224c      	movs	r2, #76	; 0x4c
 800268a:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
 8002694:	e2db      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3309      	adds	r3, #9
 800269a:	33ff      	adds	r3, #255	; 0xff
 800269c:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	210c      	movs	r1, #12
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	001a      	movs	r2, r3
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	d031      	beq.n	800271e <PCD_EP_ISR_Handler+0x16a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2250      	movs	r2, #80	; 0x50
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	001a      	movs	r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	001a      	movs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	18d3      	adds	r3, r2, r3
 80026d6:	4aac      	ldr	r2, [pc, #688]	; (8002988 <PCD_EP_ISR_Handler+0x3d4>)
 80026d8:	4694      	mov	ip, r2
 80026da:	4463      	add	r3, ip
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	059b      	lsls	r3, r3, #22
 80026e0:	0d9a      	lsrs	r2, r3, #22
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	33ed      	adds	r3, #237	; 0xed
 80026ee:	33ff      	adds	r3, #255	; 0xff
 80026f0:	0019      	movs	r1, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	889a      	ldrh	r2, [r3, #4]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f7ff ff10 	bl	8002520 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	4b9f      	ldr	r3, [pc, #636]	; (800298c <PCD_EP_ISR_Handler+0x3d8>)
 800270e:	4013      	ands	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	800b      	strh	r3, [r1, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0018      	movs	r0, r3
 8002718:	f003 fbae 	bl	8005e78 <HAL_PCD_SetupStageCallback>
 800271c:	e297      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800271e:	230c      	movs	r3, #12
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21b      	sxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	db00      	blt.n	800272e <PCD_EP_ISR_Handler+0x17a>
 800272c:	e28f      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0019      	movs	r1, r3
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <PCD_EP_ISR_Handler+0x3d8>)
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	800b      	strh	r3, [r1, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2250      	movs	r2, #80	; 0x50
 8002748:	5a9b      	ldrh	r3, [r3, r2]
 800274a:	b29b      	uxth	r3, r3
 800274c:	001a      	movs	r2, r3
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	001a      	movs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	4a8a      	ldr	r2, [pc, #552]	; (8002988 <PCD_EP_ISR_Handler+0x3d4>)
 8002760:	4694      	mov	ip, r2
 8002762:	4463      	add	r3, ip
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	059b      	lsls	r3, r3, #22
 8002768:	0d9a      	lsrs	r2, r3, #22
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d011      	beq.n	800279a <PCD_EP_ISR_Handler+0x1e6>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	889a      	ldrh	r2, [r3, #4]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f7ff feca 	bl	8002520 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	18d2      	adds	r2, r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f003 fb7d 	bl	8005e9e <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2250      	movs	r2, #80	; 0x50
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	001a      	movs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	18d3      	adds	r3, r2, r3
 80027b6:	4a74      	ldr	r2, [pc, #464]	; (8002988 <PCD_EP_ISR_Handler+0x3d4>)
 80027b8:	4694      	mov	ip, r2
 80027ba:	4463      	add	r3, ip
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b3e      	cmp	r3, #62	; 0x3e
 80027c4:	d91b      	bls.n	80027fe <PCD_EP_ISR_Handler+0x24a>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	095a      	lsrs	r2, r3, #5
 80027cc:	2316      	movs	r3, #22
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	221f      	movs	r2, #31
 80027d8:	4013      	ands	r3, r2
 80027da:	d105      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x234>
 80027dc:	2116      	movs	r1, #22
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	3a01      	subs	r2, #1
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	2316      	movs	r3, #22
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4a67      	ldr	r2, [pc, #412]	; (8002990 <PCD_EP_ISR_Handler+0x3dc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e017      	b.n	800282e <PCD_EP_ISR_Handler+0x27a>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	085a      	lsrs	r2, r3, #1
 8002804:	2316      	movs	r3, #22
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d005      	beq.n	8002820 <PCD_EP_ISR_Handler+0x26c>
 8002814:	2116      	movs	r1, #22
 8002816:	187b      	adds	r3, r7, r1
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	187b      	adds	r3, r7, r1
 800281c:	3201      	adds	r2, #1
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	2316      	movs	r3, #22
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	b29a      	uxth	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <PCD_EP_ISR_Handler+0x3e0>)
 8002836:	4013      	ands	r3, r2
 8002838:	b29c      	uxth	r4, r3
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	4063      	eors	r3, r4
 8002840:	b29c      	uxth	r4, r3
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	4063      	eors	r3, r4
 8002848:	b29c      	uxth	r4, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	001a      	movs	r2, r3
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <PCD_EP_ISR_Handler+0x3e4>)
 8002852:	4323      	orrs	r3, r4
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]
 8002858:	e1f9      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	001a      	movs	r2, r3
 8002860:	231d      	movs	r3, #29
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	18d3      	adds	r3, r2, r3
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	210c      	movs	r1, #12
 800286e:	187b      	adds	r3, r7, r1
 8002870:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002872:	187b      	adds	r3, r7, r1
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21b      	sxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	db00      	blt.n	8002880 <PCD_EP_ISR_Handler+0x2cc>
 800287e:	e0f4      	b.n	8002a6a <PCD_EP_ISR_Handler+0x4b6>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	001a      	movs	r2, r3
 8002886:	201d      	movs	r0, #29
 8002888:	183b      	adds	r3, r7, r0
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	18d3      	adds	r3, r2, r3
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0019      	movs	r1, r3
 8002898:	183b      	adds	r3, r7, r0
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	18cb      	adds	r3, r1, r3
 80028a0:	493a      	ldr	r1, [pc, #232]	; (800298c <PCD_EP_ISR_Handler+0x3d8>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	b292      	uxth	r2, r2
 80028a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	0013      	movs	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	3309      	adds	r3, #9
 80028b6:	33ff      	adds	r3, #255	; 0xff
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	18d3      	adds	r3, r2, r3
 80028bc:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	7a9b      	ldrb	r3, [r3, #10]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d127      	bne.n	8002916 <PCD_EP_ISR_Handler+0x362>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2250      	movs	r2, #80	; 0x50
 80028cc:	5a9b      	ldrh	r3, [r3, r2]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	001a      	movs	r2, r3
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	001a      	movs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	18d3      	adds	r3, r2, r3
 80028e2:	4a29      	ldr	r2, [pc, #164]	; (8002988 <PCD_EP_ISR_Handler+0x3d4>)
 80028e4:	4694      	mov	ip, r2
 80028e6:	4463      	add	r3, ip
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	211e      	movs	r1, #30
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	0592      	lsls	r2, r2, #22
 80028f0:	0d92      	lsrs	r2, r2, #22
 80028f2:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d100      	bne.n	80028fe <PCD_EP_ISR_Handler+0x34a>
 80028fc:	e08a      	b.n	8002a14 <PCD_EP_ISR_Handler+0x460>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6919      	ldr	r1, [r3, #16]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	889a      	ldrh	r2, [r3, #4]
 800290a:	231e      	movs	r3, #30
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f7ff fe06 	bl	8002520 <PCD_ReadPMA>
 8002914:	e07e      	b.n	8002a14 <PCD_EP_ISR_Handler+0x460>
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	001a      	movs	r2, r3
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	18d3      	adds	r3, r2, r3
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	001a      	movs	r2, r3
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	01db      	lsls	r3, r3, #7
 800292c:	4013      	ands	r3, r2
 800292e:	d035      	beq.n	800299c <PCD_EP_ISR_Handler+0x3e8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2250      	movs	r2, #80	; 0x50
 8002936:	5a9b      	ldrh	r3, [r3, r2]
 8002938:	b29b      	uxth	r3, r3
 800293a:	001a      	movs	r2, r3
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	18d3      	adds	r3, r2, r3
 8002944:	001a      	movs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	18d3      	adds	r3, r2, r3
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <PCD_EP_ISR_Handler+0x3d0>)
 800294e:	4694      	mov	ip, r2
 8002950:	4463      	add	r3, ip
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	211e      	movs	r1, #30
 8002956:	187b      	adds	r3, r7, r1
 8002958:	0592      	lsls	r2, r2, #22
 800295a:	0d92      	lsrs	r2, r2, #22
 800295c:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800295e:	187b      	adds	r3, r7, r1
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d040      	beq.n	80029e8 <PCD_EP_ISR_Handler+0x434>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	88da      	ldrh	r2, [r3, #6]
 8002972:	231e      	movs	r3, #30
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f7ff fdd2 	bl	8002520 <PCD_ReadPMA>
 800297c:	e034      	b.n	80029e8 <PCD_EP_ISR_Handler+0x434>
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	ffff8f0f 	.word	0xffff8f0f
 8002984:	00000402 	.word	0x00000402
 8002988:	00000406 	.word	0x00000406
 800298c:	00000f8f 	.word	0x00000f8f
 8002990:	ffff8000 	.word	0xffff8000
 8002994:	ffffbf8f 	.word	0xffffbf8f
 8002998:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2250      	movs	r2, #80	; 0x50
 80029a2:	5a9b      	ldrh	r3, [r3, r2]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	001a      	movs	r2, r3
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	001a      	movs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	18d3      	adds	r3, r2, r3
 80029b8:	4aae      	ldr	r2, [pc, #696]	; (8002c74 <PCD_EP_ISR_Handler+0x6c0>)
 80029ba:	4694      	mov	ip, r2
 80029bc:	4463      	add	r3, ip
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	211e      	movs	r1, #30
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	0592      	lsls	r2, r2, #22
 80029c6:	0d92      	lsrs	r2, r2, #22
 80029c8:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <PCD_EP_ISR_Handler+0x434>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	891a      	ldrh	r2, [r3, #8]
 80029de:	231e      	movs	r3, #30
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	f7ff fd9c 	bl	8002520 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	001a      	movs	r2, r3
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	18d3      	adds	r3, r2, r3
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	4a9f      	ldr	r2, [pc, #636]	; (8002c78 <PCD_EP_ISR_Handler+0x6c4>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0019      	movs	r1, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18cb      	adds	r3, r1, r3
 8002a0c:	499b      	ldr	r1, [pc, #620]	; (8002c7c <PCD_EP_ISR_Handler+0x6c8>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	b292      	uxth	r2, r2
 8002a12:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	211e      	movs	r1, #30
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	18d2      	adds	r2, r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <PCD_EP_ISR_Handler+0x494>
 8002a3a:	231e      	movs	r3, #30
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <PCD_EP_ISR_Handler+0x4a4>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f003 fa24 	bl	8005e9e <HAL_PCD_DataOutStageCallback>
 8002a56:	e008      	b.n	8002a6a <PCD_EP_ISR_Handler+0x4b6>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	7819      	ldrb	r1, [r3, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff f83f 	bl	8001ae8 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	001a      	movs	r2, r3
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	4013      	ands	r3, r2
 8002a78:	d100      	bne.n	8002a7c <PCD_EP_ISR_Handler+0x4c8>
 8002a7a:	e0e8      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
      {
        ep = &hpcd->IN_ep[EPindex];
 8002a7c:	211d      	movs	r1, #29
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	0013      	movs	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3328      	adds	r3, #40	; 0x28
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	18d3      	adds	r3, r2, r3
 8002a90:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	001a      	movs	r2, r3
 8002a98:	0008      	movs	r0, r1
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	18d3      	adds	r3, r2, r3
 8002aa2:	881a      	ldrh	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	183b      	adds	r3, r7, r0
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	18cb      	adds	r3, r1, r3
 8002ab2:	4973      	ldr	r1, [pc, #460]	; (8002c80 <PCD_EP_ISR_Handler+0x6cc>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	7a9b      	ldrb	r3, [r3, #10]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d126      	bne.n	8002b10 <PCD_EP_ISR_Handler+0x55c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2250      	movs	r2, #80	; 0x50
 8002ac8:	5a9b      	ldrh	r3, [r3, r2]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	001a      	movs	r2, r3
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <PCD_EP_ISR_Handler+0x6d0>)
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	4463      	add	r3, ip
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	059b      	lsls	r3, r3, #22
 8002ae8:	0d9a      	lsrs	r2, r3, #22
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d100      	bne.n	8002af8 <PCD_EP_ISR_Handler+0x544>
 8002af6:	e078      	b.n	8002bea <PCD_EP_ISR_Handler+0x636>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6919      	ldr	r1, [r3, #16]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	889a      	ldrh	r2, [r3, #4]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f7ff fcc7 	bl	800249c <PCD_WritePMA>
 8002b0e:	e06c      	b.n	8002bea <PCD_EP_ISR_Handler+0x636>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	001a      	movs	r2, r3
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	4013      	ands	r3, r2
 8002b26:	d025      	beq.n	8002b74 <PCD_EP_ISR_Handler+0x5c0>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2250      	movs	r2, #80	; 0x50
 8002b2e:	5a9b      	ldrh	r3, [r3, r2]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	001a      	movs	r2, r3
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	18d3      	adds	r3, r2, r3
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	18d3      	adds	r3, r2, r3
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <PCD_EP_ISR_Handler+0x6d0>)
 8002b46:	4694      	mov	ip, r2
 8002b48:	4463      	add	r3, ip
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	059b      	lsls	r3, r3, #22
 8002b4e:	0d9a      	lsrs	r2, r3, #22
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d030      	beq.n	8002bbe <PCD_EP_ISR_Handler+0x60a>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6919      	ldr	r1, [r3, #16]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	88da      	ldrh	r2, [r3, #6]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f7ff fc95 	bl	800249c <PCD_WritePMA>
 8002b72:	e024      	b.n	8002bbe <PCD_EP_ISR_Handler+0x60a>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2250      	movs	r2, #80	; 0x50
 8002b7a:	5a9b      	ldrh	r3, [r3, r2]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	001a      	movs	r2, r3
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	18d3      	adds	r3, r2, r3
 8002b88:	001a      	movs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	18d3      	adds	r3, r2, r3
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <PCD_EP_ISR_Handler+0x6c0>)
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	059b      	lsls	r3, r3, #22
 8002b9a:	0d9a      	lsrs	r2, r3, #22
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <PCD_EP_ISR_Handler+0x60a>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6919      	ldr	r1, [r3, #16]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	891a      	ldrh	r2, [r3, #8]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f7ff fc6f 	bl	800249c <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	18d3      	adds	r3, r2, r3
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <PCD_EP_ISR_Handler+0x6c4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0019      	movs	r1, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	18cb      	adds	r3, r1, r3
 8002be2:	4929      	ldr	r1, [pc, #164]	; (8002c88 <PCD_EP_ISR_Handler+0x6d4>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	b292      	uxth	r2, r2
 8002be8:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2250      	movs	r2, #80	; 0x50
 8002bf0:	5a9b      	ldrh	r3, [r3, r2]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	001a      	movs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <PCD_EP_ISR_Handler+0x6d0>)
 8002c08:	4694      	mov	ip, r2
 8002c0a:	4463      	add	r3, ip
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	059b      	lsls	r3, r3, #22
 8002c10:	0d9a      	lsrs	r2, r3, #22
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	18d2      	adds	r2, r2, r3
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <PCD_EP_ISR_Handler+0x688>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0011      	movs	r1, r2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f003 f953 	bl	8005ee0 <HAL_PCD_DataInStageCallback>
 8002c3a:	e008      	b.n	8002c4e <PCD_EP_ISR_Handler+0x69a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	7819      	ldrb	r1, [r3, #0]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff f8e3 	bl	8001e14 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2244      	movs	r2, #68	; 0x44
 8002c54:	5a9b      	ldrh	r3, [r3, r2]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	230e      	movs	r3, #14
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	1c11      	adds	r1, r2, #0
 8002c5e:	8019      	strh	r1, [r3, #0]
 8002c60:	b213      	sxth	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da00      	bge.n	8002c68 <PCD_EP_ISR_Handler+0x6b4>
 8002c66:	e4b2      	b.n	80025ce <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b009      	add	sp, #36	; 0x24
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	00000406 	.word	0x00000406
 8002c78:	00000f0f 	.word	0x00000f0f
 8002c7c:	ffff80c0 	.word	0xffff80c0
 8002c80:	ffff8f0f 	.word	0xffff8f0f
 8002c84:	00000402 	.word	0x00000402
 8002c88:	ffffc080 	.word	0xffffc080

08002c8c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	0008      	movs	r0, r1
 8002c96:	0011      	movs	r1, r2
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	240a      	movs	r4, #10
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	1c02      	adds	r2, r0, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	1c0a      	adds	r2, r1, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002cb8:	230a      	movs	r3, #10
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	227f      	movs	r2, #127	; 0x7f
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	3328      	adds	r3, #40	; 0x28
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00b      	b.n	8002cec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	0013      	movs	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3309      	adds	r3, #9
 8002ce4:	33ff      	adds	r3, #255	; 0xff
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cec:	2308      	movs	r3, #8
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	809a      	strh	r2, [r3, #4]
 8002d04:	e00b      	b.n	8002d1e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b007      	add	sp, #28
 8002d26:	bd90      	pop	{r4, r7, pc}

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18>
 8002d3e:	e08d      	b.n	8002e5c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d40:	4bc5      	ldr	r3, [pc, #788]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	220c      	movs	r2, #12
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00e      	beq.n	8002d6a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4bc2      	ldr	r3, [pc, #776]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	220c      	movs	r2, #12
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d116      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
 8002d58:	4bbf      	ldr	r3, [pc, #764]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	23c0      	movs	r3, #192	; 0xc0
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	401a      	ands	r2, r3
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6a:	4bbb      	ldr	r3, [pc, #748]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	029b      	lsls	r3, r3, #10
 8002d72:	4013      	ands	r3, r2
 8002d74:	d100      	bne.n	8002d78 <HAL_RCC_OscConfig+0x50>
 8002d76:	e070      	b.n	8002e5a <HAL_RCC_OscConfig+0x132>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d000      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5a>
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e329      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_OscConfig+0x76>
 8002d8e:	4bb2      	ldr	r3, [pc, #712]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4bb1      	ldr	r3, [pc, #708]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0249      	lsls	r1, r1, #9
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e02f      	b.n	8002dfe <HAL_RCC_OscConfig+0xd6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da6:	4bac      	ldr	r3, [pc, #688]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4bab      	ldr	r3, [pc, #684]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002dac:	49ab      	ldr	r1, [pc, #684]	; (800305c <HAL_RCC_OscConfig+0x334>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	4ba9      	ldr	r3, [pc, #676]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4ba8      	ldr	r3, [pc, #672]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002db8:	49a9      	ldr	r1, [pc, #676]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e01e      	b.n	8002dfe <HAL_RCC_OscConfig+0xd6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d10e      	bne.n	8002de6 <HAL_RCC_OscConfig+0xbe>
 8002dc8:	4ba3      	ldr	r3, [pc, #652]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4ba2      	ldr	r3, [pc, #648]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	02c9      	lsls	r1, r1, #11
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b9f      	ldr	r3, [pc, #636]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0249      	lsls	r1, r1, #9
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e00b      	b.n	8002dfe <HAL_RCC_OscConfig+0xd6>
 8002de6:	4b9c      	ldr	r3, [pc, #624]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b9b      	ldr	r3, [pc, #620]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002dec:	499b      	ldr	r1, [pc, #620]	; (800305c <HAL_RCC_OscConfig+0x334>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	4b99      	ldr	r3, [pc, #612]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b98      	ldr	r3, [pc, #608]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002df8:	4999      	ldr	r1, [pc, #612]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d014      	beq.n	8002e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fd fa2b 	bl	8000260 <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fd fa26 	bl	8000260 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e2db      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xe8>
 8002e2e:	e015      	b.n	8002e5c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fd fa16 	bl	8000260 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fa11 	bl	8000260 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e2c6      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	029b      	lsls	r3, r3, #10
 8002e54:	4013      	ands	r3, r2
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x112>
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d100      	bne.n	8002e68 <HAL_RCC_OscConfig+0x140>
 8002e66:	e06c      	b.n	8002f42 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e72:	4b79      	ldr	r3, [pc, #484]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	220c      	movs	r2, #12
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x196>
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	23c0      	movs	r3, #192	; 0xc0
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d116      	bne.n	8002ebe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	4b71      	ldr	r3, [pc, #452]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x17e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e299      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22f8      	movs	r2, #248	; 0xf8
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	00da      	lsls	r2, r3, #3
 8002eb6:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	e041      	b.n	8002f42 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002ecc:	2101      	movs	r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fd f9c5 	bl	8000260 <HAL_GetTick>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fd f9c0 	bl	8000260 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e275      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d0f1      	beq.n	8002edc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	22f8      	movs	r2, #248	; 0xf8
 8002efe:	4393      	bics	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00da      	lsls	r2, r3, #3
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e018      	b.n	8002f42 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f10:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	438a      	bics	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fd f9a0 	bl	8000260 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fd f99b 	bl	8000260 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e250      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d1f1      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2208      	movs	r2, #8
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d036      	beq.n	8002fba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d019      	beq.n	8002f88 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f54:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fd f97e 	bl	8000260 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fd f979 	bl	8000260 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e22e      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2202      	movs	r2, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	d0f1      	beq.n	8002f6a <HAL_RCC_OscConfig+0x242>
 8002f86:	e018      	b.n	8002fba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	438a      	bics	r2, r1
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fd f964 	bl	8000260 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fd f95f 	bl	8000260 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e214      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d1f1      	bne.n	8002f9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x29e>
 8002fc4:	e0b6      	b.n	8003134 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2317      	movs	r3, #23
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	055b      	lsls	r3, r3, #21
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d111      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0549      	lsls	r1, r1, #21
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	61da      	str	r2, [r3, #28]
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	055b      	lsls	r3, r3, #21
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ff6:	2317      	movs	r3, #23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4013      	ands	r3, r2
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0049      	lsls	r1, r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003018:	f7fd f922 	bl	8000260 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd f91d 	bl	8000260 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1d2      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10f      	bne.n	8003068 <HAL_RCC_OscConfig+0x340>
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_RCC_OscConfig+0x330>)
 800304e:	2101      	movs	r1, #1
 8003050:	430a      	orrs	r2, r1
 8003052:	621a      	str	r2, [r3, #32]
 8003054:	e036      	b.n	80030c4 <HAL_RCC_OscConfig+0x39c>
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40021000 	.word	0x40021000
 800305c:	fffeffff 	.word	0xfffeffff
 8003060:	fffbffff 	.word	0xfffbffff
 8003064:	40007000 	.word	0x40007000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x362>
 8003070:	4bca      	ldr	r3, [pc, #808]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	4bc9      	ldr	r3, [pc, #804]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003076:	2101      	movs	r1, #1
 8003078:	438a      	bics	r2, r1
 800307a:	621a      	str	r2, [r3, #32]
 800307c:	4bc7      	ldr	r3, [pc, #796]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	4bc6      	ldr	r3, [pc, #792]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003082:	2104      	movs	r1, #4
 8003084:	438a      	bics	r2, r1
 8003086:	621a      	str	r2, [r3, #32]
 8003088:	e01c      	b.n	80030c4 <HAL_RCC_OscConfig+0x39c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x384>
 8003092:	4bc2      	ldr	r3, [pc, #776]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	4bc1      	ldr	r3, [pc, #772]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003098:	2104      	movs	r1, #4
 800309a:	430a      	orrs	r2, r1
 800309c:	621a      	str	r2, [r3, #32]
 800309e:	4bbf      	ldr	r3, [pc, #764]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	4bbe      	ldr	r3, [pc, #760]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	621a      	str	r2, [r3, #32]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0x39c>
 80030ac:	4bbb      	ldr	r3, [pc, #748]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	4bba      	ldr	r3, [pc, #744]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	621a      	str	r2, [r3, #32]
 80030b8:	4bb8      	ldr	r3, [pc, #736]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	4bb7      	ldr	r3, [pc, #732]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030be:	2104      	movs	r1, #4
 80030c0:	438a      	bics	r2, r1
 80030c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d014      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fd f8c8 	bl	8000260 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fd f8c3 	bl	8000260 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	4aaf      	ldr	r2, [pc, #700]	; (80033a0 <HAL_RCC_OscConfig+0x678>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e177      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4bac      	ldr	r3, [pc, #688]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	2202      	movs	r2, #2
 80030f0:	4013      	ands	r3, r2
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3ae>
 80030f4:	e013      	b.n	800311e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fd f8b3 	bl	8000260 <HAL_GetTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	e009      	b.n	8003114 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fd f8ae 	bl	8000260 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	4aa5      	ldr	r2, [pc, #660]	; (80033a0 <HAL_RCC_OscConfig+0x678>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e162      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4ba1      	ldr	r3, [pc, #644]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	2202      	movs	r2, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311e:	2317      	movs	r3, #23
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b9c      	ldr	r3, [pc, #624]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	4b9b      	ldr	r3, [pc, #620]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800312e:	499d      	ldr	r1, [pc, #628]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003130:	400a      	ands	r2, r1
 8003132:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2210      	movs	r2, #16
 800313a:	4013      	ands	r3, r2
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d12a      	bne.n	800319c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003146:	4b95      	ldr	r3, [pc, #596]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314a:	4b94      	ldr	r3, [pc, #592]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800314c:	2104      	movs	r1, #4
 800314e:	430a      	orrs	r2, r1
 8003150:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003152:	4b92      	ldr	r3, [pc, #584]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003156:	4b91      	ldr	r3, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003158:	2101      	movs	r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fd f87f 	bl	8000260 <HAL_GetTick>
 8003162:	0003      	movs	r3, r0
 8003164:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003168:	f7fd f87a 	bl	8000260 <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e12f      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800317a:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2202      	movs	r2, #2
 8003180:	4013      	ands	r3, r2
 8003182:	d0f1      	beq.n	8003168 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003184:	4b85      	ldr	r3, [pc, #532]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	22f8      	movs	r2, #248	; 0xf8
 800318a:	4393      	bics	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	00da      	lsls	r2, r3, #3
 8003194:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	e034      	b.n	8003206 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	3305      	adds	r3, #5
 80031a2:	d111      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031a4:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a8:	4b7c      	ldr	r3, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031aa:	2104      	movs	r1, #4
 80031ac:	438a      	bics	r2, r1
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031b0:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	22f8      	movs	r2, #248	; 0xf8
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	00da      	lsls	r2, r3, #3
 80031c0:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34
 80031c6:	e01e      	b.n	8003206 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031c8:	4b74      	ldr	r3, [pc, #464]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031ce:	2104      	movs	r1, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031d4:	4b71      	ldr	r3, [pc, #452]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7fd f83e 	bl	8000260 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031ea:	f7fd f839 	bl	8000260 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0ee      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031fc:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d1f1      	bne.n	80031ea <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	d05c      	beq.n	80032ca <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003210:	4b62      	ldr	r3, [pc, #392]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	220c      	movs	r2, #12
 8003216:	4013      	ands	r3, r2
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d00e      	beq.n	800323a <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800321c:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	220c      	movs	r2, #12
 8003222:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003224:	2b08      	cmp	r3, #8
 8003226:	d114      	bne.n	8003252 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003228:	4b5c      	ldr	r3, [pc, #368]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	401a      	ands	r2, r3
 8003232:	23c0      	movs	r3, #192	; 0xc0
 8003234:	025b      	lsls	r3, r3, #9
 8003236:	429a      	cmp	r2, r3
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800323a:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800323c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	4013      	ands	r3, r2
 8003244:	d040      	beq.n	80032c8 <HAL_RCC_OscConfig+0x5a0>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d03c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0c3      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01b      	beq.n	8003292 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0249      	lsls	r1, r1, #9
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fc fffa 	bl	8000260 <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003272:	f7fc fff5 	bl	8000260 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0aa      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003284:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	4013      	ands	r3, r2
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x54a>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003298:	4943      	ldr	r1, [pc, #268]	; (80033a8 <HAL_RCC_OscConfig+0x680>)
 800329a:	400a      	ands	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fc ffdf 	bl	8000260 <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a8:	f7fc ffda 	bl	8000260 <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e08f      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80032bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	4013      	ands	r3, r2
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x580>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80032c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d100      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5ac>
 80032d2:	e081      	b.n	80033d8 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	220c      	movs	r2, #12
 80032da:	4013      	ands	r3, r2
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d100      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5ba>
 80032e0:	e078      	b.n	80033d4 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d14c      	bne.n	8003384 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x674>)
 80032f0:	492e      	ldr	r1, [pc, #184]	; (80033ac <HAL_RCC_OscConfig+0x684>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fc ffb3 	bl	8000260 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fc ffae 	bl	8000260 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e063      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	049b      	lsls	r3, r3, #18
 800331a:	4013      	ands	r3, r2
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331e:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	220f      	movs	r2, #15
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_RCC_OscConfig+0x688>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	431a      	orrs	r2, r3
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	0449      	lsls	r1, r1, #17
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fc ff81 	bl	8000260 <HAL_GetTick>
 800335e:	0003      	movs	r3, r0
 8003360:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fc ff7c 	bl	8000260 <HAL_GetTick>
 8003368:	0002      	movs	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e031      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	049b      	lsls	r3, r3, #18
 800337e:	4013      	ands	r3, r2
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x63c>
 8003382:	e029      	b.n	80033d8 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_OscConfig+0x674>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RCC_OscConfig+0x674>)
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <HAL_RCC_OscConfig+0x684>)
 800338c:	400a      	ands	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fc ff66 	bl	8000260 <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x69e>
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	40021000 	.word	0x40021000
 80033a0:	00001388 	.word	0x00001388
 80033a4:	efffffff 	.word	0xefffffff
 80033a8:	fffeffff 	.word	0xfffeffff
 80033ac:	feffffff 	.word	0xfeffffff
 80033b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fc ff54 	bl	8000260 <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e009      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCC_OscConfig+0x6bc>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	049b      	lsls	r3, r3, #18
 80033ce:	4013      	ands	r3, r2
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x68c>
 80033d2:	e001      	b.n	80033d8 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b006      	add	sp, #24
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40021000 	.word	0x40021000

080033e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d911      	bls.n	8003428 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003404:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	4393      	bics	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	4b75      	ldr	r3, [pc, #468]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003416:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d8      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	22f0      	movs	r2, #240	; 0xf0
 8003438:	4393      	bics	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <HAL_RCC_ClockConfig+0x6a>
 8003450:	e089      	b.n	8003566 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b63      	ldr	r3, [pc, #396]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	029b      	lsls	r3, r3, #10
 8003462:	4013      	ands	r3, r2
 8003464:	d120      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0b7      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	4013      	ands	r3, r2
 800347c:	d114      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0ab      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	025b      	lsls	r3, r3, #9
 8003492:	4013      	ands	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e09f      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e098      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a8:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4393      	bics	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fc fed0 	bl	8000260 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d111      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fc fec7 	bl	8000260 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4a44      	ldr	r2, [pc, #272]	; (80035ec <HAL_RCC_ClockConfig+0x204>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e07b      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	220c      	movs	r2, #12
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d1ef      	bne.n	80034ce <HAL_RCC_ClockConfig+0xe6>
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	e009      	b.n	800350e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fa:	f7fc feb1 	bl	8000260 <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_RCC_ClockConfig+0x204>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e065      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350e:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	220c      	movs	r2, #12
 8003514:	4013      	ands	r3, r2
 8003516:	2b08      	cmp	r3, #8
 8003518:	d1ef      	bne.n	80034fa <HAL_RCC_ClockConfig+0x112>
 800351a:	e024      	b.n	8003566 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d11b      	bne.n	800355c <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003524:	e009      	b.n	800353a <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003526:	f7fc fe9b 	bl	8000260 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_RCC_ClockConfig+0x204>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04f      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800353a:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	220c      	movs	r2, #12
 8003540:	4013      	ands	r3, r2
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_ClockConfig+0x13e>
 8003546:	e00e      	b.n	8003566 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fc fe8a 	bl	8000260 <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_RCC_ClockConfig+0x204>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e03e      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	220c      	movs	r2, #12
 8003562:	4013      	ands	r3, r2
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2201      	movs	r2, #1
 800356c:	4013      	ands	r3, r2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d211      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	4013      	ands	r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e020      	b.n	80035da <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x208>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035b6:	f000 f821 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035ba:	0001      	movs	r1, r0
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x200>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	220f      	movs	r2, #15
 80035c4:	4013      	ands	r3, r2
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x20c>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	000a      	movs	r2, r1
 80035cc:	40da      	lsrs	r2, r3
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x210>)
 80035d0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f002 fa1c 	bl	8005a10 <HAL_InitTick>
  
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	00001388 	.word	0x00001388
 80035f0:	fffff8ff 	.word	0xfffff8ff
 80035f4:	08006cac 	.word	0x08006cac
 80035f8:	20000110 	.word	0x20000110

080035fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08f      	sub	sp, #60	; 0x3c
 8003600:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003602:	2314      	movs	r3, #20
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	4a37      	ldr	r2, [pc, #220]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003608:	ca13      	ldmia	r2!, {r0, r1, r4}
 800360a:	c313      	stmia	r3!, {r0, r1, r4}
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	4a35      	ldr	r2, [pc, #212]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xec>)
 8003614:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003616:	c313      	stmia	r3!, {r0, r1, r4}
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	2300      	movs	r3, #0
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
 8003624:	2300      	movs	r3, #0
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	220c      	movs	r2, #12
 800363a:	4013      	ands	r3, r2
 800363c:	2b08      	cmp	r3, #8
 800363e:	d006      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x52>
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d043      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xd0>
 8003644:	2b04      	cmp	r3, #4
 8003646:	d144      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003648:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800364c:	e044      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	0c9b      	lsrs	r3, r3, #18
 8003652:	220f      	movs	r2, #15
 8003654:	4013      	ands	r3, r2
 8003656:	2214      	movs	r2, #20
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	220f      	movs	r2, #15
 8003664:	4013      	ands	r3, r2
 8003666:	1d3a      	adds	r2, r7, #4
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	025b      	lsls	r3, r3, #9
 8003672:	401a      	ands	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	025b      	lsls	r3, r3, #9
 8003678:	429a      	cmp	r2, r3
 800367a:	d109      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	481c      	ldr	r0, [pc, #112]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003680:	f7fc fd42 	bl	8000108 <__udivsi3>
 8003684:	0003      	movs	r3, r0
 8003686:	001a      	movs	r2, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	4353      	muls	r3, r2
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
 800368e:	e01a      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	23c0      	movs	r3, #192	; 0xc0
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	401a      	ands	r2, r3
 8003698:	23c0      	movs	r3, #192	; 0xc0
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	429a      	cmp	r2, r3
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80036a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a2:	4814      	ldr	r0, [pc, #80]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a4:	f7fc fd30 	bl	8000108 <__udivsi3>
 80036a8:	0003      	movs	r3, r0
 80036aa:	001a      	movs	r2, r3
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	4353      	muls	r3, r2
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80036b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b6:	4810      	ldr	r0, [pc, #64]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036b8:	f7fc fd26 	bl	8000108 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	001a      	movs	r2, r3
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	4353      	muls	r3, r2
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b00f      	add	sp, #60	; 0x3c
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	08006bec 	.word	0x08006bec
 80036e8:	08006bfc 	.word	0x08006bfc
 80036ec:	40021000 	.word	0x40021000
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	02dc6c00 	.word	0x02dc6c00
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b02      	ldr	r3, [pc, #8]	; (800370c <HAL_RCC_GetHCLKFreq+0x10>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	20000110 	.word	0x20000110

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003714:	f7ff fff2 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003718:	0001      	movs	r1, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	2207      	movs	r2, #7
 8003722:	4013      	ands	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	40d9      	lsrs	r1, r3
 800372a:	000b      	movs	r3, r1
}    
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	40021000 	.word	0x40021000
 8003738:	08006cbc 	.word	0x08006cbc

0800373c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <HAL_RCC_GetClockConfig+0x4c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2203      	movs	r2, #3
 8003752:	401a      	ands	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_GetClockConfig+0x4c>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	22f0      	movs	r2, #240	; 0xf0
 800375e:	401a      	ands	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_GetClockConfig+0x4c>)
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	23e0      	movs	r3, #224	; 0xe0
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetClockConfig+0x50>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	401a      	ands	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40021000 	.word	0x40021000
 800378c:	40022000 	.word	0x40022000

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	025b      	lsls	r3, r3, #9
 80037a8:	4013      	ands	r3, r2
 80037aa:	d100      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80037ac:	e08f      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2317      	movs	r3, #23
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	055b      	lsls	r3, r3, #21
 80037be:	4013      	ands	r3, r2
 80037c0:	d111      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0549      	lsls	r1, r1, #21
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
 80037d0:	4b60      	ldr	r3, [pc, #384]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037de:	2317      	movs	r3, #23
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b5c      	ldr	r3, [pc, #368]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	d11a      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b58      	ldr	r3, [pc, #352]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	0049      	lsls	r1, r1, #1
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003800:	f7fc fd2e 	bl	8000260 <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fc fd29 	bl	8000260 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e097      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b4e      	ldr	r3, [pc, #312]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d0f0      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	23c0      	movs	r3, #192	; 0xc0
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d034      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	23c0      	movs	r3, #192	; 0xc0
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4013      	ands	r3, r2
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	429a      	cmp	r2, r3
 8003848:	d02c      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a43      	ldr	r2, [pc, #268]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	0249      	lsls	r1, r1, #9
 800385e:	430a      	orrs	r2, r1
 8003860:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003868:	493d      	ldr	r1, [pc, #244]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	400a      	ands	r2, r1
 800386c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fc fcf0 	bl	8000260 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e009      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fc fceb 	bl	8000260 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a34      	ldr	r2, [pc, #208]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e058      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b8:	2317      	movs	r3, #23
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038c8:	4927      	ldr	r1, [pc, #156]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	2203      	movs	r2, #3
 80038de:	4393      	bics	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2210      	movs	r2, #16
 80038fc:	4393      	bics	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003906:	430a      	orrs	r2, r1
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	4013      	ands	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	4393      	bics	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003926:	430a      	orrs	r2, r1
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4013      	ands	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003946:	430a      	orrs	r2, r1
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b006      	add	sp, #24
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
 800395c:	fffffcff 	.word	0xfffffcff
 8003960:	fffeffff 	.word	0xfffeffff
 8003964:	00001388 	.word	0x00001388
 8003968:	efffffff 	.word	0xefffffff

0800396c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01e      	b.n	80039bc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223d      	movs	r2, #61	; 0x3d
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	223c      	movs	r2, #60	; 0x3c
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f002 f81d 	bl	80059d4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	223d      	movs	r2, #61	; 0x3d
 800399e:	2102      	movs	r1, #2
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3304      	adds	r3, #4
 80039aa:	0019      	movs	r1, r3
 80039ac:	0010      	movs	r0, r2
 80039ae:	f000 fa39 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	223d      	movs	r2, #61	; 0x3d
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d124      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2202      	movs	r2, #2
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d11d      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4252      	negs	r2, r2
 8003a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4013      	ands	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f9db 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003a3e:	e007      	b.n	8003a50 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 f9ce 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f9da 	bl	8003e04 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d125      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d11e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2205      	movs	r2, #5
 8003a78:	4252      	negs	r2, r2
 8003a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	23c0      	movs	r3, #192	; 0xc0
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 f9ae 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e007      	b.n	8003aaa <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 f9a1 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f9ad 	bl	8003e04 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d124      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11d      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2209      	movs	r2, #9
 8003ad2:	4252      	negs	r2, r2
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f982 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e007      	b.n	8003b02 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 f975 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f981 	bl	8003e04 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d125      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d11e      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2211      	movs	r2, #17
 8003b2a:	4252      	negs	r2, r2
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2208      	movs	r2, #8
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	23c0      	movs	r3, #192	; 0xc0
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f955 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f948 	bl	8003de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f954 	bl	8003e04 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10f      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4252      	negs	r2, r2
 8003b86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f001 feb4 	bl	80058f8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d10f      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d108      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2281      	movs	r2, #129	; 0x81
 8003bb2:	4252      	negs	r2, r2
 8003bb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 faa0 	bl	80040fe <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d10f      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d108      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2241      	movs	r2, #65	; 0x41
 8003be0:	4252      	negs	r2, r2
 8003be2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f914 	bl	8003e14 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d10f      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d108      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2221      	movs	r2, #33	; 0x21
 8003c0e:	4252      	negs	r2, r2
 8003c10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 fa6a 	bl	80040ee <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	223c      	movs	r2, #60	; 0x3c
 8003c36:	5c9b      	ldrb	r3, [r3, r2]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x1c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0ca      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x1b2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	223c      	movs	r2, #60	; 0x3c
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	223d      	movs	r2, #61	; 0x3d
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2277      	movs	r2, #119	; 0x77
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a5f      	ldr	r2, [pc, #380]	; (8003de0 <HAL_TIM_ConfigClockSource+0x1bc>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d100      	bne.n	8003c7a <HAL_TIM_ConfigClockSource+0x56>
 8003c78:	e078      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x148>
 8003c7a:	d80e      	bhi.n	8003c9a <HAL_TIM_ConfigClockSource+0x76>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d100      	bne.n	8003c82 <HAL_TIM_ConfigClockSource+0x5e>
 8003c80:	e08b      	b.n	8003d9a <HAL_TIM_ConfigClockSource+0x176>
 8003c82:	d803      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x68>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d100      	bne.n	8003c8a <HAL_TIM_ConfigClockSource+0x66>
 8003c88:	e080      	b.n	8003d8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003c8a:	e09b      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d100      	bne.n	8003c92 <HAL_TIM_ConfigClockSource+0x6e>
 8003c90:	e08a      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x184>
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d100      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0x74>
 8003c96:	e08e      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x192>
    break;
 8003c98:	e094      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8003c9a:	2b70      	cmp	r3, #112	; 0x70
 8003c9c:	d017      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xaa>
 8003c9e:	d804      	bhi.n	8003caa <HAL_TIM_ConfigClockSource+0x86>
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d043      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x108>
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d051      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0x128>
    break;
 8003ca8:	e08c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	0152      	lsls	r2, r2, #5
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x98>
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	0192      	lsls	r2, r2, #6
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d024      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 8003cba:	e083      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2107      	movs	r1, #7
 8003cc8:	438a      	bics	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
    break;
 8003ccc:	e07a      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 f9a1 	bl	8004024 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2277      	movs	r2, #119	; 0x77
 8003cee:	4393      	bics	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2277      	movs	r2, #119	; 0x77
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	609a      	str	r2, [r3, #8]
    break;
 8003d02:	e05f      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f000 f986 	bl	8004024 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	01c9      	lsls	r1, r1, #7
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]
    break;
 8003d2a:	e04b      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	001a      	movs	r2, r3
 8003d3a:	f000 f8eb 	bl	8003f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2150      	movs	r1, #80	; 0x50
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f94d 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003d4a:	e03b      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	001a      	movs	r2, r3
 8003d5a:	f000 f90d 	bl	8003f78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2160      	movs	r1, #96	; 0x60
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 f93d 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003d6a:	e02b      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	001a      	movs	r2, r3
 8003d7a:	f000 f8cb 	bl	8003f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 f92d 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003d8a:	e01b      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2100      	movs	r1, #0
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 f926 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003d98:	e014      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2110      	movs	r1, #16
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 f91f 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003da6:	e00d      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2120      	movs	r1, #32
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f918 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003db4:	e006      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2130      	movs	r1, #48	; 0x30
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 f911 	bl	8003fe4 <TIM_ITRx_SetConfig>
    break;
 8003dc2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	223d      	movs	r2, #61	; 0x3d
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	223c      	movs	r2, #60	; 0x3c
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffff00ff 	.word	0xffff00ff

08003de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a30      	ldr	r2, [pc, #192]	; (8003efc <TIM_Base_SetConfig+0xd8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d008      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	05db      	lsls	r3, r3, #23
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <TIM_Base_SetConfig+0xdc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2270      	movs	r2, #112	; 0x70
 8003e56:	4393      	bics	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a25      	ldr	r2, [pc, #148]	; (8003efc <TIM_Base_SetConfig+0xd8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d014      	beq.n	8003e96 <TIM_Base_SetConfig+0x72>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	05db      	lsls	r3, r3, #23
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d00f      	beq.n	8003e96 <TIM_Base_SetConfig+0x72>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <TIM_Base_SetConfig+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0x72>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <TIM_Base_SetConfig+0xe0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0x72>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <TIM_Base_SetConfig+0xe4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0x72>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <TIM_Base_SetConfig+0xe8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <TIM_Base_SetConfig+0xec>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	4393      	bics	r3, r2
 8003eae:	001a      	movs	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <TIM_Base_SetConfig+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0xc2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <TIM_Base_SetConfig+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xc2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <TIM_Base_SetConfig+0xe8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	615a      	str	r2, [r3, #20]
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40002000 	.word	0x40002000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	fffffcff 	.word	0xfffffcff

08003f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4393      	bics	r3, r2
 8003f36:	001a      	movs	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22f0      	movs	r2, #240	; 0xf0
 8003f46:	4393      	bics	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	220a      	movs	r2, #10
 8003f58:	4393      	bics	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4393      	bics	r3, r2
 8003f94:	001a      	movs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <TIM_TI2_ConfigInputStage+0x68>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	031b      	lsls	r3, r3, #12
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	22a0      	movs	r2, #160	; 0xa0
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b006      	add	sp, #24
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	ffff0fff 	.word	0xffff0fff

08003fe4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	000a      	movs	r2, r1
 8003fee:	1cbb      	adds	r3, r7, #2
 8003ff0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2270      	movs	r2, #112	; 0x70
 8004000:	4393      	bics	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004004:	1cbb      	adds	r3, r7, #2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2207      	movs	r2, #7
 800400a:	4313      	orrs	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	001a      	movs	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	b004      	add	sp, #16
 8004022:	bd80      	pop	{r7, pc}

08004024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <TIM_ETR_SetConfig+0x40>)
 8004040:	4013      	ands	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	431a      	orrs	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b006      	add	sp, #24
 8004062:	bd80      	pop	{r7, pc}
 8004064:	ffff00ff 	.word	0xffff00ff

08004068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	223c      	movs	r2, #60	; 0x3c
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800407c:	2302      	movs	r3, #2
 800407e:	e032      	b.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	223c      	movs	r2, #60	; 0x3c
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	223d      	movs	r2, #61	; 0x3d
 800408c:	2102      	movs	r1, #2
 800408e:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2170      	movs	r1, #112	; 0x70
 800409c:	438a      	bics	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	438a      	bics	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	223d      	movs	r2, #61	; 0x3d
 80040d8:	2101      	movs	r1, #1
 80040da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	223c      	movs	r2, #60	; 0x3c
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b002      	add	sp, #8
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b002      	add	sp, #8
 800410c:	bd80      	pop	{r7, pc}

0800410e <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	000a      	movs	r2, r1
 8004118:	1cfb      	adds	r3, r7, #3
 800411a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 800411c:	230f      	movs	r3, #15
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7c1b      	ldrb	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10e      	bne.n	800414a <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	2181      	movs	r1, #129	; 0x81
 8004136:	f001 ffe9 	bl	800610c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	2101      	movs	r1, #1
 8004144:	f001 ffe2 	bl	800610c <USBD_LL_OpenEP>
 8004148:	e00b      	b.n	8004162 <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	2340      	movs	r3, #64	; 0x40
 800414e:	2202      	movs	r2, #2
 8004150:	2181      	movs	r1, #129	; 0x81
 8004152:	f001 ffdb 	bl	800610c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	2202      	movs	r2, #2
 800415c:	2101      	movs	r1, #1
 800415e:	f001 ffd5 	bl	800610c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	2308      	movs	r3, #8
 8004166:	2203      	movs	r2, #3
 8004168:	2182      	movs	r1, #130	; 0x82
 800416a:	f001 ffcf 	bl	800610c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800416e:	2387      	movs	r3, #135	; 0x87
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	0018      	movs	r0, r3
 8004174:	f002 f968 	bl	8006448 <USBD_static_malloc>
 8004178:	0001      	movs	r1, r0
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	2386      	movs	r3, #134	; 0x86
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	2386      	movs	r3, #134	; 0x86
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	58d3      	ldr	r3, [r2, r3]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 800418e:	230f      	movs	r3, #15
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e02c      	b.n	80041f2 <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	2386      	movs	r3, #134	; 0x86
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	58d3      	ldr	r3, [r2, r3]
 80041a0:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	2387      	movs	r3, #135	; 0x87
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	58d3      	ldr	r3, [r2, r3]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	2385      	movs	r3, #133	; 0x85
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	2100      	movs	r1, #0
 80041b6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	2386      	movs	r3, #134	; 0x86
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	2100      	movs	r1, #0
 80041c0:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7c1b      	ldrb	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	2381      	movs	r3, #129	; 0x81
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	58d2      	ldr	r2, [r2, r3]
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	2101      	movs	r1, #1
 80041da:	f002 f8e7 	bl	80063ac <USBD_LL_PrepareReceive>
 80041de:	e008      	b.n	80041f2 <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	2381      	movs	r3, #129	; 0x81
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	58d2      	ldr	r2, [r2, r3]
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	2101      	movs	r1, #1
 80041ee:	f002 f8dd 	bl	80063ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80041f2:	230f      	movs	r3, #15
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	000a      	movs	r2, r1
 800420a:	1cfb      	adds	r3, r7, #3
 800420c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 800420e:	230f      	movs	r3, #15
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2181      	movs	r1, #129	; 0x81
 800421a:	0018      	movs	r0, r3
 800421c:	f001 ffad 	bl	800617a <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2101      	movs	r1, #1
 8004224:	0018      	movs	r0, r3
 8004226:	f001 ffa8 	bl	800617a <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2182      	movs	r1, #130	; 0x82
 800422e:	0018      	movs	r0, r3
 8004230:	f001 ffa3 	bl	800617a <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	2386      	movs	r3, #134	; 0x86
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	58d3      	ldr	r3, [r2, r3]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	2387      	movs	r3, #135	; 0x87
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	2386      	movs	r3, #134	; 0x86
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	58d3      	ldr	r3, [r2, r3]
 8004254:	0018      	movs	r0, r3
 8004256:	f002 f903 	bl	8006460 <USBD_static_free>
    pdev->pClassData = NULL;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	2386      	movs	r3, #134	; 0x86
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	2100      	movs	r1, #0
 8004262:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 8004264:	230f      	movs	r3, #15
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	2386      	movs	r3, #134	; 0x86
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	58d3      	ldr	r3, [r2, r3]
 8004286:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	001a      	movs	r2, r3
 800428e:	2360      	movs	r3, #96	; 0x60
 8004290:	4013      	ands	r3, r2
 8004292:	d03d      	beq.n	8004310 <USBD_CDC_Setup+0x9c>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d000      	beq.n	800429a <USBD_CDC_Setup+0x26>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8004298:	e046      	b.n	8004328 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	88db      	ldrh	r3, [r3, #6]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02b      	beq.n	80042fa <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da12      	bge.n	80042d2 <USBD_CDC_Setup+0x5e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	2387      	movs	r3, #135	; 0x87
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	58d3      	ldr	r3, [r2, r3]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80042ba:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	88d2      	ldrh	r2, [r2, #6]
 80042c0:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80042c2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	88da      	ldrh	r2, [r3, #6]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f001 f944 	bl	8005558 <USBD_CtlSendData>
    break;
 80042d0:	e02b      	b.n	800432a <USBD_CDC_Setup+0xb6>
        hcdc->CmdOpCode = req->bRequest;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	7859      	ldrb	r1, [r3, #1]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	88db      	ldrh	r3, [r3, #6]
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <USBD_CDC_Setup+0xc0>)
 80042e8:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 80042ea:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	88da      	ldrh	r2, [r3, #6]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f001 f963 	bl	80055be <USBD_CtlPrepareRx>
    break;
 80042f8:	e017      	b.n	800432a <USBD_CDC_Setup+0xb6>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	2387      	movs	r3, #135	; 0x87
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	58d3      	ldr	r3, [r2, r3]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	7850      	ldrb	r0, [r2, #1]
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	4798      	blx	r3
    break;
 800430e:	e00c      	b.n	800432a <USBD_CDC_Setup+0xb6>
    switch (req->bRequest)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b0a      	cmp	r3, #10
 8004316:	d106      	bne.n	8004326 <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 8004318:	4907      	ldr	r1, [pc, #28]	; (8004338 <USBD_CDC_Setup+0xc4>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	0018      	movs	r0, r3
 8004320:	f001 f91a 	bl	8005558 <USBD_CtlSendData>
      break;
 8004324:	e000      	b.n	8004328 <USBD_CDC_Setup+0xb4>
      break;
 8004326:	46c0      	nop			; (mov r8, r8)
    break;
 8004328:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b004      	add	sp, #16
 8004332:	bd80      	pop	{r7, pc}
 8004334:	00000201 	.word	0x00000201
 8004338:	20000194 	.word	0x20000194

0800433c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	000a      	movs	r2, r1
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	2386      	movs	r3, #134	; 0x86
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	58d3      	ldr	r3, [r2, r3]
 8004352:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	2386      	movs	r3, #134	; 0x86
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	58d3      	ldr	r3, [r2, r3]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	2385      	movs	r3, #133	; 0x85
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	2100      	movs	r1, #0
 8004368:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bd80      	pop	{r7, pc}

08004378 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	000a      	movs	r2, r1
 8004382:	1cfb      	adds	r3, r7, #3
 8004384:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	2386      	movs	r3, #134	; 0x86
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	58d3      	ldr	r3, [r2, r3]
 800438e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004390:	1cfb      	adds	r3, r7, #3
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0011      	movs	r1, r2
 8004398:	0018      	movs	r0, r3
 800439a:	f002 f83f 	bl	800641c <USBD_LL_GetRxDataSize>
 800439e:	0001      	movs	r1, r0
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	2383      	movs	r3, #131	; 0x83
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	2386      	movs	r3, #134	; 0x86
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	58d3      	ldr	r3, [r2, r3]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	2387      	movs	r3, #135	; 0x87
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	58d3      	ldr	r3, [r2, r3]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	2281      	movs	r2, #129	; 0x81
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	5888      	ldr	r0, [r1, r2]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	2183      	movs	r1, #131	; 0x83
 80043ca:	0089      	lsls	r1, r1, #2
 80043cc:	468c      	mov	ip, r1
 80043ce:	4462      	add	r2, ip
 80043d0:	0011      	movs	r1, r2
 80043d2:	4798      	blx	r3

    return USBD_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b004      	add	sp, #16
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	2386      	movs	r3, #134	; 0x86
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	58d3      	ldr	r3, [r2, r3]
 80043f4:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	2387      	movs	r3, #135	; 0x87
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	58d3      	ldr	r3, [r2, r3]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01a      	beq.n	8004438 <USBD_CDC_EP0_RxReady+0x54>
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	2bff      	cmp	r3, #255	; 0xff
 800440c:	d014      	beq.n	8004438 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	2387      	movs	r3, #135	; 0x87
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	58d3      	ldr	r3, [r2, r3]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8004420:	68fc      	ldr	r4, [r7, #12]
                                                      hcdc->CmdLength);
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <USBD_CDC_EP0_RxReady+0x60>)
 8004426:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004428:	b292      	uxth	r2, r2
 800442a:	0021      	movs	r1, r4
 800442c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	21ff      	movs	r1, #255	; 0xff
 8004436:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b005      	add	sp, #20
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	00000201 	.word	0x00000201

08004448 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2243      	movs	r2, #67	; 0x43
 8004454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004456:	4b02      	ldr	r3, [pc, #8]	; (8004460 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000088 	.word	0x20000088

08004464 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2243      	movs	r2, #67	; 0x43
 8004470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004472:	4b02      	ldr	r3, [pc, #8]	; (800447c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000044 	.word	0x20000044

08004480 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2243      	movs	r2, #67	; 0x43
 800448c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800448e:	4b02      	ldr	r3, [pc, #8]	; (8004498 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200000cc 	.word	0x200000cc

0800449c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	220a      	movs	r2, #10
 80044a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80044aa:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b002      	add	sp, #8
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000000 	.word	0x20000000

080044b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80044c2:	230f      	movs	r3, #15
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2202      	movs	r2, #2
 80044c8:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	2387      	movs	r3, #135	; 0x87
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 80044da:	230f      	movs	r3, #15
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80044e2:	230f      	movs	r3, #15
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b004      	add	sp, #16
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	2386      	movs	r3, #134	; 0x86
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	58d3      	ldr	r3, [r2, r3]
 8004506:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	2382      	movs	r3, #130	; 0x82
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	8819      	ldrh	r1, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	2384      	movs	r3, #132	; 0x84
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 800451e:	2300      	movs	r3, #0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b006      	add	sp, #24
 8004526:	bd80      	pop	{r7, pc}

08004528 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	2386      	movs	r3, #134	; 0x86
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	58d3      	ldr	r3, [r2, r3]
 800453a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	2381      	movs	r3, #129	; 0x81
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	6839      	ldr	r1, [r7, #0]
 8004544:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bd80      	pop	{r7, pc}

08004550 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	2386      	movs	r3, #134	; 0x86
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	58d3      	ldr	r3, [r2, r3]
 8004560:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	2386      	movs	r3, #134	; 0x86
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	58d3      	ldr	r3, [r2, r3]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01c      	beq.n	80045a8 <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	2385      	movs	r3, #133	; 0x85
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	58d3      	ldr	r3, [r2, r3]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	2385      	movs	r3, #133	; 0x85
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	2101      	movs	r1, #1
 8004582:	50d1      	str	r1, [r2, r3]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	2382      	movs	r3, #130	; 0x82
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	58d1      	ldr	r1, [r2, r3]
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	2384      	movs	r3, #132	; 0x84
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev,
 8004594:	b29b      	uxth	r3, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	000a      	movs	r2, r1
 800459a:	2181      	movs	r1, #129	; 0x81
 800459c:	f001 fece 	bl	800633c <USBD_LL_Transmit>
      
      return USBD_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e002      	b.n	80045aa <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	2386      	movs	r3, #134	; 0x86
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	58d3      	ldr	r3, [r2, r3]
 80045c2:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	2386      	movs	r3, #134	; 0x86
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	58d3      	ldr	r3, [r2, r3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d019      	beq.n	8004604 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7c1b      	ldrb	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	2381      	movs	r3, #129	; 0x81
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	58d2      	ldr	r2, [r2, r3]
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	2101      	movs	r1, #1
 80045e8:	f001 fee0 	bl	80063ac <USBD_LL_PrepareReceive>
 80045ec:	e008      	b.n	8004600 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	2381      	movs	r3, #129	; 0x81
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	58d2      	ldr	r2, [r2, r3]
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	2340      	movs	r3, #64	; 0x40
 80045fa:	2101      	movs	r1, #1
 80045fc:	f001 fed6 	bl	80063ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b004      	add	sp, #16
 800460c:	bd80      	pop	{r7, pc}

0800460e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004622:	2302      	movs	r3, #2
 8004624:	e020      	b.n	8004668 <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	2385      	movs	r3, #133	; 0x85
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	58d3      	ldr	r3, [r2, r3]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	2385      	movs	r3, #133	; 0x85
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	2100      	movs	r1, #0
 800463a:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	2384      	movs	r3, #132	; 0x84
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	23fe      	movs	r3, #254	; 0xfe
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2101      	movs	r1, #1
 8004654:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1dfa      	adds	r2, r7, #7
 800465a:	7812      	ldrb	r2, [r2, #0]
 800465c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0018      	movs	r0, r3
 8004662:	f001 fcc9 	bl	8005ff8 <USBD_LL_Init>
  
  return USBD_OK; 
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}

08004670 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800467a:	230f      	movs	r3, #15
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	2385      	movs	r3, #133	; 0x85
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004692:	230f      	movs	r3, #15
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e003      	b.n	80046a4 <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2202      	movs	r2, #2
 80046a2:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 80046a4:	230f      	movs	r3, #15
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f001 fcff 	bl	80060c0 <USBD_LL_Start>
  
  return USBD_OK;  
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}

080046de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	000a      	movs	r2, r1
 80046e8:	1cfb      	adds	r3, r7, #3
 80046ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80046ec:	230f      	movs	r3, #15
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	2385      	movs	r3, #133	; 0x85
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	58d3      	ldr	r3, [r2, r3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	2385      	movs	r3, #133	; 0x85
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	58d3      	ldr	r3, [r2, r3]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	1cfa      	adds	r2, r7, #3
 800470c:	7811      	ldrb	r1, [r2, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	0010      	movs	r0, r2
 8004712:	4798      	blx	r3
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d103      	bne.n	8004720 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004718:	230f      	movs	r3, #15
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 8004720:	230f      	movs	r3, #15
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	781b      	ldrb	r3, [r3, #0]
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}

0800472e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	000a      	movs	r2, r1
 8004738:	1cfb      	adds	r3, r7, #3
 800473a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	2385      	movs	r3, #133	; 0x85
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	58d3      	ldr	r3, [r2, r3]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	1cfa      	adds	r2, r7, #3
 8004748:	7811      	ldrb	r1, [r2, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	0010      	movs	r0, r2
 800474e:	4798      	blx	r3
  return USBD_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2282      	movs	r2, #130	; 0x82
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4694      	mov	ip, r2
 800476e:	4463      	add	r3, ip
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f000 fe34 	bl	80053e2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	23fa      	movs	r3, #250	; 0xfa
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2101      	movs	r1, #1
 8004782:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <USBD_LL_SetupStage+0xb4>)
 8004788:	5a9b      	ldrh	r3, [r3, r2]
 800478a:	0019      	movs	r1, r3
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	23fc      	movs	r3, #252	; 0xfc
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	2382      	movs	r3, #130	; 0x82
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	001a      	movs	r2, r3
 800479e:	231f      	movs	r3, #31
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d00d      	beq.n	80047c2 <USBD_LL_SetupStage+0x66>
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d015      	beq.n	80047d6 <USBD_LL_SetupStage+0x7a>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11d      	bne.n	80047ea <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2282      	movs	r2, #130	; 0x82
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	189a      	adds	r2, r3, r2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0011      	movs	r1, r2
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 f9be 	bl	8004b3c <USBD_StdDevReq>
    break;
 80047c0:	e020      	b.n	8004804 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2282      	movs	r2, #130	; 0x82
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	189a      	adds	r2, r3, r2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 fa08 	bl	8004be4 <USBD_StdItfReq>
    break;
 80047d4:	e016      	b.n	8004804 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2282      	movs	r2, #130	; 0x82
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	189a      	adds	r2, r3, r2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0011      	movs	r1, r2
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 fa3d 	bl	8004c62 <USBD_StdEPReq>
    break;
 80047e8:	e00c      	b.n	8004804 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	2382      	movs	r3, #130	; 0x82
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	227f      	movs	r2, #127	; 0x7f
 80047f4:	4393      	bics	r3, r2
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0011      	movs	r1, r2
 80047fc:	0018      	movs	r0, r3
 80047fe:	f001 fce8 	bl	80061d2 <USBD_LL_StallEP>
    break;
 8004802:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	0000020e 	.word	0x0000020e

08004814 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	200b      	movs	r0, #11
 8004820:	183b      	adds	r3, r7, r0
 8004822:	1c0a      	adds	r2, r1, #0
 8004824:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004826:	183b      	adds	r3, r7, r0
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d13e      	bne.n	80048ac <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3305      	adds	r3, #5
 8004832:	33ff      	adds	r3, #255	; 0xff
 8004834:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	23fa      	movs	r3, #250	; 0xfa
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	58d3      	ldr	r3, [r2, r3]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d14c      	bne.n	80048dc <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	429a      	cmp	r2, r3
 800484c:	d914      	bls.n	8004878 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	1ad2      	subs	r2, r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d900      	bls.n	800486a <USBD_LL_DataOutStage+0x56>
 8004868:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 800486a:	b292      	uxth	r2, r2
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 fec8 	bl	8005606 <USBD_CtlContinueRx>
 8004876:	e031      	b.n	80048dc <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	2385      	movs	r3, #133	; 0x85
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	58d3      	ldr	r3, [r2, r3]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	23fe      	movs	r3, #254	; 0xfe
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	2385      	movs	r3, #133	; 0x85
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	58d3      	ldr	r3, [r2, r3]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	0010      	movs	r0, r2
 80048a0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 fec1 	bl	800562c <USBD_CtlSendStatus>
 80048aa:	e017      	b.n	80048dc <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	2385      	movs	r3, #133	; 0x85
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	58d3      	ldr	r3, [r2, r3]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d010      	beq.n	80048dc <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	23fe      	movs	r3, #254	; 0xfe
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d10a      	bne.n	80048dc <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	2385      	movs	r3, #133	; 0x85
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	58d3      	ldr	r3, [r2, r3]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	220b      	movs	r2, #11
 80048d2:	18ba      	adds	r2, r7, r2
 80048d4:	7811      	ldrb	r1, [r2, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	0010      	movs	r0, r2
 80048da:	4798      	blx	r3
  }  
  return USBD_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b006      	add	sp, #24
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	200b      	movs	r0, #11
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	1c0a      	adds	r2, r1, #0
 80048f6:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d000      	beq.n	8004902 <USBD_LL_DataInStage+0x1c>
 8004900:	e077      	b.n	80049f2 <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3314      	adds	r3, #20
 8004906:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	23fa      	movs	r3, #250	; 0xfa
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	58d3      	ldr	r3, [r2, r3]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d15e      	bne.n	80049d2 <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d915      	bls.n	800494c <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004932:	b29a      	uxth	r2, r3
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 fe2d 	bl	8005598 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	2300      	movs	r3, #0
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	f001 fd31 	bl	80063ac <USBD_LL_PrepareReceive>
 800494a:	e042      	b.n	80049d2 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0019      	movs	r1, r3
 8004956:	0010      	movs	r0, r2
 8004958:	f7fb fc5c 	bl	8000214 <__aeabi_uidivmod>
 800495c:	1e0b      	subs	r3, r1, #0
 800495e:	d11f      	bne.n	80049a0 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004968:	429a      	cmp	r2, r3
 800496a:	d319      	bcc.n	80049a0 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68f9      	ldr	r1, [r7, #12]
 8004972:	23fc      	movs	r3, #252	; 0xfc
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8004978:	429a      	cmp	r2, r3
 800497a:	d211      	bcs.n	80049a0 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	0018      	movs	r0, r3
 8004984:	f000 fe08 	bl	8005598 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	23fc      	movs	r3, #252	; 0xfc
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2100      	movs	r1, #0
 8004990:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	2300      	movs	r3, #0
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	f001 fd07 	bl	80063ac <USBD_LL_PrepareReceive>
 800499e:	e018      	b.n	80049d2 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	2385      	movs	r3, #133	; 0x85
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	58d3      	ldr	r3, [r2, r3]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	23fe      	movs	r3, #254	; 0xfe
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	2385      	movs	r3, #133	; 0x85
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	58d3      	ldr	r3, [r2, r3]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	0010      	movs	r0, r2
 80049c8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 fe41 	bl	8005654 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	5cd3      	ldrb	r3, [r2, r3]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d121      	bne.n	8004a22 <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7ff fe73 	bl	80046cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	2100      	movs	r1, #0
 80049ee:	54d1      	strb	r1, [r2, r3]
 80049f0:	e017      	b.n	8004a22 <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	2385      	movs	r3, #133	; 0x85
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	58d3      	ldr	r3, [r2, r3]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	23fe      	movs	r3, #254	; 0xfe
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d10a      	bne.n	8004a22 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	2385      	movs	r3, #133	; 0x85
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	58d3      	ldr	r3, [r2, r3]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	220b      	movs	r2, #11
 8004a18:	18ba      	adds	r2, r7, r2
 8004a1a:	7811      	ldrb	r1, [r2, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	0010      	movs	r0, r2
 8004a20:	4798      	blx	r3
  }  
  return USBD_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b006      	add	sp, #24
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f001 fb66 	bl	800610c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	2388      	movs	r3, #136	; 0x88
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2140      	movs	r1, #64	; 0x40
 8004a48:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	2340      	movs	r3, #64	; 0x40
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	f001 fb5b 	bl	800610c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	23fe      	movs	r3, #254	; 0xfe
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2101      	movs	r1, #1
 8004a64:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	2386      	movs	r3, #134	; 0x86
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	58d3      	ldr	r3, [r2, r3]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	2385      	movs	r3, #133	; 0x85
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	58d3      	ldr	r3, [r2, r3]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	b2d9      	uxtb	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	4790      	blx	r2
 
  
  return USBD_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	000a      	movs	r2, r1
 8004a9c:	1cfb      	adds	r3, r7, #3
 8004a9e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1cfa      	adds	r2, r7, #3
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	23fe      	movs	r3, #254	; 0xfe
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	5cd1      	ldrb	r1, [r2, r3]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	23fe      	movs	r3, #254	; 0xfe
 8004ac6:	33ff      	adds	r3, #255	; 0xff
 8004ac8:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	23fe      	movs	r3, #254	; 0xfe
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b002      	add	sp, #8
 8004adc:	bd80      	pop	{r7, pc}

08004ade <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	23fe      	movs	r3, #254	; 0xfe
 8004aea:	33ff      	adds	r3, #255	; 0xff
 8004aec:	5cd1      	ldrb	r1, [r2, r3]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	23fe      	movs	r3, #254	; 0xfe
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	23fe      	movs	r3, #254	; 0xfe
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d10e      	bne.n	8004b32 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	2385      	movs	r3, #133	; 0x85
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	58d3      	ldr	r3, [r2, r3]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	2385      	movs	r3, #133	; 0x85
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	58d3      	ldr	r3, [r2, r3]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	0010      	movs	r0, r2
 8004b30:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b002      	add	sp, #8
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004b46:	230f      	movs	r3, #15
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d835      	bhi.n	8004bc2 <USBD_StdDevReq+0x86>
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <USBD_StdDevReq+0xa4>)
 8004b5a:	18d3      	adds	r3, r2, r3
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f992 	bl	8004e90 <USBD_GetDescriptor>
    break;
 8004b6c:	e030      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	0011      	movs	r1, r2
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 fa95 	bl	80050a4 <USBD_SetAddress>
    break;
 8004b7a:	e029      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0011      	movs	r1, r2
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fadc 	bl	8005140 <USBD_SetConfig>
    break;
 8004b88:	e022      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0011      	movs	r1, r2
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fb71 	bl	8005278 <USBD_GetConfig>
    break;
 8004b96:	e01b      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f000 fba2 	bl	80052e8 <USBD_GetStatus>
    break;
 8004ba4:	e014      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	0011      	movs	r1, r2
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 fbca 	bl	8005346 <USBD_SetFeature>
    break;
 8004bb2:	e00d      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fbe2 	bl	8005384 <USBD_ClrFeature>
    break;
 8004bc0:	e006      	b.n	8004bd0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fc45 	bl	8005458 <USBD_CtlError>
    break;
 8004bce:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781b      	ldrb	r3, [r3, #0]
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	08006c4c 	.word	0x08006c4c

08004be4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	23fe      	movs	r3, #254	; 0xfe
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d122      	bne.n	8004c48 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	889b      	ldrh	r3, [r3, #4]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d816      	bhi.n	8004c3a <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	2385      	movs	r3, #133	; 0x85
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	58d3      	ldr	r3, [r2, r3]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	0010      	movs	r0, r2
 8004c1c:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	88db      	ldrh	r3, [r3, #6]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d117      	bne.n	8004c56 <USBD_StdItfReq+0x72>
 8004c26:	230f      	movs	r3, #15
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d112      	bne.n	8004c56 <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 fcfa 	bl	800562c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004c38:	e00d      	b.n	8004c56 <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0011      	movs	r1, r2
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fc09 	bl	8005458 <USBD_CtlError>
    break;
 8004c46:	e006      	b.n	8004c56 <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 fc02 	bl	8005458 <USBD_CtlError>
    break;
 8004c54:	e000      	b.n	8004c58 <USBD_StdItfReq+0x74>
    break;
 8004c56:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	889a      	ldrh	r2, [r3, #4]
 8004c78:	230e      	movs	r3, #14
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	001a      	movs	r2, r3
 8004c84:	2360      	movs	r3, #96	; 0x60
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d10a      	bne.n	8004ca2 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	2385      	movs	r3, #133	; 0x85
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	58d3      	ldr	r3, [r2, r3]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	0010      	movs	r0, r2
 8004c9c:	4798      	blx	r3
    
    return USBD_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e0f1      	b.n	8004e86 <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d04e      	beq.n	8004d48 <USBD_StdEPReq+0xe6>
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d003      	beq.n	8004cb6 <USBD_StdEPReq+0x54>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <USBD_StdEPReq+0x52>
 8004cb2:	e090      	b.n	8004dd6 <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 8004cb4:	e0e4      	b.n	8004e80 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	23fe      	movs	r3, #254	; 0xfe
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d002      	beq.n	8004cc8 <USBD_StdEPReq+0x66>
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d013      	beq.n	8004cee <USBD_StdEPReq+0x8c>
 8004cc6:	e036      	b.n	8004d36 <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004cc8:	230e      	movs	r3, #14
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d038      	beq.n	8004d44 <USBD_StdEPReq+0xe2>
 8004cd2:	230e      	movs	r3, #14
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d033      	beq.n	8004d44 <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004cdc:	230e      	movs	r3, #14
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0011      	movs	r1, r2
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f001 fa73 	bl	80061d2 <USBD_LL_StallEP>
      break;	
 8004cec:	e02a      	b.n	8004d44 <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	885b      	ldrh	r3, [r3, #2]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d111      	bne.n	8004d1a <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004cf6:	230e      	movs	r3, #14
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <USBD_StdEPReq+0xb8>
 8004d00:	230e      	movs	r3, #14
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d007      	beq.n	8004d1a <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 8004d0a:	230e      	movs	r3, #14
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0011      	movs	r1, r2
 8004d14:	0018      	movs	r0, r3
 8004d16:	f001 fa5c 	bl	80061d2 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	2385      	movs	r3, #133	; 0x85
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	58d3      	ldr	r3, [r2, r3]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	0010      	movs	r0, r2
 8004d2a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 fc7c 	bl	800562c <USBD_CtlSendStatus>
      break;
 8004d34:	e007      	b.n	8004d46 <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 fb8b 	bl	8005458 <USBD_CtlError>
      break;    
 8004d42:	e000      	b.n	8004d46 <USBD_StdEPReq+0xe4>
      break;	
 8004d44:	46c0      	nop			; (mov r8, r8)
    break;
 8004d46:	e09b      	b.n	8004e80 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	23fe      	movs	r3, #254	; 0xfe
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d002      	beq.n	8004d5a <USBD_StdEPReq+0xf8>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d013      	beq.n	8004d80 <USBD_StdEPReq+0x11e>
 8004d58:	e032      	b.n	8004dc0 <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004d5a:	230e      	movs	r3, #14
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d034      	beq.n	8004dce <USBD_StdEPReq+0x16c>
 8004d64:	230e      	movs	r3, #14
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	d02f      	beq.n	8004dce <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 8004d6e:	230e      	movs	r3, #14
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f001 fa2a 	bl	80061d2 <USBD_LL_StallEP>
      break;	
 8004d7e:	e026      	b.n	8004dce <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	885b      	ldrh	r3, [r3, #2]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d124      	bne.n	8004dd2 <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 8004d88:	230e      	movs	r3, #14
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	227f      	movs	r2, #127	; 0x7f
 8004d90:	4013      	ands	r3, r2
 8004d92:	d010      	beq.n	8004db6 <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004d94:	230e      	movs	r3, #14
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0011      	movs	r1, r2
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f001 fa43 	bl	800622a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	2385      	movs	r3, #133	; 0x85
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	58d3      	ldr	r3, [r2, r3]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	0010      	movs	r0, r2
 8004db4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 fc37 	bl	800562c <USBD_CtlSendStatus>
      break;
 8004dbe:	e008      	b.n	8004dd2 <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fb46 	bl	8005458 <USBD_CtlError>
      break;    
 8004dcc:	e002      	b.n	8004dd4 <USBD_StdEPReq+0x172>
      break;	
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	e056      	b.n	8004e80 <USBD_StdEPReq+0x21e>
      break;
 8004dd2:	46c0      	nop			; (mov r8, r8)
    break;
 8004dd4:	e054      	b.n	8004e80 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	23fe      	movs	r3, #254	; 0xfe
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d002      	beq.n	8004de8 <USBD_StdEPReq+0x186>
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d00f      	beq.n	8004e06 <USBD_StdEPReq+0x1a4>
 8004de6:	e042      	b.n	8004e6e <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 8004de8:	230e      	movs	r3, #14
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	227f      	movs	r2, #127	; 0x7f
 8004df0:	4013      	ands	r3, r2
 8004df2:	d043      	beq.n	8004e7c <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 8004df4:	230e      	movs	r3, #14
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f001 f9e7 	bl	80061d2 <USBD_LL_StallEP>
      break;	
 8004e04:	e03a      	b.n	8004e7c <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004e06:	230e      	movs	r3, #14
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da0a      	bge.n	8004e28 <USBD_StdEPReq+0x1c6>
 8004e12:	230e      	movs	r3, #14
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	227f      	movs	r2, #127	; 0x7f
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	3304      	adds	r3, #4
 8004e26:	e009      	b.n	8004e3c <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004e28:	230e      	movs	r3, #14
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	227f      	movs	r2, #127	; 0x7f
 8004e30:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004e32:	3310      	adds	r3, #16
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	18d3      	adds	r3, r2, r3
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004e3e:	230e      	movs	r3, #14
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0011      	movs	r1, r2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f001 fa1a 	bl	8006282 <USBD_LL_IsStallEP>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d003      	beq.n	8004e5a <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e002      	b.n	8004e60 <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004e60:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 fb76 	bl	8005558 <USBD_CtlSendData>
      break;
 8004e6c:	e007      	b.n	8004e7e <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 faef 	bl	8005458 <USBD_CtlError>
      break;
 8004e7a:	e000      	b.n	8004e7e <USBD_StdEPReq+0x21c>
      break;	
 8004e7c:	46c0      	nop			; (mov r8, r8)
    break;
 8004e7e:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	885b      	ldrh	r3, [r3, #2]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d900      	bls.n	8004ea8 <USBD_GetDescriptor+0x18>
 8004ea6:	e0ce      	b.n	8005046 <USBD_GetDescriptor+0x1b6>
 8004ea8:	009a      	lsls	r2, r3, #2
 8004eaa:	4b7c      	ldr	r3, [pc, #496]	; (800509c <USBD_GetDescriptor+0x20c>)
 8004eac:	18d3      	adds	r3, r2, r3
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	2384      	movs	r3, #132	; 0x84
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	58d3      	ldr	r3, [r2, r3]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	7c12      	ldrb	r2, [r2, #16]
 8004ec0:	210a      	movs	r1, #10
 8004ec2:	1879      	adds	r1, r7, r1
 8004ec4:	0010      	movs	r0, r2
 8004ec6:	4798      	blx	r3
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]
    break;
 8004ecc:	e0c2      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7c1b      	ldrb	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	2385      	movs	r3, #133	; 0x85
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	58d3      	ldr	r3, [r2, r3]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	220a      	movs	r2, #10
 8004ee2:	18ba      	adds	r2, r7, r2
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	4798      	blx	r3
 8004ee8:	0003      	movs	r3, r0
 8004eea:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004ef4:	e0ae      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	2385      	movs	r3, #133	; 0x85
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	58d3      	ldr	r3, [r2, r3]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	220a      	movs	r2, #10
 8004f02:	18ba      	adds	r2, r7, r2
 8004f04:	0010      	movs	r0, r2
 8004f06:	4798      	blx	r3
 8004f08:	0003      	movs	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	2202      	movs	r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
    break;
 8004f14:	e09e      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	885b      	ldrh	r3, [r3, #2]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d858      	bhi.n	8004fd2 <USBD_GetDescriptor+0x142>
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	4b5f      	ldr	r3, [pc, #380]	; (80050a0 <USBD_GetDescriptor+0x210>)
 8004f24:	18d3      	adds	r3, r2, r3
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	2384      	movs	r3, #132	; 0x84
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	58d3      	ldr	r3, [r2, r3]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	7c12      	ldrb	r2, [r2, #16]
 8004f38:	210a      	movs	r1, #10
 8004f3a:	1879      	adds	r1, r7, r1
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	4798      	blx	r3
 8004f40:	0003      	movs	r3, r0
 8004f42:	60fb      	str	r3, [r7, #12]
      break;
 8004f44:	e04c      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	2384      	movs	r3, #132	; 0x84
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	58d3      	ldr	r3, [r2, r3]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	7c12      	ldrb	r2, [r2, #16]
 8004f54:	210a      	movs	r1, #10
 8004f56:	1879      	adds	r1, r7, r1
 8004f58:	0010      	movs	r0, r2
 8004f5a:	4798      	blx	r3
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	60fb      	str	r3, [r7, #12]
      break;
 8004f60:	e03e      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	2384      	movs	r3, #132	; 0x84
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	58d3      	ldr	r3, [r2, r3]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	7c12      	ldrb	r2, [r2, #16]
 8004f70:	210a      	movs	r1, #10
 8004f72:	1879      	adds	r1, r7, r1
 8004f74:	0010      	movs	r0, r2
 8004f76:	4798      	blx	r3
 8004f78:	0003      	movs	r3, r0
 8004f7a:	60fb      	str	r3, [r7, #12]
      break;
 8004f7c:	e030      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	2384      	movs	r3, #132	; 0x84
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	58d3      	ldr	r3, [r2, r3]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	7c12      	ldrb	r2, [r2, #16]
 8004f8c:	210a      	movs	r1, #10
 8004f8e:	1879      	adds	r1, r7, r1
 8004f90:	0010      	movs	r0, r2
 8004f92:	4798      	blx	r3
 8004f94:	0003      	movs	r3, r0
 8004f96:	60fb      	str	r3, [r7, #12]
      break;
 8004f98:	e022      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	2384      	movs	r3, #132	; 0x84
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	58d3      	ldr	r3, [r2, r3]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	7c12      	ldrb	r2, [r2, #16]
 8004fa8:	210a      	movs	r1, #10
 8004faa:	1879      	adds	r1, r7, r1
 8004fac:	0010      	movs	r0, r2
 8004fae:	4798      	blx	r3
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	60fb      	str	r3, [r7, #12]
      break;
 8004fb4:	e014      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	2384      	movs	r3, #132	; 0x84
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	58d3      	ldr	r3, [r2, r3]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	7c12      	ldrb	r2, [r2, #16]
 8004fc4:	210a      	movs	r1, #10
 8004fc6:	1879      	adds	r1, r7, r1
 8004fc8:	0010      	movs	r0, r2
 8004fca:	4798      	blx	r3
 8004fcc:	0003      	movs	r3, r0
 8004fce:	60fb      	str	r3, [r7, #12]
      break;
 8004fd0:	e006      	b.n	8004fe0 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f000 fa3d 	bl	8005458 <USBD_CtlError>
      return;
 8004fde:	e059      	b.n	8005094 <USBD_GetDescriptor+0x204>
#endif   
    }
    break;
 8004fe0:	e038      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7c1b      	ldrb	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	2385      	movs	r3, #133	; 0x85
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	58d3      	ldr	r3, [r2, r3]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	220a      	movs	r2, #10
 8004ff6:	18ba      	adds	r2, r7, r2
 8004ff8:	0010      	movs	r0, r2
 8004ffa:	4798      	blx	r3
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	60fb      	str	r3, [r7, #12]
      break;
 8005000:	e028      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f000 fa25 	bl	8005458 <USBD_CtlError>
      return;
 800500e:	e041      	b.n	8005094 <USBD_GetDescriptor+0x204>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	7c1b      	ldrb	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10f      	bne.n	8005038 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	2385      	movs	r3, #133	; 0x85
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	58d3      	ldr	r3, [r2, r3]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	220a      	movs	r2, #10
 8005024:	18ba      	adds	r2, r7, r2
 8005026:	0010      	movs	r0, r2
 8005028:	4798      	blx	r3
 800502a:	0003      	movs	r3, r0
 800502c:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	2207      	movs	r2, #7
 8005034:	701a      	strb	r2, [r3, #0]
      break; 
 8005036:	e00d      	b.n	8005054 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fa0a 	bl	8005458 <USBD_CtlError>
      return;
 8005044:	e026      	b.n	8005094 <USBD_GetDescriptor+0x204>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f000 fa03 	bl	8005458 <USBD_CtlError>
    return;
 8005052:	e01f      	b.n	8005094 <USBD_GetDescriptor+0x204>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005054:	230a      	movs	r3, #10
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01a      	beq.n	8005094 <USBD_GetDescriptor+0x204>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	88db      	ldrh	r3, [r3, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <USBD_GetDescriptor+0x204>
  {
    
    len = MIN(len , req->wLength);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	88da      	ldrh	r2, [r3, #6]
 800506a:	230a      	movs	r3, #10
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	1c18      	adds	r0, r3, #0
 8005072:	1c11      	adds	r1, r2, #0
 8005074:	b28a      	uxth	r2, r1
 8005076:	b283      	uxth	r3, r0
 8005078:	429a      	cmp	r2, r3
 800507a:	d900      	bls.n	800507e <USBD_GetDescriptor+0x1ee>
 800507c:	1c01      	adds	r1, r0, #0
 800507e:	b28a      	uxth	r2, r1
 8005080:	210a      	movs	r1, #10
 8005082:	187b      	adds	r3, r7, r1
 8005084:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8005086:	187b      	adds	r3, r7, r1
 8005088:	881a      	ldrh	r2, [r3, #0]
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 fa62 	bl	8005558 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005094:	46bd      	mov	sp, r7
 8005096:	b004      	add	sp, #16
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	08006c74 	.word	0x08006c74
 80050a0:	08006c94 	.word	0x08006c94

080050a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	889b      	ldrh	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d13a      	bne.n	800512c <USBD_SetAddress+0x88>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88db      	ldrh	r3, [r3, #6]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d136      	bne.n	800512c <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	885b      	ldrh	r3, [r3, #2]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	230f      	movs	r3, #15
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	217f      	movs	r1, #127	; 0x7f
 80050ca:	400a      	ands	r2, r1
 80050cc:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	23fe      	movs	r3, #254	; 0xfe
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d106      	bne.n	80050e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	0011      	movs	r1, r2
 80050e0:	0018      	movs	r0, r3
 80050e2:	f000 f9b9 	bl	8005458 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80050e6:	e027      	b.n	8005138 <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	240f      	movs	r4, #15
 80050ec:	1939      	adds	r1, r7, r4
 80050ee:	23ff      	movs	r3, #255	; 0xff
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	7809      	ldrb	r1, [r1, #0]
 80050f4:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80050f6:	193b      	adds	r3, r7, r4
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f001 f8f0 	bl	80062e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 fa90 	bl	800562c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800510c:	193b      	adds	r3, r7, r4
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	23fe      	movs	r3, #254	; 0xfe
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	2102      	movs	r1, #2
 800511c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800511e:	e00b      	b.n	8005138 <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	23fe      	movs	r3, #254	; 0xfe
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2101      	movs	r1, #1
 8005128:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800512a:	e005      	b.n	8005138 <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0011      	movs	r1, r2
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f990 	bl	8005458 <USBD_CtlError>
  } 
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b005      	add	sp, #20
 800513e:	bd90      	pop	{r4, r7, pc}

08005140 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	885b      	ldrh	r3, [r3, #2]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b48      	ldr	r3, [pc, #288]	; (8005274 <USBD_SetConfig+0x134>)
 8005152:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005154:	4b47      	ldr	r3, [pc, #284]	; (8005274 <USBD_SetConfig+0x134>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d906      	bls.n	800516a <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0011      	movs	r1, r2
 8005162:	0018      	movs	r0, r3
 8005164:	f000 f978 	bl	8005458 <USBD_CtlError>
 8005168:	e081      	b.n	800526e <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	23fe      	movs	r3, #254	; 0xfe
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d002      	beq.n	800517c <USBD_SetConfig+0x3c>
 8005176:	2b03      	cmp	r3, #3
 8005178:	d029      	beq.n	80051ce <USBD_SetConfig+0x8e>
 800517a:	e071      	b.n	8005260 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800517c:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <USBD_SetConfig+0x134>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01f      	beq.n	80051c4 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005184:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <USBD_SetConfig+0x134>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	001a      	movs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	23fe      	movs	r3, #254	; 0xfe
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2103      	movs	r1, #3
 8005196:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005198:	4b36      	ldr	r3, [pc, #216]	; (8005274 <USBD_SetConfig+0x134>)
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0011      	movs	r1, r2
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7ff fa9c 	bl	80046de <USBD_SetClassConfig>
 80051a6:	0003      	movs	r3, r0
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d106      	bne.n	80051ba <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f950 	bl	8005458 <USBD_CtlError>
          return;
 80051b8:	e059      	b.n	800526e <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 fa35 	bl	800562c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80051c2:	e054      	b.n	800526e <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	0018      	movs	r0, r3
 80051c8:	f000 fa30 	bl	800562c <USBD_CtlSendStatus>
      break;
 80051cc:	e04f      	b.n	800526e <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <USBD_SetConfig+0x134>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d115      	bne.n	8005202 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	23fe      	movs	r3, #254	; 0xfe
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2102      	movs	r1, #2
 80051de:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <USBD_SetConfig+0x134>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	001a      	movs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <USBD_SetConfig+0x134>)
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0011      	movs	r1, r2
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7ff fa9b 	bl	800472e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fa16 	bl	800562c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005200:	e035      	b.n	800526e <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <USBD_SetConfig+0x134>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	001a      	movs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d022      	beq.n	8005256 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0011      	movs	r1, r2
 800521a:	0018      	movs	r0, r3
 800521c:	f7ff fa87 	bl	800472e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <USBD_SetConfig+0x134>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	001a      	movs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <USBD_SetConfig+0x134>)
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0011      	movs	r1, r2
 8005232:	0018      	movs	r0, r3
 8005234:	f7ff fa53 	bl	80046de <USBD_SetClassConfig>
 8005238:	0003      	movs	r3, r0
 800523a:	2b02      	cmp	r3, #2
 800523c:	d106      	bne.n	800524c <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	0011      	movs	r1, r2
 8005244:	0018      	movs	r0, r3
 8005246:	f000 f907 	bl	8005458 <USBD_CtlError>
          return;
 800524a:	e010      	b.n	800526e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0018      	movs	r0, r3
 8005250:	f000 f9ec 	bl	800562c <USBD_CtlSendStatus>
      break;
 8005254:	e00b      	b.n	800526e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 f9e7 	bl	800562c <USBD_CtlSendStatus>
      break;
 800525e:	e006      	b.n	800526e <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0011      	movs	r1, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f8f6 	bl	8005458 <USBD_CtlError>
      break;
 800526c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000195 	.word	0x20000195

08005278 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	88db      	ldrh	r3, [r3, #6]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d006      	beq.n	8005298 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f000 f8e1 	bl	8005458 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005296:	e023      	b.n	80052e0 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	23fe      	movs	r3, #254	; 0xfe
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d002      	beq.n	80052aa <USBD_GetConfig+0x32>
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d00c      	beq.n	80052c2 <USBD_GetConfig+0x4a>
 80052a8:	e013      	b.n	80052d2 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3308      	adds	r3, #8
 80052b4:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	0018      	movs	r0, r3
 80052bc:	f000 f94c 	bl	8005558 <USBD_CtlSendData>
      break;
 80052c0:	e00e      	b.n	80052e0 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	0018      	movs	r0, r3
 80052cc:	f000 f944 	bl	8005558 <USBD_CtlSendData>
      break;
 80052d0:	e006      	b.n	80052e0 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	0011      	movs	r1, r2
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 f8bd 	bl	8005458 <USBD_CtlError>
      break;
 80052de:	46c0      	nop			; (mov r8, r8)
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	23fe      	movs	r3, #254	; 0xfe
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	5cd3      	ldrb	r3, [r2, r3]
 80052fa:	3b02      	subs	r3, #2
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d817      	bhi.n	8005330 <USBD_GetStatus+0x48>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	2381      	movs	r3, #129	; 0x81
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	58d3      	ldr	r3, [r2, r3]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2202      	movs	r2, #2
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	330c      	adds	r3, #12
 8005322:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f915 	bl	8005558 <USBD_CtlSendData>
                      2);
    break;
 800532e:	e006      	b.n	800533e <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0011      	movs	r1, r2
 8005336:	0018      	movs	r0, r3
 8005338:	f000 f88e 	bl	8005458 <USBD_CtlError>
    break;
 800533c:	46c0      	nop			; (mov r8, r8)
  }
}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b002      	add	sp, #8
 8005344:	bd80      	pop	{r7, pc}

08005346 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	885b      	ldrh	r3, [r3, #2]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d111      	bne.n	800537c <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	2381      	movs	r3, #129	; 0x81
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	2101      	movs	r1, #1
 8005360:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	2385      	movs	r3, #133	; 0x85
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	58d3      	ldr	r3, [r2, r3]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	0010      	movs	r0, r2
 8005372:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 f958 	bl	800562c <USBD_CtlSendStatus>
  }

}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	23fe      	movs	r3, #254	; 0xfe
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	3b02      	subs	r3, #2
 8005398:	2b01      	cmp	r3, #1
 800539a:	d816      	bhi.n	80053ca <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	885b      	ldrh	r3, [r3, #2]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d119      	bne.n	80053d8 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	2381      	movs	r3, #129	; 0x81
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	2100      	movs	r1, #0
 80053ac:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	2385      	movs	r3, #133	; 0x85
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	58d3      	ldr	r3, [r2, r3]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	0010      	movs	r0, r2
 80053be:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f932 	bl	800562c <USBD_CtlSendStatus>
    }
    break;
 80053c8:	e006      	b.n	80053d8 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0011      	movs	r1, r2
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f841 	bl	8005458 <USBD_CtlError>
    break;
 80053d6:	e000      	b.n	80053da <USBD_ClrFeature+0x56>
    break;
 80053d8:	46c0      	nop			; (mov r8, r8)
  }
}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b002      	add	sp, #8
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	785a      	ldrb	r2, [r3, #1]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	3302      	adds	r3, #2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b29a      	uxth	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	3303      	adds	r3, #3
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	b29b      	uxth	r3, r3
 8005410:	18d3      	adds	r3, r2, r3
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3304      	adds	r3, #4
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b29a      	uxth	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3305      	adds	r3, #5
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	b29b      	uxth	r3, r3
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	3306      	adds	r3, #6
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b29a      	uxth	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3307      	adds	r3, #7
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	b29b      	uxth	r3, r3
 8005448:	18d3      	adds	r3, r2, r3
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	80da      	strh	r2, [r3, #6]

}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}

08005458 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	0018      	movs	r0, r3
 8005468:	f000 feb3 	bl	80061d2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2100      	movs	r1, #0
 8005470:	0018      	movs	r0, r3
 8005472:	f000 feae 	bl	80061d2 <USBD_LL_StallEP>
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	46bd      	mov	sp, r7
 800547a:	b002      	add	sp, #8
 800547c:	bd80      	pop	{r7, pc}

0800547e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800547e:	b590      	push	{r4, r7, lr}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800548a:	2317      	movs	r3, #23
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d03e      	beq.n	8005516 <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	0018      	movs	r0, r3
 800549c:	f000 f83f 	bl	800551e <USBD_GetLen>
 80054a0:	0003      	movs	r3, r0
 80054a2:	3301      	adds	r3, #1
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	18db      	adds	r3, r3, r3
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8819      	ldrh	r1, [r3, #0]
 80054b2:	2417      	movs	r4, #23
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	193a      	adds	r2, r7, r4
 80054ba:	1c58      	adds	r0, r3, #1
 80054bc:	7010      	strb	r0, [r2, #0]
 80054be:	001a      	movs	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	b2ca      	uxtb	r2, r1
 80054c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80054c8:	193b      	adds	r3, r7, r4
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	193a      	adds	r2, r7, r4
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	7011      	strb	r1, [r2, #0]
 80054d2:	001a      	movs	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	2203      	movs	r2, #3
 80054da:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80054dc:	e017      	b.n	800550e <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	60fa      	str	r2, [r7, #12]
 80054e4:	2417      	movs	r4, #23
 80054e6:	193a      	adds	r2, r7, r4
 80054e8:	7812      	ldrb	r2, [r2, #0]
 80054ea:	1939      	adds	r1, r7, r4
 80054ec:	1c50      	adds	r0, r2, #1
 80054ee:	7008      	strb	r0, [r1, #0]
 80054f0:	0011      	movs	r1, r2
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	1852      	adds	r2, r2, r1
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80054fa:	193b      	adds	r3, r7, r4
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	193a      	adds	r2, r7, r4
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	7011      	strb	r1, [r2, #0]
 8005504:	001a      	movs	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	189b      	adds	r3, r3, r2
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e3      	bne.n	80054de <USBD_GetString+0x60>
    }
  } 
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b007      	add	sp, #28
 800551c:	bd90      	pop	{r4, r7, pc}

0800551e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 800552e:	e008      	b.n	8005542 <USBD_GetLen+0x24>
    {
        len++;
 8005530:	210f      	movs	r1, #15
 8005532:	187b      	adds	r3, r7, r1
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	187b      	adds	r3, r7, r1
 8005538:	3201      	adds	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
        buf++;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f2      	bne.n	8005530 <USBD_GetLen+0x12>
    }

    return len;
 800554a:	230f      	movs	r3, #15
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	781b      	ldrb	r3, [r3, #0]
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b004      	add	sp, #16
 8005556:	bd80      	pop	{r7, pc}

08005558 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	1dbb      	adds	r3, r7, #6
 8005564:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	23fa      	movs	r3, #250	; 0xfa
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2102      	movs	r1, #2
 800556e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005578:	1dbb      	adds	r3, r7, #6
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005580:	1dbb      	adds	r3, r7, #6
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	2100      	movs	r1, #0
 800558a:	f000 fed7 	bl	800633c <USBD_LL_Transmit>
  
  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b004      	add	sp, #16
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	1dbb      	adds	r3, r7, #6
 80055a4:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80055a6:	1dbb      	adds	r3, r7, #6
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	2100      	movs	r1, #0
 80055b0:	f000 fec4 	bl	800633c <USBD_LL_Transmit>
  
  return USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b004      	add	sp, #16
 80055bc:	bd80      	pop	{r7, pc}

080055be <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	23fa      	movs	r3, #250	; 0xfa
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2103      	movs	r1, #3
 80055d4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80055d6:	1dbb      	adds	r3, r7, #6
 80055d8:	8819      	ldrh	r1, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	2384      	movs	r3, #132	; 0x84
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80055e2:	1dbb      	adds	r3, r7, #6
 80055e4:	8819      	ldrh	r1, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	2386      	movs	r3, #134	; 0x86
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	2100      	movs	r1, #0
 80055f8:	f000 fed8 	bl	80063ac <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b004      	add	sp, #16
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	1dbb      	adds	r3, r7, #6
 8005612:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8005614:	1dbb      	adds	r3, r7, #6
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	2100      	movs	r1, #0
 800561e:	f000 fec5 	bl	80063ac <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b004      	add	sp, #16
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	23fa      	movs	r3, #250	; 0xfa
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	2104      	movs	r1, #4
 800563c:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	2300      	movs	r3, #0
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	f000 fe79 	bl	800633c <USBD_LL_Transmit>
  
  return USBD_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b002      	add	sp, #8
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	23fa      	movs	r3, #250	; 0xfa
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	2105      	movs	r1, #5
 8005664:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	2300      	movs	r3, #0
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	f000 fe9d 	bl	80063ac <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}

0800567c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005680:	f7fa fdce 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005684:	f000 f820 	bl	80056c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005688:	f000 f8ca 	bl	8005820 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800568c:	f000 fa92 	bl	8005bb4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8005690:	f000 f86e 	bl	8005770 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uv_led_init();
 8005694:	f001 f856 	bl	8006744 <uv_led_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == GPIO_PIN_RESET)
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	005a      	lsls	r2, r3, #1
 800569c:	2390      	movs	r3, #144	; 0x90
 800569e:	05db      	lsls	r3, r3, #23
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f7fb fa1c 	bl	8000ae0 <HAL_GPIO_ReadPin>
 80056a8:	1e03      	subs	r3, r0, #0
 80056aa:	d1f5      	bne.n	8005698 <main+0x1c>
	  {
		  enable_global = !enable_global;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <main+0x48>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	425a      	negs	r2, r3
 80056b2:	4153      	adcs	r3, r2
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	001a      	movs	r2, r3
 80056b8:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <main+0x48>)
 80056ba:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(200);
 80056bc:	20c8      	movs	r0, #200	; 0xc8
 80056be:	f7fa fdd9 	bl	8000274 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == GPIO_PIN_RESET)
 80056c2:	e7e9      	b.n	8005698 <main+0x1c>
 80056c4:	200003e0 	.word	0x200003e0

080056c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b099      	sub	sp, #100	; 0x64
 80056cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056ce:	242c      	movs	r4, #44	; 0x2c
 80056d0:	193b      	adds	r3, r7, r4
 80056d2:	0018      	movs	r0, r3
 80056d4:	2334      	movs	r3, #52	; 0x34
 80056d6:	001a      	movs	r2, r3
 80056d8:	2100      	movs	r1, #0
 80056da:	f001 fa73 	bl	8006bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056de:	231c      	movs	r3, #28
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	0018      	movs	r0, r3
 80056e4:	2310      	movs	r3, #16
 80056e6:	001a      	movs	r2, r3
 80056e8:	2100      	movs	r1, #0
 80056ea:	f001 fa6b 	bl	8006bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	0018      	movs	r0, r3
 80056f2:	2318      	movs	r3, #24
 80056f4:	001a      	movs	r2, r3
 80056f6:	2100      	movs	r1, #0
 80056f8:	f001 fa64 	bl	8006bc4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	2220      	movs	r2, #32
 8005700:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005702:	193b      	adds	r3, r7, r4
 8005704:	2201      	movs	r2, #1
 8005706:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005708:	193b      	adds	r3, r7, r4
 800570a:	2200      	movs	r2, #0
 800570c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800570e:	193b      	adds	r3, r7, r4
 8005710:	0018      	movs	r0, r3
 8005712:	f7fd fb09 	bl	8002d28 <HAL_RCC_OscConfig>
 8005716:	1e03      	subs	r3, r0, #0
 8005718:	d001      	beq.n	800571e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800571a:	f000 f931 	bl	8005980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800571e:	211c      	movs	r1, #28
 8005720:	187b      	adds	r3, r7, r1
 8005722:	2207      	movs	r2, #7
 8005724:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8005726:	187b      	adds	r3, r7, r1
 8005728:	2203      	movs	r2, #3
 800572a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800572c:	187b      	adds	r3, r7, r1
 800572e:	2200      	movs	r2, #0
 8005730:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005732:	187b      	adds	r3, r7, r1
 8005734:	2200      	movs	r2, #0
 8005736:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005738:	187b      	adds	r3, r7, r1
 800573a:	2101      	movs	r1, #1
 800573c:	0018      	movs	r0, r3
 800573e:	f7fd fe53 	bl	80033e8 <HAL_RCC_ClockConfig>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d001      	beq.n	800574a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005746:	f000 f91b 	bl	8005980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	0292      	lsls	r2, r2, #10
 8005750:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	2200      	movs	r2, #0
 8005756:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	0018      	movs	r0, r3
 800575c:	f7fe f818 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d001      	beq.n	8005768 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8005764:	f000 f90c 	bl	8005980 <Error_Handler>
  }
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b019      	add	sp, #100	; 0x64
 800576e:	bd90      	pop	{r4, r7, pc}

08005770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005776:	2308      	movs	r3, #8
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	0018      	movs	r0, r3
 800577c:	2310      	movs	r3, #16
 800577e:	001a      	movs	r2, r3
 8005780:	2100      	movs	r1, #0
 8005782:	f001 fa1f 	bl	8006bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005786:	003b      	movs	r3, r7
 8005788:	0018      	movs	r0, r3
 800578a:	2308      	movs	r3, #8
 800578c:	001a      	movs	r2, r3
 800578e:	2100      	movs	r1, #0
 8005790:	f001 fa18 	bl	8006bc4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005794:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <MX_TIM3_Init+0xa0>)
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <MX_TIM3_Init+0xa4>)
 8005798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <MX_TIM3_Init+0xa0>)
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <MX_TIM3_Init+0xa8>)
 800579e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <MX_TIM3_Init+0xac>)
 80057aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7fe f8d6 	bl	800396c <HAL_TIM_Base_Init>
 80057c0:	1e03      	subs	r3, r0, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80057c4:	f000 f8dc 	bl	8005980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057c8:	2108      	movs	r1, #8
 80057ca:	187b      	adds	r3, r7, r1
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	0152      	lsls	r2, r2, #5
 80057d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80057d2:	187a      	adds	r2, r7, r1
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fe fa23 	bl	8003c24 <HAL_TIM_ConfigClockSource>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80057e2:	f000 f8cd 	bl	8005980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057e6:	003b      	movs	r3, r7
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ec:	003b      	movs	r3, r7
 80057ee:	2200      	movs	r2, #0
 80057f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057f2:	003a      	movs	r2, r7
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <MX_TIM3_Init+0xa0>)
 80057f6:	0011      	movs	r1, r2
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7fe fc35 	bl	8004068 <HAL_TIMEx_MasterConfigSynchronization>
 80057fe:	1e03      	subs	r3, r0, #0
 8005800:	d001      	beq.n	8005806 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005802:	f000 f8bd 	bl	8005980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	b006      	add	sp, #24
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	2000040c 	.word	0x2000040c
 8005814:	40000400 	.word	0x40000400
 8005818:	0000bb80 	.word	0x0000bb80
 800581c:	00002710 	.word	0x00002710

08005820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005826:	240c      	movs	r4, #12
 8005828:	193b      	adds	r3, r7, r4
 800582a:	0018      	movs	r0, r3
 800582c:	2314      	movs	r3, #20
 800582e:	001a      	movs	r2, r3
 8005830:	2100      	movs	r1, #0
 8005832:	f001 f9c7 	bl	8006bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <MX_GPIO_Init+0xd0>)
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <MX_GPIO_Init+0xd0>)
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	03c9      	lsls	r1, r1, #15
 8005840:	430a      	orrs	r2, r1
 8005842:	615a      	str	r2, [r3, #20]
 8005844:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <MX_GPIO_Init+0xd0>)
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	03db      	lsls	r3, r3, #15
 800584c:	4013      	ands	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <MX_GPIO_Init+0xd0>)
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <MX_GPIO_Init+0xd0>)
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	0289      	lsls	r1, r1, #10
 800585c:	430a      	orrs	r2, r1
 800585e:	615a      	str	r2, [r3, #20]
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <MX_GPIO_Init+0xd0>)
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	4013      	ands	r3, r2
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin 
 800586e:	2390      	movs	r3, #144	; 0x90
 8005870:	05db      	lsls	r3, r3, #23
 8005872:	2200      	movs	r2, #0
 8005874:	21ff      	movs	r1, #255	; 0xff
 8005876:	0018      	movs	r0, r3
 8005878:	f7fb f94f 	bl	8000b1a <HAL_GPIO_WritePin>
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : UV_LED_0_Pin UV_LED_1_Pin UV_LED_2_Pin UV_LED_3_Pin 
                           UV_LED_4_Pin UV_LED_5_Pin UV_LED_6_Pin UV_LED_7_Pin */
  GPIO_InitStruct.Pin = UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin 
 800587c:	193b      	adds	r3, r7, r4
 800587e:	22ff      	movs	r2, #255	; 0xff
 8005880:	601a      	str	r2, [r3, #0]
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005882:	193b      	adds	r3, r7, r4
 8005884:	2201      	movs	r2, #1
 8005886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005888:	193b      	adds	r3, r7, r4
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800588e:	193b      	adds	r3, r7, r4
 8005890:	2203      	movs	r2, #3
 8005892:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005894:	193a      	adds	r2, r7, r4
 8005896:	2390      	movs	r3, #144	; 0x90
 8005898:	05db      	lsls	r3, r3, #23
 800589a:	0011      	movs	r1, r2
 800589c:	0018      	movs	r0, r3
 800589e:	f7fa ffb3 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80058a2:	193b      	adds	r3, r7, r4
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	0052      	lsls	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	2200      	movs	r2, #0
 80058ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	2201      	movs	r2, #1
 80058b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80058b6:	193a      	adds	r2, r7, r4
 80058b8:	2390      	movs	r3, #144	; 0x90
 80058ba:	05db      	lsls	r3, r3, #23
 80058bc:	0011      	movs	r1, r2
 80058be:	0018      	movs	r0, r3
 80058c0:	f7fa ffa2 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80058c4:	0021      	movs	r1, r4
 80058c6:	187b      	adds	r3, r7, r1
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	00d2      	lsls	r2, r2, #3
 80058cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80058ce:	187b      	adds	r3, r7, r1
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <MX_GPIO_Init+0xd4>)
 80058d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	187b      	adds	r3, r7, r1
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80058da:	187a      	adds	r2, r7, r1
 80058dc:	2390      	movs	r3, #144	; 0x90
 80058de:	05db      	lsls	r3, r3, #23
 80058e0:	0011      	movs	r1, r2
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa ff90 	bl	8000808 <HAL_GPIO_Init>

}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b009      	add	sp, #36	; 0x24
 80058ee:	bd90      	pop	{r4, r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	10310000 	.word	0x10310000

080058f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d128      	bne.n	800595c <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		for (int i = 0; i < 8; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e022      	b.n	8005956 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	0052      	lsls	r2, r2, #1
 8005916:	5ad2      	ldrh	r2, [r2, r3]
 8005918:	4918      	ldr	r1, [pc, #96]	; (800597c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	18cb      	adds	r3, r1, r3
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	429a      	cmp	r2, r3
 8005924:	d30a      	bcc.n	800593c <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				uv_led_toggle(i);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	0018      	movs	r0, r3
 800592c:	f001 f8a6 	bl	8006a7c <uv_led_toggle>
				uv_led_counter[i] = 0;
 8005930:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	0052      	lsls	r2, r2, #1
 8005936:	2100      	movs	r1, #0
 8005938:	52d1      	strh	r1, [r2, r3]
 800593a:	e009      	b.n	8005950 <HAL_TIM_PeriodElapsedCallback+0x58>
			} else{
				uv_led_counter[i]++;
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	0052      	lsls	r2, r2, #1
 8005942:	5ad3      	ldrh	r3, [r2, r3]
 8005944:	3301      	adds	r3, #1
 8005946:	b299      	uxth	r1, r3
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	0052      	lsls	r2, r2, #1
 800594e:	52d1      	strh	r1, [r2, r3]
		for (int i = 0; i < 8; i++)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b07      	cmp	r3, #7
 800595a:	ddd9      	ble.n	8005910 <HAL_TIM_PeriodElapsedCallback+0x18>
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_TIM_PeriodElapsedCallback+0x72>
    HAL_IncTick();
 8005966:	f7fa fc6f 	bl	8000248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	40012c00 	.word	0x40012c00
 8005978:	20000464 	.word	0x20000464
 800597c:	20000404 	.word	0x20000404

08005980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_MspInit+0x44>)
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <HAL_MspInit+0x44>)
 8005998:	2101      	movs	r1, #1
 800599a:	430a      	orrs	r2, r1
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_MspInit+0x44>)
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2201      	movs	r2, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_MspInit+0x44>)
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <HAL_MspInit+0x44>)
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	0549      	lsls	r1, r1, #21
 80059b4:	430a      	orrs	r2, r1
 80059b6:	61da      	str	r2, [r3, #28]
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_MspInit+0x44>)
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	055b      	lsls	r3, r3, #21
 80059c0:	4013      	ands	r3, r2
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b002      	add	sp, #8
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_TIM_Base_MspInit+0x34>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10b      	bne.n	80059fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_TIM_Base_MspInit+0x38>)
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <HAL_TIM_Base_MspInit+0x38>)
 80059ec:	2102      	movs	r1, #2
 80059ee:	430a      	orrs	r2, r1
 80059f0:	61da      	str	r2, [r3, #28]
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_TIM_Base_MspInit+0x38>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	2202      	movs	r2, #2
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b004      	add	sp, #16
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40021000 	.word	0x40021000

08005a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	0019      	movs	r1, r3
 8005a26:	200d      	movs	r0, #13
 8005a28:	f7fa fcc6 	bl	80003b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8005a2c:	200d      	movs	r0, #13
 8005a2e:	f7fa fcd8 	bl	80003e2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005a32:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <HAL_InitTick+0xa8>)
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <HAL_InitTick+0xa8>)
 8005a38:	2180      	movs	r1, #128	; 0x80
 8005a3a:	0109      	lsls	r1, r1, #4
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	619a      	str	r2, [r3, #24]
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <HAL_InitTick+0xa8>)
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a4e:	230c      	movs	r3, #12
 8005a50:	18fa      	adds	r2, r7, r3
 8005a52:	2310      	movs	r3, #16
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7fd fe6f 	bl	800373c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a5e:	f7fd fe57 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8005a62:	0003      	movs	r3, r0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	4914      	ldr	r1, [pc, #80]	; (8005abc <HAL_InitTick+0xac>)
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fa fb4c 	bl	8000108 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	3b01      	subs	r3, #1
 8005a74:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <HAL_InitTick+0xb4>)
 8005a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005a7c:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a7e:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <HAL_InitTick+0xb8>)
 8005a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7fd ff68 	bl	800396c <HAL_TIM_Base_Init>
 8005a9c:	1e03      	subs	r3, r0, #0
 8005a9e:	d105      	bne.n	8005aac <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <HAL_InitTick+0xb0>)
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7fd ff8e 	bl	80039c4 <HAL_TIM_Base_Start_IT>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	e000      	b.n	8005aae <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b00a      	add	sp, #40	; 0x28
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	000f4240 	.word	0x000f4240
 8005ac0:	20000474 	.word	0x20000474
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	000003e7 	.word	0x000003e7

08005acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ada:	e7fe      	b.n	8005ada <HardFault_Handler+0x4>

08005adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005af4:	46c0      	nop			; (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fd ff77 	bl	80039f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	20000474 	.word	0x20000474

08005b14 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <USB_IRQHandler+0x14>)
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7fb f922 	bl	8000d64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	20000ad8 	.word	0x20000ad8

08005b2c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005b30:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <SystemInit+0x70>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <SystemInit+0x70>)
 8005b36:	2101      	movs	r1, #1
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <SystemInit+0x70>)
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <SystemInit+0x70>)
 8005b42:	4917      	ldr	r1, [pc, #92]	; (8005ba0 <SystemInit+0x74>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005b48:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <SystemInit+0x70>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <SystemInit+0x70>)
 8005b4e:	4915      	ldr	r1, [pc, #84]	; (8005ba4 <SystemInit+0x78>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005b54:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <SystemInit+0x70>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <SystemInit+0x70>)
 8005b5a:	4913      	ldr	r1, [pc, #76]	; (8005ba8 <SystemInit+0x7c>)
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <SystemInit+0x70>)
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <SystemInit+0x70>)
 8005b66:	4911      	ldr	r1, [pc, #68]	; (8005bac <SystemInit+0x80>)
 8005b68:	400a      	ands	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <SystemInit+0x70>)
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <SystemInit+0x70>)
 8005b72:	210f      	movs	r1, #15
 8005b74:	438a      	bics	r2, r1
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8005b78:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <SystemInit+0x70>)
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <SystemInit+0x70>)
 8005b7e:	490c      	ldr	r1, [pc, #48]	; (8005bb0 <SystemInit+0x84>)
 8005b80:	400a      	ands	r2, r1
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <SystemInit+0x70>)
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <SystemInit+0x70>)
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	438a      	bics	r2, r1
 8005b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005b90:	4b02      	ldr	r3, [pc, #8]	; (8005b9c <SystemInit+0x70>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]

}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	08ffb80c 	.word	0x08ffb80c
 8005ba4:	fef6ffff 	.word	0xfef6ffff
 8005ba8:	fffbffff 	.word	0xfffbffff
 8005bac:	ffc0ffff 	.word	0xffc0ffff
 8005bb0:	fffffe2c 	.word	0xfffffe2c

08005bb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005bb8:	4914      	ldr	r1, [pc, #80]	; (8005c0c <MX_USB_DEVICE_Init+0x58>)
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <MX_USB_DEVICE_Init+0x5c>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7fe fd25 	bl	800460e <USBD_Init>
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d001      	beq.n	8005bcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005bc8:	f7ff feda 	bl	8005980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bcc:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <MX_USB_DEVICE_Init+0x60>)
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <MX_USB_DEVICE_Init+0x5c>)
 8005bd0:	0011      	movs	r1, r2
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f7fe fd4c 	bl	8004670 <USBD_RegisterClass>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d001      	beq.n	8005be0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8005bdc:	f7ff fed0 	bl	8005980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005be0:	4a0d      	ldr	r2, [pc, #52]	; (8005c18 <MX_USB_DEVICE_Init+0x64>)
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <MX_USB_DEVICE_Init+0x5c>)
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7fe fc66 	bl	80044b8 <USBD_CDC_RegisterInterface>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d001      	beq.n	8005bf4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8005bf0:	f7ff fec6 	bl	8005980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <MX_USB_DEVICE_Init+0x5c>)
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fe fd5b 	bl	80046b2 <USBD_Start>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d001      	beq.n	8005c04 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8005c00:	f7ff febe 	bl	8005980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	20000124 	.word	0x20000124
 8005c10:	200004b4 	.word	0x200004b4
 8005c14:	2000000c 	.word	0x2000000c
 8005c18:	20000114 	.word	0x20000114

08005c1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <CDC_Init_FS+0x24>)
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <CDC_Init_FS+0x28>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fe fc62 	bl	80044f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c2c:	4a06      	ldr	r2, [pc, #24]	; (8005c48 <CDC_Init_FS+0x2c>)
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <CDC_Init_FS+0x28>)
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7fe fc78 	bl	8004528 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005c38:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	200008d8 	.word	0x200008d8
 8005c44:	200004b4 	.word	0x200004b4
 8005c48:	200006d8 	.word	0x200006d8

08005c4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005c50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6039      	str	r1, [r7, #0]
 8005c60:	0011      	movs	r1, r2
 8005c62:	1dfb      	adds	r3, r7, #7
 8005c64:	1c02      	adds	r2, r0, #0
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	1c0a      	adds	r2, r1, #0
 8005c6c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b23      	cmp	r3, #35	; 0x23
 8005c74:	d804      	bhi.n	8005c80 <CDC_Control_FS+0x28>
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <CDC_Control_FS+0x34>)
 8005c7a:	18d3      	adds	r3, r2, r3
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c80:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8005c82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08006cc4 	.word	0x08006cc4

08005c90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <CDC_Receive_FS+0x124>)
 8005c9e:	0011      	movs	r1, r2
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fe fc41 	bl	8004528 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ca6:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <CDC_Receive_FS+0x124>)
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7fe fc82 	bl	80045b2 <USBD_CDC_ReceivePacket>

	//usb_rx_buffer_length = &Len;
	//new_data_received = 1;
	if (UserRxBufferFS[0] == 0x90)
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b90      	cmp	r3, #144	; 0x90
 8005cb4:	d108      	bne.n	8005cc8 <CDC_Receive_FS+0x38>
	{
		//if (Len == 1)
		//{
		enable_global = !enable_global;
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <CDC_Receive_FS+0x12c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	425a      	negs	r2, r3
 8005cbc:	4153      	adcs	r3, r2
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <CDC_Receive_FS+0x12c>)
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e070      	b.n	8005daa <CDC_Receive_FS+0x11a>
		//}
	}
	else if (UserRxBufferFS[0] == 0x91)
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b91      	cmp	r3, #145	; 0x91
 8005cce:	d11d      	bne.n	8005d0c <CDC_Receive_FS+0x7c>
	{
		//if (Len == 9)
		//{
			for (uint8_t i = 0; i < 8; i ++)
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e012      	b.n	8005d00 <CDC_Receive_FS+0x70>
			{
				uv_led_enable(i, (uint8_t) UserRxBufferFS[i+1]);
 8005cda:	210f      	movs	r1, #15
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	4a35      	ldr	r2, [pc, #212]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005ce4:	5cd2      	ldrb	r2, [r2, r3]
 8005ce6:	000c      	movs	r4, r1
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fe3c 	bl	800696c <uv_led_enable>
			for (uint8_t i = 0; i < 8; i ++)
 8005cf4:	0021      	movs	r1, r4
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	3201      	adds	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	230f      	movs	r3, #15
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d9e7      	bls.n	8005cda <CDC_Receive_FS+0x4a>
 8005d0a:	e04e      	b.n	8005daa <CDC_Receive_FS+0x11a>
			}
		//}
	}
	else if (UserRxBufferFS[0] == 0x92)
 8005d0c:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b92      	cmp	r3, #146	; 0x92
 8005d12:	d11d      	bne.n	8005d50 <CDC_Receive_FS+0xc0>
	{
		//if (Len == 9)
		//{
			for (uint8_t i = 0; i < 8; i ++)
 8005d14:	230e      	movs	r3, #14
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e012      	b.n	8005d44 <CDC_Receive_FS+0xb4>
			{
				uv_led_set_period(i, (uint8_t) UserRxBufferFS[i+1]);
 8005d1e:	210e      	movs	r1, #14
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d28:	5cd2      	ldrb	r2, [r2, r3]
 8005d2a:	000c      	movs	r4, r1
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fda8 	bl	8006888 <uv_led_set_period>
			for (uint8_t i = 0; i < 8; i ++)
 8005d38:	0021      	movs	r1, r4
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	3201      	adds	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	230e      	movs	r3, #14
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b07      	cmp	r3, #7
 8005d4c:	d9e7      	bls.n	8005d1e <CDC_Receive_FS+0x8e>
 8005d4e:	e02c      	b.n	8005daa <CDC_Receive_FS+0x11a>
			}
		//}
	} else if (UserRxBufferFS[0] == 0x93)
 8005d50:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b93      	cmp	r3, #147	; 0x93
 8005d56:	d108      	bne.n	8005d6a <CDC_Receive_FS+0xda>
	{
		uv_led_enable((uint8_t)UserRxBufferFS[1],(uint8_t) UserRxBufferFS[2]);
 8005d58:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d5a:	785a      	ldrb	r2, [r3, #1]
 8005d5c:	4b16      	ldr	r3, [pc, #88]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d5e:	789b      	ldrb	r3, [r3, #2]
 8005d60:	0019      	movs	r1, r3
 8005d62:	0010      	movs	r0, r2
 8005d64:	f000 fe02 	bl	800696c <uv_led_enable>
 8005d68:	e01f      	b.n	8005daa <CDC_Receive_FS+0x11a>
	} else if (UserRxBufferFS[0] == 0x94)
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b94      	cmp	r3, #148	; 0x94
 8005d70:	d108      	bne.n	8005d84 <CDC_Receive_FS+0xf4>
	{
		uv_led_set_period((uint8_t)UserRxBufferFS[1],(uint8_t) UserRxBufferFS[2]);
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d74:	785a      	ldrb	r2, [r3, #1]
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d78:	789b      	ldrb	r3, [r3, #2]
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	0010      	movs	r0, r2
 8005d7e:	f000 fd83 	bl	8006888 <uv_led_set_period>
 8005d82:	e012      	b.n	8005daa <CDC_Receive_FS+0x11a>
	} else if (UserRxBufferFS[0] == 0x95)
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b95      	cmp	r3, #149	; 0x95
 8005d8a:	d105      	bne.n	8005d98 <CDC_Receive_FS+0x108>
	{
		CDC_Transmit_FS(uv_led_enabled, 8);
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <CDC_Receive_FS+0x130>)
 8005d8e:	2108      	movs	r1, #8
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f819 	bl	8005dc8 <CDC_Transmit_FS>
 8005d96:	e008      	b.n	8005daa <CDC_Receive_FS+0x11a>
	} else if (UserRxBufferFS[0] == 0x96)
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <CDC_Receive_FS+0x128>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b96      	cmp	r3, #150	; 0x96
 8005d9e:	d104      	bne.n	8005daa <CDC_Receive_FS+0x11a>
	{
		CDC_Transmit_FS(uv_led_periods_ms, 8);
 8005da0:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <CDC_Receive_FS+0x134>)
 8005da2:	2108      	movs	r1, #8
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 f80f 	bl	8005dc8 <CDC_Transmit_FS>
	}
	return (USBD_OK);
 8005daa:	2300      	movs	r3, #0
			CDC_Transmit_FS(baca_buffer, baca_buffer_length);
		}*/
	//}
	return (USBD_OK);
  /* USER CODE END 6 */
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b005      	add	sp, #20
 8005db2:	bd90      	pop	{r4, r7, pc}
 8005db4:	200004b4 	.word	0x200004b4
 8005db8:	200006d8 	.word	0x200006d8
 8005dbc:	200003e0 	.word	0x200003e0
 8005dc0:	2000045c 	.word	0x2000045c
 8005dc4:	20000404 	.word	0x20000404

08005dc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	000a      	movs	r2, r1
 8005dd2:	1cbb      	adds	r3, r7, #2
 8005dd4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8005dd6:	230f      	movs	r3, #15
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005dde:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <CDC_Transmit_FS+0x5c>)
 8005de0:	2386      	movs	r3, #134	; 0x86
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	58d3      	ldr	r3, [r2, r3]
 8005de6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	2385      	movs	r3, #133	; 0x85
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	58d3      	ldr	r3, [r2, r3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e010      	b.n	8005e1a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005df8:	1cbb      	adds	r3, r7, #2
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <CDC_Transmit_FS+0x5c>)
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7fe fb75 	bl	80044f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005e06:	250f      	movs	r5, #15
 8005e08:	197c      	adds	r4, r7, r5
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <CDC_Transmit_FS+0x5c>)
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7fe fb9f 	bl	8004550 <USBD_CDC_TransmitPacket>
 8005e12:	0003      	movs	r3, r0
 8005e14:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8005e16:	197b      	adds	r3, r7, r5
 8005e18:	781b      	ldrb	r3, [r3, #0]
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	200004b4 	.word	0x200004b4

08005e28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <HAL_PCD_MspInit+0x48>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d115      	bne.n	8005e66 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <HAL_PCD_MspInit+0x4c>)
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <HAL_PCD_MspInit+0x4c>)
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	0409      	lsls	r1, r1, #16
 8005e44:	430a      	orrs	r2, r1
 8005e46:	61da      	str	r2, [r3, #28]
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_PCD_MspInit+0x4c>)
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005e56:	2200      	movs	r2, #0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	201f      	movs	r0, #31
 8005e5c:	f7fa faac 	bl	80003b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005e60:	201f      	movs	r0, #31
 8005e62:	f7fa fabe 	bl	80003e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	40005c00 	.word	0x40005c00
 8005e74:	40021000 	.word	0x40021000

08005e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	2387      	movs	r3, #135	; 0x87
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	58d2      	ldr	r2, [r2, r3]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	33ed      	adds	r3, #237	; 0xed
 8005e8c:	33ff      	adds	r3, #255	; 0xff
 8005e8e:	0019      	movs	r1, r3
 8005e90:	0010      	movs	r0, r2
 8005e92:	f7fe fc63 	bl	800475c <USBD_LL_SetupStage>
}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e9e:	b590      	push	{r4, r7, lr}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	000a      	movs	r2, r1
 8005ea8:	1cfb      	adds	r3, r7, #3
 8005eaa:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	2387      	movs	r3, #135	; 0x87
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	58d4      	ldr	r4, [r2, r3]
 8005eb4:	1cfb      	adds	r3, r7, #3
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	238c      	movs	r3, #140	; 0x8c
 8005ebc:	0059      	lsls	r1, r3, #1
 8005ebe:	0013      	movs	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	1a9b      	subs	r3, r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	18c3      	adds	r3, r0, r3
 8005ec8:	185b      	adds	r3, r3, r1
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	1cfb      	adds	r3, r7, #3
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f7fe fc9e 	bl	8004814 <USBD_LL_DataOutStage>
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b003      	add	sp, #12
 8005ede:	bd90      	pop	{r4, r7, pc}

08005ee0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	000a      	movs	r2, r1
 8005eea:	1cfb      	adds	r3, r7, #3
 8005eec:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	2387      	movs	r3, #135	; 0x87
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	58d0      	ldr	r0, [r2, r3]
 8005ef6:	1cfb      	adds	r3, r7, #3
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	0013      	movs	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	18cb      	adds	r3, r1, r3
 8005f06:	3338      	adds	r3, #56	; 0x38
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	1cfb      	adds	r3, r7, #3
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	0019      	movs	r1, r3
 8005f10:	f7fe fce9 	bl	80048e6 <USBD_LL_DataInStage>
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	2387      	movs	r3, #135	; 0x87
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	58d3      	ldr	r3, [r2, r3]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fe fde7 	bl	8004b00 <USBD_LL_SOF>
}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b002      	add	sp, #8
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f42:	230f      	movs	r3, #15
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d001      	beq.n	8005f56 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8005f52:	f7ff fd15 	bl	8005980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	2387      	movs	r3, #135	; 0x87
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	58d2      	ldr	r2, [r2, r3]
 8005f5e:	230f      	movs	r3, #15
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	0019      	movs	r1, r3
 8005f66:	0010      	movs	r0, r2
 8005f68:	f7fe fd93 	bl	8004a92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	2387      	movs	r3, #135	; 0x87
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	58d3      	ldr	r3, [r2, r3]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7fe fd59 	bl	8004a2c <USBD_LL_Reset>
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	2387      	movs	r3, #135	; 0x87
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	58d3      	ldr	r3, [r2, r3]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7fe fd8c 	bl	8004ab2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_PCD_SuspendCallback+0x34>)
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <HAL_PCD_SuspendCallback+0x34>)
 8005fa8:	2106      	movs	r1, #6
 8005faa:	430a      	orrs	r2, r1
 8005fac:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_PCD_ResumeCallback+0x38>)
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <HAL_PCD_ResumeCallback+0x38>)
 8005fd2:	2106      	movs	r1, #6
 8005fd4:	438a      	bics	r2, r1
 8005fd6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8005fd8:	f000 fa4a 	bl	8006470 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	2387      	movs	r3, #135	; 0x87
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	58d3      	ldr	r3, [r2, r3]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7fe fd7a 	bl	8004ade <USBD_LL_Resume>
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b002      	add	sp, #8
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	e000ed00 	.word	0xe000ed00

08005ff8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006000:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006002:	2387      	movs	r3, #135	; 0x87
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	2388      	movs	r3, #136	; 0x88
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4929      	ldr	r1, [pc, #164]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006012:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006016:	4a29      	ldr	r2, [pc, #164]	; (80060bc <USBD_LL_Init+0xc4>)
 8006018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800601a:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <USBD_LL_Init+0xc0>)
 800601c:	2208      	movs	r2, #8
 800601e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006022:	2202      	movs	r2, #2
 8006024:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006028:	2202      	movs	r2, #2
 800602a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <USBD_LL_Init+0xc0>)
 800602e:	2200      	movs	r2, #0
 8006030:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006034:	2200      	movs	r2, #0
 8006036:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006038:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <USBD_LL_Init+0xc0>)
 800603a:	2200      	movs	r2, #0
 800603c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800603e:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <USBD_LL_Init+0xc0>)
 8006040:	0018      	movs	r0, r3
 8006042:	f7fa fd87 	bl	8000b54 <HAL_PCD_Init>
 8006046:	1e03      	subs	r3, r0, #0
 8006048:	d001      	beq.n	800604e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800604a:	f7ff fc99 	bl	8005980 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	2388      	movs	r3, #136	; 0x88
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	58d0      	ldr	r0, [r2, r3]
 8006056:	2318      	movs	r3, #24
 8006058:	2200      	movs	r2, #0
 800605a:	2100      	movs	r1, #0
 800605c:	f7fc fe16 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	2388      	movs	r3, #136	; 0x88
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	58d0      	ldr	r0, [r2, r3]
 8006068:	2358      	movs	r3, #88	; 0x58
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	f7fc fe0d 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	2388      	movs	r3, #136	; 0x88
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	58d0      	ldr	r0, [r2, r3]
 800607a:	23c0      	movs	r3, #192	; 0xc0
 800607c:	2200      	movs	r2, #0
 800607e:	2181      	movs	r1, #129	; 0x81
 8006080:	f7fc fe04 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	2388      	movs	r3, #136	; 0x88
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	58d0      	ldr	r0, [r2, r3]
 800608c:	2388      	movs	r3, #136	; 0x88
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	2200      	movs	r2, #0
 8006092:	2101      	movs	r1, #1
 8006094:	f7fc fdfa 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	2388      	movs	r3, #136	; 0x88
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	58d0      	ldr	r0, [r2, r3]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	2200      	movs	r2, #0
 80060a6:	2182      	movs	r1, #130	; 0x82
 80060a8:	f7fc fdf0 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b002      	add	sp, #8
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	20000ad8 	.word	0x20000ad8
 80060bc:	40005c00 	.word	0x40005c00

080060c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060c8:	210f      	movs	r1, #15
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060d0:	260e      	movs	r6, #14
 80060d2:	19bb      	adds	r3, r7, r6
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	2388      	movs	r3, #136	; 0x88
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	58d3      	ldr	r3, [r2, r3]
 80060e0:	000d      	movs	r5, r1
 80060e2:	187c      	adds	r4, r7, r1
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7fa fe25 	bl	8000d34 <HAL_PCD_Start>
 80060ea:	0003      	movs	r3, r0
 80060ec:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060ee:	19bc      	adds	r4, r7, r6
 80060f0:	0029      	movs	r1, r5
 80060f2:	187b      	adds	r3, r7, r1
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f9c1 	bl	800647e <USBD_Get_USB_Status>
 80060fc:	0003      	movs	r3, r0
 80060fe:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8006100:	19bb      	adds	r3, r7, r6
 8006102:	781b      	ldrb	r3, [r3, #0]
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b005      	add	sp, #20
 800610a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800610c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	000c      	movs	r4, r1
 8006116:	0010      	movs	r0, r2
 8006118:	0019      	movs	r1, r3
 800611a:	1cfb      	adds	r3, r7, #3
 800611c:	1c22      	adds	r2, r4, #0
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	1cbb      	adds	r3, r7, #2
 8006122:	1c02      	adds	r2, r0, #0
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	003b      	movs	r3, r7
 8006128:	1c0a      	adds	r2, r1, #0
 800612a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800612c:	260f      	movs	r6, #15
 800612e:	19bb      	adds	r3, r7, r6
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006134:	250e      	movs	r5, #14
 8006136:	197b      	adds	r3, r7, r5
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	2388      	movs	r3, #136	; 0x88
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	58d0      	ldr	r0, [r2, r3]
 8006144:	19bc      	adds	r4, r7, r6
 8006146:	1cbb      	adds	r3, r7, #2
 8006148:	781d      	ldrb	r5, [r3, #0]
 800614a:	003b      	movs	r3, r7
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	1cfb      	adds	r3, r7, #3
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	002b      	movs	r3, r5
 8006154:	f7fa ff5c 	bl	8001010 <HAL_PCD_EP_Open>
 8006158:	0003      	movs	r3, r0
 800615a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800615c:	250e      	movs	r5, #14
 800615e:	197c      	adds	r4, r7, r5
 8006160:	19bb      	adds	r3, r7, r6
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	0018      	movs	r0, r3
 8006166:	f000 f98a 	bl	800647e <USBD_Get_USB_Status>
 800616a:	0003      	movs	r3, r0
 800616c:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 800616e:	197b      	adds	r3, r7, r5
 8006170:	781b      	ldrb	r3, [r3, #0]
}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b005      	add	sp, #20
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800617a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800617a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	000a      	movs	r2, r1
 8006184:	1cfb      	adds	r3, r7, #3
 8006186:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006188:	210f      	movs	r1, #15
 800618a:	187b      	adds	r3, r7, r1
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006190:	260e      	movs	r6, #14
 8006192:	19bb      	adds	r3, r7, r6
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	2388      	movs	r3, #136	; 0x88
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	58d2      	ldr	r2, [r2, r3]
 80061a0:	000d      	movs	r5, r1
 80061a2:	187c      	adds	r4, r7, r1
 80061a4:	1cfb      	adds	r3, r7, #3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	0019      	movs	r1, r3
 80061aa:	0010      	movs	r0, r2
 80061ac:	f7fb fab2 	bl	8001714 <HAL_PCD_EP_Close>
 80061b0:	0003      	movs	r3, r0
 80061b2:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061b4:	19bc      	adds	r4, r7, r6
 80061b6:	0029      	movs	r1, r5
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	0018      	movs	r0, r3
 80061be:	f000 f95e 	bl	800647e <USBD_Get_USB_Status>
 80061c2:	0003      	movs	r3, r0
 80061c4:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 80061c6:	19bb      	adds	r3, r7, r6
 80061c8:	781b      	ldrb	r3, [r3, #0]
}
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b005      	add	sp, #20
 80061d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	000a      	movs	r2, r1
 80061dc:	1cfb      	adds	r3, r7, #3
 80061de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061e0:	210f      	movs	r1, #15
 80061e2:	187b      	adds	r3, r7, r1
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061e8:	260e      	movs	r6, #14
 80061ea:	19bb      	adds	r3, r7, r6
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	2388      	movs	r3, #136	; 0x88
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	58d2      	ldr	r2, [r2, r3]
 80061f8:	000d      	movs	r5, r1
 80061fa:	187c      	adds	r4, r7, r1
 80061fc:	1cfb      	adds	r3, r7, #3
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	0019      	movs	r1, r3
 8006202:	0010      	movs	r0, r2
 8006204:	f7fb ffba 	bl	800217c <HAL_PCD_EP_SetStall>
 8006208:	0003      	movs	r3, r0
 800620a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800620c:	19bc      	adds	r4, r7, r6
 800620e:	0029      	movs	r1, r5
 8006210:	187b      	adds	r3, r7, r1
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	0018      	movs	r0, r3
 8006216:	f000 f932 	bl	800647e <USBD_Get_USB_Status>
 800621a:	0003      	movs	r3, r0
 800621c:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 800621e:	19bb      	adds	r3, r7, r6
 8006220:	781b      	ldrb	r3, [r3, #0]
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b005      	add	sp, #20
 8006228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800622a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800622a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	000a      	movs	r2, r1
 8006234:	1cfb      	adds	r3, r7, #3
 8006236:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006238:	210f      	movs	r1, #15
 800623a:	187b      	adds	r3, r7, r1
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006240:	260e      	movs	r6, #14
 8006242:	19bb      	adds	r3, r7, r6
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	2388      	movs	r3, #136	; 0x88
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	58d2      	ldr	r2, [r2, r3]
 8006250:	000d      	movs	r5, r1
 8006252:	187c      	adds	r4, r7, r1
 8006254:	1cfb      	adds	r3, r7, #3
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	0019      	movs	r1, r3
 800625a:	0010      	movs	r0, r2
 800625c:	f7fc f840 	bl	80022e0 <HAL_PCD_EP_ClrStall>
 8006260:	0003      	movs	r3, r0
 8006262:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006264:	19bc      	adds	r4, r7, r6
 8006266:	0029      	movs	r1, r5
 8006268:	187b      	adds	r3, r7, r1
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 f906 	bl	800647e <USBD_Get_USB_Status>
 8006272:	0003      	movs	r3, r0
 8006274:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8006276:	19bb      	adds	r3, r7, r6
 8006278:	781b      	ldrb	r3, [r3, #0]
}
 800627a:	0018      	movs	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	b005      	add	sp, #20
 8006280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006282 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	000a      	movs	r2, r1
 800628c:	1cfb      	adds	r3, r7, #3
 800628e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	2388      	movs	r3, #136	; 0x88
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	58d3      	ldr	r3, [r2, r3]
 8006298:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800629a:	1cfb      	adds	r3, r7, #3
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da0d      	bge.n	80062c0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80062a4:	1cfb      	adds	r3, r7, #3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	227f      	movs	r2, #127	; 0x7f
 80062aa:	401a      	ands	r2, r3
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	202a      	movs	r0, #42	; 0x2a
 80062b0:	0013      	movs	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	18cb      	adds	r3, r1, r3
 80062ba:	181b      	adds	r3, r3, r0
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	e00d      	b.n	80062dc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80062c0:	1cfb      	adds	r3, r7, #3
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	227f      	movs	r2, #127	; 0x7f
 80062c6:	401a      	ands	r2, r3
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	2385      	movs	r3, #133	; 0x85
 80062cc:	0059      	lsls	r1, r3, #1
 80062ce:	0013      	movs	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	18c3      	adds	r3, r0, r3
 80062d8:	185b      	adds	r3, r3, r1
 80062da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062dc:	0018      	movs	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	b004      	add	sp, #16
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	000a      	movs	r2, r1
 80062ee:	1cfb      	adds	r3, r7, #3
 80062f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062f2:	210f      	movs	r1, #15
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062fa:	260e      	movs	r6, #14
 80062fc:	19bb      	adds	r3, r7, r6
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	2388      	movs	r3, #136	; 0x88
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	58d2      	ldr	r2, [r2, r3]
 800630a:	000d      	movs	r5, r1
 800630c:	187c      	adds	r4, r7, r1
 800630e:	1cfb      	adds	r3, r7, #3
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	0019      	movs	r1, r3
 8006314:	0010      	movs	r0, r2
 8006316:	f7fa fe4d 	bl	8000fb4 <HAL_PCD_SetAddress>
 800631a:	0003      	movs	r3, r0
 800631c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800631e:	19bc      	adds	r4, r7, r6
 8006320:	0029      	movs	r1, r5
 8006322:	187b      	adds	r3, r7, r1
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 f8a9 	bl	800647e <USBD_Get_USB_Status>
 800632c:	0003      	movs	r3, r0
 800632e:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006330:	19bb      	adds	r3, r7, r6
 8006332:	781b      	ldrb	r3, [r3, #0]
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b005      	add	sp, #20
 800633a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800633c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	0008      	movs	r0, r1
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	0019      	movs	r1, r3
 800634a:	230b      	movs	r3, #11
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	1c02      	adds	r2, r0, #0
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	2408      	movs	r4, #8
 8006354:	193b      	adds	r3, r7, r4
 8006356:	1c0a      	adds	r2, r1, #0
 8006358:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635a:	2117      	movs	r1, #23
 800635c:	187b      	adds	r3, r7, r1
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006362:	2516      	movs	r5, #22
 8006364:	197b      	adds	r3, r7, r5
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	2388      	movs	r3, #136	; 0x88
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	58d0      	ldr	r0, [r2, r3]
 8006372:	193b      	adds	r3, r7, r4
 8006374:	881d      	ldrh	r5, [r3, #0]
 8006376:	000e      	movs	r6, r1
 8006378:	187c      	adds	r4, r7, r1
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	230b      	movs	r3, #11
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	7819      	ldrb	r1, [r3, #0]
 8006382:	002b      	movs	r3, r5
 8006384:	f7fb fd46 	bl	8001e14 <HAL_PCD_EP_Transmit>
 8006388:	0003      	movs	r3, r0
 800638a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800638c:	2516      	movs	r5, #22
 800638e:	197c      	adds	r4, r7, r5
 8006390:	0031      	movs	r1, r6
 8006392:	187b      	adds	r3, r7, r1
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	0018      	movs	r0, r3
 8006398:	f000 f871 	bl	800647e <USBD_Get_USB_Status>
 800639c:	0003      	movs	r3, r0
 800639e:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 80063a0:	197b      	adds	r3, r7, r5
 80063a2:	781b      	ldrb	r3, [r3, #0]
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b007      	add	sp, #28
 80063aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80063ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	0008      	movs	r0, r1
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	0019      	movs	r1, r3
 80063ba:	230b      	movs	r3, #11
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	1c02      	adds	r2, r0, #0
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	2408      	movs	r4, #8
 80063c4:	193b      	adds	r3, r7, r4
 80063c6:	1c0a      	adds	r2, r1, #0
 80063c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ca:	2117      	movs	r1, #23
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d2:	2516      	movs	r5, #22
 80063d4:	197b      	adds	r3, r7, r5
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	2388      	movs	r3, #136	; 0x88
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	58d0      	ldr	r0, [r2, r3]
 80063e2:	193b      	adds	r3, r7, r4
 80063e4:	881d      	ldrh	r5, [r3, #0]
 80063e6:	000e      	movs	r6, r1
 80063e8:	187c      	adds	r4, r7, r1
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	230b      	movs	r3, #11
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	7819      	ldrb	r1, [r3, #0]
 80063f2:	002b      	movs	r3, r5
 80063f4:	f7fb fb78 	bl	8001ae8 <HAL_PCD_EP_Receive>
 80063f8:	0003      	movs	r3, r0
 80063fa:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063fc:	2516      	movs	r5, #22
 80063fe:	197c      	adds	r4, r7, r5
 8006400:	0031      	movs	r1, r6
 8006402:	187b      	adds	r3, r7, r1
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	0018      	movs	r0, r3
 8006408:	f000 f839 	bl	800647e <USBD_Get_USB_Status>
 800640c:	0003      	movs	r3, r0
 800640e:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8006410:	197b      	adds	r3, r7, r5
 8006412:	781b      	ldrb	r3, [r3, #0]
}
 8006414:	0018      	movs	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	b007      	add	sp, #28
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800641c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	000a      	movs	r2, r1
 8006426:	1cfb      	adds	r3, r7, #3
 8006428:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	2388      	movs	r3, #136	; 0x88
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	58d2      	ldr	r2, [r2, r3]
 8006432:	1cfb      	adds	r3, r7, #3
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	0019      	movs	r1, r3
 8006438:	0010      	movs	r0, r2
 800643a:	f7fb fcd1 	bl	8001de0 <HAL_PCD_EP_GetRxCount>
 800643e:	0003      	movs	r3, r0
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006450:	4b02      	ldr	r3, [pc, #8]	; (800645c <USBD_static_malloc+0x14>)
}
 8006452:	0018      	movs	r0, r3
 8006454:	46bd      	mov	sp, r7
 8006456:	b002      	add	sp, #8
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	20000198 	.word	0x20000198

08006460 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	b002      	add	sp, #8
 800646e:	bd80      	pop	{r7, pc}

08006470 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006474:	f7ff f928 	bl	80056c8 <SystemClock_Config>
}
 8006478:	46c0      	nop			; (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	0002      	movs	r2, r0
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800648a:	230f      	movs	r3, #15
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8006492:	1dfb      	adds	r3, r7, #7
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d00d      	beq.n	80064b6 <USBD_Get_USB_Status+0x38>
 800649a:	dc02      	bgt.n	80064a2 <USBD_Get_USB_Status+0x24>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <USBD_Get_USB_Status+0x2e>
 80064a0:	e018      	b.n	80064d4 <USBD_Get_USB_Status+0x56>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d00c      	beq.n	80064c0 <USBD_Get_USB_Status+0x42>
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d00f      	beq.n	80064ca <USBD_Get_USB_Status+0x4c>
 80064aa:	e013      	b.n	80064d4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064ac:	230f      	movs	r3, #15
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
    break;
 80064b4:	e013      	b.n	80064de <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064b6:	230f      	movs	r3, #15
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2202      	movs	r2, #2
 80064bc:	701a      	strb	r2, [r3, #0]
    break;
 80064be:	e00e      	b.n	80064de <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064c0:	230f      	movs	r3, #15
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
    break;
 80064c8:	e009      	b.n	80064de <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064ca:	230f      	movs	r3, #15
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2202      	movs	r2, #2
 80064d0:	701a      	strb	r2, [r3, #0]
    break;
 80064d2:	e004      	b.n	80064de <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80064d4:	230f      	movs	r3, #15
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2202      	movs	r2, #2
 80064da:	701a      	strb	r2, [r3, #0]
    break;
 80064dc:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80064de:	230f      	movs	r3, #15
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	781b      	ldrb	r3, [r3, #0]
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b004      	add	sp, #16
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	0002      	movs	r2, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	1dfb      	adds	r3, r7, #7
 80064f8:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_FS_DeviceDesc);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2212      	movs	r2, #18
 80064fe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b002      	add	sp, #8
 8006508:	bd80      	pop	{r7, pc}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	20000140 	.word	0x20000140

08006510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	0002      	movs	r2, r0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	1dfb      	adds	r3, r7, #7
 800651c:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_LangIDDesc);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2204      	movs	r2, #4
 8006522:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006526:	0018      	movs	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	b002      	add	sp, #8
 800652c:	bd80      	pop	{r7, pc}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	20000154 	.word	0x20000154

08006534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	0002      	movs	r2, r0
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	1dfb      	adds	r3, r7, #7
 8006540:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006542:	1dfb      	adds	r3, r7, #7
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	4908      	ldr	r1, [pc, #32]	; (8006570 <USBD_FS_ProductStrDescriptor+0x3c>)
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <USBD_FS_ProductStrDescriptor+0x40>)
 8006550:	0018      	movs	r0, r3
 8006552:	f7fe ff94 	bl	800547e <USBD_GetString>
 8006556:	e005      	b.n	8006564 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	4905      	ldr	r1, [pc, #20]	; (8006570 <USBD_FS_ProductStrDescriptor+0x3c>)
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <USBD_FS_ProductStrDescriptor+0x40>)
 800655e:	0018      	movs	r0, r3
 8006560:	f7fe ff8d 	bl	800547e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	20000cf8 	.word	0x20000cf8
 8006574:	08006c0c 	.word	0x08006c0c

08006578 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	0002      	movs	r2, r0
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	1dfb      	adds	r3, r7, #7
 8006584:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4904      	ldr	r1, [pc, #16]	; (800659c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800658c:	0018      	movs	r0, r3
 800658e:	f7fe ff76 	bl	800547e <USBD_GetString>
  return USBD_StrDesc;
 8006592:	4b02      	ldr	r3, [pc, #8]	; (800659c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000cf8 	.word	0x20000cf8
 80065a0:	08006c20 	.word	0x08006c20

080065a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	0002      	movs	r2, r0
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	1dfb      	adds	r3, r7, #7
 80065b0:	701a      	strb	r2, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	221a      	movs	r2, #26
 80065b6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065b8:	f000 f84c 	bl	8006654 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80065be:	0018      	movs	r0, r3
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b002      	add	sp, #8
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	20000158 	.word	0x20000158

080065cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	0002      	movs	r2, r0
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80065da:	1dfb      	adds	r3, r7, #7
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4908      	ldr	r1, [pc, #32]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <USBD_FS_ConfigStrDescriptor+0x40>)
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7fe ff48 	bl	800547e <USBD_GetString>
 80065ee:	e005      	b.n	80065fc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	4905      	ldr	r1, [pc, #20]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <USBD_FS_ConfigStrDescriptor+0x40>)
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7fe ff41 	bl	800547e <USBD_GetString>
  }
  return USBD_StrDesc;
 80065fc:	4b02      	ldr	r3, [pc, #8]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	20000cf8 	.word	0x20000cf8
 800660c:	08006c30 	.word	0x08006c30

08006610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	0002      	movs	r2, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	1dfb      	adds	r3, r7, #7
 800661c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800661e:	1dfb      	adds	r3, r7, #7
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4908      	ldr	r1, [pc, #32]	; (800664c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800662c:	0018      	movs	r0, r3
 800662e:	f7fe ff26 	bl	800547e <USBD_GetString>
 8006632:	e005      	b.n	8006640 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	4905      	ldr	r1, [pc, #20]	; (800664c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800663a:	0018      	movs	r0, r3
 800663c:	f7fe ff1f 	bl	800547e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006640:	4b02      	ldr	r3, [pc, #8]	; (800664c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006642:	0018      	movs	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	b002      	add	sp, #8
 8006648:	bd80      	pop	{r7, pc}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	20000cf8 	.word	0x20000cf8
 8006650:	08006c3c 	.word	0x08006c3c

08006654 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <Get_SerialNum+0x48>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <Get_SerialNum+0x4c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006666:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <Get_SerialNum+0x50>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	18d3      	adds	r3, r2, r3
 8006672:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800667a:	490b      	ldr	r1, [pc, #44]	; (80066a8 <Get_SerialNum+0x54>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2208      	movs	r2, #8
 8006680:	0018      	movs	r0, r3
 8006682:	f000 f815 	bl	80066b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006686:	4909      	ldr	r1, [pc, #36]	; (80066ac <Get_SerialNum+0x58>)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2204      	movs	r2, #4
 800668c:	0018      	movs	r0, r3
 800668e:	f000 f80f 	bl	80066b0 <IntToUnicode>
  }
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	1ffff7ac 	.word	0x1ffff7ac
 80066a0:	1ffff7b0 	.word	0x1ffff7b0
 80066a4:	1ffff7b4 	.word	0x1ffff7b4
 80066a8:	2000015a 	.word	0x2000015a
 80066ac:	2000016a 	.word	0x2000016a

080066b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	1dfb      	adds	r3, r7, #7
 80066bc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80066be:	2117      	movs	r1, #23
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e02f      	b.n	800672e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	0f1b      	lsrs	r3, r3, #28
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d80d      	bhi.n	80066f2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	0f1b      	lsrs	r3, r3, #28
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	2317      	movs	r3, #23
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	0019      	movs	r1, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	185b      	adds	r3, r3, r1
 80066ea:	3230      	adds	r2, #48	; 0x30
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e00c      	b.n	800670c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	0f1b      	lsrs	r3, r3, #28
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	2317      	movs	r3, #23
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	0019      	movs	r1, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	185b      	adds	r3, r3, r1
 8006706:	3237      	adds	r2, #55	; 0x37
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006712:	2117      	movs	r1, #23
 8006714:	187b      	adds	r3, r7, r1
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	3301      	adds	r3, #1
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	18d3      	adds	r3, r2, r3
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006724:	187b      	adds	r3, r7, r1
 8006726:	781a      	ldrb	r2, [r3, #0]
 8006728:	187b      	adds	r3, r7, r1
 800672a:	3201      	adds	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	2317      	movs	r3, #23
 8006730:	18fa      	adds	r2, r7, r3
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d3c8      	bcc.n	80066ce <IntToUnicode+0x1e>
  }
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b006      	add	sp, #24
 8006742:	bd80      	pop	{r7, pc}

08006744 <uv_led_init>:
 *
 * @param Void
 * @ return Void
 */
void uv_led_init( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
	uv_led_ports[0] = UV_LED_0_GPIO_Port;
 800674a:	4b47      	ldr	r3, [pc, #284]	; (8006868 <uv_led_init+0x124>)
 800674c:	2290      	movs	r2, #144	; 0x90
 800674e:	05d2      	lsls	r2, r2, #23
 8006750:	601a      	str	r2, [r3, #0]
	uv_led_ports[1] = UV_LED_1_GPIO_Port;
 8006752:	4b45      	ldr	r3, [pc, #276]	; (8006868 <uv_led_init+0x124>)
 8006754:	2290      	movs	r2, #144	; 0x90
 8006756:	05d2      	lsls	r2, r2, #23
 8006758:	605a      	str	r2, [r3, #4]
	uv_led_ports[2] = UV_LED_2_GPIO_Port;
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <uv_led_init+0x124>)
 800675c:	2290      	movs	r2, #144	; 0x90
 800675e:	05d2      	lsls	r2, r2, #23
 8006760:	609a      	str	r2, [r3, #8]
	uv_led_ports[3] = UV_LED_3_GPIO_Port;
 8006762:	4b41      	ldr	r3, [pc, #260]	; (8006868 <uv_led_init+0x124>)
 8006764:	2290      	movs	r2, #144	; 0x90
 8006766:	05d2      	lsls	r2, r2, #23
 8006768:	60da      	str	r2, [r3, #12]
	uv_led_ports[4] = UV_LED_4_GPIO_Port;
 800676a:	4b3f      	ldr	r3, [pc, #252]	; (8006868 <uv_led_init+0x124>)
 800676c:	2290      	movs	r2, #144	; 0x90
 800676e:	05d2      	lsls	r2, r2, #23
 8006770:	611a      	str	r2, [r3, #16]
	uv_led_ports[5] = UV_LED_5_GPIO_Port;
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <uv_led_init+0x124>)
 8006774:	2290      	movs	r2, #144	; 0x90
 8006776:	05d2      	lsls	r2, r2, #23
 8006778:	615a      	str	r2, [r3, #20]
	uv_led_ports[6] = UV_LED_6_GPIO_Port;
 800677a:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <uv_led_init+0x124>)
 800677c:	2290      	movs	r2, #144	; 0x90
 800677e:	05d2      	lsls	r2, r2, #23
 8006780:	619a      	str	r2, [r3, #24]
	uv_led_ports[7] = UV_LED_7_GPIO_Port;
 8006782:	4b39      	ldr	r3, [pc, #228]	; (8006868 <uv_led_init+0x124>)
 8006784:	2290      	movs	r2, #144	; 0x90
 8006786:	05d2      	lsls	r2, r2, #23
 8006788:	61da      	str	r2, [r3, #28]

	uv_led_pins[0] = UV_LED_0_Pin;
 800678a:	4b38      	ldr	r3, [pc, #224]	; (800686c <uv_led_init+0x128>)
 800678c:	2201      	movs	r2, #1
 800678e:	801a      	strh	r2, [r3, #0]
	uv_led_pins[1] = UV_LED_1_Pin;
 8006790:	4b36      	ldr	r3, [pc, #216]	; (800686c <uv_led_init+0x128>)
 8006792:	2202      	movs	r2, #2
 8006794:	805a      	strh	r2, [r3, #2]
	uv_led_pins[2] = UV_LED_2_Pin;
 8006796:	4b35      	ldr	r3, [pc, #212]	; (800686c <uv_led_init+0x128>)
 8006798:	2204      	movs	r2, #4
 800679a:	809a      	strh	r2, [r3, #4]
	uv_led_pins[3] = UV_LED_3_Pin;
 800679c:	4b33      	ldr	r3, [pc, #204]	; (800686c <uv_led_init+0x128>)
 800679e:	2208      	movs	r2, #8
 80067a0:	80da      	strh	r2, [r3, #6]
	uv_led_pins[4] = UV_LED_4_Pin;
 80067a2:	4b32      	ldr	r3, [pc, #200]	; (800686c <uv_led_init+0x128>)
 80067a4:	2210      	movs	r2, #16
 80067a6:	811a      	strh	r2, [r3, #8]
	uv_led_pins[5] = UV_LED_5_Pin;
 80067a8:	4b30      	ldr	r3, [pc, #192]	; (800686c <uv_led_init+0x128>)
 80067aa:	2220      	movs	r2, #32
 80067ac:	815a      	strh	r2, [r3, #10]
	uv_led_pins[6] = UV_LED_6_Pin;
 80067ae:	4b2f      	ldr	r3, [pc, #188]	; (800686c <uv_led_init+0x128>)
 80067b0:	2240      	movs	r2, #64	; 0x40
 80067b2:	819a      	strh	r2, [r3, #12]
	uv_led_pins[7] = UV_LED_7_Pin;
 80067b4:	4b2d      	ldr	r3, [pc, #180]	; (800686c <uv_led_init+0x128>)
 80067b6:	2280      	movs	r2, #128	; 0x80
 80067b8:	81da      	strh	r2, [r3, #14]
	uv_led_periods_ms[4] = 17;
	uv_led_periods_ms[5] = 17;
	uv_led_periods_ms[6] = 33;
	uv_led_periods_ms[7] = 17;*/

	enable_global = 1;
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <uv_led_init+0x12c>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 8; i++)
 80067c0:	2317      	movs	r3, #23
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e010      	b.n	80067ec <uv_led_init+0xa8>
	{
		uv_led_counter[i] = 0;
 80067ca:	2017      	movs	r0, #23
 80067cc:	183b      	adds	r3, r7, r0
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	4b28      	ldr	r3, [pc, #160]	; (8006874 <uv_led_init+0x130>)
 80067d2:	0052      	lsls	r2, r2, #1
 80067d4:	2100      	movs	r1, #0
 80067d6:	52d1      	strh	r1, [r2, r3]
		uv_led_enabled[i] = 1;
 80067d8:	183b      	adds	r3, r7, r0
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <uv_led_init+0x134>)
 80067de:	2101      	movs	r1, #1
 80067e0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
 80067e2:	183b      	adds	r3, r7, r0
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	183b      	adds	r3, r7, r0
 80067e8:	3201      	adds	r2, #1
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	2317      	movs	r3, #23
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b07      	cmp	r3, #7
 80067f4:	d9e9      	bls.n	80067ca <uv_led_init+0x86>
	}

	// Read setup from FLASH
	// Load uv_led_enabled values from FLASH
	uint32_t flash_address_enabled = FLASH_UVLEDS_ENABLED_ADDR;
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <uv_led_init+0x138>)
 80067f8:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 8; i++)
 80067fa:	230f      	movs	r3, #15
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e00f      	b.n	8006824 <uv_led_init+0xe0>
	{
		uv_led_enabled[i] = *(uint16_t *)flash_address_enabled;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	881a      	ldrh	r2, [r3, #0]
 8006808:	200f      	movs	r0, #15
 800680a:	183b      	adds	r3, r7, r0
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2d1      	uxtb	r1, r2
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <uv_led_init+0x134>)
 8006812:	54d1      	strb	r1, [r2, r3]
		flash_address_enabled += 2;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3302      	adds	r3, #2
 8006818:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 0; i < 8; i++)
 800681a:	183b      	adds	r3, r7, r0
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	183b      	adds	r3, r7, r0
 8006820:	3201      	adds	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	230f      	movs	r3, #15
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d9ea      	bls.n	8006804 <uv_led_init+0xc0>
	}

	// Load uv_led_periods_ms values from FLASH
	uint32_t flash_address_periods = FLASH_UVLEDS_PERIODS_ADDR;
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <uv_led_init+0x13c>)
 8006830:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < 8; i++)
 8006832:	1dfb      	adds	r3, r7, #7
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e00e      	b.n	8006858 <uv_led_init+0x114>
	{
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	881a      	ldrh	r2, [r3, #0]
 800683e:	1dfb      	adds	r3, r7, #7
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2d1      	uxtb	r1, r2
 8006844:	4a0f      	ldr	r2, [pc, #60]	; (8006884 <uv_led_init+0x140>)
 8006846:	54d1      	strb	r1, [r2, r3]
		flash_address_periods += 2;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	3302      	adds	r3, #2
 800684c:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 8; i++)
 800684e:	1dfb      	adds	r3, r7, #7
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	1dfb      	adds	r3, r7, #7
 8006854:	3201      	adds	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	1dfb      	adds	r3, r7, #7
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b07      	cmp	r3, #7
 800685e:	d9ec      	bls.n	800683a <uv_led_init+0xf6>
	}
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b006      	add	sp, #24
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200003e4 	.word	0x200003e4
 800686c:	2000044c 	.word	0x2000044c
 8006870:	200003e0 	.word	0x200003e0
 8006874:	20000464 	.word	0x20000464
 8006878:	2000045c 	.word	0x2000045c
 800687c:	08007000 	.word	0x08007000
 8006880:	08007400 	.word	0x08007400
 8006884:	20000404 	.word	0x20000404

08006888 <uv_led_set_period>:
 * @param period period of one LED toggle, so this is one half of the
 * 		  LED blinking period.
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_set_period( uint8_t led_id, uint8_t period)
{
 8006888:	b5b0      	push	{r4, r5, r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	0002      	movs	r2, r0
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	1dbb      	adds	r3, r7, #6
 8006896:	1c0a      	adds	r2, r1, #0
 8006898:	701a      	strb	r2, [r3, #0]
	if ((0 <= led_id) && (led_id < 8))
 800689a:	1dfb      	adds	r3, r7, #7
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d855      	bhi.n	800694e <uv_led_set_period+0xc6>
	{
		//if ((10 <= period) && (period <= 100))
		if ((1 <= period) && (period <= 255))
 80068a2:	1dbb      	adds	r3, r7, #6
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04f      	beq.n	800694a <uv_led_set_period+0xc2>
		{
			uv_led_periods_ms[(uint8_t)led_id] = period;
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <uv_led_set_period+0xd0>)
 80068b0:	1db9      	adds	r1, r7, #6
 80068b2:	7809      	ldrb	r1, [r1, #0]
 80068b4:	54d1      	strb	r1, [r2, r3]
			uv_led_counter [(uint8_t)led_id] = 0;
 80068b6:	1dfb      	adds	r3, r7, #7
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <uv_led_set_period+0xd4>)
 80068bc:	0052      	lsls	r2, r2, #1
 80068be:	2100      	movs	r1, #0
 80068c0:	52d1      	strh	r1, [r2, r3]

			// Write the setup to the FLASH
			// Erase the USER FLASH
			HAL_FLASH_Unlock();
 80068c2:	f7f9 fe35 	bl	8000530 <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t PAGEError = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80068ca:	210c      	movs	r1, #12
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 80068d2:	187b      	adds	r3, r7, r1
 80068d4:	4a22      	ldr	r2, [pc, #136]	; (8006960 <uv_led_set_period+0xd8>)
 80068d6:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages     = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE;
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	2203      	movs	r2, #3
 80068dc:	609a      	str	r2, [r3, #8]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80068de:	2308      	movs	r3, #8
 80068e0:	18fa      	adds	r2, r7, r3
 80068e2:	187b      	adds	r3, r7, r1
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7f9 fee2 	bl	80006b0 <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <uv_led_set_period+0xdc>)
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <uv_led_set_period+0xdc>)
 80068f2:	2102      	movs	r1, #2
 80068f4:	438a      	bics	r2, r1
 80068f6:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 80068f8:	f7f9 fe40 	bl	800057c <HAL_FLASH_Lock>



			// Write to the USER FLASH
			HAL_FLASH_Unlock();
 80068fc:	f7f9 fe18 	bl	8000530 <HAL_FLASH_Unlock>
			uint32_t flashAddress = FLASH_UVLEDS_PERIODS_ADDR;
 8006900:	4b19      	ldr	r3, [pc, #100]	; (8006968 <uv_led_set_period+0xe0>)
 8006902:	61fb      	str	r3, [r7, #28]
			for(int i = 0; i <8; i++)
 8006904:	2300      	movs	r3, #0
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	e012      	b.n	8006930 <uv_led_set_period+0xa8>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, uv_led_periods_ms[i]);
 800690a:	4a13      	ldr	r2, [pc, #76]	; (8006958 <uv_led_set_period+0xd0>)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	18d3      	adds	r3, r2, r3
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	001c      	movs	r4, r3
 8006914:	2300      	movs	r3, #0
 8006916:	001d      	movs	r5, r3
 8006918:	69f9      	ldr	r1, [r7, #28]
 800691a:	0022      	movs	r2, r4
 800691c:	002b      	movs	r3, r5
 800691e:	2001      	movs	r0, #1
 8006920:	f7f9 fd70 	bl	8000404 <HAL_FLASH_Program>
				flashAddress += 2;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	3302      	adds	r3, #2
 8006928:	61fb      	str	r3, [r7, #28]
			for(int i = 0; i <8; i++)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	3301      	adds	r3, #1
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b07      	cmp	r3, #7
 8006934:	dde9      	ble.n	800690a <uv_led_set_period+0x82>
			}
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <uv_led_set_period+0xdc>)
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <uv_led_set_period+0xdc>)
 800693c:	2101      	movs	r1, #1
 800693e:	438a      	bics	r2, r1
 8006940:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 8006942:	f7f9 fe1b 	bl	800057c <HAL_FLASH_Lock>
			return 1;
 8006946:	2301      	movs	r3, #1
 8006948:	e002      	b.n	8006950 <uv_led_set_period+0xc8>
		}
		return 0;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <uv_led_set_period+0xc8>
	}
	return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b008      	add	sp, #32
 8006956:	bdb0      	pop	{r4, r5, r7, pc}
 8006958:	20000404 	.word	0x20000404
 800695c:	20000464 	.word	0x20000464
 8006960:	08007000 	.word	0x08007000
 8006964:	40022000 	.word	0x40022000
 8006968:	08007400 	.word	0x08007400

0800696c <uv_led_enable>:
 * @param led_id ID of the LED (0-7)
 * @param enable 1 if the LED is enables, otherwise 0
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_enable(uint8_t led_id, uint8_t enable)
{
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	0002      	movs	r2, r0
 8006974:	1dfb      	adds	r3, r7, #7
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	1dbb      	adds	r3, r7, #6
 800697a:	1c0a      	adds	r2, r1, #0
 800697c:	701a      	strb	r2, [r3, #0]

		if ((0 <= led_id) && (led_id < 8))
 800697e:	1dfb      	adds	r3, r7, #7
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b07      	cmp	r3, #7
 8006984:	d868      	bhi.n	8006a58 <uv_led_enable+0xec>
		{
			if ((enable == 0) || (enable == 1))
 8006986:	1dbb      	adds	r3, r7, #6
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <uv_led_enable+0x2a>
 800698e:	1dbb      	adds	r3, r7, #6
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d15e      	bne.n	8006a54 <uv_led_enable+0xe8>
			{
				uv_led_enabled[led_id] = enable;
 8006996:	1dfb      	adds	r3, r7, #7
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4a32      	ldr	r2, [pc, #200]	; (8006a64 <uv_led_enable+0xf8>)
 800699c:	1db9      	adds	r1, r7, #6
 800699e:	7809      	ldrb	r1, [r1, #0]
 80069a0:	54d1      	strb	r1, [r2, r3]
				uv_led_counter [(uint8_t)led_id] = 0;
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <uv_led_enable+0xfc>)
 80069a8:	0052      	lsls	r2, r2, #1
 80069aa:	2100      	movs	r1, #0
 80069ac:	52d1      	strh	r1, [r2, r3]
				HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], enable);
 80069ae:	1dfb      	adds	r3, r7, #7
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <uv_led_enable+0x100>)
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	58d0      	ldr	r0, [r2, r3]
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	4b2c      	ldr	r3, [pc, #176]	; (8006a70 <uv_led_enable+0x104>)
 80069be:	0052      	lsls	r2, r2, #1
 80069c0:	5ad1      	ldrh	r1, [r2, r3]
 80069c2:	1dbb      	adds	r3, r7, #6
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	001a      	movs	r2, r3
 80069c8:	f7fa f8a7 	bl	8000b1a <HAL_GPIO_WritePin>

				// Write the setup to the FLASH
				// Erase the USER FLASH
				HAL_FLASH_Unlock();
 80069cc:	f7f9 fdb0 	bl	8000530 <HAL_FLASH_Unlock>
				FLASH_EraseInitTypeDef EraseInitStruct;
				uint32_t PAGEError = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
				EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80069d4:	210c      	movs	r1, #12
 80069d6:	187b      	adds	r3, r7, r1
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
				EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <uv_led_enable+0x108>)
 80069e0:	605a      	str	r2, [r3, #4]
				EraseInitStruct.NbPages     = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE;
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	2203      	movs	r2, #3
 80069e6:	609a      	str	r2, [r3, #8]
				HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80069e8:	2308      	movs	r3, #8
 80069ea:	18fa      	adds	r2, r7, r3
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7f9 fe5d 	bl	80006b0 <HAL_FLASHEx_Erase>
				CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <uv_led_enable+0x10c>)
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <uv_led_enable+0x10c>)
 80069fc:	2102      	movs	r1, #2
 80069fe:	438a      	bics	r2, r1
 8006a00:	611a      	str	r2, [r3, #16]
				HAL_FLASH_Lock();
 8006a02:	f7f9 fdbb 	bl	800057c <HAL_FLASH_Lock>



				// Write to the USER FLASH
				HAL_FLASH_Unlock();
 8006a06:	f7f9 fd93 	bl	8000530 <HAL_FLASH_Unlock>
				uint32_t flashAddress = FLASH_UVLEDS_ENABLED_ADDR;
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <uv_led_enable+0x108>)
 8006a0c:	61fb      	str	r3, [r7, #28]
				for(int i = 0; i <8; i++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e012      	b.n	8006a3a <uv_led_enable+0xce>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, uv_led_enabled[i]);
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <uv_led_enable+0xf8>)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	18d3      	adds	r3, r2, r3
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	001c      	movs	r4, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	001d      	movs	r5, r3
 8006a22:	69f9      	ldr	r1, [r7, #28]
 8006a24:	0022      	movs	r2, r4
 8006a26:	002b      	movs	r3, r5
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f7f9 fceb 	bl	8000404 <HAL_FLASH_Program>
					flashAddress += 2;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3302      	adds	r3, #2
 8006a32:	61fb      	str	r3, [r7, #28]
				for(int i = 0; i <8; i++)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	3301      	adds	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b07      	cmp	r3, #7
 8006a3e:	dde9      	ble.n	8006a14 <uv_led_enable+0xa8>
				}
				CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <uv_led_enable+0x10c>)
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <uv_led_enable+0x10c>)
 8006a46:	2101      	movs	r1, #1
 8006a48:	438a      	bics	r2, r1
 8006a4a:	611a      	str	r2, [r3, #16]
				HAL_FLASH_Lock();
 8006a4c:	f7f9 fd96 	bl	800057c <HAL_FLASH_Lock>
				return 1;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e002      	b.n	8006a5a <uv_led_enable+0xee>
			}
			return 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e000      	b.n	8006a5a <uv_led_enable+0xee>
		}
		return 0;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b008      	add	sp, #32
 8006a60:	bdb0      	pop	{r4, r5, r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	2000045c 	.word	0x2000045c
 8006a68:	20000464 	.word	0x20000464
 8006a6c:	200003e4 	.word	0x200003e4
 8006a70:	2000044c 	.word	0x2000044c
 8006a74:	08007000 	.word	0x08007000
 8006a78:	40022000 	.word	0x40022000

08006a7c <uv_led_toggle>:
 */

// THIS IS JUST A WORKOROUND. REWRITE IT LATER !!!!!!!!!!!!!!!!!!!!!!!!!!

void uv_led_toggle(uint8_t led_id)
{
 8006a7c:	b5b0      	push	{r4, r5, r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	0002      	movs	r2, r0
 8006a84:	1dfb      	adds	r3, r7, #7
 8006a86:	701a      	strb	r2, [r3, #0]
		if ((uv_led_enabled[led_id]))
 8006a88:	1dfb      	adds	r3, r7, #7
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <uv_led_toggle+0x6c>)
 8006a8e:	5cd3      	ldrb	r3, [r2, r3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d025      	beq.n	8006ae0 <uv_led_toggle+0x64>
		{
			//HAL_GPIO_TogglePin(uv_led_ports[led_id], uv_led_pins[led_id]);
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <uv_led_toggle+0x70>)
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	58d4      	ldr	r4, [r2, r3]
 8006a9e:	1dfb      	adds	r3, r7, #7
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <uv_led_toggle+0x74>)
 8006aa4:	0052      	lsls	r2, r2, #1
 8006aa6:	5ad5      	ldrh	r5, [r2, r3]
 8006aa8:	1dfb      	adds	r3, r7, #7
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <uv_led_toggle+0x70>)
 8006aae:	0092      	lsls	r2, r2, #2
 8006ab0:	58d0      	ldr	r0, [r2, r3]
 8006ab2:	1dfb      	adds	r3, r7, #7
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <uv_led_toggle+0x74>)
 8006ab8:	0052      	lsls	r2, r2, #1
 8006aba:	5ad3      	ldrh	r3, [r2, r3]
 8006abc:	0019      	movs	r1, r3
 8006abe:	f7fa f80f 	bl	8000ae0 <HAL_GPIO_ReadPin>
 8006ac2:	1e03      	subs	r3, r0, #0
 8006ac4:	d105      	bne.n	8006ad2 <uv_led_toggle+0x56>
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <uv_led_toggle+0x78>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <uv_led_toggle+0x56>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <uv_led_toggle+0x58>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	0029      	movs	r1, r5
 8006ada:	0020      	movs	r0, r4
 8006adc:	f7fa f81d 	bl	8000b1a <HAL_GPIO_WritePin>
		}
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ae8:	2000045c 	.word	0x2000045c
 8006aec:	200003e4 	.word	0x200003e4
 8006af0:	2000044c 	.word	0x2000044c
 8006af4:	200003e0 	.word	0x200003e0

08006af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006af8:	4813      	ldr	r0, [pc, #76]	; (8006b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006afa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8006afc:	4813      	ldr	r0, [pc, #76]	; (8006b4c <LoopForever+0x6>)
    LDR R1, [R0]
 8006afe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8006b00:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8006b02:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <LoopForever+0xa>)
    CMP R1, R2
 8006b04:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8006b06:	d105      	bne.n	8006b14 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8006b08:	4812      	ldr	r0, [pc, #72]	; (8006b54 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8006b0a:	4913      	ldr	r1, [pc, #76]	; (8006b58 <LoopForever+0x12>)
    STR R1, [R0]
 8006b0c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8006b0e:	4813      	ldr	r0, [pc, #76]	; (8006b5c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8006b10:	4913      	ldr	r1, [pc, #76]	; (8006b60 <LoopForever+0x1a>)
    STR R1, [R0]
 8006b12:	6001      	str	r1, [r0, #0]

08006b14 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b14:	4813      	ldr	r0, [pc, #76]	; (8006b64 <LoopForever+0x1e>)
  ldr r1, =_edata
 8006b16:	4914      	ldr	r1, [pc, #80]	; (8006b68 <LoopForever+0x22>)
  ldr r2, =_sidata
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <LoopForever+0x26>)
  movs r3, #0
 8006b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b1c:	e002      	b.n	8006b24 <LoopCopyDataInit>

08006b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b22:	3304      	adds	r3, #4

08006b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b28:	d3f9      	bcc.n	8006b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b2a:	4a11      	ldr	r2, [pc, #68]	; (8006b70 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8006b2c:	4c11      	ldr	r4, [pc, #68]	; (8006b74 <LoopForever+0x2e>)
  movs r3, #0
 8006b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b30:	e001      	b.n	8006b36 <LoopFillZerobss>

08006b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b34:	3204      	adds	r2, #4

08006b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b38:	d3fb      	bcc.n	8006b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006b3a:	f7fe fff7 	bl	8005b2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006b3e:	f000 f81d 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b42:	f7fe fd9b 	bl	800567c <main>

08006b46 <LoopForever>:

LoopForever:
    b LoopForever
 8006b46:	e7fe      	b.n	8006b46 <LoopForever>
  ldr   r0, =_estack
 8006b48:	200017ff 	.word	0x200017ff
    LDR R0,=0x00000004
 8006b4c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8006b50:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8006b54:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8006b58:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8006b5c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8006b60:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8006b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b68:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8006b6c:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8006b70:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8006b74:	20000ef8 	.word	0x20000ef8

08006b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b78:	e7fe      	b.n	8006b78 <ADC1_IRQHandler>
	...

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	2600      	movs	r6, #0
 8006b80:	4d0c      	ldr	r5, [pc, #48]	; (8006bb4 <__libc_init_array+0x38>)
 8006b82:	4c0d      	ldr	r4, [pc, #52]	; (8006bb8 <__libc_init_array+0x3c>)
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	f000 f821 	bl	8006bd4 <_init>
 8006b92:	4d0a      	ldr	r5, [pc, #40]	; (8006bbc <__libc_init_array+0x40>)
 8006b94:	4c0a      	ldr	r4, [pc, #40]	; (8006bc0 <__libc_init_array+0x44>)
 8006b96:	1b64      	subs	r4, r4, r5
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	00b3      	lsls	r3, r6, #2
 8006ba2:	58eb      	ldr	r3, [r5, r3]
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	00b3      	lsls	r3, r6, #2
 8006bac:	58eb      	ldr	r3, [r5, r3]
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08006d54 	.word	0x08006d54
 8006bb8:	08006d54 	.word	0x08006d54
 8006bbc:	08006d54 	.word	0x08006d54
 8006bc0:	08006d58 	.word	0x08006d58

08006bc4 <memset>:
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	1812      	adds	r2, r2, r0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d100      	bne.n	8006bce <memset+0xa>
 8006bcc:	4770      	bx	lr
 8006bce:	7019      	strb	r1, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	e7f9      	b.n	8006bc8 <memset+0x4>

08006bd4 <_init>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr

08006be0 <_fini>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr
