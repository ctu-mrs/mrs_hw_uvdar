
UVDAR_Board_Proto_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e94  08004e94  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08004e94  08004e94  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e94  08004e94  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08004e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000102c  20000178  08005014  00020178  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  08005014  000211a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b012  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f68  00000000  00000000  0003b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000effd  00000000  00000000  0003f11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001000  00000000  00000000  0004e118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001270  00000000  00000000  0004f118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c240  00000000  00000000  00050388  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000119e2  00000000  00000000  0006c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000928a7  00000000  00000000  0007dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00110851  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027e0  00000000  00000000  001108cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d88 	.word	0x08004d88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	08004d88 	.word	0x08004d88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <HAL_Init+0x1c>)
 80003f8:	6813      	ldr	r3, [r2, #0]
 80003fa:	2110      	movs	r1, #16
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000400:	2000      	movs	r0, #0
 8000402:	f003 ffe5 	bl	80043d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000406:	f003 ffad 	bl	8004364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800040a:	2000      	movs	r0, #0
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40022000 	.word	0x40022000

08000414 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <HAL_IncTick+0x10>)
 8000416:	6811      	ldr	r1, [r2, #0]
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <HAL_IncTick+0x14>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	185b      	adds	r3, r3, r1
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	200003b8 	.word	0x200003b8
 8000428:	20000000 	.word	0x20000000

0800042c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800042c:	4b01      	ldr	r3, [pc, #4]	; (8000434 <HAL_GetTick+0x8>)
 800042e:	6818      	ldr	r0, [r3, #0]
}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	200003b8 	.word	0x200003b8

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800043a:	2800      	cmp	r0, #0
 800043c:	db14      	blt.n	8000468 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043e:	0884      	lsrs	r4, r0, #2
 8000440:	00a4      	lsls	r4, r4, #2
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_NVIC_SetPriority+0x5c>)
 8000444:	469c      	mov	ip, r3
 8000446:	4464      	add	r4, ip
 8000448:	26c0      	movs	r6, #192	; 0xc0
 800044a:	00b6      	lsls	r6, r6, #2
 800044c:	59a5      	ldr	r5, [r4, r6]
 800044e:	2203      	movs	r2, #3
 8000450:	4010      	ands	r0, r2
 8000452:	00c0      	lsls	r0, r0, #3
 8000454:	23ff      	movs	r3, #255	; 0xff
 8000456:	001a      	movs	r2, r3
 8000458:	4082      	lsls	r2, r0
 800045a:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800045c:	0189      	lsls	r1, r1, #6
 800045e:	400b      	ands	r3, r1
 8000460:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000462:	432b      	orrs	r3, r5
 8000464:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000466:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000468:	b2c0      	uxtb	r0, r0
 800046a:	220f      	movs	r2, #15
 800046c:	4002      	ands	r2, r0
 800046e:	3a08      	subs	r2, #8
 8000470:	0892      	lsrs	r2, r2, #2
 8000472:	0092      	lsls	r2, r2, #2
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_NVIC_SetPriority+0x60>)
 8000476:	18d3      	adds	r3, r2, r3
 8000478:	69dd      	ldr	r5, [r3, #28]
 800047a:	2403      	movs	r4, #3
 800047c:	4020      	ands	r0, r4
 800047e:	00c0      	lsls	r0, r0, #3
 8000480:	22ff      	movs	r2, #255	; 0xff
 8000482:	0014      	movs	r4, r2
 8000484:	4084      	lsls	r4, r0
 8000486:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000488:	0189      	lsls	r1, r1, #6
 800048a:	4011      	ands	r1, r2
 800048c:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048e:	4329      	orrs	r1, r5
 8000490:	61d9      	str	r1, [r3, #28]
 8000492:	e7e8      	b.n	8000466 <HAL_NVIC_SetPriority+0x2e>
 8000494:	e000e100 	.word	0xe000e100
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800049c:	2800      	cmp	r0, #0
 800049e:	db05      	blt.n	80004ac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004a0:	231f      	movs	r3, #31
 80004a2:	4018      	ands	r0, r3
 80004a4:	3b1e      	subs	r3, #30
 80004a6:	4083      	lsls	r3, r0
 80004a8:	4a01      	ldr	r2, [pc, #4]	; (80004b0 <HAL_NVIC_EnableIRQ+0x14>)
 80004aa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	e000e100 	.word	0xe000e100

080004b4 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <FLASH_SetErrorCode+0x34>)
 80004b6:	68da      	ldr	r2, [r3, #12]
  uint32_t flags = 0U;
 80004b8:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80004ba:	06d2      	lsls	r2, r2, #27
 80004bc:	d505      	bpl.n	80004ca <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <FLASH_SetErrorCode+0x38>)
 80004c0:	69d3      	ldr	r3, [r2, #28]
 80004c2:	2102      	movs	r1, #2
 80004c4:	430b      	orrs	r3, r1
 80004c6:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80004c8:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <FLASH_SetErrorCode+0x34>)
 80004cc:	68d2      	ldr	r2, [r2, #12]
 80004ce:	0752      	lsls	r2, r2, #29
 80004d0:	d506      	bpl.n	80004e0 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80004d2:	4906      	ldr	r1, [pc, #24]	; (80004ec <FLASH_SetErrorCode+0x38>)
 80004d4:	69ca      	ldr	r2, [r1, #28]
 80004d6:	2001      	movs	r0, #1
 80004d8:	4302      	orrs	r2, r0
 80004da:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80004dc:	2204      	movs	r2, #4
 80004de:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80004e0:	4a01      	ldr	r2, [pc, #4]	; (80004e8 <FLASH_SetErrorCode+0x34>)
 80004e2:	60d3      	str	r3, [r2, #12]
}  
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40022000 	.word	0x40022000
 80004ec:	200003c0 	.word	0x200003c0

080004f0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_FLASH_Unlock+0x1c>)
 80004f2:	691b      	ldr	r3, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80004f4:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004f6:	061b      	lsls	r3, r3, #24
 80004f8:	d507      	bpl.n	800050a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <HAL_FLASH_Unlock+0x1c>)
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_FLASH_Unlock+0x20>)
 80004fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_FLASH_Unlock+0x24>)
 8000502:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8000508:	0fc0      	lsrs	r0, r0, #31
}
 800050a:	4770      	bx	lr
 800050c:	40022000 	.word	0x40022000
 8000510:	45670123 	.word	0x45670123
 8000514:	cdef89ab 	.word	0xcdef89ab

08000518 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <HAL_FLASH_Lock+0x10>)
 800051a:	6913      	ldr	r3, [r2, #16]
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	430b      	orrs	r3, r1
 8000520:	6113      	str	r3, [r2, #16]
}
 8000522:	2000      	movs	r0, #0
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40022000 	.word	0x40022000

0800052c <FLASH_WaitForLastOperation>:
{
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000530:	f7ff ff7c 	bl	800042c <HAL_GetTick>
 8000534:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000536:	4e13      	ldr	r6, [pc, #76]	; (8000584 <FLASH_WaitForLastOperation+0x58>)
 8000538:	2501      	movs	r5, #1
 800053a:	68f3      	ldr	r3, [r6, #12]
 800053c:	421d      	tst	r5, r3
 800053e:	d00a      	beq.n	8000556 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
 8000542:	d0fa      	beq.n	800053a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000544:	2c00      	cmp	r4, #0
 8000546:	d01a      	beq.n	800057e <FLASH_WaitForLastOperation+0x52>
 8000548:	f7ff ff70 	bl	800042c <HAL_GetTick>
 800054c:	1bc0      	subs	r0, r0, r7
 800054e:	42a0      	cmp	r0, r4
 8000550:	d9f3      	bls.n	800053a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000552:	2003      	movs	r0, #3
 8000554:	e012      	b.n	800057c <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <FLASH_WaitForLastOperation+0x58>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	069b      	lsls	r3, r3, #26
 800055c:	d502      	bpl.n	8000564 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <FLASH_WaitForLastOperation+0x58>)
 8000560:	2220      	movs	r2, #32
 8000562:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <FLASH_WaitForLastOperation+0x58>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	06db      	lsls	r3, r3, #27
 800056a:	d404      	bmi.n	8000576 <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <FLASH_WaitForLastOperation+0x58>)
 800056e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000572:	075b      	lsls	r3, r3, #29
 8000574:	d502      	bpl.n	800057c <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8000576:	f7ff ff9d 	bl	80004b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800057a:	2001      	movs	r0, #1
}
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800057e:	2003      	movs	r0, #3
 8000580:	e7fc      	b.n	800057c <FLASH_WaitForLastOperation+0x50>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40022000 	.word	0x40022000

08000588 <HAL_FLASH_Program>:
{
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46de      	mov	lr, fp
 800058c:	4657      	mov	r7, sl
 800058e:	464e      	mov	r6, r9
 8000590:	4645      	mov	r5, r8
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	b083      	sub	sp, #12
 8000596:	0004      	movs	r4, r0
 8000598:	000e      	movs	r6, r1
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <HAL_FLASH_Program+0xc0>)
 80005a0:	7e1b      	ldrb	r3, [r3, #24]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d04b      	beq.n	800063e <HAL_FLASH_Program+0xb6>
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <HAL_FLASH_Program+0xc0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80005ac:	4827      	ldr	r0, [pc, #156]	; (800064c <HAL_FLASH_Program+0xc4>)
 80005ae:	f7ff ffbd 	bl	800052c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d139      	bne.n	800062a <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80005b6:	2c01      	cmp	r4, #1
 80005b8:	d043      	beq.n	8000642 <HAL_FLASH_Program+0xba>
      nbiterations = 4U;
 80005ba:	3c02      	subs	r4, #2
 80005bc:	4263      	negs	r3, r4
 80005be:	415c      	adcs	r4, r3
 80005c0:	4264      	negs	r4, r4
 80005c2:	2301      	movs	r3, #1
 80005c4:	439c      	bics	r4, r3
 80005c6:	46a0      	mov	r8, r4
 80005c8:	3303      	adds	r3, #3
 80005ca:	469c      	mov	ip, r3
 80005cc:	44e0      	add	r8, ip
{
 80005ce:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_FLASH_Program+0xc0>)
 80005d2:	469b      	mov	fp, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80005d8:	4c1d      	ldr	r4, [pc, #116]	; (8000650 <HAL_FLASH_Program+0xc8>)
 80005da:	e01e      	b.n	800061a <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80005dc:	2220      	movs	r2, #32
 80005de:	1ad2      	subs	r2, r2, r3
 80005e0:	4649      	mov	r1, r9
 80005e2:	4091      	lsls	r1, r2
 80005e4:	000a      	movs	r2, r1
 80005e6:	9901      	ldr	r1, [sp, #4]
 80005e8:	40d9      	lsrs	r1, r3
 80005ea:	000b      	movs	r3, r1
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005f0:	465a      	mov	r2, fp
 80005f2:	4651      	mov	r1, sl
 80005f4:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80005f6:	6922      	ldr	r2, [r4, #16]
 80005f8:	2701      	movs	r7, #1
 80005fa:	433a      	orrs	r2, r7
 80005fc:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80005fe:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <HAL_FLASH_Program+0xc4>)
 8000602:	f7ff ff93 	bl	800052c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000606:	6923      	ldr	r3, [r4, #16]
 8000608:	43bb      	bics	r3, r7
 800060a:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800060c:	2800      	cmp	r0, #0
 800060e:	d10c      	bne.n	800062a <HAL_FLASH_Program+0xa2>
 8000610:	3501      	adds	r5, #1
 8000612:	3602      	adds	r6, #2
    for (index = 0U; index < nbiterations; index++)
 8000614:	b2eb      	uxtb	r3, r5
 8000616:	4598      	cmp	r8, r3
 8000618:	d907      	bls.n	800062a <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800061a:	012b      	lsls	r3, r5, #4
 800061c:	2220      	movs	r2, #32
 800061e:	4252      	negs	r2, r2
 8000620:	189a      	adds	r2, r3, r2
 8000622:	d4db      	bmi.n	80005dc <HAL_FLASH_Program+0x54>
 8000624:	464b      	mov	r3, r9
 8000626:	40d3      	lsrs	r3, r2
 8000628:	e7e1      	b.n	80005ee <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_FLASH_Program+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	b003      	add	sp, #12
 8000632:	bc3c      	pop	{r2, r3, r4, r5}
 8000634:	4690      	mov	r8, r2
 8000636:	4699      	mov	r9, r3
 8000638:	46a2      	mov	sl, r4
 800063a:	46ab      	mov	fp, r5
 800063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800063e:	2002      	movs	r0, #2
 8000640:	e7f6      	b.n	8000630 <HAL_FLASH_Program+0xa8>
      nbiterations = 1U;
 8000642:	2301      	movs	r3, #1
 8000644:	4698      	mov	r8, r3
 8000646:	e7c2      	b.n	80005ce <HAL_FLASH_Program+0x46>
 8000648:	200003c0 	.word	0x200003c0
 800064c:	0000c350 	.word	0x0000c350
 8000650:	40022000 	.word	0x40022000

08000654 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <FLASH_MassErase+0x1c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <FLASH_MassErase+0x20>)
 800065c:	691a      	ldr	r2, [r3, #16]
 800065e:	2104      	movs	r1, #4
 8000660:	430a      	orrs	r2, r1
 8000662:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000664:	691a      	ldr	r2, [r3, #16]
 8000666:	313c      	adds	r1, #60	; 0x3c
 8000668:	430a      	orrs	r2, r1
 800066a:	611a      	str	r2, [r3, #16]
}
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	200003c0 	.word	0x200003c0
 8000674:	40022000 	.word	0x40022000

08000678 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <FLASH_PageErase+0x1c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <FLASH_PageErase+0x20>)
 8000680:	691a      	ldr	r2, [r3, #16]
 8000682:	2102      	movs	r1, #2
 8000684:	430a      	orrs	r2, r1
 8000686:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000688:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800068a:	691a      	ldr	r2, [r3, #16]
 800068c:	313e      	adds	r1, #62	; 0x3e
 800068e:	430a      	orrs	r2, r1
 8000690:	611a      	str	r2, [r3, #16]
}
 8000692:	4770      	bx	lr
 8000694:	200003c0 	.word	0x200003c0
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_FLASHEx_Erase>:
{
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	46c6      	mov	lr, r8
 80006a0:	b500      	push	{lr}
 80006a2:	0006      	movs	r6, r0
 80006a4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <HAL_FLASHEx_Erase+0xb4>)
 80006a8:	7e1b      	ldrb	r3, [r3, #24]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d04d      	beq.n	800074a <HAL_FLASHEx_Erase+0xae>
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <HAL_FLASHEx_Erase+0xb4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80006b4:	6803      	ldr	r3, [r0, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d029      	beq.n	800070e <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80006ba:	4826      	ldr	r0, [pc, #152]	; (8000754 <HAL_FLASHEx_Erase+0xb8>)
 80006bc:	f7ff ff36 	bl	800052c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80006c0:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d129      	bne.n	800071a <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFFU;
 80006c6:	2301      	movs	r3, #1
 80006c8:	425b      	negs	r3, r3
 80006ca:	4642      	mov	r2, r8
 80006cc:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80006ce:	6874      	ldr	r4, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80006d0:	68b3      	ldr	r3, [r6, #8]
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80006d6:	429c      	cmp	r4, r3
 80006d8:	d235      	bcs.n	8000746 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80006da:	4f1f      	ldr	r7, [pc, #124]	; (8000758 <HAL_FLASHEx_Erase+0xbc>)
 80006dc:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80006de:	0020      	movs	r0, r4
 80006e0:	f7ff ffca 	bl	8000678 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <HAL_FLASHEx_Erase+0xb8>)
 80006e6:	f7ff ff21 	bl	800052c <FLASH_WaitForLastOperation>
 80006ea:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	43ab      	bics	r3, r5
 80006f0:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d124      	bne.n	8000740 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	469c      	mov	ip, r3
 80006fc:	4464      	add	r4, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80006fe:	68b3      	ldr	r3, [r6, #8]
 8000700:	029b      	lsls	r3, r3, #10
 8000702:	6871      	ldr	r1, [r6, #4]
 8000704:	468c      	mov	ip, r1
 8000706:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8e8      	bhi.n	80006de <HAL_FLASHEx_Erase+0x42>
 800070c:	e005      	b.n	800071a <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <HAL_FLASHEx_Erase+0xb8>)
 8000710:	f7ff ff0c 	bl	800052c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000714:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000716:	2800      	cmp	r0, #0
 8000718:	d006      	beq.n	8000728 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_FLASHEx_Erase+0xb4>)
 800071c:	2100      	movs	r1, #0
 800071e:	7619      	strb	r1, [r3, #24]
}
 8000720:	0010      	movs	r0, r2
 8000722:	bc04      	pop	{r2}
 8000724:	4690      	mov	r8, r2
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8000728:	f7ff ff94 	bl	8000654 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <HAL_FLASHEx_Erase+0xb8>)
 800072e:	f7ff fefd 	bl	800052c <FLASH_WaitForLastOperation>
 8000732:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000734:	4908      	ldr	r1, [pc, #32]	; (8000758 <HAL_FLASHEx_Erase+0xbc>)
 8000736:	690b      	ldr	r3, [r1, #16]
 8000738:	2004      	movs	r0, #4
 800073a:	4383      	bics	r3, r0
 800073c:	610b      	str	r3, [r1, #16]
 800073e:	e7ec      	b.n	800071a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8000740:	4643      	mov	r3, r8
 8000742:	601c      	str	r4, [r3, #0]
            break;
 8000744:	e7e9      	b.n	800071a <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000746:	2201      	movs	r2, #1
 8000748:	e7e7      	b.n	800071a <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 800074a:	2202      	movs	r2, #2
 800074c:	e7e8      	b.n	8000720 <HAL_FLASHEx_Erase+0x84>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	200003c0 	.word	0x200003c0
 8000754:	0000c350 	.word	0x0000c350
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	46de      	mov	lr, fp
 8000760:	4657      	mov	r7, sl
 8000762:	464e      	mov	r6, r9
 8000764:	4645      	mov	r5, r8
 8000766:	b5e0      	push	{r5, r6, r7, lr}
 8000768:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076a:	680a      	ldr	r2, [r1, #0]
 800076c:	2a00      	cmp	r2, #0
 800076e:	d100      	bne.n	8000772 <HAL_GPIO_Init+0x16>
 8000770:	e0be      	b.n	80008f0 <HAL_GPIO_Init+0x194>
  uint32_t position = 0x00u;
 8000772:	2400      	movs	r4, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000774:	2310      	movs	r3, #16
 8000776:	469a      	mov	sl, r3
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000778:	3b0d      	subs	r3, #13
 800077a:	4699      	mov	r9, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800077c:	4b60      	ldr	r3, [pc, #384]	; (8000900 <HAL_GPIO_Init+0x1a4>)
 800077e:	18c3      	adds	r3, r0, r3
 8000780:	425d      	negs	r5, r3
 8000782:	416b      	adcs	r3, r5
 8000784:	425b      	negs	r3, r3
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	e046      	b.n	8000818 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3u];
 800078a:	08e5      	lsrs	r5, r4, #3
 800078c:	00ad      	lsls	r5, r5, #2
 800078e:	1946      	adds	r6, r0, r5
 8000790:	9600      	str	r6, [sp, #0]
 8000792:	6a36      	ldr	r6, [r6, #32]
 8000794:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000796:	2607      	movs	r6, #7
 8000798:	4026      	ands	r6, r4
 800079a:	00b6      	lsls	r6, r6, #2
 800079c:	46b4      	mov	ip, r6
 800079e:	260f      	movs	r6, #15
 80007a0:	4665      	mov	r5, ip
 80007a2:	40ae      	lsls	r6, r5
 80007a4:	46b3      	mov	fp, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	465d      	mov	r5, fp
 80007aa:	43ae      	bics	r6, r5
 80007ac:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ae:	690e      	ldr	r6, [r1, #16]
 80007b0:	4665      	mov	r5, ip
 80007b2:	40ae      	lsls	r6, r5
 80007b4:	46b4      	mov	ip, r6
 80007b6:	4646      	mov	r6, r8
 80007b8:	4665      	mov	r5, ip
 80007ba:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 80007bc:	0035      	movs	r5, r6
 80007be:	9e00      	ldr	r6, [sp, #0]
 80007c0:	6235      	str	r5, [r6, #32]
 80007c2:	e058      	b.n	8000876 <HAL_GPIO_Init+0x11a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007c4:	2500      	movs	r5, #0
 80007c6:	40bd      	lsls	r5, r7
 80007c8:	4666      	mov	r6, ip
 80007ca:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007cc:	609d      	str	r5, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <HAL_GPIO_Init+0x1a8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 80007d2:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d4:	684e      	ldr	r6, [r1, #4]
 80007d6:	03f6      	lsls	r6, r6, #15
 80007d8:	d500      	bpl.n	80007dc <HAL_GPIO_Init+0x80>
 80007da:	e081      	b.n	80008e0 <HAL_GPIO_Init+0x184>
        temp &= ~(iocurrent);
 80007dc:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80007de:	4f49      	ldr	r7, [pc, #292]	; (8000904 <HAL_GPIO_Init+0x1a8>)
 80007e0:	603b      	str	r3, [r7, #0]

        temp = EXTI->EMR;
 80007e2:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e4:	684e      	ldr	r6, [r1, #4]
 80007e6:	03b6      	lsls	r6, r6, #14
 80007e8:	d47c      	bmi.n	80008e4 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 80007ea:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80007ec:	4f45      	ldr	r7, [pc, #276]	; (8000904 <HAL_GPIO_Init+0x1a8>)
 80007ee:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f0:	68bb      	ldr	r3, [r7, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f2:	684e      	ldr	r6, [r1, #4]
 80007f4:	02f6      	lsls	r6, r6, #11
 80007f6:	d477      	bmi.n	80008e8 <HAL_GPIO_Init+0x18c>
        temp &= ~(iocurrent);
 80007f8:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80007fa:	4f42      	ldr	r7, [pc, #264]	; (8000904 <HAL_GPIO_Init+0x1a8>)
 80007fc:	60bb      	str	r3, [r7, #8]

        temp = EXTI->FTSR;
 80007fe:	68fb      	ldr	r3, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000800:	684e      	ldr	r6, [r1, #4]
 8000802:	02b6      	lsls	r6, r6, #10
 8000804:	d472      	bmi.n	80008ec <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000806:	402b      	ands	r3, r5
 8000808:	001a      	movs	r2, r3
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <HAL_GPIO_Init+0x1a8>)
 800080c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800080e:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	0013      	movs	r3, r2
 8000814:	40e3      	lsrs	r3, r4
 8000816:	d06b      	beq.n	80008f0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000818:	2501      	movs	r5, #1
 800081a:	40a5      	lsls	r5, r4
 800081c:	402a      	ands	r2, r5
    if (iocurrent != 0x00u)
 800081e:	d0f6      	beq.n	800080e <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000820:	684b      	ldr	r3, [r1, #4]
 8000822:	4657      	mov	r7, sl
 8000824:	43bb      	bics	r3, r7
 8000826:	3b01      	subs	r3, #1
 8000828:	2b01      	cmp	r3, #1
 800082a:	d813      	bhi.n	8000854 <HAL_GPIO_Init+0xf8>
        temp = GPIOx->OSPEEDR;
 800082c:	6883      	ldr	r3, [r0, #8]
 800082e:	0066      	lsls	r6, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000830:	464f      	mov	r7, r9
 8000832:	40b7      	lsls	r7, r6
 8000834:	43bb      	bics	r3, r7
 8000836:	001f      	movs	r7, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000838:	68cb      	ldr	r3, [r1, #12]
 800083a:	40b3      	lsls	r3, r6
 800083c:	433b      	orrs	r3, r7
        GPIOx->OSPEEDR = temp;
 800083e:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000840:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000842:	43ab      	bics	r3, r5
 8000844:	001d      	movs	r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000846:	684b      	ldr	r3, [r1, #4]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	2601      	movs	r6, #1
 800084c:	4033      	ands	r3, r6
 800084e:	40a3      	lsls	r3, r4
 8000850:	432b      	orrs	r3, r5
        GPIOx->OTYPER = temp;
 8000852:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000854:	68c5      	ldr	r5, [r0, #12]
 8000856:	0067      	lsls	r7, r4, #1
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000858:	464b      	mov	r3, r9
 800085a:	40bb      	lsls	r3, r7
 800085c:	43db      	mvns	r3, r3
 800085e:	401d      	ands	r5, r3
 8000860:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000862:	688d      	ldr	r5, [r1, #8]
 8000864:	40bd      	lsls	r5, r7
 8000866:	4666      	mov	r6, ip
 8000868:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800086a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086c:	684d      	ldr	r5, [r1, #4]
 800086e:	4656      	mov	r6, sl
 8000870:	43b5      	bics	r5, r6
 8000872:	2d02      	cmp	r5, #2
 8000874:	d089      	beq.n	800078a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8000876:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000878:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800087a:	684b      	ldr	r3, [r1, #4]
 800087c:	464e      	mov	r6, r9
 800087e:	4033      	ands	r3, r6
 8000880:	40bb      	lsls	r3, r7
 8000882:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 8000884:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000886:	684b      	ldr	r3, [r1, #4]
 8000888:	2580      	movs	r5, #128	; 0x80
 800088a:	056d      	lsls	r5, r5, #21
 800088c:	422b      	tst	r3, r5
 800088e:	d0be      	beq.n	800080e <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_GPIO_Init+0x1ac>)
 8000892:	699d      	ldr	r5, [r3, #24]
 8000894:	2601      	movs	r6, #1
 8000896:	4335      	orrs	r5, r6
 8000898:	619d      	str	r5, [r3, #24]
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4033      	ands	r3, r6
 800089e:	9303      	str	r3, [sp, #12]
 80008a0:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80008a2:	08a3      	lsrs	r3, r4, #2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4d19      	ldr	r5, [pc, #100]	; (800090c <HAL_GPIO_Init+0x1b0>)
 80008a8:	46ac      	mov	ip, r5
 80008aa:	4463      	add	r3, ip
 80008ac:	689d      	ldr	r5, [r3, #8]
 80008ae:	46ac      	mov	ip, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008b0:	464f      	mov	r7, r9
 80008b2:	4027      	ands	r7, r4
 80008b4:	00bf      	lsls	r7, r7, #2
 80008b6:	250f      	movs	r5, #15
 80008b8:	40bd      	lsls	r5, r7
 80008ba:	4666      	mov	r6, ip
 80008bc:	43ae      	bics	r6, r5
 80008be:	46b4      	mov	ip, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008c0:	2590      	movs	r5, #144	; 0x90
 80008c2:	05ed      	lsls	r5, r5, #23
 80008c4:	42a8      	cmp	r0, r5
 80008c6:	d100      	bne.n	80008ca <HAL_GPIO_Init+0x16e>
 80008c8:	e77c      	b.n	80007c4 <HAL_GPIO_Init+0x68>
 80008ca:	4d11      	ldr	r5, [pc, #68]	; (8000910 <HAL_GPIO_Init+0x1b4>)
 80008cc:	42a8      	cmp	r0, r5
 80008ce:	d005      	beq.n	80008dc <HAL_GPIO_Init+0x180>
 80008d0:	2502      	movs	r5, #2
 80008d2:	9e01      	ldr	r6, [sp, #4]
 80008d4:	43ae      	bics	r6, r5
 80008d6:	0035      	movs	r5, r6
 80008d8:	3505      	adds	r5, #5
 80008da:	e774      	b.n	80007c6 <HAL_GPIO_Init+0x6a>
 80008dc:	2501      	movs	r5, #1
 80008de:	e772      	b.n	80007c6 <HAL_GPIO_Init+0x6a>
          temp |= iocurrent;
 80008e0:	4313      	orrs	r3, r2
 80008e2:	e77c      	b.n	80007de <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 80008e4:	4313      	orrs	r3, r2
 80008e6:	e781      	b.n	80007ec <HAL_GPIO_Init+0x90>
          temp |= iocurrent;
 80008e8:	4313      	orrs	r3, r2
 80008ea:	e786      	b.n	80007fa <HAL_GPIO_Init+0x9e>
          temp |= iocurrent;
 80008ec:	431a      	orrs	r2, r3
 80008ee:	e78c      	b.n	800080a <HAL_GPIO_Init+0xae>
  } 
}
 80008f0:	b005      	add	sp, #20
 80008f2:	bc3c      	pop	{r2, r3, r4, r5}
 80008f4:	4690      	mov	r8, r2
 80008f6:	4699      	mov	r9, r3
 80008f8:	46a2      	mov	sl, r4
 80008fa:	46ab      	mov	fp, r5
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	b7fff800 	.word	0xb7fff800
 8000904:	40010400 	.word	0x40010400
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000
 8000910:	48000400 	.word	0x48000400

08000914 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000914:	6900      	ldr	r0, [r0, #16]
 8000916:	4008      	ands	r0, r1
 8000918:	1e41      	subs	r1, r0, #1
 800091a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800091c:	b2c0      	uxtb	r0, r0
  }
 800091e:	4770      	bx	lr

08000920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000920:	2a00      	cmp	r2, #0
 8000922:	d101      	bne.n	8000928 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000924:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000926:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000928:	6181      	str	r1, [r0, #24]
 800092a:	e7fc      	b.n	8000926 <HAL_GPIO_WritePin+0x6>

0800092c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800092c:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4218      	tst	r0, r3
 8000934:	d100      	bne.n	8000938 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000936:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800093a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800093c:	f003 fcd2 	bl	80042e4 <HAL_GPIO_EXTI_Callback>
}
 8000940:	e7f9      	b.n	8000936 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40010400 	.word	0x40010400

08000948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	46d6      	mov	lr, sl
 800094c:	464f      	mov	r7, r9
 800094e:	4646      	mov	r6, r8
 8000950:	b5c0      	push	{r6, r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000956:	d100      	bne.n	800095a <HAL_PCD_Init+0x12>
 8000958:	e06f      	b.n	8000a3a <HAL_PCD_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <HAL_PCD_Init+0xf8>)
 800095c:	5cc3      	ldrb	r3, [r0, r3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d05f      	beq.n	8000a22 <HAL_PCD_Init+0xda>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000962:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <HAL_PCD_Init+0xf8>)
 8000964:	2203      	movs	r2, #3
 8000966:	54e2      	strb	r2, [r4, r3]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f001 feb5 	bl	80026d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800096e:	6861      	ldr	r1, [r4, #4]
 8000970:	2900      	cmp	r1, #0
 8000972:	d039      	beq.n	80009e8 <HAL_PCD_Init+0xa0>
 8000974:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000976:	2329      	movs	r3, #41	; 0x29
 8000978:	4698      	mov	r8, r3
 800097a:	3b28      	subs	r3, #40	; 0x28
 800097c:	469c      	mov	ip, r3
    hpcd->IN_ep[i].num = i;
 800097e:	3327      	adds	r3, #39	; 0x27
 8000980:	4699      	mov	r9, r3
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000982:	3303      	adds	r3, #3
 8000984:	469a      	mov	sl, r3
 8000986:	2500      	movs	r5, #0
 8000988:	0090      	lsls	r0, r2, #2
 800098a:	1883      	adds	r3, r0, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	18e3      	adds	r3, r4, r3
    hpcd->IN_ep[i].is_in = 1U;
 8000990:	4646      	mov	r6, r8
 8000992:	4667      	mov	r7, ip
 8000994:	559f      	strb	r7, [r3, r6]
    hpcd->IN_ep[i].num = i;
 8000996:	464e      	mov	r6, r9
 8000998:	559a      	strb	r2, [r3, r6]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800099a:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800099c:	4656      	mov	r6, sl
 800099e:	559d      	strb	r5, [r3, r6]
    hpcd->IN_ep[i].maxpacket = 0U;
 80009a0:	639d      	str	r5, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009a2:	63dd      	str	r5, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80009a4:	641d      	str	r5, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a6:	3201      	adds	r2, #1
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	428a      	cmp	r2, r1
 80009ac:	d3ec      	bcc.n	8000988 <HAL_PCD_Init+0x40>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ae:	2000      	movs	r0, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80009b0:	2500      	movs	r5, #0
 80009b2:	0082      	lsls	r2, r0, #2
 80009b4:	1813      	adds	r3, r2, r0
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	18e3      	adds	r3, r4, r3
 80009ba:	001e      	movs	r6, r3
 80009bc:	366a      	adds	r6, #106	; 0x6a
 80009be:	36ff      	adds	r6, #255	; 0xff
 80009c0:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].num = i;
 80009c2:	3e01      	subs	r6, #1
 80009c4:	7030      	strb	r0, [r6, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009c6:	3603      	adds	r6, #3
 80009c8:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009ca:	360d      	adds	r6, #13
 80009cc:	6035      	str	r5, [r6, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80009ce:	337d      	adds	r3, #125	; 0x7d
 80009d0:	33ff      	adds	r3, #255	; 0xff
 80009d2:	601d      	str	r5, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009d4:	1812      	adds	r2, r2, r0
 80009d6:	00d2      	lsls	r2, r2, #3
 80009d8:	18a2      	adds	r2, r4, r2
 80009da:	3281      	adds	r2, #129	; 0x81
 80009dc:	32ff      	adds	r2, #255	; 0xff
 80009de:	6015      	str	r5, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009e0:	3001      	adds	r0, #1
 80009e2:	b2c0      	uxtb	r0, r0
 80009e4:	4288      	cmp	r0, r1
 80009e6:	d3e4      	bcc.n	80009b2 <HAL_PCD_Init+0x6a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80009e8:	0023      	movs	r3, r4
 80009ea:	3310      	adds	r3, #16
 80009ec:	466a      	mov	r2, sp
 80009ee:	cb23      	ldmia	r3!, {r0, r1, r5}
 80009f0:	c223      	stmia	r2!, {r0, r1, r5}
 80009f2:	cb03      	ldmia	r3!, {r0, r1}
 80009f4:	c203      	stmia	r2!, {r0, r1}
 80009f6:	6861      	ldr	r1, [r4, #4]
 80009f8:	68a2      	ldr	r2, [r4, #8]
 80009fa:	68e3      	ldr	r3, [r4, #12]
 80009fc:	6820      	ldr	r0, [r4, #0]
 80009fe:	f001 fe75 	bl	80026ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000a02:	2324      	movs	r3, #36	; 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	54e2      	strb	r2, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_PCD_Init+0xf8>)
 8000a0a:	3201      	adds	r2, #1
 8000a0c:	54e2      	strb	r2, [r4, r3]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000a0e:	2000      	movs	r0, #0
  if (hpcd->Init.lpm_enable == 1U)
 8000a10:	69e3      	ldr	r3, [r4, #28]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d00c      	beq.n	8000a30 <HAL_PCD_Init+0xe8>
}
 8000a16:	b006      	add	sp, #24
 8000a18:	bc1c      	pop	{r2, r3, r4}
 8000a1a:	4690      	mov	r8, r2
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	46a2      	mov	sl, r4
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000a22:	23aa      	movs	r3, #170	; 0xaa
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	2200      	movs	r2, #0
 8000a28:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8000a2a:	f003 fe53 	bl	80046d4 <HAL_PCD_MspInit>
 8000a2e:	e798      	b.n	8000962 <HAL_PCD_Init+0x1a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000a30:	0020      	movs	r0, r4
 8000a32:	f000 ff32 	bl	800189a <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8000a36:	2000      	movs	r0, #0
 8000a38:	e7ed      	b.n	8000a16 <HAL_PCD_Init+0xce>
    return HAL_ERROR;
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	e7eb      	b.n	8000a16 <HAL_PCD_Init+0xce>
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	000002a9 	.word	0x000002a9

08000a44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000a48:	23aa      	movs	r3, #170	; 0xaa
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	5cc3      	ldrb	r3, [r0, r3]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d00d      	beq.n	8000a6e <HAL_PCD_Start+0x2a>
 8000a52:	25aa      	movs	r5, #170	; 0xaa
 8000a54:	00ad      	lsls	r5, r5, #2
 8000a56:	2301      	movs	r3, #1
 8000a58:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000a5a:	6800      	ldr	r0, [r0, #0]
 8000a5c:	f001 fe32 	bl	80026c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	f002 f8d4 	bl	8002c0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a66:	2300      	movs	r3, #0
 8000a68:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
}
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	e7fc      	b.n	8000a6c <HAL_PCD_Start+0x28>

08000a72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000a72:	b570      	push	{r4, r5, r6, lr}
 8000a74:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000a76:	23aa      	movs	r3, #170	; 0xaa
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	5cc3      	ldrb	r3, [r0, r3]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d00c      	beq.n	8000a9a <HAL_PCD_SetAddress+0x28>
 8000a80:	25aa      	movs	r5, #170	; 0xaa
 8000a82:	00ad      	lsls	r5, r5, #2
 8000a84:	2301      	movs	r3, #1
 8000a86:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 8000a88:	3323      	adds	r3, #35	; 0x23
 8000a8a:	54c1      	strb	r1, [r0, r3]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000a8c:	6800      	ldr	r0, [r0, #0]
 8000a8e:	f002 f8b7 	bl	8002c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a92:	2300      	movs	r3, #0
 8000a94:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 8000a96:	2000      	movs	r0, #0
}
 8000a98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	e7fc      	b.n	8000a98 <HAL_PCD_SetAddress+0x26>
	...

08000aa0 <HAL_PCD_IRQHandler>:
{
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	46de      	mov	lr, fp
 8000aa4:	4657      	mov	r7, sl
 8000aa6:	464e      	mov	r6, r9
 8000aa8:	4645      	mov	r5, r8
 8000aaa:	b5e0      	push	{r5, r6, r7, lr}
 8000aac:	b083      	sub	sp, #12
 8000aae:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ab0:	6800      	ldr	r0, [r0, #0]
 8000ab2:	f002 f8b4 	bl	8002c1e <USB_ReadInterrupts>
 8000ab6:	0403      	lsls	r3, r0, #16
 8000ab8:	d500      	bpl.n	8000abc <HAL_PCD_IRQHandler+0x1c>
 8000aba:	e08a      	b.n	8000bd2 <HAL_PCD_IRQHandler+0x132>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	f002 f8ae 	bl	8002c1e <USB_ReadInterrupts>
 8000ac2:	0543      	lsls	r3, r0, #21
 8000ac4:	d501      	bpl.n	8000aca <HAL_PCD_IRQHandler+0x2a>
 8000ac6:	f000 fd45 	bl	8001554 <HAL_PCD_IRQHandler+0xab4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000aca:	6820      	ldr	r0, [r4, #0]
 8000acc:	f002 f8a7 	bl	8002c1e <USB_ReadInterrupts>
 8000ad0:	0443      	lsls	r3, r0, #17
 8000ad2:	d505      	bpl.n	8000ae0 <HAL_PCD_IRQHandler+0x40>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	2244      	movs	r2, #68	; 0x44
 8000ad8:	5a8b      	ldrh	r3, [r1, r2]
 8000ada:	48cd      	ldr	r0, [pc, #820]	; (8000e10 <HAL_PCD_IRQHandler+0x370>)
 8000adc:	4003      	ands	r3, r0
 8000ade:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	f002 f89c 	bl	8002c1e <USB_ReadInterrupts>
 8000ae6:	0483      	lsls	r3, r0, #18
 8000ae8:	d505      	bpl.n	8000af6 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000aea:	6821      	ldr	r1, [r4, #0]
 8000aec:	2244      	movs	r2, #68	; 0x44
 8000aee:	5a8b      	ldrh	r3, [r1, r2]
 8000af0:	48c8      	ldr	r0, [pc, #800]	; (8000e14 <HAL_PCD_IRQHandler+0x374>)
 8000af2:	4003      	ands	r3, r0
 8000af4:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000af6:	6820      	ldr	r0, [r4, #0]
 8000af8:	f002 f891 	bl	8002c1e <USB_ReadInterrupts>
 8000afc:	04c3      	lsls	r3, r0, #19
 8000afe:	d51a      	bpl.n	8000b36 <HAL_PCD_IRQHandler+0x96>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	5aca      	ldrh	r2, [r1, r3]
 8000b06:	2004      	movs	r0, #4
 8000b08:	4382      	bics	r2, r0
 8000b0a:	52ca      	strh	r2, [r1, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b0c:	6821      	ldr	r1, [r4, #0]
 8000b0e:	5aca      	ldrh	r2, [r1, r3]
 8000b10:	3004      	adds	r0, #4
 8000b12:	4382      	bics	r2, r0
 8000b14:	52ca      	strh	r2, [r1, r3]
    if (hpcd->LPM_State == LPM_L1)
 8000b16:	23b8      	movs	r3, #184	; 0xb8
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	5ce3      	ldrb	r3, [r4, r3]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_PCD_IRQHandler+0x84>
 8000b20:	f000 fd27 	bl	8001572 <HAL_PCD_IRQHandler+0xad2>
    HAL_PCD_ResumeCallback(hpcd);
 8000b24:	0020      	movs	r0, r4
 8000b26:	f003 fe43 	bl	80047b0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b2a:	6821      	ldr	r1, [r4, #0]
 8000b2c:	2244      	movs	r2, #68	; 0x44
 8000b2e:	5a8b      	ldrh	r3, [r1, r2]
 8000b30:	48b9      	ldr	r0, [pc, #740]	; (8000e18 <HAL_PCD_IRQHandler+0x378>)
 8000b32:	4003      	ands	r3, r0
 8000b34:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000b36:	6820      	ldr	r0, [r4, #0]
 8000b38:	f002 f871 	bl	8002c1e <USB_ReadInterrupts>
 8000b3c:	0503      	lsls	r3, r0, #20
 8000b3e:	d501      	bpl.n	8000b44 <HAL_PCD_IRQHandler+0xa4>
 8000b40:	f000 fd21 	bl	8001586 <HAL_PCD_IRQHandler+0xae6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f002 f86a 	bl	8002c1e <USB_ReadInterrupts>
 8000b4a:	0603      	lsls	r3, r0, #24
 8000b4c:	d528      	bpl.n	8000ba0 <HAL_PCD_IRQHandler+0x100>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000b4e:	6821      	ldr	r1, [r4, #0]
 8000b50:	2244      	movs	r2, #68	; 0x44
 8000b52:	5a8b      	ldrh	r3, [r1, r2]
 8000b54:	2080      	movs	r0, #128	; 0x80
 8000b56:	4383      	bics	r3, r0
 8000b58:	528b      	strh	r3, [r1, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000b5a:	23b8      	movs	r3, #184	; 0xb8
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	5ce3      	ldrb	r3, [r4, r3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_PCD_IRQHandler+0xc8>
 8000b64:	f000 fd25 	bl	80015b2 <HAL_PCD_IRQHandler+0xb12>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b68:	6821      	ldr	r1, [r4, #0]
 8000b6a:	3340      	adds	r3, #64	; 0x40
 8000b6c:	5aca      	ldrh	r2, [r1, r3]
 8000b6e:	2004      	movs	r0, #4
 8000b70:	4302      	orrs	r2, r0
 8000b72:	52ca      	strh	r2, [r1, r3]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	5aca      	ldrh	r2, [r1, r3]
 8000b78:	2008      	movs	r0, #8
 8000b7a:	4302      	orrs	r2, r0
 8000b7c:	52ca      	strh	r2, [r1, r3]
      hpcd->LPM_State = LPM_L1;
 8000b7e:	23b8      	movs	r3, #184	; 0xb8
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	2201      	movs	r2, #1
 8000b84:	54e2      	strb	r2, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000b86:	2354      	movs	r3, #84	; 0x54
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	5ad2      	ldrh	r2, [r2, r3]
 8000b8c:	0892      	lsrs	r2, r2, #2
 8000b8e:	3b18      	subs	r3, #24
 8000b90:	4013      	ands	r3, r2
 8000b92:	22b9      	movs	r2, #185	; 0xb9
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f000 fe90 	bl	80018c0 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	f002 f83c 	bl	8002c1e <USB_ReadInterrupts>
 8000ba6:	0583      	lsls	r3, r0, #22
 8000ba8:	d501      	bpl.n	8000bae <HAL_PCD_IRQHandler+0x10e>
 8000baa:	f000 fd07 	bl	80015bc <HAL_PCD_IRQHandler+0xb1c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	f002 f835 	bl	8002c1e <USB_ReadInterrupts>
 8000bb4:	05c3      	lsls	r3, r0, #23
 8000bb6:	d505      	bpl.n	8000bc4 <HAL_PCD_IRQHandler+0x124>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bb8:	6821      	ldr	r1, [r4, #0]
 8000bba:	2244      	movs	r2, #68	; 0x44
 8000bbc:	5a8b      	ldrh	r3, [r1, r2]
 8000bbe:	4897      	ldr	r0, [pc, #604]	; (8000e1c <HAL_PCD_IRQHandler+0x37c>)
 8000bc0:	4003      	ands	r3, r0
 8000bc2:	528b      	strh	r3, [r1, r2]
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bc3c      	pop	{r2, r3, r4, r5}
 8000bc8:	4690      	mov	r8, r2
 8000bca:	4699      	mov	r9, r3
 8000bcc:	46a2      	mov	sl, r4
 8000bce:	46ab      	mov	fp, r5
 8000bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000bd2:	2644      	movs	r6, #68	; 0x44
          ep->xfer_len_db = 0U;
          ep->xfer_fill_db = 0;
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000bd4:	231f      	movs	r3, #31
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	3b1e      	subs	r3, #30
 8000bda:	469a      	mov	sl, r3
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000bdc:	6820      	ldr	r0, [r4, #0]
 8000bde:	5b83      	ldrh	r3, [r0, r6]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db00      	blt.n	8000be8 <HAL_PCD_IRQHandler+0x148>
 8000be6:	e769      	b.n	8000abc <HAL_PCD_IRQHandler+0x1c>
    wIstr = hpcd->Instance->ISTR;
 8000be8:	5b83      	ldrh	r3, [r0, r6]
 8000bea:	b29b      	uxth	r3, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000bec:	250f      	movs	r5, #15
 8000bee:	401d      	ands	r5, r3
    if (epindex == 0U)
 8000bf0:	d000      	beq.n	8000bf4 <HAL_PCD_IRQHandler+0x154>
 8000bf2:	e0be      	b.n	8000d72 <HAL_PCD_IRQHandler+0x2d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000bf4:	06db      	lsls	r3, r3, #27
 8000bf6:	d552      	bpl.n	8000c9e <HAL_PCD_IRQHandler+0x1fe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000bf8:	8803      	ldrh	r3, [r0, #0]
 8000bfa:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000bfc:	051a      	lsls	r2, r3, #20
 8000bfe:	d500      	bpl.n	8000c02 <HAL_PCD_IRQHandler+0x162>
 8000c00:	e07e      	b.n	8000d00 <HAL_PCD_IRQHandler+0x260>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	dae9      	bge.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c08:	8803      	ldrh	r3, [r0, #0]
 8000c0a:	4a85      	ldr	r2, [pc, #532]	; (8000e20 <HAL_PCD_IRQHandler+0x380>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	4313      	orrs	r3, r2
 8000c12:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c14:	6820      	ldr	r0, [r4, #0]
 8000c16:	2350      	movs	r3, #80	; 0x50
 8000c18:	5ac3      	ldrh	r3, [r0, r3]
 8000c1a:	22b4      	movs	r2, #180	; 0xb4
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	5ca2      	ldrb	r2, [r4, r2]
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	1882      	adds	r2, r0, r2
 8000c24:	189b      	adds	r3, r3, r2
 8000c26:	4a7f      	ldr	r2, [pc, #508]	; (8000e24 <HAL_PCD_IRQHandler+0x384>)
 8000c28:	4694      	mov	ip, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	059b      	lsls	r3, r3, #22
 8000c30:	0d9b      	lsrs	r3, r3, #22
 8000c32:	0022      	movs	r2, r4
 8000c34:	3269      	adds	r2, #105	; 0x69
 8000c36:	32ff      	adds	r2, #255	; 0xff
 8000c38:	61d3      	str	r3, [r2, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00f      	beq.n	8000c5e <HAL_PCD_IRQHandler+0x1be>
 8000c3e:	6951      	ldr	r1, [r2, #20]
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d00c      	beq.n	8000c5e <HAL_PCD_IRQHandler+0x1be>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000c44:	0015      	movs	r5, r2
 8000c46:	88d2      	ldrh	r2, [r2, #6]
 8000c48:	f002 fb2c 	bl	80032a4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000c4c:	696b      	ldr	r3, [r5, #20]
 8000c4e:	69ea      	ldr	r2, [r5, #28]
 8000c50:	4694      	mov	ip, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000c56:	2100      	movs	r1, #0
 8000c58:	0020      	movs	r0, r4
 8000c5a:	f003 fd64 	bl	8004726 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	2350      	movs	r3, #80	; 0x50
 8000c62:	5ad1      	ldrh	r1, [r2, r3]
 8000c64:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_PCD_IRQHandler+0x384>)
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	185b      	adds	r3, r3, r1
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	3269      	adds	r2, #105	; 0x69
 8000c6e:	32ff      	adds	r2, #255	; 0xff
 8000c70:	6912      	ldr	r2, [r2, #16]
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d167      	bne.n	8000d46 <HAL_PCD_IRQHandler+0x2a6>
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	496b      	ldr	r1, [pc, #428]	; (8000e28 <HAL_PCD_IRQHandler+0x388>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0209      	lsls	r1, r1, #8
 8000c84:	430a      	orrs	r2, r1
 8000c86:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c88:	6822      	ldr	r2, [r4, #0]
 8000c8a:	8813      	ldrh	r3, [r2, #0]
 8000c8c:	4967      	ldr	r1, [pc, #412]	; (8000e2c <HAL_PCD_IRQHandler+0x38c>)
 8000c8e:	4019      	ands	r1, r3
 8000c90:	23c0      	movs	r3, #192	; 0xc0
 8000c92:	019b      	lsls	r3, r3, #6
 8000c94:	404b      	eors	r3, r1
 8000c96:	4966      	ldr	r1, [pc, #408]	; (8000e30 <HAL_PCD_IRQHandler+0x390>)
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	8013      	strh	r3, [r2, #0]
 8000c9c:	e79e      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c9e:	8803      	ldrh	r3, [r0, #0]
 8000ca0:	4a64      	ldr	r2, [pc, #400]	; (8000e34 <HAL_PCD_IRQHandler+0x394>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	0212      	lsls	r2, r2, #8
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	2350      	movs	r3, #80	; 0x50
 8000cb0:	5ad3      	ldrh	r3, [r2, r3]
 8000cb2:	2128      	movs	r1, #40	; 0x28
 8000cb4:	5c61      	ldrb	r1, [r4, r1]
 8000cb6:	00c9      	lsls	r1, r1, #3
 8000cb8:	1852      	adds	r2, r2, r1
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	4a5e      	ldr	r2, [pc, #376]	; (8000e38 <HAL_PCD_IRQHandler+0x398>)
 8000cbe:	4694      	mov	ip, r2
 8000cc0:	4463      	add	r3, ip
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	059b      	lsls	r3, r3, #22
 8000cc6:	0d9b      	lsrs	r3, r3, #22
 8000cc8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000cca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ccc:	4694      	mov	ip, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	0020      	movs	r0, r4
 8000cd6:	f003 fd34 	bl	8004742 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000cda:	2324      	movs	r3, #36	; 0x24
 8000cdc:	5ce3      	ldrb	r3, [r4, r3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_PCD_IRQHandler+0x244>
 8000ce2:	e77b      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
 8000ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d000      	beq.n	8000cec <HAL_PCD_IRQHandler+0x24c>
 8000cea:	e777      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000cec:	2224      	movs	r2, #36	; 0x24
 8000cee:	5ca3      	ldrb	r3, [r4, r2]
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	3934      	subs	r1, #52	; 0x34
 8000cf6:	6820      	ldr	r0, [r4, #0]
 8000cf8:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	54a3      	strb	r3, [r4, r2]
 8000cfe:	e76d      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d00:	2350      	movs	r3, #80	; 0x50
 8000d02:	5ac3      	ldrh	r3, [r0, r3]
 8000d04:	22b4      	movs	r2, #180	; 0xb4
 8000d06:	0052      	lsls	r2, r2, #1
 8000d08:	5ca2      	ldrb	r2, [r4, r2]
 8000d0a:	00d2      	lsls	r2, r2, #3
 8000d0c:	1882      	adds	r2, r0, r2
 8000d0e:	189b      	adds	r3, r3, r2
 8000d10:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <HAL_PCD_IRQHandler+0x384>)
 8000d12:	4694      	mov	ip, r2
 8000d14:	4463      	add	r3, ip
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	059b      	lsls	r3, r3, #22
 8000d1a:	0d9b      	lsrs	r3, r3, #22
 8000d1c:	0022      	movs	r2, r4
 8000d1e:	3269      	adds	r2, #105	; 0x69
 8000d20:	32ff      	adds	r2, #255	; 0xff
 8000d22:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d24:	88d2      	ldrh	r2, [r2, #6]
 8000d26:	21ac      	movs	r1, #172	; 0xac
 8000d28:	0089      	lsls	r1, r1, #2
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f002 faba 	bl	80032a4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	8813      	ldrh	r3, [r2, #0]
 8000d34:	493a      	ldr	r1, [pc, #232]	; (8000e20 <HAL_PCD_IRQHandler+0x380>)
 8000d36:	400b      	ands	r3, r1
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d3e:	0020      	movs	r0, r4
 8000d40:	f003 fce8 	bl	8004714 <HAL_PCD_SetupStageCallback>
 8000d44:	e74a      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d46:	2a3e      	cmp	r2, #62	; 0x3e
 8000d48:	d807      	bhi.n	8000d5a <HAL_PCD_IRQHandler+0x2ba>
 8000d4a:	0851      	lsrs	r1, r2, #1
 8000d4c:	4650      	mov	r0, sl
 8000d4e:	4002      	ands	r2, r0
 8000d50:	1889      	adds	r1, r1, r2
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	b289      	uxth	r1, r1
 8000d56:	8019      	strh	r1, [r3, #0]
 8000d58:	e796      	b.n	8000c88 <HAL_PCD_IRQHandler+0x1e8>
 8000d5a:	0951      	lsrs	r1, r2, #5
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	4002      	ands	r2, r0
 8000d60:	4250      	negs	r0, r2
 8000d62:	4142      	adcs	r2, r0
 8000d64:	1a89      	subs	r1, r1, r2
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	4a34      	ldr	r2, [pc, #208]	; (8000e3c <HAL_PCD_IRQHandler+0x39c>)
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	b292      	uxth	r2, r2
 8000d6e:	801a      	strh	r2, [r3, #0]
 8000d70:	e78a      	b.n	8000c88 <HAL_PCD_IRQHandler+0x1e8>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d72:	00af      	lsls	r7, r5, #2
 8000d74:	19c0      	adds	r0, r0, r7
 8000d76:	8803      	ldrh	r3, [r0, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4699      	mov	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db5e      	blt.n	8000e40 <HAL_PCD_IRQHandler+0x3a0>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000d82:	464b      	mov	r3, r9
 8000d84:	061b      	lsls	r3, r3, #24
 8000d86:	d400      	bmi.n	8000d8a <HAL_PCD_IRQHandler+0x2ea>
 8000d88:	e728      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	19da      	adds	r2, r3, r7
 8000d8e:	8813      	ldrh	r3, [r2, #0]
 8000d90:	4928      	ldr	r1, [pc, #160]	; (8000e34 <HAL_PCD_IRQHandler+0x394>)
 8000d92:	400b      	ands	r3, r1
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0209      	lsls	r1, r1, #8
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	8013      	strh	r3, [r2, #0]
 8000d9c:	00ab      	lsls	r3, r5, #2
 8000d9e:	195b      	adds	r3, r3, r5
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	18e7      	adds	r7, r4, r3
        if ((ep->type != EP_TYPE_BULK) ||
 8000da4:	232b      	movs	r3, #43	; 0x2b
 8000da6:	5cfb      	ldrb	r3, [r7, r3]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d100      	bne.n	8000dae <HAL_PCD_IRQHandler+0x30e>
 8000dac:	e1e0      	b.n	8001170 <HAL_PCD_IRQHandler+0x6d0>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	2350      	movs	r3, #80	; 0x50
 8000db2:	5ac2      	ldrh	r2, [r0, r3]
          if (ep->xfer_len > TxByteNbre)
 8000db4:	00ab      	lsls	r3, r5, #2
 8000db6:	195b      	adds	r3, r3, r5
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	18e3      	adds	r3, r4, r3
 8000dbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dbe:	2328      	movs	r3, #40	; 0x28
 8000dc0:	5cfb      	ldrb	r3, [r7, r3]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	18c3      	adds	r3, r0, r3
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_PCD_IRQHandler+0x398>)
 8000dca:	4694      	mov	ip, r2
 8000dcc:	4463      	add	r3, ip
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	059b      	lsls	r3, r3, #22
          if (ep->xfer_len > TxByteNbre)
 8000dd2:	0d9b      	lsrs	r3, r3, #22
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	d800      	bhi.n	8000dda <HAL_PCD_IRQHandler+0x33a>
 8000dd8:	e217      	b.n	800120a <HAL_PCD_IRQHandler+0x76a>
            ep->xfer_len -= TxByteNbre;
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	00aa      	lsls	r2, r5, #2
 8000dde:	1952      	adds	r2, r2, r5
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	18a2      	adds	r2, r4, r2
 8000de4:	6411      	str	r1, [r2, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d100      	bne.n	8000dec <HAL_PCD_IRQHandler+0x34c>
 8000dea:	e214      	b.n	8001216 <HAL_PCD_IRQHandler+0x776>
            ep->xfer_buff += TxByteNbre;
 8000dec:	00aa      	lsls	r2, r5, #2
 8000dee:	1951      	adds	r1, r2, r5
 8000df0:	00c9      	lsls	r1, r1, #3
 8000df2:	1861      	adds	r1, r4, r1
 8000df4:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8000df6:	18ff      	adds	r7, r7, r3
 8000df8:	63cf      	str	r7, [r1, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000dfa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	644b      	str	r3, [r1, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8000e00:	3501      	adds	r5, #1
 8000e02:	00a9      	lsls	r1, r5, #2
 8000e04:	1949      	adds	r1, r1, r5
 8000e06:	00c9      	lsls	r1, r1, #3
 8000e08:	1861      	adds	r1, r4, r1
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e0a:	f001 ff23 	bl	8002c54 <USB_EPStartXfer>
 8000e0e:	e6e5      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
 8000e10:	ffffbfff 	.word	0xffffbfff
 8000e14:	ffffdfff 	.word	0xffffdfff
 8000e18:	ffffefff 	.word	0xffffefff
 8000e1c:	fffffeff 	.word	0xfffffeff
 8000e20:	00000f8f 	.word	0x00000f8f
 8000e24:	00000406 	.word	0x00000406
 8000e28:	ffff83ff 	.word	0xffff83ff
 8000e2c:	ffffbf8f 	.word	0xffffbf8f
 8000e30:	00008080 	.word	0x00008080
 8000e34:	ffff8f0f 	.word	0xffff8f0f
 8000e38:	00000402 	.word	0x00000402
 8000e3c:	ffff8000 	.word	0xffff8000
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e40:	8803      	ldrh	r3, [r0, #0]
 8000e42:	4ac4      	ldr	r2, [pc, #784]	; (8001154 <HAL_PCD_IRQHandler+0x6b4>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	8003      	strh	r3, [r0, #0]
        if (ep->doublebuffer == 0U)
 8000e4c:	197b      	adds	r3, r7, r5
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	18e3      	adds	r3, r4, r3
 8000e52:	3375      	adds	r3, #117	; 0x75
 8000e54:	33ff      	adds	r3, #255	; 0xff
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d14a      	bne.n	8000ef2 <HAL_PCD_IRQHandler+0x452>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e5c:	6820      	ldr	r0, [r4, #0]
 8000e5e:	3350      	adds	r3, #80	; 0x50
 8000e60:	5ac2      	ldrh	r2, [r0, r3]
 8000e62:	197b      	adds	r3, r7, r5
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	18e3      	adds	r3, r4, r3
 8000e68:	3369      	adds	r3, #105	; 0x69
 8000e6a:	33ff      	adds	r3, #255	; 0xff
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	18c3      	adds	r3, r0, r3
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	4bb8      	ldr	r3, [pc, #736]	; (8001158 <HAL_PCD_IRQHandler+0x6b8>)
 8000e76:	469c      	mov	ip, r3
 8000e78:	4462      	add	r2, ip
 8000e7a:	8813      	ldrh	r3, [r2, #0]
 8000e7c:	059b      	lsls	r3, r3, #22
 8000e7e:	0d9b      	lsrs	r3, r3, #22
 8000e80:	469b      	mov	fp, r3
          if (count != 0U)
 8000e82:	d128      	bne.n	8000ed6 <HAL_PCD_IRQHandler+0x436>
        ep->xfer_count += count;
 8000e84:	465a      	mov	r2, fp
 8000e86:	00ab      	lsls	r3, r5, #2
 8000e88:	195b      	adds	r3, r3, r5
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	18e3      	adds	r3, r4, r3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	3085      	adds	r0, #133	; 0x85
 8000e92:	30ff      	adds	r0, #255	; 0xff
 8000e94:	6801      	ldr	r1, [r0, #0]
 8000e96:	4459      	add	r1, fp
 8000e98:	6001      	str	r1, [r0, #0]
        ep->xfer_buff += count;
 8000e9a:	3808      	subs	r0, #8
 8000e9c:	6801      	ldr	r1, [r0, #0]
 8000e9e:	4459      	add	r1, fp
 8000ea0:	6001      	str	r1, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000ea2:	3381      	adds	r3, #129	; 0x81
 8000ea4:	33ff      	adds	r3, #255	; 0xff
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <HAL_PCD_IRQHandler+0x420>
 8000eac:	00ab      	lsls	r3, r5, #2
 8000eae:	195b      	adds	r3, r3, r5
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	18e3      	adds	r3, r4, r3
 8000eb4:	3379      	adds	r3, #121	; 0x79
 8000eb6:	33ff      	adds	r3, #255	; 0xff
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d300      	bcc.n	8000ec0 <HAL_PCD_IRQHandler+0x420>
 8000ebe:	e13e      	b.n	800113e <HAL_PCD_IRQHandler+0x69e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000ec0:	00ab      	lsls	r3, r5, #2
 8000ec2:	195b      	adds	r3, r3, r5
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	18e3      	adds	r3, r4, r3
 8000ec8:	3369      	adds	r3, #105	; 0x69
 8000eca:	33ff      	adds	r3, #255	; 0xff
 8000ecc:	7819      	ldrb	r1, [r3, #0]
 8000ece:	0020      	movs	r0, r4
 8000ed0:	f003 fc29 	bl	8004726 <HAL_PCD_DataOutStageCallback>
 8000ed4:	e755      	b.n	8000d82 <HAL_PCD_IRQHandler+0x2e2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	18e3      	adds	r3, r4, r3
 8000edc:	001a      	movs	r2, r3
 8000ede:	326f      	adds	r2, #111	; 0x6f
 8000ee0:	32ff      	adds	r2, #255	; 0xff
 8000ee2:	8812      	ldrh	r2, [r2, #0]
 8000ee4:	337d      	adds	r3, #125	; 0x7d
 8000ee6:	33ff      	adds	r3, #255	; 0xff
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	465b      	mov	r3, fp
 8000eec:	f002 f9da 	bl	80032a4 <USB_ReadPMA>
 8000ef0:	e7c8      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
          if (ep->type == EP_TYPE_BULK)
 8000ef2:	00ab      	lsls	r3, r5, #2
 8000ef4:	195b      	adds	r3, r3, r5
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	18e3      	adds	r3, r4, r3
 8000efa:	336c      	adds	r3, #108	; 0x6c
 8000efc:	33ff      	adds	r3, #255	; 0xff
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d034      	beq.n	8000f6e <HAL_PCD_IRQHandler+0x4ce>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000f04:	00ab      	lsls	r3, r5, #2
 8000f06:	195b      	adds	r3, r3, r5
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	18e3      	adds	r3, r4, r3
 8000f0c:	3369      	adds	r3, #105	; 0x69
 8000f0e:	33ff      	adds	r3, #255	; 0xff
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	0089      	lsls	r1, r1, #2
 8000f14:	6822      	ldr	r2, [r4, #0]
 8000f16:	4694      	mov	ip, r2
 8000f18:	4461      	add	r1, ip
 8000f1a:	880a      	ldrh	r2, [r1, #0]
 8000f1c:	488f      	ldr	r0, [pc, #572]	; (800115c <HAL_PCD_IRQHandler+0x6bc>)
 8000f1e:	4002      	ands	r2, r0
 8000f20:	488f      	ldr	r0, [pc, #572]	; (8001160 <HAL_PCD_IRQHandler+0x6c0>)
 8000f22:	4302      	orrs	r2, r0
 8000f24:	800a      	strh	r2, [r1, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000f26:	6820      	ldr	r0, [r4, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	009a      	lsls	r2, r3, #2
 8000f2c:	1882      	adds	r2, r0, r2
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	0452      	lsls	r2, r2, #17
 8000f32:	d400      	bmi.n	8000f36 <HAL_PCD_IRQHandler+0x496>
 8000f34:	e0e6      	b.n	8001104 <HAL_PCD_IRQHandler+0x664>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f36:	2250      	movs	r2, #80	; 0x50
 8000f38:	5a82      	ldrh	r2, [r0, r2]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	18c3      	adds	r3, r0, r3
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	4a88      	ldr	r2, [pc, #544]	; (8001164 <HAL_PCD_IRQHandler+0x6c4>)
 8000f42:	4694      	mov	ip, r2
 8000f44:	4463      	add	r3, ip
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	059b      	lsls	r3, r3, #22
 8000f4a:	0d9b      	lsrs	r3, r3, #22
 8000f4c:	469b      	mov	fp, r3
              if (count != 0U)
 8000f4e:	d099      	beq.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f50:	00ab      	lsls	r3, r5, #2
 8000f52:	195b      	adds	r3, r3, r5
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	18e3      	adds	r3, r4, r3
 8000f58:	001a      	movs	r2, r3
 8000f5a:	3271      	adds	r2, #113	; 0x71
 8000f5c:	32ff      	adds	r2, #255	; 0xff
 8000f5e:	8812      	ldrh	r2, [r2, #0]
 8000f60:	337d      	adds	r3, #125	; 0x7d
 8000f62:	33ff      	adds	r3, #255	; 0xff
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	465b      	mov	r3, fp
 8000f68:	f002 f99c 	bl	80032a4 <USB_ReadPMA>
 8000f6c:	e78a      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f6e:	464b      	mov	r3, r9
 8000f70:	045b      	lsls	r3, r3, #17
 8000f72:	d563      	bpl.n	800103c <HAL_PCD_IRQHandler+0x59c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	2350      	movs	r3, #80	; 0x50
 8000f78:	5ac2      	ldrh	r2, [r0, r3]
 8000f7a:	00ab      	lsls	r3, r5, #2
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	18e3      	adds	r3, r4, r3
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	0019      	movs	r1, r3
 8000f86:	3169      	adds	r1, #105	; 0x69
 8000f88:	31ff      	adds	r1, #255	; 0xff
 8000f8a:	7809      	ldrb	r1, [r1, #0]
 8000f8c:	00cb      	lsls	r3, r1, #3
 8000f8e:	469c      	mov	ip, r3
 8000f90:	4484      	add	ip, r0
 8000f92:	4462      	add	r2, ip
 8000f94:	4b73      	ldr	r3, [pc, #460]	; (8001164 <HAL_PCD_IRQHandler+0x6c4>)
 8000f96:	469c      	mov	ip, r3
 8000f98:	4462      	add	r2, ip
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	0592      	lsls	r2, r2, #22
 8000f9e:	0d93      	lsrs	r3, r2, #22
 8000fa0:	469b      	mov	fp, r3
    if (ep->xfer_len >= count)
 8000fa2:	9b01      	ldr	r3, [sp, #4]
 8000fa4:	3381      	adds	r3, #129	; 0x81
 8000fa6:	33ff      	adds	r3, #255	; 0xff
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	455a      	cmp	r2, fp
 8000fac:	d332      	bcc.n	8001014 <HAL_PCD_IRQHandler+0x574>
      ep->xfer_len -= count;
 8000fae:	465b      	mov	r3, fp
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	00ab      	lsls	r3, r5, #2
 8000fb4:	195b      	adds	r3, r3, r5
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	18e3      	adds	r3, r4, r3
 8000fba:	3381      	adds	r3, #129	; 0x81
 8000fbc:	33ff      	adds	r3, #255	; 0xff
 8000fbe:	601a      	str	r2, [r3, #0]
    if (ep->xfer_len == 0U)
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d02f      	beq.n	8001024 <HAL_PCD_IRQHandler+0x584>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	065b      	lsls	r3, r3, #25
 8000fc8:	d510      	bpl.n	8000fec <HAL_PCD_IRQHandler+0x54c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000fca:	00ab      	lsls	r3, r5, #2
 8000fcc:	195b      	adds	r3, r3, r5
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	18e3      	adds	r3, r4, r3
 8000fd2:	3369      	adds	r3, #105	; 0x69
 8000fd4:	33ff      	adds	r3, #255	; 0xff
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	469c      	mov	ip, r3
 8000fde:	4462      	add	r2, ip
 8000fe0:	8813      	ldrh	r3, [r2, #0]
 8000fe2:	495e      	ldr	r1, [pc, #376]	; (800115c <HAL_PCD_IRQHandler+0x6bc>)
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	495e      	ldr	r1, [pc, #376]	; (8001160 <HAL_PCD_IRQHandler+0x6c0>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8000fec:	465b      	mov	r3, fp
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <HAL_PCD_IRQHandler+0x554>
 8000ff2:	e747      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ff4:	00ab      	lsls	r3, r5, #2
 8000ff6:	195b      	adds	r3, r3, r5
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	18e3      	adds	r3, r4, r3
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	3271      	adds	r2, #113	; 0x71
 8001000:	32ff      	adds	r2, #255	; 0xff
 8001002:	8812      	ldrh	r2, [r2, #0]
 8001004:	337d      	adds	r3, #125	; 0x7d
 8001006:	33ff      	adds	r3, #255	; 0xff
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	465b      	mov	r3, fp
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	f002 f949 	bl	80032a4 <USB_ReadPMA>
 8001012:	e737      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
      ep->xfer_len = 0U;
 8001014:	00ab      	lsls	r3, r5, #2
 8001016:	195b      	adds	r3, r3, r5
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	18e3      	adds	r3, r4, r3
 800101c:	3381      	adds	r3, #129	; 0x81
 800101e:	33ff      	adds	r3, #255	; 0xff
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001024:	0089      	lsls	r1, r1, #2
 8001026:	1840      	adds	r0, r0, r1
 8001028:	8803      	ldrh	r3, [r0, #0]
 800102a:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_PCD_IRQHandler+0x6c8>)
 800102c:	401a      	ands	r2, r3
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	4053      	eors	r3, r2
 8001034:	4a4d      	ldr	r2, [pc, #308]	; (800116c <HAL_PCD_IRQHandler+0x6cc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	8003      	strh	r3, [r0, #0]
 800103a:	e7c3      	b.n	8000fc4 <HAL_PCD_IRQHandler+0x524>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	2350      	movs	r3, #80	; 0x50
 8001040:	5ac2      	ldrh	r2, [r0, r3]
 8001042:	00ab      	lsls	r3, r5, #2
 8001044:	195b      	adds	r3, r3, r5
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	18e3      	adds	r3, r4, r3
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	0019      	movs	r1, r3
 800104e:	3169      	adds	r1, #105	; 0x69
 8001050:	31ff      	adds	r1, #255	; 0xff
 8001052:	7809      	ldrb	r1, [r1, #0]
 8001054:	00cb      	lsls	r3, r1, #3
 8001056:	469c      	mov	ip, r3
 8001058:	4484      	add	ip, r0
 800105a:	4462      	add	r2, ip
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <HAL_PCD_IRQHandler+0x6b8>)
 800105e:	469c      	mov	ip, r3
 8001060:	4462      	add	r2, ip
 8001062:	8812      	ldrh	r2, [r2, #0]
 8001064:	0592      	lsls	r2, r2, #22
 8001066:	0d93      	lsrs	r3, r2, #22
 8001068:	469b      	mov	fp, r3
    if (ep->xfer_len >= count)
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	3381      	adds	r3, #129	; 0x81
 800106e:	33ff      	adds	r3, #255	; 0xff
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	455a      	cmp	r2, fp
 8001074:	d332      	bcc.n	80010dc <HAL_PCD_IRQHandler+0x63c>
      ep->xfer_len -= count;
 8001076:	465b      	mov	r3, fp
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	00ab      	lsls	r3, r5, #2
 800107c:	195b      	adds	r3, r3, r5
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	18e3      	adds	r3, r4, r3
 8001082:	3381      	adds	r3, #129	; 0x81
 8001084:	33ff      	adds	r3, #255	; 0xff
 8001086:	601a      	str	r2, [r3, #0]
    if (ep->xfer_len == 0U)
 8001088:	2a00      	cmp	r2, #0
 800108a:	d02f      	beq.n	80010ec <HAL_PCD_IRQHandler+0x64c>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800108c:	464b      	mov	r3, r9
 800108e:	065b      	lsls	r3, r3, #25
 8001090:	d410      	bmi.n	80010b4 <HAL_PCD_IRQHandler+0x614>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001092:	00ab      	lsls	r3, r5, #2
 8001094:	195b      	adds	r3, r3, r5
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	18e3      	adds	r3, r4, r3
 800109a:	3369      	adds	r3, #105	; 0x69
 800109c:	33ff      	adds	r3, #255	; 0xff
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	469c      	mov	ip, r3
 80010a6:	4462      	add	r2, ip
 80010a8:	8813      	ldrh	r3, [r2, #0]
 80010aa:	492c      	ldr	r1, [pc, #176]	; (800115c <HAL_PCD_IRQHandler+0x6bc>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	492c      	ldr	r1, [pc, #176]	; (8001160 <HAL_PCD_IRQHandler+0x6c0>)
 80010b0:	430b      	orrs	r3, r1
 80010b2:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80010b4:	465b      	mov	r3, fp
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_PCD_IRQHandler+0x61c>
 80010ba:	e6e3      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010bc:	00ab      	lsls	r3, r5, #2
 80010be:	195b      	adds	r3, r3, r5
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	18e3      	adds	r3, r4, r3
 80010c4:	001a      	movs	r2, r3
 80010c6:	3273      	adds	r2, #115	; 0x73
 80010c8:	32ff      	adds	r2, #255	; 0xff
 80010ca:	8812      	ldrh	r2, [r2, #0]
 80010cc:	337d      	adds	r3, #125	; 0x7d
 80010ce:	33ff      	adds	r3, #255	; 0xff
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	465b      	mov	r3, fp
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	f002 f8e5 	bl	80032a4 <USB_ReadPMA>
 80010da:	e6d3      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
      ep->xfer_len = 0U;
 80010dc:	00ab      	lsls	r3, r5, #2
 80010de:	195b      	adds	r3, r3, r5
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	18e3      	adds	r3, r4, r3
 80010e4:	3381      	adds	r3, #129	; 0x81
 80010e6:	33ff      	adds	r3, #255	; 0xff
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80010ec:	0089      	lsls	r1, r1, #2
 80010ee:	1840      	adds	r0, r0, r1
 80010f0:	8803      	ldrh	r3, [r0, #0]
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_PCD_IRQHandler+0x6c8>)
 80010f4:	401a      	ands	r2, r3
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	4053      	eors	r3, r2
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_PCD_IRQHandler+0x6cc>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	8003      	strh	r3, [r0, #0]
 8001102:	e7c3      	b.n	800108c <HAL_PCD_IRQHandler+0x5ec>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001104:	2250      	movs	r2, #80	; 0x50
 8001106:	5a82      	ldrh	r2, [r0, r2]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	18c3      	adds	r3, r0, r3
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_PCD_IRQHandler+0x6b8>)
 8001110:	4694      	mov	ip, r2
 8001112:	4463      	add	r3, ip
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	059b      	lsls	r3, r3, #22
 8001118:	0d9b      	lsrs	r3, r3, #22
 800111a:	469b      	mov	fp, r3
              if (count != 0U)
 800111c:	d100      	bne.n	8001120 <HAL_PCD_IRQHandler+0x680>
 800111e:	e6b1      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001120:	00ab      	lsls	r3, r5, #2
 8001122:	195b      	adds	r3, r3, r5
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	18e3      	adds	r3, r4, r3
 8001128:	001a      	movs	r2, r3
 800112a:	3273      	adds	r2, #115	; 0x73
 800112c:	32ff      	adds	r2, #255	; 0xff
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	337d      	adds	r3, #125	; 0x7d
 8001132:	33ff      	adds	r3, #255	; 0xff
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	465b      	mov	r3, fp
 8001138:	f002 f8b4 	bl	80032a4 <USB_ReadPMA>
 800113c:	e6a2      	b.n	8000e84 <HAL_PCD_IRQHandler+0x3e4>
        ep = &hpcd->OUT_ep[epindex];
 800113e:	00a9      	lsls	r1, r5, #2
 8001140:	1949      	adds	r1, r1, r5
 8001142:	00c9      	lsls	r1, r1, #3
 8001144:	3169      	adds	r1, #105	; 0x69
 8001146:	31ff      	adds	r1, #255	; 0xff
 8001148:	1861      	adds	r1, r4, r1
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	f001 fd82 	bl	8002c54 <USB_EPStartXfer>
 8001150:	e617      	b.n	8000d82 <HAL_PCD_IRQHandler+0x2e2>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	00000f8f 	.word	0x00000f8f
 8001158:	00000406 	.word	0x00000406
 800115c:	ffff8f8f 	.word	0xffff8f8f
 8001160:	000080c0 	.word	0x000080c0
 8001164:	00000402 	.word	0x00000402
 8001168:	ffffbf8f 	.word	0xffffbf8f
 800116c:	00008080 	.word	0x00008080
        if ((ep->type != EP_TYPE_BULK) ||
 8001170:	464b      	mov	r3, r9
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	d400      	bmi.n	8001178 <HAL_PCD_IRQHandler+0x6d8>
 8001176:	e61a      	b.n	8000dae <HAL_PCD_IRQHandler+0x30e>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001178:	464b      	mov	r3, r9
 800117a:	065b      	lsls	r3, r3, #25
 800117c:	d400      	bmi.n	8001180 <HAL_PCD_IRQHandler+0x6e0>
 800117e:	e0f9      	b.n	8001374 <HAL_PCD_IRQHandler+0x8d4>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	469b      	mov	fp, r3
 8001184:	2350      	movs	r3, #80	; 0x50
 8001186:	465a      	mov	r2, fp
 8001188:	5ad2      	ldrh	r2, [r2, r3]
 800118a:	3b28      	subs	r3, #40	; 0x28
 800118c:	5cf9      	ldrb	r1, [r7, r3]
    if (ep->xfer_len > TxByteNbre)
 800118e:	00ab      	lsls	r3, r5, #2
 8001190:	195b      	adds	r3, r3, r5
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	18e3      	adds	r3, r4, r3
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001198:	00c8      	lsls	r0, r1, #3
 800119a:	4684      	mov	ip, r0
 800119c:	44dc      	add	ip, fp
 800119e:	4462      	add	r2, ip
 80011a0:	48d5      	ldr	r0, [pc, #852]	; (80014f8 <HAL_PCD_IRQHandler+0xa58>)
 80011a2:	4684      	mov	ip, r0
 80011a4:	4462      	add	r2, ip
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len > TxByteNbre)
 80011aa:	0d92      	lsrs	r2, r2, #22
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d938      	bls.n	8001222 <HAL_PCD_IRQHandler+0x782>
      ep->xfer_len -= TxByteNbre;
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	469c      	mov	ip, r3
 80011b4:	00ab      	lsls	r3, r5, #2
 80011b6:	195b      	adds	r3, r3, r5
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	18e3      	adds	r3, r4, r3
 80011bc:	4660      	mov	r0, ip
 80011be:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d034      	beq.n	800122e <HAL_PCD_IRQHandler+0x78e>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80011c4:	464b      	mov	r3, r9
 80011c6:	045b      	lsls	r3, r3, #17
 80011c8:	d508      	bpl.n	80011dc <HAL_PCD_IRQHandler+0x73c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80011ca:	0089      	lsls	r1, r1, #2
 80011cc:	4459      	add	r1, fp
 80011ce:	0008      	movs	r0, r1
 80011d0:	880b      	ldrh	r3, [r1, #0]
 80011d2:	49ca      	ldr	r1, [pc, #808]	; (80014fc <HAL_PCD_IRQHandler+0xa5c>)
 80011d4:	400b      	ands	r3, r1
 80011d6:	49ca      	ldr	r1, [pc, #808]	; (8001500 <HAL_PCD_IRQHandler+0xa60>)
 80011d8:	430b      	orrs	r3, r1
 80011da:	8003      	strh	r3, [r0, #0]
      if (ep->xfer_fill_db == 1U)
 80011dc:	00ab      	lsls	r3, r5, #2
 80011de:	195b      	adds	r3, r3, r5
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	18e3      	adds	r3, r4, r3
 80011e4:	334c      	adds	r3, #76	; 0x4c
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d033      	beq.n	8001254 <HAL_PCD_IRQHandler+0x7b4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80011ec:	2328      	movs	r3, #40	; 0x28
 80011ee:	5cfa      	ldrb	r2, [r7, r3]
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	469c      	mov	ip, r3
 80011f6:	4462      	add	r2, ip
 80011f8:	8813      	ldrh	r3, [r2, #0]
 80011fa:	49c2      	ldr	r1, [pc, #776]	; (8001504 <HAL_PCD_IRQHandler+0xa64>)
 80011fc:	400b      	ands	r3, r1
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	404b      	eors	r3, r1
 8001202:	49c1      	ldr	r1, [pc, #772]	; (8001508 <HAL_PCD_IRQHandler+0xa68>)
 8001204:	430b      	orrs	r3, r1
 8001206:	8013      	strh	r3, [r2, #0]
 8001208:	e4e8      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
            ep->xfer_len = 0U;
 800120a:	00ab      	lsls	r3, r5, #2
 800120c:	195d      	adds	r5, r3, r5
 800120e:	00ed      	lsls	r5, r5, #3
 8001210:	1965      	adds	r5, r4, r5
 8001212:	2300      	movs	r3, #0
 8001214:	642b      	str	r3, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001216:	2328      	movs	r3, #40	; 0x28
 8001218:	5cf9      	ldrb	r1, [r7, r3]
 800121a:	0020      	movs	r0, r4
 800121c:	f003 fa91 	bl	8004742 <HAL_PCD_DataInStageCallback>
 8001220:	e4dc      	b.n	8000bdc <HAL_PCD_IRQHandler+0x13c>
      ep->xfer_len = 0U;
 8001222:	00ab      	lsls	r3, r5, #2
 8001224:	195d      	adds	r5, r3, r5
 8001226:	00ed      	lsls	r5, r5, #3
 8001228:	1965      	adds	r5, r4, r5
 800122a:	2300      	movs	r3, #0
 800122c:	642b      	str	r3, [r5, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800122e:	0020      	movs	r0, r4
 8001230:	f003 fa87 	bl	8004742 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001234:	464b      	mov	r3, r9
 8001236:	045b      	lsls	r3, r3, #17
 8001238:	d5d8      	bpl.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800123a:	2328      	movs	r3, #40	; 0x28
 800123c:	5cfa      	ldrb	r2, [r7, r3]
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	469c      	mov	ip, r3
 8001244:	4462      	add	r2, ip
 8001246:	8813      	ldrh	r3, [r2, #0]
 8001248:	49ac      	ldr	r1, [pc, #688]	; (80014fc <HAL_PCD_IRQHandler+0xa5c>)
 800124a:	400b      	ands	r3, r1
 800124c:	49ac      	ldr	r1, [pc, #688]	; (8001500 <HAL_PCD_IRQHandler+0xa60>)
 800124e:	430b      	orrs	r3, r1
 8001250:	8013      	strh	r3, [r2, #0]
 8001252:	e7cb      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxByteNbre;
 8001254:	00ab      	lsls	r3, r5, #2
 8001256:	195b      	adds	r3, r3, r5
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	18e3      	adds	r3, r4, r3
 800125c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800125e:	1889      	adds	r1, r1, r2
 8001260:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001262:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001264:	1889      	adds	r1, r1, r2
 8001266:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001268:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126c:	4299      	cmp	r1, r3
 800126e:	d322      	bcc.n	80012b6 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_len_db -= len;
 8001270:	00aa      	lsls	r2, r5, #2
 8001272:	1952      	adds	r2, r2, r5
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	18a2      	adds	r2, r4, r2
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800127c:	2229      	movs	r2, #41	; 0x29
 800127e:	5cba      	ldrb	r2, [r7, r2]
 8001280:	2a00      	cmp	r2, #0
 8001282:	d157      	bne.n	8001334 <HAL_PCD_IRQHandler+0x894>
 8001284:	6821      	ldr	r1, [r4, #0]
 8001286:	3250      	adds	r2, #80	; 0x50
 8001288:	5a88      	ldrh	r0, [r1, r2]
 800128a:	3a28      	subs	r2, #40	; 0x28
 800128c:	5cba      	ldrb	r2, [r7, r2]
 800128e:	00d2      	lsls	r2, r2, #3
 8001290:	4691      	mov	r9, r2
 8001292:	4a99      	ldr	r2, [pc, #612]	; (80014f8 <HAL_PCD_IRQHandler+0xa58>)
 8001294:	4694      	mov	ip, r2
 8001296:	4461      	add	r1, ip
 8001298:	1809      	adds	r1, r1, r0
 800129a:	000a      	movs	r2, r1
 800129c:	444a      	add	r2, r9
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d12f      	bne.n	8001302 <HAL_PCD_IRQHandler+0x862>
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	4899      	ldr	r0, [pc, #612]	; (800150c <HAL_PCD_IRQHandler+0xa6c>)
 80012a6:	4001      	ands	r1, r0
 80012a8:	8011      	strh	r1, [r2, #0]
 80012aa:	8811      	ldrh	r1, [r2, #0]
 80012ac:	2080      	movs	r0, #128	; 0x80
 80012ae:	0200      	lsls	r0, r0, #8
 80012b0:	4301      	orrs	r1, r0
 80012b2:	8011      	strh	r1, [r2, #0]
 80012b4:	e040      	b.n	8001338 <HAL_PCD_IRQHandler+0x898>
        else if (ep->xfer_len_db == 0U)
 80012b6:	2900      	cmp	r1, #0
 80012b8:	d107      	bne.n	80012ca <HAL_PCD_IRQHandler+0x82a>
          ep->xfer_fill_db = 0U;
 80012ba:	00ab      	lsls	r3, r5, #2
 80012bc:	195b      	adds	r3, r3, r5
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	18e3      	adds	r3, r4, r3
 80012c2:	334c      	adds	r3, #76	; 0x4c
 80012c4:	7019      	strb	r1, [r3, #0]
          len = TxByteNbre;
 80012c6:	0013      	movs	r3, r2
 80012c8:	e7d8      	b.n	800127c <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_fill_db = 0U;
 80012ca:	00ab      	lsls	r3, r5, #2
 80012cc:	195b      	adds	r3, r3, r5
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	18e3      	adds	r3, r4, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	304c      	adds	r0, #76	; 0x4c
 80012d6:	2200      	movs	r2, #0
 80012d8:	7002      	strb	r2, [r0, #0]
          ep->xfer_len_db = 0U;
 80012da:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80012dc:	2329      	movs	r3, #41	; 0x29
 80012de:	5cfa      	ldrb	r2, [r7, r3]
          len = ep->xfer_len_db;
 80012e0:	000b      	movs	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d126      	bne.n	8001334 <HAL_PCD_IRQHandler+0x894>
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	2250      	movs	r2, #80	; 0x50
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	5a98      	ldrh	r0, [r3, r2]
 80012ee:	3a28      	subs	r2, #40	; 0x28
 80012f0:	5cba      	ldrb	r2, [r7, r2]
 80012f2:	00d2      	lsls	r2, r2, #3
 80012f4:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_PCD_IRQHandler+0xa58>)
 80012f6:	469c      	mov	ip, r3
 80012f8:	9b01      	ldr	r3, [sp, #4]
 80012fa:	4463      	add	r3, ip
 80012fc:	181b      	adds	r3, r3, r0
 80012fe:	18d2      	adds	r2, r2, r3
          len = ep->xfer_len_db;
 8001300:	000b      	movs	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001302:	2b3e      	cmp	r3, #62	; 0x3e
 8001304:	d807      	bhi.n	8001316 <HAL_PCD_IRQHandler+0x876>
 8001306:	0859      	lsrs	r1, r3, #1
 8001308:	4650      	mov	r0, sl
 800130a:	4018      	ands	r0, r3
 800130c:	1809      	adds	r1, r1, r0
 800130e:	0289      	lsls	r1, r1, #10
 8001310:	b289      	uxth	r1, r1
 8001312:	8011      	strh	r1, [r2, #0]
 8001314:	e010      	b.n	8001338 <HAL_PCD_IRQHandler+0x898>
 8001316:	0959      	lsrs	r1, r3, #5
 8001318:	4689      	mov	r9, r1
 800131a:	4640      	mov	r0, r8
 800131c:	4018      	ands	r0, r3
 800131e:	4241      	negs	r1, r0
 8001320:	4141      	adcs	r1, r0
 8001322:	0008      	movs	r0, r1
 8001324:	4649      	mov	r1, r9
 8001326:	1a09      	subs	r1, r1, r0
 8001328:	0288      	lsls	r0, r1, #10
 800132a:	4979      	ldr	r1, [pc, #484]	; (8001510 <HAL_PCD_IRQHandler+0xa70>)
 800132c:	4301      	orrs	r1, r0
 800132e:	b289      	uxth	r1, r1
 8001330:	8011      	strh	r1, [r2, #0]
 8001332:	e001      	b.n	8001338 <HAL_PCD_IRQHandler+0x898>
 8001334:	2a01      	cmp	r2, #1
 8001336:	d00d      	beq.n	8001354 <HAL_PCD_IRQHandler+0x8b4>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001338:	b29b      	uxth	r3, r3
 800133a:	00a9      	lsls	r1, r5, #2
 800133c:	194a      	adds	r2, r1, r5
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	18a2      	adds	r2, r4, r2
 8001342:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001344:	1949      	adds	r1, r1, r5
 8001346:	00c9      	lsls	r1, r1, #3
 8001348:	1861      	adds	r1, r4, r1
 800134a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f001 fc6a 	bl	8002c26 <USB_WritePMA>
 8001352:	e74b      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	2150      	movs	r1, #80	; 0x50
 8001358:	9201      	str	r2, [sp, #4]
 800135a:	5a50      	ldrh	r0, [r2, r1]
 800135c:	3928      	subs	r1, #40	; 0x28
 800135e:	5c79      	ldrb	r1, [r7, r1]
 8001360:	00c9      	lsls	r1, r1, #3
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <HAL_PCD_IRQHandler+0xa58>)
 8001364:	4694      	mov	ip, r2
 8001366:	9a01      	ldr	r2, [sp, #4]
 8001368:	4462      	add	r2, ip
 800136a:	1812      	adds	r2, r2, r0
 800136c:	188a      	adds	r2, r1, r2
 800136e:	b299      	uxth	r1, r3
 8001370:	8011      	strh	r1, [r2, #0]
 8001372:	e7e1      	b.n	8001338 <HAL_PCD_IRQHandler+0x898>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	469b      	mov	fp, r3
 8001378:	2350      	movs	r3, #80	; 0x50
 800137a:	465a      	mov	r2, fp
 800137c:	5ad2      	ldrh	r2, [r2, r3]
 800137e:	3b28      	subs	r3, #40	; 0x28
 8001380:	5cf9      	ldrb	r1, [r7, r3]
    if (ep->xfer_len >= TxByteNbre)
 8001382:	00ab      	lsls	r3, r5, #2
 8001384:	195b      	adds	r3, r3, r5
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	18e3      	adds	r3, r4, r3
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800138c:	00c8      	lsls	r0, r1, #3
 800138e:	4684      	mov	ip, r0
 8001390:	44dc      	add	ip, fp
 8001392:	4462      	add	r2, ip
 8001394:	485f      	ldr	r0, [pc, #380]	; (8001514 <HAL_PCD_IRQHandler+0xa74>)
 8001396:	4684      	mov	ip, r0
 8001398:	4462      	add	r2, ip
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len >= TxByteNbre)
 800139e:	0d92      	lsrs	r2, r2, #22
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d351      	bcc.n	8001448 <HAL_PCD_IRQHandler+0x9a8>
      ep->xfer_len -= TxByteNbre;
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	469c      	mov	ip, r3
 80013a8:	00ab      	lsls	r3, r5, #2
 80013aa:	195b      	adds	r3, r3, r5
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	18e3      	adds	r3, r4, r3
 80013b0:	4660      	mov	r0, ip
 80013b2:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d04d      	beq.n	8001454 <HAL_PCD_IRQHandler+0x9b4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80013b8:	464b      	mov	r3, r9
 80013ba:	045b      	lsls	r3, r3, #17
 80013bc:	d408      	bmi.n	80013d0 <HAL_PCD_IRQHandler+0x930>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	4459      	add	r1, fp
 80013c2:	0008      	movs	r0, r1
 80013c4:	880b      	ldrh	r3, [r1, #0]
 80013c6:	494d      	ldr	r1, [pc, #308]	; (80014fc <HAL_PCD_IRQHandler+0xa5c>)
 80013c8:	400b      	ands	r3, r1
 80013ca:	494d      	ldr	r1, [pc, #308]	; (8001500 <HAL_PCD_IRQHandler+0xa60>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	8003      	strh	r3, [r0, #0]
      if (ep->xfer_fill_db == 1U)
 80013d0:	00ab      	lsls	r3, r5, #2
 80013d2:	195b      	adds	r3, r3, r5
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	18e3      	adds	r3, r4, r3
 80013d8:	334c      	adds	r3, #76	; 0x4c
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d000      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x942>
 80013e0:	e704      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxByteNbre;
 80013e2:	00ab      	lsls	r3, r5, #2
 80013e4:	195b      	adds	r3, r3, r5
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	18e3      	adds	r3, r4, r3
 80013ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013ec:	1889      	adds	r1, r1, r2
 80013ee:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80013f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80013f2:	1889      	adds	r1, r1, r2
 80013f4:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80013f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	4298      	cmp	r0, r3
 80013fc:	d33e      	bcc.n	800147c <HAL_PCD_IRQHandler+0x9dc>
          ep->xfer_len_db -= len;
 80013fe:	00aa      	lsls	r2, r5, #2
 8001400:	1952      	adds	r2, r2, r5
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	18a2      	adds	r2, r4, r2
 8001406:	1ac0      	subs	r0, r0, r3
 8001408:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	9101      	str	r1, [sp, #4]
 800140e:	2029      	movs	r0, #41	; 0x29
 8001410:	5c3a      	ldrb	r2, [r7, r0]
 8001412:	2a00      	cmp	r2, #0
 8001414:	d000      	beq.n	8001418 <HAL_PCD_IRQHandler+0x978>
 8001416:	e07f      	b.n	8001518 <HAL_PCD_IRQHandler+0xa78>
 8001418:	3250      	adds	r2, #80	; 0x50
 800141a:	5a88      	ldrh	r0, [r1, r2]
 800141c:	3a28      	subs	r2, #40	; 0x28
 800141e:	5cba      	ldrb	r2, [r7, r2]
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	4691      	mov	r9, r2
 8001424:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <HAL_PCD_IRQHandler+0xa74>)
 8001426:	4694      	mov	ip, r2
 8001428:	4461      	add	r1, ip
 800142a:	1841      	adds	r1, r0, r1
 800142c:	000a      	movs	r2, r1
 800142e:	444a      	add	r2, r9
 8001430:	2b00      	cmp	r3, #0
 8001432:	d148      	bne.n	80014c6 <HAL_PCD_IRQHandler+0xa26>
 8001434:	8811      	ldrh	r1, [r2, #0]
 8001436:	4835      	ldr	r0, [pc, #212]	; (800150c <HAL_PCD_IRQHandler+0xa6c>)
 8001438:	4001      	ands	r1, r0
 800143a:	8011      	strh	r1, [r2, #0]
 800143c:	8811      	ldrh	r1, [r2, #0]
 800143e:	2080      	movs	r0, #128	; 0x80
 8001440:	0200      	lsls	r0, r0, #8
 8001442:	4301      	orrs	r1, r0
 8001444:	8011      	strh	r1, [r2, #0]
 8001446:	e069      	b.n	800151c <HAL_PCD_IRQHandler+0xa7c>
      ep->xfer_len = 0U;
 8001448:	00ab      	lsls	r3, r5, #2
 800144a:	195d      	adds	r5, r3, r5
 800144c:	00ed      	lsls	r5, r5, #3
 800144e:	1965      	adds	r5, r4, r5
 8001450:	2300      	movs	r3, #0
 8001452:	642b      	str	r3, [r5, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001454:	0020      	movs	r0, r4
 8001456:	f003 f974 	bl	8004742 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800145a:	464b      	mov	r3, r9
 800145c:	045b      	lsls	r3, r3, #17
 800145e:	d500      	bpl.n	8001462 <HAL_PCD_IRQHandler+0x9c2>
 8001460:	e6c4      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001462:	2328      	movs	r3, #40	; 0x28
 8001464:	5cfa      	ldrb	r2, [r7, r3]
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	469c      	mov	ip, r3
 800146c:	4462      	add	r2, ip
 800146e:	8813      	ldrh	r3, [r2, #0]
 8001470:	4922      	ldr	r1, [pc, #136]	; (80014fc <HAL_PCD_IRQHandler+0xa5c>)
 8001472:	400b      	ands	r3, r1
 8001474:	4922      	ldr	r1, [pc, #136]	; (8001500 <HAL_PCD_IRQHandler+0xa60>)
 8001476:	430b      	orrs	r3, r1
 8001478:	8013      	strh	r3, [r2, #0]
 800147a:	e6b7      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        else if (ep->xfer_len_db == 0U)
 800147c:	2800      	cmp	r0, #0
 800147e:	d108      	bne.n	8001492 <HAL_PCD_IRQHandler+0x9f2>
          ep->xfer_fill_db = 0U;
 8001480:	00ab      	lsls	r3, r5, #2
 8001482:	195b      	adds	r3, r3, r5
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	18e3      	adds	r3, r4, r3
 8001488:	334c      	adds	r3, #76	; 0x4c
 800148a:	2100      	movs	r1, #0
 800148c:	7019      	strb	r1, [r3, #0]
          len = TxByteNbre;
 800148e:	0013      	movs	r3, r2
 8001490:	e7bb      	b.n	800140a <HAL_PCD_IRQHandler+0x96a>
          ep->xfer_len_db = 0U;
 8001492:	00ab      	lsls	r3, r5, #2
 8001494:	195b      	adds	r3, r3, r5
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	18e3      	adds	r3, r4, r3
 800149a:	2200      	movs	r2, #0
 800149c:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800149e:	334c      	adds	r3, #76	; 0x4c
 80014a0:	701a      	strb	r2, [r3, #0]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014a2:	6821      	ldr	r1, [r4, #0]
 80014a4:	9101      	str	r1, [sp, #4]
 80014a6:	2329      	movs	r3, #41	; 0x29
 80014a8:	5cfa      	ldrb	r2, [r7, r3]
          len = ep->xfer_len_db;
 80014aa:	0003      	movs	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d133      	bne.n	8001518 <HAL_PCD_IRQHandler+0xa78>
 80014b0:	2350      	movs	r3, #80	; 0x50
 80014b2:	5aca      	ldrh	r2, [r1, r3]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_PCD_IRQHandler+0xa74>)
 80014b6:	469c      	mov	ip, r3
 80014b8:	4461      	add	r1, ip
 80014ba:	1852      	adds	r2, r2, r1
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	5cfb      	ldrb	r3, [r7, r3]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	18d2      	adds	r2, r2, r3
          len = ep->xfer_len_db;
 80014c4:	0003      	movs	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014c6:	2b3e      	cmp	r3, #62	; 0x3e
 80014c8:	d807      	bhi.n	80014da <HAL_PCD_IRQHandler+0xa3a>
 80014ca:	0859      	lsrs	r1, r3, #1
 80014cc:	4650      	mov	r0, sl
 80014ce:	4018      	ands	r0, r3
 80014d0:	1809      	adds	r1, r1, r0
 80014d2:	0289      	lsls	r1, r1, #10
 80014d4:	b289      	uxth	r1, r1
 80014d6:	8011      	strh	r1, [r2, #0]
 80014d8:	e020      	b.n	800151c <HAL_PCD_IRQHandler+0xa7c>
 80014da:	0959      	lsrs	r1, r3, #5
 80014dc:	4689      	mov	r9, r1
 80014de:	4640      	mov	r0, r8
 80014e0:	4018      	ands	r0, r3
 80014e2:	4241      	negs	r1, r0
 80014e4:	4141      	adcs	r1, r0
 80014e6:	0008      	movs	r0, r1
 80014e8:	4649      	mov	r1, r9
 80014ea:	1a09      	subs	r1, r1, r0
 80014ec:	0288      	lsls	r0, r1, #10
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <HAL_PCD_IRQHandler+0xa70>)
 80014f0:	4301      	orrs	r1, r0
 80014f2:	b289      	uxth	r1, r1
 80014f4:	8011      	strh	r1, [r2, #0]
 80014f6:	e011      	b.n	800151c <HAL_PCD_IRQHandler+0xa7c>
 80014f8:	00000402 	.word	0x00000402
 80014fc:	ffff8f8f 	.word	0xffff8f8f
 8001500:	0000c080 	.word	0x0000c080
 8001504:	ffff8fbf 	.word	0xffff8fbf
 8001508:	00008080 	.word	0x00008080
 800150c:	ffff83ff 	.word	0xffff83ff
 8001510:	ffff8000 	.word	0xffff8000
 8001514:	00000406 	.word	0x00000406
 8001518:	2a01      	cmp	r2, #1
 800151a:	d00d      	beq.n	8001538 <HAL_PCD_IRQHandler+0xa98>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800151c:	b29b      	uxth	r3, r3
 800151e:	00a9      	lsls	r1, r5, #2
 8001520:	194a      	adds	r2, r1, r5
 8001522:	00d2      	lsls	r2, r2, #3
 8001524:	18a2      	adds	r2, r4, r2
 8001526:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001528:	1949      	adds	r1, r1, r5
 800152a:	00c9      	lsls	r1, r1, #3
 800152c:	1861      	adds	r1, r4, r1
 800152e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	f001 fb78 	bl	8002c26 <USB_WritePMA>
 8001536:	e659      	b.n	80011ec <HAL_PCD_IRQHandler+0x74c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001538:	2050      	movs	r0, #80	; 0x50
 800153a:	5a08      	ldrh	r0, [r1, r0]
 800153c:	2128      	movs	r1, #40	; 0x28
 800153e:	5c79      	ldrb	r1, [r7, r1]
 8001540:	00c9      	lsls	r1, r1, #3
 8001542:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_PCD_IRQHandler+0xb34>)
 8001544:	4694      	mov	ip, r2
 8001546:	4461      	add	r1, ip
 8001548:	9a01      	ldr	r2, [sp, #4]
 800154a:	188a      	adds	r2, r1, r2
 800154c:	1882      	adds	r2, r0, r2
 800154e:	b299      	uxth	r1, r3
 8001550:	8011      	strh	r1, [r2, #0]
 8001552:	e7e3      	b.n	800151c <HAL_PCD_IRQHandler+0xa7c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001554:	6821      	ldr	r1, [r4, #0]
 8001556:	2244      	movs	r2, #68	; 0x44
 8001558:	5a8b      	ldrh	r3, [r1, r2]
 800155a:	481f      	ldr	r0, [pc, #124]	; (80015d8 <HAL_PCD_IRQHandler+0xb38>)
 800155c:	4003      	ands	r3, r0
 800155e:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 8001560:	0020      	movs	r0, r4
 8001562:	f003 f901 	bl	8004768 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001566:	2100      	movs	r1, #0
 8001568:	0020      	movs	r0, r4
 800156a:	f7ff fa82 	bl	8000a72 <HAL_PCD_SetAddress>
 800156e:	f7ff faac 	bl	8000aca <HAL_PCD_IRQHandler+0x2a>
      hpcd->LPM_State = LPM_L0;
 8001572:	23b8      	movs	r3, #184	; 0xb8
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	2200      	movs	r2, #0
 8001578:	54e2      	strb	r2, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800157a:	2100      	movs	r1, #0
 800157c:	0020      	movs	r0, r4
 800157e:	f000 f99f 	bl	80018c0 <HAL_PCDEx_LPM_Callback>
 8001582:	f7ff facf 	bl	8000b24 <HAL_PCD_IRQHandler+0x84>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	5aca      	ldrh	r2, [r1, r3]
 800158c:	2008      	movs	r0, #8
 800158e:	4302      	orrs	r2, r0
 8001590:	52ca      	strh	r2, [r1, r3]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001592:	6820      	ldr	r0, [r4, #0]
 8001594:	2144      	movs	r1, #68	; 0x44
 8001596:	5a42      	ldrh	r2, [r0, r1]
 8001598:	4d10      	ldr	r5, [pc, #64]	; (80015dc <HAL_PCD_IRQHandler+0xb3c>)
 800159a:	402a      	ands	r2, r5
 800159c:	5242      	strh	r2, [r0, r1]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800159e:	6821      	ldr	r1, [r4, #0]
 80015a0:	5aca      	ldrh	r2, [r1, r3]
 80015a2:	2004      	movs	r0, #4
 80015a4:	4302      	orrs	r2, r0
 80015a6:	52ca      	strh	r2, [r1, r3]
    HAL_PCD_SuspendCallback(hpcd);
 80015a8:	0020      	movs	r0, r4
 80015aa:	f003 f8ef 	bl	800478c <HAL_PCD_SuspendCallback>
 80015ae:	f7ff fac9 	bl	8000b44 <HAL_PCD_IRQHandler+0xa4>
      HAL_PCD_SuspendCallback(hpcd);
 80015b2:	0020      	movs	r0, r4
 80015b4:	f003 f8ea 	bl	800478c <HAL_PCD_SuspendCallback>
 80015b8:	f7ff faf2 	bl	8000ba0 <HAL_PCD_IRQHandler+0x100>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015bc:	6821      	ldr	r1, [r4, #0]
 80015be:	2244      	movs	r2, #68	; 0x44
 80015c0:	5a8b      	ldrh	r3, [r1, r2]
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HAL_PCD_IRQHandler+0xb40>)
 80015c4:	4003      	ands	r3, r0
 80015c6:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 80015c8:	0020      	movs	r0, r4
 80015ca:	f003 f8c6 	bl	800475a <HAL_PCD_SOFCallback>
 80015ce:	f7ff faee 	bl	8000bae <HAL_PCD_IRQHandler+0x10e>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	00000406 	.word	0x00000406
 80015d8:	fffffbff 	.word	0xfffffbff
 80015dc:	fffff7ff 	.word	0xfffff7ff
 80015e0:	fffffdff 	.word	0xfffffdff

080015e4 <HAL_PCD_EP_Open>:
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	0005      	movs	r5, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80015e8:	b248      	sxtb	r0, r1
 80015ea:	2800      	cmp	r0, #0
 80015ec:	db2a      	blt.n	8001644 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ee:	2607      	movs	r6, #7
 80015f0:	400e      	ands	r6, r1
 80015f2:	00b4      	lsls	r4, r6, #2
 80015f4:	19a0      	adds	r0, r4, r6
 80015f6:	00c0      	lsls	r0, r0, #3
 80015f8:	3069      	adds	r0, #105	; 0x69
 80015fa:	30ff      	adds	r0, #255	; 0xff
 80015fc:	1828      	adds	r0, r5, r0
    ep->is_in = 0U;
 80015fe:	19a4      	adds	r4, r4, r6
 8001600:	00e4      	lsls	r4, r4, #3
 8001602:	192c      	adds	r4, r5, r4
 8001604:	346a      	adds	r4, #106	; 0x6a
 8001606:	34ff      	adds	r4, #255	; 0xff
 8001608:	2600      	movs	r6, #0
 800160a:	7026      	strb	r6, [r4, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800160c:	2407      	movs	r4, #7
 800160e:	4021      	ands	r1, r4
 8001610:	7001      	strb	r1, [r0, #0]
  ep->maxpacket = ep_mps;
 8001612:	6102      	str	r2, [r0, #16]
  ep->type = ep_type;
 8001614:	70c3      	strb	r3, [r0, #3]
  if (ep->is_in != 0U)
 8001616:	7842      	ldrb	r2, [r0, #1]
 8001618:	2a00      	cmp	r2, #0
 800161a:	d000      	beq.n	800161e <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 800161c:	81c1      	strh	r1, [r0, #14]
  if (ep_type == EP_TYPE_BULK)
 800161e:	2b02      	cmp	r3, #2
 8001620:	d01a      	beq.n	8001658 <HAL_PCD_EP_Open+0x74>
  __HAL_LOCK(hpcd);
 8001622:	23aa      	movs	r3, #170	; 0xaa
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	5ceb      	ldrb	r3, [r5, r3]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d018      	beq.n	800165e <HAL_PCD_EP_Open+0x7a>
 800162c:	24aa      	movs	r4, #170	; 0xaa
 800162e:	00a4      	lsls	r4, r4, #2
 8001630:	2301      	movs	r3, #1
 8001632:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001634:	0001      	movs	r1, r0
 8001636:	6828      	ldr	r0, [r5, #0]
 8001638:	f001 f868 	bl	800270c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800163c:	2300      	movs	r3, #0
 800163e:	552b      	strb	r3, [r5, r4]
  return ret;
 8001640:	2000      	movs	r0, #0
}
 8001642:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001644:	2407      	movs	r4, #7
 8001646:	400c      	ands	r4, r1
 8001648:	1c66      	adds	r6, r4, #1
 800164a:	00b4      	lsls	r4, r6, #2
 800164c:	19a0      	adds	r0, r4, r6
 800164e:	00c0      	lsls	r0, r0, #3
 8001650:	1828      	adds	r0, r5, r0
    ep->is_in = 1U;
 8001652:	2601      	movs	r6, #1
 8001654:	7046      	strb	r6, [r0, #1]
 8001656:	e7d9      	b.n	800160c <HAL_PCD_EP_Open+0x28>
    ep->data_pid_start = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	7103      	strb	r3, [r0, #4]
 800165c:	e7e1      	b.n	8001622 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 800165e:	2002      	movs	r0, #2
 8001660:	e7ef      	b.n	8001642 <HAL_PCD_EP_Open+0x5e>

08001662 <HAL_PCD_EP_Close>:
{
 8001662:	b570      	push	{r4, r5, r6, lr}
 8001664:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001666:	b24b      	sxtb	r3, r1
 8001668:	2b00      	cmp	r3, #0
 800166a:	db22      	blt.n	80016b2 <HAL_PCD_EP_Close+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166c:	2007      	movs	r0, #7
 800166e:	4008      	ands	r0, r1
 8001670:	0082      	lsls	r2, r0, #2
 8001672:	1813      	adds	r3, r2, r0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	3369      	adds	r3, #105	; 0x69
 8001678:	33ff      	adds	r3, #255	; 0xff
 800167a:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 800167c:	1812      	adds	r2, r2, r0
 800167e:	00d2      	lsls	r2, r2, #3
 8001680:	18a2      	adds	r2, r4, r2
 8001682:	326a      	adds	r2, #106	; 0x6a
 8001684:	32ff      	adds	r2, #255	; 0xff
 8001686:	2000      	movs	r0, #0
 8001688:	7010      	strb	r0, [r2, #0]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800168a:	2207      	movs	r2, #7
 800168c:	4011      	ands	r1, r2
 800168e:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001690:	22aa      	movs	r2, #170	; 0xaa
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	5ca2      	ldrb	r2, [r4, r2]
 8001696:	2a01      	cmp	r2, #1
 8001698:	d015      	beq.n	80016c6 <HAL_PCD_EP_Close+0x64>
 800169a:	25aa      	movs	r5, #170	; 0xaa
 800169c:	00ad      	lsls	r5, r5, #2
 800169e:	2201      	movs	r2, #1
 80016a0:	5562      	strb	r2, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016a2:	0019      	movs	r1, r3
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	f001 f98f 	bl	80029c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016aa:	2300      	movs	r3, #0
 80016ac:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80016ae:	2000      	movs	r0, #0
}
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	2207      	movs	r2, #7
 80016b4:	400a      	ands	r2, r1
 80016b6:	1c50      	adds	r0, r2, #1
 80016b8:	0082      	lsls	r2, r0, #2
 80016ba:	1813      	adds	r3, r2, r0
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 80016c0:	2001      	movs	r0, #1
 80016c2:	7058      	strb	r0, [r3, #1]
 80016c4:	e7e1      	b.n	800168a <HAL_PCD_EP_Close+0x28>
  __HAL_LOCK(hpcd);
 80016c6:	2002      	movs	r0, #2
 80016c8:	e7f2      	b.n	80016b0 <HAL_PCD_EP_Close+0x4e>

080016ca <HAL_PCD_EP_Receive>:
{
 80016ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016cc:	2607      	movs	r6, #7
 80016ce:	400e      	ands	r6, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	00b4      	lsls	r4, r6, #2
 80016d2:	19a1      	adds	r1, r4, r6
 80016d4:	00c9      	lsls	r1, r1, #3
 80016d6:	3169      	adds	r1, #105	; 0x69
 80016d8:	31ff      	adds	r1, #255	; 0xff
 80016da:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 80016dc:	19a5      	adds	r5, r4, r6
 80016de:	00ed      	lsls	r5, r5, #3
 80016e0:	1945      	adds	r5, r0, r5
 80016e2:	002f      	movs	r7, r5
 80016e4:	377d      	adds	r7, #125	; 0x7d
 80016e6:	37ff      	adds	r7, #255	; 0xff
 80016e8:	603a      	str	r2, [r7, #0]
  ep->xfer_len = len;
 80016ea:	002a      	movs	r2, r5
 80016ec:	3281      	adds	r2, #129	; 0x81
 80016ee:	32ff      	adds	r2, #255	; 0xff
 80016f0:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80016f2:	3204      	adds	r2, #4
 80016f4:	2300      	movs	r3, #0
 80016f6:	6013      	str	r3, [r2, #0]
  ep->is_in = 0U;
 80016f8:	356a      	adds	r5, #106	; 0x6a
 80016fa:	35ff      	adds	r5, #255	; 0xff
 80016fc:	702b      	strb	r3, [r5, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016fe:	19a4      	adds	r4, r4, r6
 8001700:	00e4      	lsls	r4, r4, #3
 8001702:	1904      	adds	r4, r0, r4
 8001704:	3469      	adds	r4, #105	; 0x69
 8001706:	34ff      	adds	r4, #255	; 0xff
 8001708:	7026      	strb	r6, [r4, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800170a:	2e00      	cmp	r6, #0
 800170c:	d004      	beq.n	8001718 <HAL_PCD_EP_Receive+0x4e>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	f001 faa0 	bl	8002c54 <USB_EPStartXfer>
}
 8001714:	2000      	movs	r0, #0
 8001716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001718:	6800      	ldr	r0, [r0, #0]
 800171a:	f001 fa9b 	bl	8002c54 <USB_EPStartXfer>
 800171e:	e7f9      	b.n	8001714 <HAL_PCD_EP_Receive+0x4a>

08001720 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001720:	2307      	movs	r3, #7
 8001722:	400b      	ands	r3, r1
 8001724:	0099      	lsls	r1, r3, #2
 8001726:	18c9      	adds	r1, r1, r3
 8001728:	00c9      	lsls	r1, r1, #3
 800172a:	1840      	adds	r0, r0, r1
 800172c:	3085      	adds	r0, #133	; 0x85
 800172e:	30ff      	adds	r0, #255	; 0xff
 8001730:	6800      	ldr	r0, [r0, #0]
}
 8001732:	4770      	bx	lr

08001734 <HAL_PCD_EP_Transmit>:
{
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	2607      	movs	r6, #7
 8001738:	400e      	ands	r6, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173a:	1c74      	adds	r4, r6, #1
 800173c:	00a1      	lsls	r1, r4, #2
 800173e:	1909      	adds	r1, r1, r4
 8001740:	00c9      	lsls	r1, r1, #3
 8001742:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 8001744:	00b4      	lsls	r4, r6, #2
 8001746:	19a5      	adds	r5, r4, r6
 8001748:	00ed      	lsls	r5, r5, #3
 800174a:	1945      	adds	r5, r0, r5
 800174c:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 800174e:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001750:	002f      	movs	r7, r5
 8001752:	374c      	adds	r7, #76	; 0x4c
 8001754:	2201      	movs	r2, #1
 8001756:	703a      	strb	r2, [r7, #0]
  ep->xfer_len_db = len;
 8001758:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 800175e:	2429      	movs	r4, #41	; 0x29
 8001760:	552a      	strb	r2, [r5, r4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001762:	3227      	adds	r2, #39	; 0x27
 8001764:	54ae      	strb	r6, [r5, r2]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001766:	2e00      	cmp	r6, #0
 8001768:	d004      	beq.n	8001774 <HAL_PCD_EP_Transmit+0x40>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800176a:	6800      	ldr	r0, [r0, #0]
 800176c:	f001 fa72 	bl	8002c54 <USB_EPStartXfer>
}
 8001770:	2000      	movs	r0, #0
 8001772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001774:	6800      	ldr	r0, [r0, #0]
 8001776:	f001 fa6d 	bl	8002c54 <USB_EPStartXfer>
 800177a:	e7f9      	b.n	8001770 <HAL_PCD_EP_Transmit+0x3c>

0800177c <HAL_PCD_EP_SetStall>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	0004      	movs	r4, r0
 8001780:	2507      	movs	r5, #7
 8001782:	400d      	ands	r5, r1
    return HAL_ERROR;
 8001784:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001786:	6863      	ldr	r3, [r4, #4]
 8001788:	429d      	cmp	r5, r3
 800178a:	d822      	bhi.n	80017d2 <HAL_PCD_EP_SetStall+0x56>
  if ((0x80U & ep_addr) == 0x80U)
 800178c:	b24b      	sxtb	r3, r1
 800178e:	2b00      	cmp	r3, #0
 8001790:	db20      	blt.n	80017d4 <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr];
 8001792:	008a      	lsls	r2, r1, #2
 8001794:	1853      	adds	r3, r2, r1
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	3369      	adds	r3, #105	; 0x69
 800179a:	33ff      	adds	r3, #255	; 0xff
 800179c:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 800179e:	1852      	adds	r2, r2, r1
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	18a2      	adds	r2, r4, r2
 80017a4:	326a      	adds	r2, #106	; 0x6a
 80017a6:	32ff      	adds	r2, #255	; 0xff
 80017a8:	2100      	movs	r1, #0
 80017aa:	7011      	strb	r1, [r2, #0]
  ep->is_stall = 1U;
 80017ac:	2201      	movs	r2, #1
 80017ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b0:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80017b2:	22aa      	movs	r2, #170	; 0xaa
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	5ca2      	ldrb	r2, [r4, r2]
 80017b8:	2a01      	cmp	r2, #1
 80017ba:	d013      	beq.n	80017e4 <HAL_PCD_EP_SetStall+0x68>
 80017bc:	25aa      	movs	r5, #170	; 0xaa
 80017be:	00ad      	lsls	r5, r5, #2
 80017c0:	2201      	movs	r2, #1
 80017c2:	5562      	strb	r2, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017c4:	0019      	movs	r1, r3
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f001 f9ae 	bl	8002b28 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80017cc:	2300      	movs	r3, #0
 80017ce:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
}
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d4:	1c68      	adds	r0, r5, #1
 80017d6:	0082      	lsls	r2, r0, #2
 80017d8:	1813      	adds	r3, r2, r0
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 80017de:	2101      	movs	r1, #1
 80017e0:	7059      	strb	r1, [r3, #1]
 80017e2:	e7e3      	b.n	80017ac <HAL_PCD_EP_SetStall+0x30>
  __HAL_LOCK(hpcd);
 80017e4:	2002      	movs	r0, #2
 80017e6:	e7f4      	b.n	80017d2 <HAL_PCD_EP_SetStall+0x56>

080017e8 <HAL_PCD_EP_ClrStall>:
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017ec:	230f      	movs	r3, #15
 80017ee:	400b      	ands	r3, r1
    return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d826      	bhi.n	8001846 <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 80017f8:	b24b      	sxtb	r3, r1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db24      	blt.n	8001848 <HAL_PCD_EP_ClrStall+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	2007      	movs	r0, #7
 8001800:	4008      	ands	r0, r1
 8001802:	0082      	lsls	r2, r0, #2
 8001804:	1813      	adds	r3, r2, r0
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	3369      	adds	r3, #105	; 0x69
 800180a:	33ff      	adds	r3, #255	; 0xff
 800180c:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 800180e:	1812      	adds	r2, r2, r0
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	18a2      	adds	r2, r4, r2
 8001814:	326a      	adds	r2, #106	; 0x6a
 8001816:	32ff      	adds	r2, #255	; 0xff
 8001818:	2000      	movs	r0, #0
 800181a:	7010      	strb	r0, [r2, #0]
  ep->is_stall = 0U;
 800181c:	2200      	movs	r2, #0
 800181e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001820:	3207      	adds	r2, #7
 8001822:	4011      	ands	r1, r2
 8001824:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001826:	22aa      	movs	r2, #170	; 0xaa
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	5ca2      	ldrb	r2, [r4, r2]
 800182c:	2a01      	cmp	r2, #1
 800182e:	d015      	beq.n	800185c <HAL_PCD_EP_ClrStall+0x74>
 8001830:	25aa      	movs	r5, #170	; 0xaa
 8001832:	00ad      	lsls	r5, r5, #2
 8001834:	2201      	movs	r2, #1
 8001836:	5562      	strb	r2, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001838:	0019      	movs	r1, r3
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	f001 f998 	bl	8002b70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001840:	2300      	movs	r3, #0
 8001842:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001844:	2000      	movs	r0, #0
}
 8001846:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001848:	2207      	movs	r2, #7
 800184a:	400a      	ands	r2, r1
 800184c:	1c50      	adds	r0, r2, #1
 800184e:	0082      	lsls	r2, r0, #2
 8001850:	1813      	adds	r3, r2, r0
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 8001856:	2001      	movs	r0, #1
 8001858:	7058      	strb	r0, [r3, #1]
 800185a:	e7df      	b.n	800181c <HAL_PCD_EP_ClrStall+0x34>
  __HAL_LOCK(hpcd);
 800185c:	2002      	movs	r0, #2
 800185e:	e7f2      	b.n	8001846 <HAL_PCD_EP_ClrStall+0x5e>

08001860 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001860:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001862:	060c      	lsls	r4, r1, #24
 8001864:	d50f      	bpl.n	8001886 <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001866:	2407      	movs	r4, #7
 8001868:	4021      	ands	r1, r4
 800186a:	3101      	adds	r1, #1
 800186c:	008c      	lsls	r4, r1, #2
 800186e:	1861      	adds	r1, r4, r1
 8001870:	00c9      	lsls	r1, r1, #3
 8001872:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001874:	2a00      	cmp	r2, #0
 8001876:	d00d      	beq.n	8001894 <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001878:	2201      	movs	r2, #1
 800187a:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800187c:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 8001882:	2000      	movs	r0, #0
 8001884:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001886:	008c      	lsls	r4, r1, #2
 8001888:	1861      	adds	r1, r4, r1
 800188a:	00c9      	lsls	r1, r1, #3
 800188c:	3169      	adds	r1, #105	; 0x69
 800188e:	31ff      	adds	r1, #255	; 0xff
 8001890:	1840      	adds	r0, r0, r1
 8001892:	e7ef      	b.n	8001874 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8001894:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001896:	80c3      	strh	r3, [r0, #6]
 8001898:	e7f3      	b.n	8001882 <HAL_PCDEx_PMAConfig+0x22>

0800189a <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800189a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800189c:	23ba      	movs	r3, #186	; 0xba
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	2101      	movs	r1, #1
 80018a2:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 80018a4:	3b08      	subs	r3, #8
 80018a6:	2100      	movs	r1, #0
 80018a8:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80018aa:	2354      	movs	r3, #84	; 0x54
 80018ac:	5ad1      	ldrh	r1, [r2, r3]
 80018ae:	2001      	movs	r0, #1
 80018b0:	4301      	orrs	r1, r0
 80018b2:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80018b4:	5ad1      	ldrh	r1, [r2, r3]
 80018b6:	2002      	movs	r0, #2
 80018b8:	4301      	orrs	r1, r0
 80018ba:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 80018bc:	2000      	movs	r0, #0
 80018be:	4770      	bx	lr

080018c0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	46ce      	mov	lr, r9
 80018c8:	4647      	mov	r7, r8
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b083      	sub	sp, #12
 80018ce:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d0:	d100      	bne.n	80018d4 <HAL_RCC_OscConfig+0x10>
 80018d2:	e2a2      	b.n	8001e1a <HAL_RCC_OscConfig+0x556>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d4:	6803      	ldr	r3, [r0, #0]
 80018d6:	07db      	lsls	r3, r3, #31
 80018d8:	d52c      	bpl.n	8001934 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018da:	4bbc      	ldr	r3, [pc, #752]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	230c      	movs	r3, #12
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d01d      	beq.n	8001922 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e6:	4bb9      	ldr	r3, [pc, #740]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	230c      	movs	r3, #12
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d00e      	beq.n	8001910 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	6863      	ldr	r3, [r4, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d043      	beq.n	8001980 <HAL_RCC_OscConfig+0xbc>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d15a      	bne.n	80019b2 <HAL_RCC_OscConfig+0xee>
 80018fc:	4bb3      	ldr	r3, [pc, #716]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	49b3      	ldr	r1, [pc, #716]	; (8001bd0 <HAL_RCC_OscConfig+0x30c>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	49b2      	ldr	r1, [pc, #712]	; (8001bd4 <HAL_RCC_OscConfig+0x310>)
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e03d      	b.n	800198c <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001910:	4bae      	ldr	r3, [pc, #696]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	22c0      	movs	r2, #192	; 0xc0
 8001916:	0252      	lsls	r2, r2, #9
 8001918:	4013      	ands	r3, r2
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0252      	lsls	r2, r2, #9
 800191e:	4293      	cmp	r3, r2
 8001920:	d1e7      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4baa      	ldr	r3, [pc, #680]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	039b      	lsls	r3, r3, #14
 8001928:	d504      	bpl.n	8001934 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	6863      	ldr	r3, [r4, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d100      	bne.n	8001934 <HAL_RCC_OscConfig+0x70>
 8001932:	e273      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	079b      	lsls	r3, r3, #30
 8001938:	d57d      	bpl.n	8001a36 <HAL_RCC_OscConfig+0x172>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800193a:	4ba4      	ldr	r3, [pc, #656]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	220c      	movs	r2, #12
 8001940:	421a      	tst	r2, r3
 8001942:	d067      	beq.n	8001a14 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001944:	4ba1      	ldr	r3, [pc, #644]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	230c      	movs	r3, #12
 800194a:	4013      	ands	r3, r2
 800194c:	2b08      	cmp	r3, #8
 800194e:	d058      	beq.n	8001a02 <HAL_RCC_OscConfig+0x13e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001950:	68e3      	ldr	r3, [r4, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d100      	bne.n	8001958 <HAL_RCC_OscConfig+0x94>
 8001956:	e091      	b.n	8001a7c <HAL_RCC_OscConfig+0x1b8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4a9c      	ldr	r2, [pc, #624]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 800195a:	6813      	ldr	r3, [r2, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	430b      	orrs	r3, r1
 8001960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7fe fd63 	bl	800042c <HAL_GetTick>
 8001966:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4e98      	ldr	r6, [pc, #608]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 800196a:	2502      	movs	r5, #2
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	421d      	tst	r5, r3
 8001970:	d17b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001972:	f7fe fd5b 	bl	800042c <HAL_GetTick>
 8001976:	1bc0      	subs	r0, r0, r7
 8001978:	2802      	cmp	r0, #2
 800197a:	d9f7      	bls.n	800196c <HAL_RCC_OscConfig+0xa8>
          {
            return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
 800197e:	e24d      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	4a92      	ldr	r2, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001982:	6811      	ldr	r1, [r2, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	430b      	orrs	r3, r1
 800198a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d027      	beq.n	80019e2 <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8001992:	f7fe fd4b 	bl	800042c <HAL_GetTick>
 8001996:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001998:	4e8c      	ldr	r6, [pc, #560]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 800199a:	2580      	movs	r5, #128	; 0x80
 800199c:	02ad      	lsls	r5, r5, #10
 800199e:	6833      	ldr	r3, [r6, #0]
 80019a0:	422b      	tst	r3, r5
 80019a2:	d1c7      	bne.n	8001934 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7fe fd42 	bl	800042c <HAL_GetTick>
 80019a8:	1bc0      	subs	r0, r0, r7
 80019aa:	2864      	cmp	r0, #100	; 0x64
 80019ac:	d9f7      	bls.n	800199e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e234      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_OscConfig+0x106>
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4985      	ldr	r1, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x30c>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4984      	ldr	r1, [pc, #528]	; (8001bd4 <HAL_RCC_OscConfig+0x310>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e7e0      	b.n	800198c <HAL_RCC_OscConfig+0xc8>
 80019ca:	4b80      	ldr	r3, [pc, #512]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	02d2      	lsls	r2, r2, #11
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	0252      	lsls	r2, r2, #9
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e7d4      	b.n	800198c <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80019e2:	f7fe fd23 	bl	800042c <HAL_GetTick>
 80019e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e8:	4e78      	ldr	r6, [pc, #480]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 80019ea:	2580      	movs	r5, #128	; 0x80
 80019ec:	02ad      	lsls	r5, r5, #10
 80019ee:	6833      	ldr	r3, [r6, #0]
 80019f0:	422b      	tst	r3, r5
 80019f2:	d09f      	beq.n	8001934 <HAL_RCC_OscConfig+0x70>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7fe fd1a 	bl	800042c <HAL_GetTick>
 80019f8:	1bc0      	subs	r0, r0, r7
 80019fa:	2864      	cmp	r0, #100	; 0x64
 80019fc:	d9f7      	bls.n	80019ee <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80019fe:	2003      	movs	r0, #3
 8001a00:	e20c      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	22c0      	movs	r2, #192	; 0xc0
 8001a08:	0252      	lsls	r2, r2, #9
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0212      	lsls	r2, r2, #8
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d19d      	bne.n	8001950 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a14:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	079b      	lsls	r3, r3, #30
 8001a1a:	d504      	bpl.n	8001a26 <HAL_RCC_OscConfig+0x162>
        return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	68e3      	ldr	r3, [r4, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d000      	beq.n	8001a26 <HAL_RCC_OscConfig+0x162>
 8001a24:	e1fa      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4969      	ldr	r1, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a28:	680a      	ldr	r2, [r1, #0]
 8001a2a:	6923      	ldr	r3, [r4, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	20f8      	movs	r0, #248	; 0xf8
 8001a30:	4382      	bics	r2, r0
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	071b      	lsls	r3, r3, #28
 8001a3a:	d547      	bpl.n	8001acc <HAL_RCC_OscConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	69e3      	ldr	r3, [r4, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d030      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x1e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4a62      	ldr	r2, [pc, #392]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a44:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a46:	2101      	movs	r1, #1
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7fe fcee 	bl	800042c <HAL_GetTick>
 8001a50:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4e5e      	ldr	r6, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a54:	2502      	movs	r5, #2
 8001a56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001a58:	421d      	tst	r5, r3
 8001a5a:	d137      	bne.n	8001acc <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7fe fce6 	bl	800042c <HAL_GetTick>
 8001a60:	1bc0      	subs	r0, r0, r7
 8001a62:	2802      	cmp	r0, #2
 8001a64:	d9f7      	bls.n	8001a56 <HAL_RCC_OscConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a66:	2003      	movs	r0, #3
 8001a68:	e1d8      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4958      	ldr	r1, [pc, #352]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a6c:	680a      	ldr	r2, [r1, #0]
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	20f8      	movs	r0, #248	; 0xf8
 8001a74:	4382      	bics	r2, r0
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
 8001a7a:	e7dc      	b.n	8001a36 <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_DISABLE();
 8001a7c:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a7e:	6813      	ldr	r3, [r2, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	438b      	bics	r3, r1
 8001a84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a86:	f7fe fcd1 	bl	800042c <HAL_GetTick>
 8001a8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8c:	4e4f      	ldr	r6, [pc, #316]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001a8e:	2502      	movs	r5, #2
 8001a90:	6833      	ldr	r3, [r6, #0]
 8001a92:	421d      	tst	r5, r3
 8001a94:	d0cf      	beq.n	8001a36 <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a96:	f7fe fcc9 	bl	800042c <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	2802      	cmp	r0, #2
 8001a9e:	d9f7      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e1bb      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001aa6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	438b      	bics	r3, r1
 8001aac:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7fe fcbd 	bl	800042c <HAL_GetTick>
 8001ab2:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4e45      	ldr	r6, [pc, #276]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001ab6:	2502      	movs	r5, #2
 8001ab8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001aba:	421d      	tst	r5, r3
 8001abc:	d006      	beq.n	8001acc <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7fe fcb5 	bl	800042c <HAL_GetTick>
 8001ac2:	1bc0      	subs	r0, r0, r7
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f7      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1f4>
        {
          return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
 8001aca:	e1a7      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	075b      	lsls	r3, r3, #29
 8001ad0:	d400      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x210>
 8001ad2:	e088      	b.n	8001be6 <HAL_RCC_OscConfig+0x322>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	d40b      	bmi.n	8001af8 <HAL_RCC_OscConfig+0x234>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001ae2:	69d1      	ldr	r1, [r2, #28]
 8001ae4:	2080      	movs	r0, #128	; 0x80
 8001ae6:	0540      	lsls	r0, r0, #21
 8001ae8:	4301      	orrs	r1, r0
 8001aea:	61d1      	str	r1, [r2, #28]
 8001aec:	69d3      	ldr	r3, [r2, #28]
 8001aee:	4003      	ands	r3, r0
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x314>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	d50e      	bpl.n	8001b1e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d021      	beq.n	8001b4a <HAL_RCC_OscConfig+0x286>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d138      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2b8>
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001b0c:	6a1a      	ldr	r2, [r3, #32]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	438a      	bics	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	3103      	adds	r1, #3
 8001b18:	438a      	bics	r2, r1
 8001b1a:	621a      	str	r2, [r3, #32]
 8001b1c:	e01a      	b.n	8001b54 <HAL_RCC_OscConfig+0x290>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x314>)
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b2a:	f7fe fc7f 	bl	800042c <HAL_GetTick>
 8001b2e:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4f29      	ldr	r7, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x314>)
 8001b32:	2680      	movs	r6, #128	; 0x80
 8001b34:	0076      	lsls	r6, r6, #1
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4233      	tst	r3, r6
 8001b3a:	d1e1      	bne.n	8001b00 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3c:	f7fe fc76 	bl	800042c <HAL_GetTick>
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	2864      	cmp	r0, #100	; 0x64
 8001b44:	d9f7      	bls.n	8001b36 <HAL_RCC_OscConfig+0x272>
          return HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
 8001b48:	e168      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001b4c:	6a13      	ldr	r3, [r2, #32]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	68a3      	ldr	r3, [r4, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d026      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe fc67 	bl	800042c <HAL_GetTick>
 8001b5e:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	4f1a      	ldr	r7, [pc, #104]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001b62:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	4d1d      	ldr	r5, [pc, #116]	; (8001bdc <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	421e      	tst	r6, r3
 8001b6a:	d139      	bne.n	8001be0 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7fe fc5e 	bl	800042c <HAL_GetTick>
 8001b70:	464b      	mov	r3, r9
 8001b72:	1ac0      	subs	r0, r0, r3
 8001b74:	42a8      	cmp	r0, r5
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	e14f      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2d0>
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001b82:	6a1a      	ldr	r2, [r3, #32]
 8001b84:	2101      	movs	r1, #1
 8001b86:	438a      	bics	r2, r1
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	3103      	adds	r1, #3
 8001b8e:	438a      	bics	r2, r1
 8001b90:	621a      	str	r2, [r3, #32]
 8001b92:	e7df      	b.n	8001b54 <HAL_RCC_OscConfig+0x290>
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	2104      	movs	r1, #4
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	621a      	str	r2, [r3, #32]
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	3903      	subs	r1, #3
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	621a      	str	r2, [r3, #32]
 8001ba6:	e7d5      	b.n	8001b54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7fe fc40 	bl	800042c <HAL_GetTick>
 8001bac:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4f07      	ldr	r7, [pc, #28]	; (8001bcc <HAL_RCC_OscConfig+0x308>)
 8001bb0:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	4d0a      	ldr	r5, [pc, #40]	; (8001bdc <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	421e      	tst	r6, r3
 8001bb8:	d012      	beq.n	8001be0 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe fc37 	bl	800042c <HAL_GetTick>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	1ac0      	subs	r0, r0, r3
 8001bc2:	42a8      	cmp	r0, r5
 8001bc4:	d9f6      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e128      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	fffeffff 	.word	0xfffeffff
 8001bd4:	fffbffff 	.word	0xfffbffff
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be0:	4643      	mov	r3, r8
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d03c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	06db      	lsls	r3, r3, #27
 8001bea:	d510      	bpl.n	8001c0e <HAL_RCC_OscConfig+0x34a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bec:	6963      	ldr	r3, [r4, #20]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d03c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x3a8>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	d15b      	bne.n	8001cae <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bf6:	4a8d      	ldr	r2, [pc, #564]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001bf8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	438b      	bics	r3, r1
 8001bfe:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c00:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c02:	69a3      	ldr	r3, [r4, #24]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	20f8      	movs	r0, #248	; 0xf8
 8001c08:	4381      	bics	r1, r0
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	069b      	lsls	r3, r3, #26
 8001c12:	d574      	bpl.n	8001cfe <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c14:	4b85      	ldr	r3, [pc, #532]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	230c      	movs	r3, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d065      	beq.n	8001cec <HAL_RCC_OscConfig+0x428>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c20:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	230c      	movs	r3, #12
 8001c26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d058      	beq.n	8001cde <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2c:	6a23      	ldr	r3, [r4, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x370>
 8001c32:	e086      	b.n	8001d42 <HAL_RCC_OscConfig+0x47e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c34:	4a7d      	ldr	r2, [pc, #500]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c36:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fbf4 	bl	800042c <HAL_GetTick>
 8001c44:	0007      	movs	r7, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c46:	4e79      	ldr	r6, [pc, #484]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c48:	2580      	movs	r5, #128	; 0x80
 8001c4a:	026d      	lsls	r5, r5, #9
 8001c4c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001c4e:	422b      	tst	r3, r5
 8001c50:	d155      	bne.n	8001cfe <HAL_RCC_OscConfig+0x43a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c52:	f7fe fbeb 	bl	800042c <HAL_GetTick>
 8001c56:	1bc0      	subs	r0, r0, r7
 8001c58:	2802      	cmp	r0, #2
 8001c5a:	d9f7      	bls.n	8001c4c <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	e0dd      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4a72      	ldr	r2, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c62:	69d3      	ldr	r3, [r2, #28]
 8001c64:	4972      	ldr	r1, [pc, #456]	; (8001e30 <HAL_RCC_OscConfig+0x56c>)
 8001c66:	400b      	ands	r3, r1
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	e7bc      	b.n	8001be6 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c70:	2104      	movs	r1, #4
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c78:	3903      	subs	r1, #3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fbd5 	bl	800042c <HAL_GetTick>
 8001c82:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c84:	4e69      	ldr	r6, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c86:	2502      	movs	r5, #2
 8001c88:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001c8a:	421d      	tst	r5, r3
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3d8>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c8e:	f7fe fbcd 	bl	800042c <HAL_GetTick>
 8001c92:	1bc0      	subs	r0, r0, r7
 8001c94:	2802      	cmp	r0, #2
 8001c96:	d9f7      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8001c98:	2003      	movs	r0, #3
 8001c9a:	e0bf      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c9c:	4963      	ldr	r1, [pc, #396]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001c9e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001ca0:	69a3      	ldr	r3, [r4, #24]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	20f8      	movs	r0, #248	; 0xf8
 8001ca6:	4382      	bics	r2, r0
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	634b      	str	r3, [r1, #52]	; 0x34
 8001cac:	e7af      	b.n	8001c0e <HAL_RCC_OscConfig+0x34a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cae:	4b5f      	ldr	r3, [pc, #380]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	3903      	subs	r1, #3
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fbb4 	bl	800042c <HAL_GetTick>
 8001cc4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc6:	4e59      	ldr	r6, [pc, #356]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001cc8:	2502      	movs	r5, #2
 8001cca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001ccc:	421d      	tst	r5, r3
 8001cce:	d09e      	beq.n	8001c0e <HAL_RCC_OscConfig+0x34a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cd0:	f7fe fbac 	bl	800042c <HAL_GetTick>
 8001cd4:	1bc0      	subs	r0, r0, r7
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9f7      	bls.n	8001cca <HAL_RCC_OscConfig+0x406>
          return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	e09e      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	22c0      	movs	r2, #192	; 0xc0
 8001ce4:	0252      	lsls	r2, r2, #9
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d19f      	bne.n	8001c2c <HAL_RCC_OscConfig+0x368>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	03db      	lsls	r3, r3, #15
 8001cf2:	d504      	bpl.n	8001cfe <HAL_RCC_OscConfig+0x43a>
        return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cf6:	6a23      	ldr	r3, [r4, #32]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d000      	beq.n	8001cfe <HAL_RCC_OscConfig+0x43a>
 8001cfc:	e08e      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
        }
      }
    }
  }

  return HAL_OK;
 8001d00:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
 8001d06:	e089      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d0a:	6851      	ldr	r1, [r2, #4]
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	400a      	ands	r2, r1
 8001d10:	2a08      	cmp	r2, #8
 8001d12:	d068      	beq.n	8001de6 <HAL_RCC_OscConfig+0x522>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d029      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4a44      	ldr	r2, [pc, #272]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	4945      	ldr	r1, [pc, #276]	; (8001e34 <HAL_RCC_OscConfig+0x570>)
 8001d1e:	400b      	ands	r3, r1
 8001d20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d22:	f7fe fb83 	bl	800042c <HAL_GetTick>
 8001d26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4d40      	ldr	r5, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d2a:	2480      	movs	r4, #128	; 0x80
 8001d2c:	04a4      	lsls	r4, r4, #18
 8001d2e:	682b      	ldr	r3, [r5, #0]
 8001d30:	4223      	tst	r3, r4
 8001d32:	d056      	beq.n	8001de2 <HAL_RCC_OscConfig+0x51e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe fb7a 	bl	800042c <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9f7      	bls.n	8001d2e <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8001d3e:	2003      	movs	r0, #3
 8001d40:	e06c      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI48_DISABLE();
 8001d42:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d44:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d46:	493c      	ldr	r1, [pc, #240]	; (8001e38 <HAL_RCC_OscConfig+0x574>)
 8001d48:	400b      	ands	r3, r1
 8001d4a:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fb6e 	bl	800042c <HAL_GetTick>
 8001d50:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d52:	4e36      	ldr	r6, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d54:	2580      	movs	r5, #128	; 0x80
 8001d56:	026d      	lsls	r5, r5, #9
 8001d58:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001d5a:	422b      	tst	r3, r5
 8001d5c:	d0cf      	beq.n	8001cfe <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5e:	f7fe fb65 	bl	800042c <HAL_GetTick>
 8001d62:	1bc0      	subs	r0, r0, r7
 8001d64:	2802      	cmp	r0, #2
 8001d66:	d9f7      	bls.n	8001d58 <HAL_RCC_OscConfig+0x494>
            return HAL_TIMEOUT;
 8001d68:	2003      	movs	r0, #3
 8001d6a:	e057      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	4930      	ldr	r1, [pc, #192]	; (8001e34 <HAL_RCC_OscConfig+0x570>)
 8001d72:	400b      	ands	r3, r1
 8001d74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d76:	f7fe fb59 	bl	800042c <HAL_GetTick>
 8001d7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	4e2b      	ldr	r6, [pc, #172]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d7e:	2580      	movs	r5, #128	; 0x80
 8001d80:	04ad      	lsls	r5, r5, #18
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	422b      	tst	r3, r5
 8001d86:	d006      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe fb50 	bl	800042c <HAL_GetTick>
 8001d8c:	1bc0      	subs	r0, r0, r7
 8001d8e:	2802      	cmp	r0, #2
 8001d90:	d9f7      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4be>
            return HAL_TIMEOUT;
 8001d92:	2003      	movs	r0, #3
 8001d94:	e042      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001da0:	430a      	orrs	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001da8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001daa:	4302      	orrs	r2, r0
 8001dac:	4823      	ldr	r0, [pc, #140]	; (8001e3c <HAL_RCC_OscConfig+0x578>)
 8001dae:	4001      	ands	r1, r0
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0452      	lsls	r2, r2, #17
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fb35 	bl	800042c <HAL_GetTick>
 8001dc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	4d19      	ldr	r5, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001dc6:	2480      	movs	r4, #128	; 0x80
 8001dc8:	04a4      	lsls	r4, r4, #18
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	4223      	tst	r3, r4
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe fb2c 	bl	800042c <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	2802      	cmp	r0, #2
 8001dd8:	d9f7      	bls.n	8001dca <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8001dda:	2003      	movs	r0, #3
 8001ddc:	e01e      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
  return HAL_OK;
 8001dde:	2000      	movs	r0, #0
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
 8001de2:	2000      	movs	r0, #0
 8001de4:	e01a      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d01d      	beq.n	8001e26 <HAL_RCC_OscConfig+0x562>
        pll_config  = RCC->CFGR;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x568>)
 8001dec:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	23c0      	movs	r3, #192	; 0xc0
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	4013      	ands	r3, r2
          return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001dfa:	42ab      	cmp	r3, r5
 8001dfc:	d10e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dfe:	230f      	movs	r3, #15
 8001e00:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e08:	20f0      	movs	r0, #240	; 0xf0
 8001e0a:	0380      	lsls	r0, r0, #14
 8001e0c:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e10:	1a10      	subs	r0, r2, r0
 8001e12:	1e42      	subs	r2, r0, #1
 8001e14:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 8001e16:	b2c0      	uxtb	r0, r0
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bc0c      	pop	{r2, r3}
 8001e20:	4690      	mov	r8, r2
 8001e22:	4699      	mov	r9, r3
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7f8      	b.n	8001e1c <HAL_RCC_OscConfig+0x558>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	efffffff 	.word	0xefffffff
 8001e34:	feffffff 	.word	0xfeffffff
 8001e38:	fffeffff 	.word	0xfffeffff
 8001e3c:	ffc27fff 	.word	0xffc27fff

08001e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b530      	push	{r4, r5, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e44:	aa04      	add	r2, sp, #16
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001e48:	0018      	movs	r0, r3
 8001e4a:	c832      	ldmia	r0!, {r1, r4, r5}
 8001e4c:	c232      	stmia	r2!, {r1, r4, r5}
 8001e4e:	0011      	movs	r1, r2
 8001e50:	6802      	ldr	r2, [r0, #0]
 8001e52:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e54:	466a      	mov	r2, sp
 8001e56:	3310      	adds	r3, #16
 8001e58:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001e5a:	c213      	stmia	r2!, {r0, r1, r4}
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e62:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e64:	230c      	movs	r3, #12
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d00d      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x48>
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x44>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	3b04      	subs	r3, #4
 8001e72:	4258      	negs	r0, r3
 8001e74:	4158      	adcs	r0, r3
 8001e76:	4240      	negs	r0, r0
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7a:	4018      	ands	r0, r3
 8001e7c:	469c      	mov	ip, r3
 8001e7e:	4460      	add	r0, ip
      break;
    }
  }
  return sysclockfreq;
}
 8001e80:	b009      	add	sp, #36	; 0x24
 8001e82:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI48_VALUE;
 8001e84:	4815      	ldr	r0, [pc, #84]	; (8001edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e86:	e7fb      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e88:	0c91      	lsrs	r1, r2, #18
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	4019      	ands	r1, r3
 8001e8e:	a804      	add	r0, sp, #16
 8001e90:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e92:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e94:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001e96:	400b      	ands	r3, r1
 8001e98:	4669      	mov	r1, sp
 8001e9a:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d008      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x7c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x86>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb2:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	4360      	muls	r0, r4
 8001eba:	e7e1      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ebe:	f7fe f923 	bl	8000108 <__udivsi3>
 8001ec2:	4360      	muls	r0, r4
 8001ec4:	e7dc      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ec8:	f7fe f91e 	bl	8000108 <__udivsi3>
 8001ecc:	4360      	muls	r0, r4
 8001ece:	e7d7      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed0:	08004da0 	.word	0x08004da0
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	02dc6c00 	.word	0x02dc6c00
 8001ee0:	00f42400 	.word	0x00f42400

08001ee4 <HAL_RCC_ClockConfig>:
{
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	46ce      	mov	lr, r9
 8001ee8:	4647      	mov	r7, r8
 8001eea:	b580      	push	{r7, lr}
 8001eec:	0004      	movs	r4, r0
 8001eee:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d100      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x12>
 8001ef4:	e089      	b.n	800200a <HAL_RCC_ClockConfig+0x126>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x130>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d20a      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4944      	ldr	r1, [pc, #272]	; (8002014 <HAL_RCC_ClockConfig+0x130>)
 8001f04:	680b      	ldr	r3, [r1, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4393      	bics	r3, r2
 8001f0a:	432b      	orrs	r3, r5
 8001f0c:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	680b      	ldr	r3, [r1, #0]
 8001f10:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f14:	42aa      	cmp	r2, r5
 8001f16:	d179      	bne.n	800200c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	079a      	lsls	r2, r3, #30
 8001f1c:	d50e      	bpl.n	8001f3c <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1e:	075b      	lsls	r3, r3, #29
 8001f20:	d505      	bpl.n	8001f2e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f24:	6851      	ldr	r1, [r2, #4]
 8001f26:	23e0      	movs	r3, #224	; 0xe0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f30:	6853      	ldr	r3, [r2, #4]
 8001f32:	21f0      	movs	r1, #240	; 0xf0
 8001f34:	438b      	bics	r3, r1
 8001f36:	68a1      	ldr	r1, [r4, #8]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	07db      	lsls	r3, r3, #31
 8001f40:	d538      	bpl.n	8001fb4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	6863      	ldr	r3, [r4, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d009      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d027      	beq.n	8001f9c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d02b      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f52:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	0792      	lsls	r2, r2, #30
 8001f58:	d405      	bmi.n	8001f66 <HAL_RCC_ClockConfig+0x82>
 8001f5a:	e057      	b.n	800200c <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f5e:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	0392      	lsls	r2, r2, #14
 8001f64:	d552      	bpl.n	800200c <HAL_RCC_ClockConfig+0x128>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	492c      	ldr	r1, [pc, #176]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f68:	684a      	ldr	r2, [r1, #4]
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	4382      	bics	r2, r0
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001f72:	f7fe fa5b 	bl	800042c <HAL_GetTick>
 8001f76:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	4f27      	ldr	r7, [pc, #156]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f7a:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x138>)
 8001f7e:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4032      	ands	r2, r6
 8001f84:	6863      	ldr	r3, [r4, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0xd0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fa4e 	bl	800042c <HAL_GetTick>
 8001f90:	464b      	mov	r3, r9
 8001f92:	1ac0      	subs	r0, r0, r3
 8001f94:	4540      	cmp	r0, r8
 8001f96:	d9f3      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x9c>
        return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
 8001f9a:	e037      	b.n	800200c <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001f9e:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	0192      	lsls	r2, r2, #6
 8001fa4:	d4df      	bmi.n	8001f66 <HAL_RCC_ClockConfig+0x82>
 8001fa6:	e031      	b.n	800200c <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001faa:	6b52      	ldr	r2, [r2, #52]	; 0x34
        return HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fae:	03d2      	lsls	r2, r2, #15
 8001fb0:	d4d9      	bmi.n	8001f66 <HAL_RCC_ClockConfig+0x82>
 8001fb2:	e02b      	b.n	800200c <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_RCC_ClockConfig+0x130>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	42ab      	cmp	r3, r5
 8001fbe:	d90a      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc0:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_RCC_ClockConfig+0x130>)
 8001fc2:	680b      	ldr	r3, [r1, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fcc:	680b      	ldr	r3, [r1, #0]
 8001fce:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	42aa      	cmp	r2, r5
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	075b      	lsls	r3, r3, #29
 8001fda:	d506      	bpl.n	8001fea <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001fde:	6853      	ldr	r3, [r2, #4]
 8001fe0:	490f      	ldr	r1, [pc, #60]	; (8002020 <HAL_RCC_ClockConfig+0x13c>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	68e1      	ldr	r1, [r4, #12]
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fea:	f7ff ff29 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x134>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	061b      	lsls	r3, r3, #24
 8001ff4:	0f1b      	lsrs	r3, r3, #28
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x140>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	40d8      	lsrs	r0, r3
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x144>)
 8001ffe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002000:	2000      	movs	r0, #0
 8002002:	f002 f9e5 	bl	80043d0 <HAL_InitTick>
  return HAL_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	e000      	b.n	800200c <HAL_RCC_ClockConfig+0x128>
    return HAL_ERROR;
 800200a:	2001      	movs	r0, #1
}
 800200c:	bc0c      	pop	{r2, r3}
 800200e:	4690      	mov	r8, r2
 8002010:	4699      	mov	r9, r3
 8002012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	00001388 	.word	0x00001388
 8002020:	fffff8ff 	.word	0xfffff8ff
 8002024:	08004e20 	.word	0x08004e20
 8002028:	20000114 	.word	0x20000114

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x14>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	055b      	lsls	r3, r3, #21
 8002032:	0f5b      	lsrs	r3, r3, #29
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	4a03      	ldr	r2, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800203a:	6810      	ldr	r0, [r2, #0]
 800203c:	40d8      	lsrs	r0, r3
}    
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000
 8002044:	08004e30 	.word	0x08004e30
 8002048:	20000114 	.word	0x20000114

0800204c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800204c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800204e:	2307      	movs	r3, #7
 8002050:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_GetClockConfig+0x30>)
 8002054:	685c      	ldr	r4, [r3, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	4022      	ands	r2, r4
 800205a:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800205c:	685c      	ldr	r4, [r3, #4]
 800205e:	22f0      	movs	r2, #240	; 0xf0
 8002060:	4022      	ands	r2, r4
 8002062:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	22e0      	movs	r2, #224	; 0xe0
 8002068:	00d2      	lsls	r2, r2, #3
 800206a:	4013      	ands	r3, r2
 800206c:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_GetClockConfig+0x34>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	4013      	ands	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
}
 8002078:	bd10      	pop	{r4, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000
 8002080:	40022000 	.word	0x40022000

08002084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	46ce      	mov	lr, r9
 8002088:	4647      	mov	r7, r8
 800208a:	b580      	push	{r7, lr}
 800208c:	b083      	sub	sp, #12
 800208e:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	03db      	lsls	r3, r3, #15
 8002094:	d536      	bpl.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002098:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800209a:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	d40a      	bmi.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020a2:	69d1      	ldr	r1, [r2, #28]
 80020a4:	2080      	movs	r0, #128	; 0x80
 80020a6:	0540      	lsls	r0, r0, #21
 80020a8:	4301      	orrs	r1, r0
 80020aa:	61d1      	str	r1, [r2, #28]
 80020ac:	69d3      	ldr	r3, [r2, #28]
 80020ae:	4003      	ands	r3, r0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020b4:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	05db      	lsls	r3, r3, #23
 80020bc:	d550      	bpl.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	22c0      	movs	r2, #192	; 0xc0
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c8:	d013      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80020ca:	6861      	ldr	r1, [r4, #4]
 80020cc:	400a      	ands	r2, r1
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d00f      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d2:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020d4:	6a18      	ldr	r0, [r3, #32]
 80020d6:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020d8:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020da:	6a1e      	ldr	r6, [r3, #32]
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0249      	lsls	r1, r1, #9
 80020e0:	4331      	orrs	r1, r6
 80020e2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020e4:	6a19      	ldr	r1, [r3, #32]
 80020e6:	4e38      	ldr	r6, [pc, #224]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80020e8:	4031      	ands	r1, r6
 80020ea:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ee:	07c3      	lsls	r3, r0, #31
 80020f0:	d44d      	bmi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f2:	4a32      	ldr	r2, [pc, #200]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020f4:	6a13      	ldr	r3, [r2, #32]
 80020f6:	4933      	ldr	r1, [pc, #204]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020f8:	400b      	ands	r3, r1
 80020fa:	6861      	ldr	r1, [r4, #4]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002100:	2d01      	cmp	r5, #1
 8002102:	d056      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	07db      	lsls	r3, r3, #31
 8002108:	d506      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800210c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800210e:	2103      	movs	r1, #3
 8002110:	438b      	bics	r3, r1
 8002112:	68a1      	ldr	r1, [r4, #8]
 8002114:	430b      	orrs	r3, r1
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	069b      	lsls	r3, r3, #26
 800211c:	d506      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002120:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002122:	2110      	movs	r1, #16
 8002124:	438b      	bics	r3, r1
 8002126:	68e1      	ldr	r1, [r4, #12]
 8002128:	430b      	orrs	r3, r1
 800212a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	039b      	lsls	r3, r3, #14
 8002130:	d506      	bpl.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002132:	4a22      	ldr	r2, [pc, #136]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002134:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	438b      	bics	r3, r1
 800213a:	6961      	ldr	r1, [r4, #20]
 800213c:	430b      	orrs	r3, r1
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002140:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	d506      	bpl.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800214a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	438b      	bics	r3, r1
 8002150:	6921      	ldr	r1, [r4, #16]
 8002152:	430b      	orrs	r3, r1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002156:	b003      	add	sp, #12
 8002158:	bc0c      	pop	{r2, r3}
 800215a:	4690      	mov	r8, r2
 800215c:	4699      	mov	r9, r3
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002162:	6811      	ldr	r1, [r2, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	430b      	orrs	r3, r1
 800216a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800216c:	f7fe f95e 	bl	800042c <HAL_GetTick>
 8002170:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4f13      	ldr	r7, [pc, #76]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002174:	2680      	movs	r6, #128	; 0x80
 8002176:	0076      	lsls	r6, r6, #1
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4233      	tst	r3, r6
 800217c:	d19f      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7fe f955 	bl	800042c <HAL_GetTick>
 8002182:	4643      	mov	r3, r8
 8002184:	1ac0      	subs	r0, r0, r3
 8002186:	2864      	cmp	r0, #100	; 0x64
 8002188:	d9f6      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          return HAL_TIMEOUT;
 800218a:	2003      	movs	r0, #3
 800218c:	e7e3      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800218e:	f7fe f94d 	bl	800042c <HAL_GetTick>
 8002192:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4f09      	ldr	r7, [pc, #36]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002196:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800219a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	421e      	tst	r6, r3
 80021a0:	d1a7      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe f943 	bl	800042c <HAL_GetTick>
 80021a6:	464b      	mov	r3, r9
 80021a8:	1ac0      	subs	r0, r0, r3
 80021aa:	4540      	cmp	r0, r8
 80021ac:	d9f6      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
 80021b0:	e7d1      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	69d3      	ldr	r3, [r2, #28]
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021b6:	400b      	ands	r3, r1
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	e7a3      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	fffffcff 	.word	0xfffffcff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff

080021d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d4:	233d      	movs	r3, #61	; 0x3d
 80021d6:	5cc2      	ldrb	r2, [r0, r3]
  {
    return HAL_ERROR;
 80021d8:	3b3c      	subs	r3, #60	; 0x3c
  if (htim->State != HAL_TIM_STATE_READY)
 80021da:	2a01      	cmp	r2, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_TIM_Base_Start_IT+0xe>
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80021de:	0018      	movs	r0, r3
 80021e0:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80021e2:	333c      	adds	r3, #60	; 0x3c
 80021e4:	3201      	adds	r2, #1
 80021e6:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e8:	6802      	ldr	r2, [r0, #0]
 80021ea:	68d3      	ldr	r3, [r2, #12]
 80021ec:	2101      	movs	r1, #1
 80021ee:	430b      	orrs	r3, r1
 80021f0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f2:	6803      	ldr	r3, [r0, #0]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_TIM_Base_Start_IT+0x5c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00c      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x40>
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	05d2      	lsls	r2, r2, #23
 80021fe:	4293      	cmp	r3, r2
 8002200:	d008      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x40>
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_TIM_Base_Start_IT+0x60>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d005      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e7e4      	b.n	80021de <HAL_TIM_Base_Start_IT+0xa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	2207      	movs	r2, #7
 8002218:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	2a06      	cmp	r2, #6
 800221c:	d005      	beq.n	800222a <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e7d9      	b.n	80021de <HAL_TIM_Base_Start_IT+0xa>
 800222a:	2300      	movs	r3, #0
 800222c:	e7d7      	b.n	80021de <HAL_TIM_Base_Start_IT+0xa>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	40012c00 	.word	0x40012c00
 8002234:	40000400 	.word	0x40000400

08002238 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223c:	4770      	bx	lr

0800223e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_IRQHandler>:
{
 8002240:	b510      	push	{r4, lr}
 8002242:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	0792      	lsls	r2, r2, #30
 800224a:	d50f      	bpl.n	800226c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	0792      	lsls	r2, r2, #30
 8002250:	d50c      	bpl.n	800226c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002252:	2203      	movs	r2, #3
 8002254:	4252      	negs	r2, r2
 8002256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002258:	2301      	movs	r3, #1
 800225a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	079b      	lsls	r3, r3, #30
 8002262:	d063      	beq.n	800232c <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8002264:	f7ff ffe9 	bl	800223a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002268:	2300      	movs	r3, #0
 800226a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	0752      	lsls	r2, r2, #29
 8002272:	d512      	bpl.n	800229a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	0752      	lsls	r2, r2, #29
 8002278:	d50f      	bpl.n	800229a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800227a:	2205      	movs	r2, #5
 800227c:	4252      	negs	r2, r2
 800227e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002280:	2302      	movs	r3, #2
 8002282:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	421a      	tst	r2, r3
 800228e:	d053      	beq.n	8002338 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002290:	0020      	movs	r0, r4
 8002292:	f7ff ffd2 	bl	800223a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	2300      	movs	r3, #0
 8002298:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	0712      	lsls	r2, r2, #28
 80022a0:	d510      	bpl.n	80022c4 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	0712      	lsls	r2, r2, #28
 80022a6:	d50d      	bpl.n	80022c4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a8:	2209      	movs	r2, #9
 80022aa:	4252      	negs	r2, r2
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ae:	2304      	movs	r3, #4
 80022b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	079b      	lsls	r3, r3, #30
 80022b8:	d045      	beq.n	8002346 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	0020      	movs	r0, r4
 80022bc:	f7ff ffbd 	bl	800223a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c0:	2300      	movs	r3, #0
 80022c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	06d2      	lsls	r2, r2, #27
 80022ca:	d512      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	06d2      	lsls	r2, r2, #27
 80022d0:	d50f      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022d2:	2211      	movs	r2, #17
 80022d4:	4252      	negs	r2, r2
 80022d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d8:	2308      	movs	r3, #8
 80022da:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	421a      	tst	r2, r3
 80022e6:	d035      	beq.n	8002354 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	0020      	movs	r0, r4
 80022ea:	f7ff ffa6 	bl	800223a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	2300      	movs	r3, #0
 80022f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	07d2      	lsls	r2, r2, #31
 80022f8:	d502      	bpl.n	8002300 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	07d2      	lsls	r2, r2, #31
 80022fe:	d430      	bmi.n	8002362 <HAL_TIM_IRQHandler+0x122>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	0612      	lsls	r2, r2, #24
 8002306:	d502      	bpl.n	800230e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	0612      	lsls	r2, r2, #24
 800230c:	d430      	bmi.n	8002370 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	0652      	lsls	r2, r2, #25
 8002314:	d502      	bpl.n	800231c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	0652      	lsls	r2, r2, #25
 800231a:	d430      	bmi.n	800237e <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	0692      	lsls	r2, r2, #26
 8002322:	d502      	bpl.n	800232a <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	0692      	lsls	r2, r2, #26
 8002328:	d430      	bmi.n	800238c <HAL_TIM_IRQHandler+0x14c>
}
 800232a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232c:	f7ff ff84 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	0020      	movs	r0, r4
 8002332:	f7ff ff83 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
 8002336:	e797      	b.n	8002268 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002338:	0020      	movs	r0, r4
 800233a:	f7ff ff7d 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233e:	0020      	movs	r0, r4
 8002340:	f7ff ff7c 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
 8002344:	e7a7      	b.n	8002296 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	0020      	movs	r0, r4
 8002348:	f7ff ff76 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	0020      	movs	r0, r4
 800234e:	f7ff ff75 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
 8002352:	e7b5      	b.n	80022c0 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	0020      	movs	r0, r4
 8002356:	f7ff ff6f 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	0020      	movs	r0, r4
 800235c:	f7ff ff6e 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
 8002360:	e7c5      	b.n	80022ee <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002362:	2202      	movs	r2, #2
 8002364:	4252      	negs	r2, r2
 8002366:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002368:	0020      	movs	r0, r4
 800236a:	f001 ffc9 	bl	8004300 <HAL_TIM_PeriodElapsedCallback>
 800236e:	e7c7      	b.n	8002300 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002370:	2281      	movs	r2, #129	; 0x81
 8002372:	4252      	negs	r2, r2
 8002374:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002376:	0020      	movs	r0, r4
 8002378:	f000 f9a3 	bl	80026c2 <HAL_TIMEx_BreakCallback>
 800237c:	e7c7      	b.n	800230e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800237e:	2241      	movs	r2, #65	; 0x41
 8002380:	4252      	negs	r2, r2
 8002382:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002384:	0020      	movs	r0, r4
 8002386:	f7ff ff5a 	bl	800223e <HAL_TIM_TriggerCallback>
 800238a:	e7c7      	b.n	800231c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	4252      	negs	r2, r2
 8002390:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002392:	0020      	movs	r0, r4
 8002394:	f000 f994 	bl	80026c0 <HAL_TIMEx_CommutCallback>
}
 8002398:	e7c7      	b.n	800232a <HAL_TIM_IRQHandler+0xea>
	...

0800239c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800239c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239e:	4a38      	ldr	r2, [pc, #224]	; (8002480 <TIM_Base_SetConfig+0xe4>)
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d01e      	beq.n	80023e2 <TIM_Base_SetConfig+0x46>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	05d2      	lsls	r2, r2, #23
 80023a8:	4290      	cmp	r0, r2
 80023aa:	d039      	beq.n	8002420 <TIM_Base_SetConfig+0x84>
 80023ac:	4a35      	ldr	r2, [pc, #212]	; (8002484 <TIM_Base_SetConfig+0xe8>)
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d012      	beq.n	80023d8 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b2:	4a35      	ldr	r2, [pc, #212]	; (8002488 <TIM_Base_SetConfig+0xec>)
 80023b4:	4290      	cmp	r0, r2
 80023b6:	d038      	beq.n	800242a <TIM_Base_SetConfig+0x8e>
 80023b8:	4a34      	ldr	r2, [pc, #208]	; (800248c <TIM_Base_SetConfig+0xf0>)
 80023ba:	4290      	cmp	r0, r2
 80023bc:	d051      	beq.n	8002462 <TIM_Base_SetConfig+0xc6>
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <TIM_Base_SetConfig+0xf4>)
 80023c0:	4290      	cmp	r0, r2
 80023c2:	d040      	beq.n	8002446 <TIM_Base_SetConfig+0xaa>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	4393      	bics	r3, r2
 80023c8:	694a      	ldr	r2, [r1, #20]
 80023ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80023cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ce:	688b      	ldr	r3, [r1, #8]
 80023d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d2:	680b      	ldr	r3, [r1, #0]
 80023d4:	6283      	str	r3, [r0, #40]	; 0x28
 80023d6:	e020      	b.n	800241a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d8:	2270      	movs	r2, #112	; 0x70
 80023da:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80023dc:	684a      	ldr	r2, [r1, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	e003      	b.n	80023ea <TIM_Base_SetConfig+0x4e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e2:	2270      	movs	r2, #112	; 0x70
 80023e4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80023e6:	684a      	ldr	r2, [r1, #4]
 80023e8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ea:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <TIM_Base_SetConfig+0xf8>)
 80023ec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	68ca      	ldr	r2, [r1, #12]
 80023f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	4393      	bics	r3, r2
 80023f6:	694a      	ldr	r2, [r1, #20]
 80023f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023fc:	688b      	ldr	r3, [r1, #8]
 80023fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002400:	680b      	ldr	r3, [r1, #0]
 8002402:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <TIM_Base_SetConfig+0xe4>)
 8002406:	4298      	cmp	r0, r3
 8002408:	d005      	beq.n	8002416 <TIM_Base_SetConfig+0x7a>
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <TIM_Base_SetConfig+0xf0>)
 800240c:	4298      	cmp	r0, r3
 800240e:	d002      	beq.n	8002416 <TIM_Base_SetConfig+0x7a>
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <TIM_Base_SetConfig+0xf4>)
 8002412:	4298      	cmp	r0, r3
 8002414:	d101      	bne.n	800241a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002416:	690b      	ldr	r3, [r1, #16]
 8002418:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800241a:	2301      	movs	r3, #1
 800241c:	6143      	str	r3, [r0, #20]
}
 800241e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002420:	2270      	movs	r2, #112	; 0x70
 8002422:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002424:	684a      	ldr	r2, [r1, #4]
 8002426:	4313      	orrs	r3, r2
 8002428:	e7df      	b.n	80023ea <TIM_Base_SetConfig+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <TIM_Base_SetConfig+0xf8>)
 800242c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242e:	68ca      	ldr	r2, [r1, #12]
 8002430:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	4393      	bics	r3, r2
 8002436:	694a      	ldr	r2, [r1, #20]
 8002438:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800243a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243c:	688b      	ldr	r3, [r1, #8]
 800243e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	6283      	str	r3, [r0, #40]	; 0x28
 8002444:	e7e9      	b.n	800241a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002446:	4a13      	ldr	r2, [pc, #76]	; (8002494 <TIM_Base_SetConfig+0xf8>)
 8002448:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244a:	68ca      	ldr	r2, [r1, #12]
 800244c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	4393      	bics	r3, r2
 8002452:	694a      	ldr	r2, [r1, #20]
 8002454:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002456:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	688b      	ldr	r3, [r1, #8]
 800245a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800245c:	680b      	ldr	r3, [r1, #0]
 800245e:	6283      	str	r3, [r0, #40]	; 0x28
 8002460:	e7d9      	b.n	8002416 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <TIM_Base_SetConfig+0xf8>)
 8002464:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002466:	68ca      	ldr	r2, [r1, #12]
 8002468:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	4393      	bics	r3, r2
 800246e:	694a      	ldr	r2, [r1, #20]
 8002470:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002472:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002474:	688b      	ldr	r3, [r1, #8]
 8002476:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002478:	680b      	ldr	r3, [r1, #0]
 800247a:	6283      	str	r3, [r0, #40]	; 0x28
 800247c:	e7cb      	b.n	8002416 <TIM_Base_SetConfig+0x7a>
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400
 8002488:	40002000 	.word	0x40002000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	fffffcff 	.word	0xfffffcff

08002498 <HAL_TIM_Base_Init>:
{
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800249c:	d026      	beq.n	80024ec <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800249e:	233d      	movs	r3, #61	; 0x3d
 80024a0:	5cc3      	ldrb	r3, [r0, r3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01c      	beq.n	80024e0 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80024a6:	253d      	movs	r5, #61	; 0x3d
 80024a8:	2302      	movs	r3, #2
 80024aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	1d21      	adds	r1, r4, #4
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	f7ff ff74 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	2301      	movs	r3, #1
 80024b6:	2246      	movs	r2, #70	; 0x46
 80024b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	3a08      	subs	r2, #8
 80024bc:	54a3      	strb	r3, [r4, r2]
 80024be:	3201      	adds	r2, #1
 80024c0:	54a3      	strb	r3, [r4, r2]
 80024c2:	3201      	adds	r2, #1
 80024c4:	54a3      	strb	r3, [r4, r2]
 80024c6:	3201      	adds	r2, #1
 80024c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ca:	3201      	adds	r2, #1
 80024cc:	54a3      	strb	r3, [r4, r2]
 80024ce:	3201      	adds	r2, #1
 80024d0:	54a3      	strb	r3, [r4, r2]
 80024d2:	3201      	adds	r2, #1
 80024d4:	54a3      	strb	r3, [r4, r2]
 80024d6:	3201      	adds	r2, #1
 80024d8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80024da:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80024dc:	2000      	movs	r0, #0
}
 80024de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80024e0:	333c      	adds	r3, #60	; 0x3c
 80024e2:	2200      	movs	r2, #0
 80024e4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80024e6:	f001 ff55 	bl	8004394 <HAL_TIM_Base_MspInit>
 80024ea:	e7dc      	b.n	80024a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
 80024ee:	e7f6      	b.n	80024de <HAL_TIM_Base_Init+0x46>

080024f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024f0:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024f2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	4d03      	ldr	r5, [pc, #12]	; (8002504 <TIM_ETR_SetConfig+0x14>)
 80024f6:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	430a      	orrs	r2, r1
 80024fc:	4313      	orrs	r3, r2
 80024fe:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002500:	6083      	str	r3, [r0, #8]
}
 8002502:	bd30      	pop	{r4, r5, pc}
 8002504:	ffff00ff 	.word	0xffff00ff

08002508 <HAL_TIM_ConfigClockSource>:
{
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800250c:	233c      	movs	r3, #60	; 0x3c
 800250e:	5cc3      	ldrb	r3, [r0, r3]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d100      	bne.n	8002516 <HAL_TIM_ConfigClockSource+0xe>
 8002514:	e09c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x148>
 8002516:	233c      	movs	r3, #60	; 0x3c
 8002518:	2201      	movs	r2, #1
 800251a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	3301      	adds	r3, #1
 800251e:	3201      	adds	r2, #1
 8002520:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002522:	6802      	ldr	r2, [r0, #0]
 8002524:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002526:	484b      	ldr	r0, [pc, #300]	; (8002654 <HAL_TIM_ConfigClockSource+0x14c>)
 8002528:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800252a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800252c:	680b      	ldr	r3, [r1, #0]
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d100      	bne.n	8002534 <HAL_TIM_ConfigClockSource+0x2c>
 8002532:	e073      	b.n	800261c <HAL_TIM_ConfigClockSource+0x114>
 8002534:	d915      	bls.n	8002562 <HAL_TIM_ConfigClockSource+0x5a>
 8002536:	2b60      	cmp	r3, #96	; 0x60
 8002538:	d055      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0xde>
 800253a:	d925      	bls.n	8002588 <HAL_TIM_ConfigClockSource+0x80>
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d03f      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0xb8>
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	4293      	cmp	r3, r2
 8002546:	d146      	bne.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 8002548:	68cb      	ldr	r3, [r1, #12]
 800254a:	684a      	ldr	r2, [r1, #4]
 800254c:	6889      	ldr	r1, [r1, #8]
 800254e:	6820      	ldr	r0, [r4, #0]
 8002550:	f7ff ffce 	bl	80024f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6891      	ldr	r1, [r2, #8]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	430b      	orrs	r3, r1
 800255e:	6093      	str	r3, [r2, #8]
      break;
 8002560:	e039      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 8002562:	2b10      	cmp	r3, #16
 8002564:	d007      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x6e>
 8002566:	d904      	bls.n	8002572 <HAL_TIM_ConfigClockSource+0x6a>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d004      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x6e>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d002      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x6e>
 8002570:	e031      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12f      	bne.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002576:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002578:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800257a:	2070      	movs	r0, #112	; 0x70
 800257c:	4382      	bics	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800257e:	3869      	subs	r0, #105	; 0x69
 8002580:	4303      	orrs	r3, r0
 8002582:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8002584:	608b      	str	r3, [r1, #8]
 8002586:	e026      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 8002588:	2b50      	cmp	r3, #80	; 0x50
 800258a:	d124      	bne.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	6848      	ldr	r0, [r1, #4]
 8002590:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002592:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002594:	6a1d      	ldr	r5, [r3, #32]
 8002596:	2601      	movs	r6, #1
 8002598:	43b5      	bics	r5, r6
 800259a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800259e:	36ef      	adds	r6, #239	; 0xef
 80025a0:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	250a      	movs	r5, #10
 80025a8:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80025aa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80025ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ae:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b4:	2170      	movs	r1, #112	; 0x70
 80025b6:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b8:	3919      	subs	r1, #25
 80025ba:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	e00a      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	68cb      	ldr	r3, [r1, #12]
 80025c2:	684a      	ldr	r2, [r1, #4]
 80025c4:	6889      	ldr	r1, [r1, #8]
 80025c6:	6820      	ldr	r0, [r4, #0]
 80025c8:	f7ff ff92 	bl	80024f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d0:	2177      	movs	r1, #119	; 0x77
 80025d2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80025d4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	233d      	movs	r3, #61	; 0x3d
 80025d8:	2201      	movs	r2, #1
 80025da:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80025dc:	3b01      	subs	r3, #1
 80025de:	2200      	movs	r2, #0
 80025e0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80025e2:	2000      	movs	r0, #0
}
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	684a      	ldr	r2, [r1, #4]
 80025ea:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ec:	6a18      	ldr	r0, [r3, #32]
 80025ee:	2510      	movs	r5, #16
 80025f0:	43a8      	bics	r0, r5
 80025f2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f4:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 80025f6:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f8:	4e17      	ldr	r6, [pc, #92]	; (8002658 <HAL_TIM_ConfigClockSource+0x150>)
 80025fa:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fc:	0309      	lsls	r1, r1, #12
 80025fe:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002600:	25a0      	movs	r5, #160	; 0xa0
 8002602:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002608:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800260a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800260e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002610:	2170      	movs	r1, #112	; 0x70
 8002612:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002614:	3909      	subs	r1, #9
 8002616:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002618:	6093      	str	r3, [r2, #8]
 800261a:	e7dc      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	6848      	ldr	r0, [r1, #4]
 8002620:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002622:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002624:	6a1d      	ldr	r5, [r3, #32]
 8002626:	2601      	movs	r6, #1
 8002628:	43b5      	bics	r5, r6
 800262a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800262e:	36ef      	adds	r6, #239	; 0xef
 8002630:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002636:	250a      	movs	r5, #10
 8002638:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800263a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800263c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002640:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002642:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002644:	2170      	movs	r1, #112	; 0x70
 8002646:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002648:	3929      	subs	r1, #41	; 0x29
 800264a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800264c:	6093      	str	r3, [r2, #8]
 800264e:	e7c2      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0xce>
  __HAL_LOCK(htim);
 8002650:	2002      	movs	r0, #2
 8002652:	e7c7      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0xdc>
 8002654:	ffff0088 	.word	0xffff0088
 8002658:	ffff0fff 	.word	0xffff0fff

0800265c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800265c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800265e:	233c      	movs	r3, #60	; 0x3c
 8002660:	5cc3      	ldrb	r3, [r0, r3]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d025      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002666:	233c      	movs	r3, #60	; 0x3c
 8002668:	2201      	movs	r2, #1
 800266a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	3301      	adds	r3, #1
 800266e:	3201      	adds	r2, #1
 8002670:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002672:	6804      	ldr	r4, [r0, #0]
 8002674:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002676:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002678:	2570      	movs	r5, #112	; 0x70
 800267a:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800267c:	680d      	ldr	r5, [r1, #0]
 800267e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002680:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	4c0c      	ldr	r4, [pc, #48]	; (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8002686:	42a3      	cmp	r3, r4
 8002688:	d006      	beq.n	8002698 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800268a:	2480      	movs	r4, #128	; 0x80
 800268c:	05e4      	lsls	r4, r4, #23
 800268e:	42a3      	cmp	r3, r4
 8002690:	d002      	beq.n	8002698 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002692:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002694:	42a3      	cmp	r3, r4
 8002696:	d104      	bne.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002698:	2480      	movs	r4, #128	; 0x80
 800269a:	43a2      	bics	r2, r4
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269c:	6849      	ldr	r1, [r1, #4]
 800269e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	233d      	movs	r3, #61	; 0x3d
 80026a4:	2201      	movs	r2, #1
 80026a6:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80026a8:	3b01      	subs	r3, #1
 80026aa:	2200      	movs	r2, #0
 80026ac:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80026ae:	2000      	movs	r0, #0
}
 80026b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80026b2:	2002      	movs	r0, #2
 80026b4:	e7fc      	b.n	80026b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c2:	4770      	bx	lr

080026c4 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80026c4:	2344      	movs	r3, #68	; 0x44
 80026c6:	2200      	movs	r2, #0
 80026c8:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80026ca:	3b04      	subs	r3, #4
 80026cc:	4a01      	ldr	r2, [pc, #4]	; (80026d4 <USB_EnableGlobalInt+0x10>)
 80026ce:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 80026d0:	2000      	movs	r0, #0
 80026d2:	4770      	bx	lr
 80026d4:	ffffbf80 	.word	0xffffbf80

080026d8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	5a83      	ldrh	r3, [r0, r2]
 80026dc:	4902      	ldr	r1, [pc, #8]	; (80026e8 <USB_DisableGlobalInt+0x10>)
 80026de:	400b      	ands	r3, r1
 80026e0:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 80026e2:	2000      	movs	r0, #0
 80026e4:	4770      	bx	lr
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	0000407f 	.word	0x0000407f

080026ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026ec:	b084      	sub	sp, #16
 80026ee:	9101      	str	r1, [sp, #4]
 80026f0:	9202      	str	r2, [sp, #8]
 80026f2:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	2301      	movs	r3, #1
 80026f8:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80026fe:	3204      	adds	r2, #4
 8002700:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002702:	320c      	adds	r2, #12
 8002704:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8002706:	2000      	movs	r0, #0
 8002708:	b004      	add	sp, #16
 800270a:	4770      	bx	lr

0800270c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800270c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800270e:	780d      	ldrb	r5, [r1, #0]
 8002710:	00ad      	lsls	r5, r5, #2
 8002712:	1945      	adds	r5, r0, r5
 8002714:	882b      	ldrh	r3, [r5, #0]
 8002716:	4a9f      	ldr	r2, [pc, #636]	; (8002994 <USB_ActivateEndpoint+0x288>)
 8002718:	4013      	ands	r3, r2

  /* initialize Endpoint */
  switch (ep->type)
 800271a:	78ca      	ldrb	r2, [r1, #3]
 800271c:	2a01      	cmp	r2, #1
 800271e:	d04e      	beq.n	80027be <USB_ActivateEndpoint+0xb2>
 8002720:	2a00      	cmp	r2, #0
 8002722:	d042      	beq.n	80027aa <USB_ActivateEndpoint+0x9e>
 8002724:	2a02      	cmp	r2, #2
 8002726:	d003      	beq.n	8002730 <USB_ActivateEndpoint+0x24>
 8002728:	2a03      	cmp	r2, #3
 800272a:	d043      	beq.n	80027b4 <USB_ActivateEndpoint+0xa8>
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800272c:	2401      	movs	r4, #1
 800272e:	e000      	b.n	8002732 <USB_ActivateEndpoint+0x26>
  HAL_StatusTypeDef ret = HAL_OK;
 8002730:	2400      	movs	r4, #0
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002732:	4a99      	ldr	r2, [pc, #612]	; (8002998 <USB_ActivateEndpoint+0x28c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	802b      	strh	r3, [r5, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800273a:	780e      	ldrb	r6, [r1, #0]
 800273c:	00b5      	lsls	r5, r6, #2
 800273e:	1945      	adds	r5, r0, r5
 8002740:	882b      	ldrh	r3, [r5, #0]
 8002742:	4f96      	ldr	r7, [pc, #600]	; (800299c <USB_ActivateEndpoint+0x290>)
 8002744:	403b      	ands	r3, r7
 8002746:	4333      	orrs	r3, r6
 8002748:	431a      	orrs	r2, r3
 800274a:	b292      	uxth	r2, r2
 800274c:	802a      	strh	r2, [r5, #0]

  if (ep->doublebuffer == 0U)
 800274e:	7b0b      	ldrb	r3, [r1, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d000      	beq.n	8002756 <USB_ActivateEndpoint+0x4a>
 8002754:	e091      	b.n	800287a <USB_ActivateEndpoint+0x16e>
  {
    if (ep->is_in != 0U)
 8002756:	784b      	ldrb	r3, [r1, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03f      	beq.n	80027dc <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800275c:	2350      	movs	r3, #80	; 0x50
 800275e:	5ac5      	ldrh	r5, [r0, r3]
 8002760:	780a      	ldrb	r2, [r1, #0]
 8002762:	00d2      	lsls	r2, r2, #3
 8002764:	1882      	adds	r2, r0, r2
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	18d3      	adds	r3, r2, r3
 800276c:	18eb      	adds	r3, r5, r3
 800276e:	88ca      	ldrh	r2, [r1, #6]
 8002770:	0852      	lsrs	r2, r2, #1
 8002772:	0052      	lsls	r2, r2, #1
 8002774:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002776:	780b      	ldrb	r3, [r1, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	18c3      	adds	r3, r0, r3
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	d504      	bpl.n	800278c <USB_ActivateEndpoint+0x80>
 8002782:	881a      	ldrh	r2, [r3, #0]
 8002784:	403a      	ands	r2, r7
 8002786:	4d86      	ldr	r5, [pc, #536]	; (80029a0 <USB_ActivateEndpoint+0x294>)
 8002788:	432a      	orrs	r2, r5
 800278a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800278c:	78cb      	ldrb	r3, [r1, #3]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d01a      	beq.n	80027c8 <USB_ActivateEndpoint+0xbc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002792:	780b      	ldrb	r3, [r1, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	18c0      	adds	r0, r0, r3
 8002798:	8803      	ldrh	r3, [r0, #0]
 800279a:	4a82      	ldr	r2, [pc, #520]	; (80029a4 <USB_ActivateEndpoint+0x298>)
 800279c:	4013      	ands	r3, r2
 800279e:	2220      	movs	r2, #32
 80027a0:	4053      	eors	r3, r2
 80027a2:	4a81      	ldr	r2, [pc, #516]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	8003      	strh	r3, [r0, #0]
 80027a8:	e04f      	b.n	800284a <USB_ActivateEndpoint+0x13e>
      wEpRegVal |= USB_EP_CONTROL;
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027b0:	2400      	movs	r4, #0
      break;
 80027b2:	e7be      	b.n	8002732 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80027b4:	22c0      	movs	r2, #192	; 0xc0
 80027b6:	00d2      	lsls	r2, r2, #3
 80027b8:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027ba:	2400      	movs	r4, #0
      break;
 80027bc:	e7b9      	b.n	8002732 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027c4:	2400      	movs	r4, #0
      break;
 80027c6:	e7b4      	b.n	8002732 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027c8:	780b      	ldrb	r3, [r1, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	18c0      	adds	r0, r0, r3
 80027ce:	8803      	ldrh	r3, [r0, #0]
 80027d0:	4a74      	ldr	r2, [pc, #464]	; (80029a4 <USB_ActivateEndpoint+0x298>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	4a74      	ldr	r2, [pc, #464]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	8003      	strh	r3, [r0, #0]
 80027da:	e036      	b.n	800284a <USB_ActivateEndpoint+0x13e>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027dc:	2650      	movs	r6, #80	; 0x50
 80027de:	5b85      	ldrh	r5, [r0, r6]
 80027e0:	780a      	ldrb	r2, [r1, #0]
 80027e2:	00d2      	lsls	r2, r2, #3
 80027e4:	1812      	adds	r2, r2, r0
 80027e6:	4b71      	ldr	r3, [pc, #452]	; (80029ac <USB_ActivateEndpoint+0x2a0>)
 80027e8:	18d3      	adds	r3, r2, r3
 80027ea:	18eb      	adds	r3, r5, r3
 80027ec:	88ca      	ldrh	r2, [r1, #6]
 80027ee:	0852      	lsrs	r2, r2, #1
 80027f0:	0052      	lsls	r2, r2, #1
 80027f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80027f4:	5b85      	ldrh	r5, [r0, r6]
 80027f6:	780a      	ldrb	r2, [r1, #0]
 80027f8:	00d2      	lsls	r2, r2, #3
 80027fa:	1812      	adds	r2, r2, r0
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <USB_ActivateEndpoint+0x2a4>)
 80027fe:	18d3      	adds	r3, r2, r3
 8002800:	18eb      	adds	r3, r5, r3
 8002802:	690a      	ldr	r2, [r1, #16]
 8002804:	2a00      	cmp	r2, #0
 8002806:	d122      	bne.n	800284e <USB_ActivateEndpoint+0x142>
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	4d6a      	ldr	r5, [pc, #424]	; (80029b4 <USB_ActivateEndpoint+0x2a8>)
 800280c:	402a      	ands	r2, r5
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	2580      	movs	r5, #128	; 0x80
 8002814:	022d      	lsls	r5, r5, #8
 8002816:	432a      	orrs	r2, r5
 8002818:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800281a:	780b      	ldrb	r3, [r1, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	18c3      	adds	r3, r0, r3
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	0452      	lsls	r2, r2, #17
 8002824:	d505      	bpl.n	8002832 <USB_ActivateEndpoint+0x126>
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	4d5c      	ldr	r5, [pc, #368]	; (800299c <USB_ActivateEndpoint+0x290>)
 800282a:	402a      	ands	r2, r5
 800282c:	4d62      	ldr	r5, [pc, #392]	; (80029b8 <USB_ActivateEndpoint+0x2ac>)
 800282e:	432a      	orrs	r2, r5
 8002830:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002832:	780b      	ldrb	r3, [r1, #0]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	18c0      	adds	r0, r0, r3
 8002838:	8803      	ldrh	r3, [r0, #0]
 800283a:	4a60      	ldr	r2, [pc, #384]	; (80029bc <USB_ActivateEndpoint+0x2b0>)
 800283c:	401a      	ands	r2, r3
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	4053      	eors	r3, r2
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800284a:	0020      	movs	r0, r4
 800284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800284e:	2a3e      	cmp	r2, #62	; 0x3e
 8002850:	d807      	bhi.n	8002862 <USB_ActivateEndpoint+0x156>
 8002852:	0855      	lsrs	r5, r2, #1
 8002854:	2601      	movs	r6, #1
 8002856:	4032      	ands	r2, r6
 8002858:	18ad      	adds	r5, r5, r2
 800285a:	02ad      	lsls	r5, r5, #10
 800285c:	b2ad      	uxth	r5, r5
 800285e:	801d      	strh	r5, [r3, #0]
 8002860:	e7db      	b.n	800281a <USB_ActivateEndpoint+0x10e>
 8002862:	0955      	lsrs	r5, r2, #5
 8002864:	261f      	movs	r6, #31
 8002866:	4032      	ands	r2, r6
 8002868:	4256      	negs	r6, r2
 800286a:	4172      	adcs	r2, r6
 800286c:	1aad      	subs	r5, r5, r2
 800286e:	02ad      	lsls	r5, r5, #10
 8002870:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <USB_ActivateEndpoint+0x2b4>)
 8002872:	432a      	orrs	r2, r5
 8002874:	b292      	uxth	r2, r2
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	e7cf      	b.n	800281a <USB_ActivateEndpoint+0x10e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800287a:	780b      	ldrb	r3, [r1, #0]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	18c3      	adds	r3, r0, r3
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	4d46      	ldr	r5, [pc, #280]	; (800299c <USB_ActivateEndpoint+0x290>)
 8002884:	402a      	ands	r2, r5
 8002886:	4d4f      	ldr	r5, [pc, #316]	; (80029c4 <USB_ActivateEndpoint+0x2b8>)
 8002888:	432a      	orrs	r2, r5
 800288a:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800288c:	2650      	movs	r6, #80	; 0x50
 800288e:	5b85      	ldrh	r5, [r0, r6]
 8002890:	780a      	ldrb	r2, [r1, #0]
 8002892:	00d2      	lsls	r2, r2, #3
 8002894:	1812      	adds	r2, r2, r0
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	18eb      	adds	r3, r5, r3
 800289e:	890a      	ldrh	r2, [r1, #8]
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	0052      	lsls	r2, r2, #1
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	5b85      	ldrh	r5, [r0, r6]
 80028a8:	780a      	ldrb	r2, [r1, #0]
 80028aa:	00d2      	lsls	r2, r2, #3
 80028ac:	1812      	adds	r2, r2, r0
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <USB_ActivateEndpoint+0x2a0>)
 80028b0:	18d3      	adds	r3, r2, r3
 80028b2:	18eb      	adds	r3, r5, r3
 80028b4:	894a      	ldrh	r2, [r1, #10]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	801a      	strh	r2, [r3, #0]
    if (ep->is_in == 0U)
 80028bc:	784b      	ldrb	r3, [r1, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12e      	bne.n	8002920 <USB_ActivateEndpoint+0x214>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028c2:	780b      	ldrb	r3, [r1, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	18c3      	adds	r3, r0, r3
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	0452      	lsls	r2, r2, #17
 80028cc:	d505      	bpl.n	80028da <USB_ActivateEndpoint+0x1ce>
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	4d32      	ldr	r5, [pc, #200]	; (800299c <USB_ActivateEndpoint+0x290>)
 80028d2:	402a      	ands	r2, r5
 80028d4:	4d38      	ldr	r5, [pc, #224]	; (80029b8 <USB_ActivateEndpoint+0x2ac>)
 80028d6:	432a      	orrs	r2, r5
 80028d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028da:	780b      	ldrb	r3, [r1, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	18c3      	adds	r3, r0, r3
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	0652      	lsls	r2, r2, #25
 80028e4:	d505      	bpl.n	80028f2 <USB_ActivateEndpoint+0x1e6>
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	4d2c      	ldr	r5, [pc, #176]	; (800299c <USB_ActivateEndpoint+0x290>)
 80028ea:	402a      	ands	r2, r5
 80028ec:	4d2c      	ldr	r5, [pc, #176]	; (80029a0 <USB_ActivateEndpoint+0x294>)
 80028ee:	432a      	orrs	r2, r5
 80028f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028f2:	780d      	ldrb	r5, [r1, #0]
 80028f4:	00ad      	lsls	r5, r5, #2
 80028f6:	1945      	adds	r5, r0, r5
 80028f8:	882b      	ldrh	r3, [r5, #0]
 80028fa:	4a30      	ldr	r2, [pc, #192]	; (80029bc <USB_ActivateEndpoint+0x2b0>)
 80028fc:	401a      	ands	r2, r3
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	4053      	eors	r3, r2
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <USB_ActivateEndpoint+0x28c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	802b      	strh	r3, [r5, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800290c:	780b      	ldrb	r3, [r1, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	18c0      	adds	r0, r0, r3
 8002912:	8803      	ldrh	r3, [r0, #0]
 8002914:	4923      	ldr	r1, [pc, #140]	; (80029a4 <USB_ActivateEndpoint+0x298>)
 8002916:	400b      	ands	r3, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	b292      	uxth	r2, r2
 800291c:	8002      	strh	r2, [r0, #0]
 800291e:	e794      	b.n	800284a <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002920:	780b      	ldrb	r3, [r1, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	18c3      	adds	r3, r0, r3
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	0452      	lsls	r2, r2, #17
 800292a:	d505      	bpl.n	8002938 <USB_ActivateEndpoint+0x22c>
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	4d1b      	ldr	r5, [pc, #108]	; (800299c <USB_ActivateEndpoint+0x290>)
 8002930:	402a      	ands	r2, r5
 8002932:	4d21      	ldr	r5, [pc, #132]	; (80029b8 <USB_ActivateEndpoint+0x2ac>)
 8002934:	432a      	orrs	r2, r5
 8002936:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002938:	780b      	ldrb	r3, [r1, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	18c3      	adds	r3, r0, r3
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	0652      	lsls	r2, r2, #25
 8002942:	d505      	bpl.n	8002950 <USB_ActivateEndpoint+0x244>
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	4d15      	ldr	r5, [pc, #84]	; (800299c <USB_ActivateEndpoint+0x290>)
 8002948:	402a      	ands	r2, r5
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <USB_ActivateEndpoint+0x294>)
 800294c:	432a      	orrs	r2, r5
 800294e:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002950:	78cb      	ldrb	r3, [r1, #3]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d014      	beq.n	8002980 <USB_ActivateEndpoint+0x274>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002956:	780a      	ldrb	r2, [r1, #0]
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	1882      	adds	r2, r0, r2
 800295c:	8813      	ldrh	r3, [r2, #0]
 800295e:	4d11      	ldr	r5, [pc, #68]	; (80029a4 <USB_ActivateEndpoint+0x298>)
 8002960:	402b      	ands	r3, r5
 8002962:	2520      	movs	r5, #32
 8002964:	406b      	eors	r3, r5
 8002966:	4d10      	ldr	r5, [pc, #64]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 8002968:	432b      	orrs	r3, r5
 800296a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800296c:	780b      	ldrb	r3, [r1, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	18c3      	adds	r3, r0, r3
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	4911      	ldr	r1, [pc, #68]	; (80029bc <USB_ActivateEndpoint+0x2b0>)
 8002976:	400a      	ands	r2, r1
 8002978:	490b      	ldr	r1, [pc, #44]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 800297a:	430a      	orrs	r2, r1
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	e764      	b.n	800284a <USB_ActivateEndpoint+0x13e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002980:	780b      	ldrb	r3, [r1, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	18c3      	adds	r3, r0, r3
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	4d06      	ldr	r5, [pc, #24]	; (80029a4 <USB_ActivateEndpoint+0x298>)
 800298a:	402a      	ands	r2, r5
 800298c:	4d06      	ldr	r5, [pc, #24]	; (80029a8 <USB_ActivateEndpoint+0x29c>)
 800298e:	432a      	orrs	r2, r5
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	e7eb      	b.n	800296c <USB_ActivateEndpoint+0x260>
 8002994:	ffff898f 	.word	0xffff898f
 8002998:	ffff8080 	.word	0xffff8080
 800299c:	ffff8f8f 	.word	0xffff8f8f
 80029a0:	000080c0 	.word	0x000080c0
 80029a4:	ffff8fbf 	.word	0xffff8fbf
 80029a8:	00008080 	.word	0x00008080
 80029ac:	00000404 	.word	0x00000404
 80029b0:	00000406 	.word	0x00000406
 80029b4:	ffff83ff 	.word	0xffff83ff
 80029b8:	0000c080 	.word	0x0000c080
 80029bc:	ffffbf8f 	.word	0xffffbf8f
 80029c0:	ffff8000 	.word	0xffff8000
 80029c4:	00008180 	.word	0x00008180

080029c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80029c8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80029ca:	7b0b      	ldrb	r3, [r1, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d12f      	bne.n	8002a30 <USB_DeactivateEndpoint+0x68>
  {
    if (ep->is_in != 0U)
 80029d0:	784b      	ldrb	r3, [r1, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <USB_DeactivateEndpoint+0x3c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029d6:	780b      	ldrb	r3, [r1, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	18c3      	adds	r3, r0, r3
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	0652      	lsls	r2, r2, #25
 80029e0:	d505      	bpl.n	80029ee <USB_DeactivateEndpoint+0x26>
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	4c49      	ldr	r4, [pc, #292]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 80029e6:	4022      	ands	r2, r4
 80029e8:	4c49      	ldr	r4, [pc, #292]	; (8002b10 <USB_DeactivateEndpoint+0x148>)
 80029ea:	4322      	orrs	r2, r4
 80029ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029ee:	780b      	ldrb	r3, [r1, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	18c0      	adds	r0, r0, r3
 80029f4:	8803      	ldrh	r3, [r0, #0]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <USB_DeactivateEndpoint+0x14c>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <USB_DeactivateEndpoint+0x150>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002a00:	2000      	movs	r0, #0
 8002a02:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a04:	780b      	ldrb	r3, [r1, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	18c3      	adds	r3, r0, r3
 8002a0a:	881a      	ldrh	r2, [r3, #0]
 8002a0c:	0452      	lsls	r2, r2, #17
 8002a0e:	d505      	bpl.n	8002a1c <USB_DeactivateEndpoint+0x54>
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	4c3e      	ldr	r4, [pc, #248]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002a14:	4022      	ands	r2, r4
 8002a16:	4c41      	ldr	r4, [pc, #260]	; (8002b1c <USB_DeactivateEndpoint+0x154>)
 8002a18:	4322      	orrs	r2, r4
 8002a1a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a1c:	780b      	ldrb	r3, [r1, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	18c0      	adds	r0, r0, r3
 8002a22:	8803      	ldrh	r3, [r0, #0]
 8002a24:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <USB_DeactivateEndpoint+0x158>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <USB_DeactivateEndpoint+0x150>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	8003      	strh	r3, [r0, #0]
 8002a2e:	e7e7      	b.n	8002a00 <USB_DeactivateEndpoint+0x38>
    if (ep->is_in == 0U)
 8002a30:	784b      	ldrb	r3, [r1, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d134      	bne.n	8002aa0 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a36:	780b      	ldrb	r3, [r1, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	18c3      	adds	r3, r0, r3
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	0452      	lsls	r2, r2, #17
 8002a40:	d505      	bpl.n	8002a4e <USB_DeactivateEndpoint+0x86>
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	4c31      	ldr	r4, [pc, #196]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002a46:	4022      	ands	r2, r4
 8002a48:	4c34      	ldr	r4, [pc, #208]	; (8002b1c <USB_DeactivateEndpoint+0x154>)
 8002a4a:	4322      	orrs	r2, r4
 8002a4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a4e:	780b      	ldrb	r3, [r1, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	18c3      	adds	r3, r0, r3
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	0652      	lsls	r2, r2, #25
 8002a58:	d505      	bpl.n	8002a66 <USB_DeactivateEndpoint+0x9e>
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	4c2b      	ldr	r4, [pc, #172]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002a5e:	4022      	ands	r2, r4
 8002a60:	4c2b      	ldr	r4, [pc, #172]	; (8002b10 <USB_DeactivateEndpoint+0x148>)
 8002a62:	4322      	orrs	r2, r4
 8002a64:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8002a66:	780b      	ldrb	r3, [r1, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	18c3      	adds	r3, r0, r3
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	4c27      	ldr	r4, [pc, #156]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002a70:	4022      	ands	r2, r4
 8002a72:	4c27      	ldr	r4, [pc, #156]	; (8002b10 <USB_DeactivateEndpoint+0x148>)
 8002a74:	4322      	orrs	r2, r4
 8002a76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a78:	780c      	ldrb	r4, [r1, #0]
 8002a7a:	00a4      	lsls	r4, r4, #2
 8002a7c:	1904      	adds	r4, r0, r4
 8002a7e:	8823      	ldrh	r3, [r4, #0]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <USB_DeactivateEndpoint+0x158>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <USB_DeactivateEndpoint+0x15c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a8c:	780b      	ldrb	r3, [r1, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	18c0      	adds	r0, r0, r3
 8002a92:	8803      	ldrh	r3, [r0, #0]
 8002a94:	491f      	ldr	r1, [pc, #124]	; (8002b14 <USB_DeactivateEndpoint+0x14c>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	8002      	strh	r2, [r0, #0]
 8002a9e:	e7af      	b.n	8002a00 <USB_DeactivateEndpoint+0x38>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aa0:	780b      	ldrb	r3, [r1, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	18c3      	adds	r3, r0, r3
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	0452      	lsls	r2, r2, #17
 8002aaa:	d505      	bpl.n	8002ab8 <USB_DeactivateEndpoint+0xf0>
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	4c17      	ldr	r4, [pc, #92]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002ab0:	4022      	ands	r2, r4
 8002ab2:	4c1a      	ldr	r4, [pc, #104]	; (8002b1c <USB_DeactivateEndpoint+0x154>)
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ab8:	780b      	ldrb	r3, [r1, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	18c3      	adds	r3, r0, r3
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	0652      	lsls	r2, r2, #25
 8002ac2:	d505      	bpl.n	8002ad0 <USB_DeactivateEndpoint+0x108>
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	4c11      	ldr	r4, [pc, #68]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002ac8:	4022      	ands	r2, r4
 8002aca:	4c11      	ldr	r4, [pc, #68]	; (8002b10 <USB_DeactivateEndpoint+0x148>)
 8002acc:	4322      	orrs	r2, r4
 8002ace:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002ad0:	780b      	ldrb	r3, [r1, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	18c3      	adds	r3, r0, r3
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <USB_DeactivateEndpoint+0x144>)
 8002ada:	4022      	ands	r2, r4
 8002adc:	4c0f      	ldr	r4, [pc, #60]	; (8002b1c <USB_DeactivateEndpoint+0x154>)
 8002ade:	4322      	orrs	r2, r4
 8002ae0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ae2:	780c      	ldrb	r4, [r1, #0]
 8002ae4:	00a4      	lsls	r4, r4, #2
 8002ae6:	1904      	adds	r4, r0, r4
 8002ae8:	8823      	ldrh	r3, [r4, #0]
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <USB_DeactivateEndpoint+0x14c>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <USB_DeactivateEndpoint+0x15c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002af6:	780b      	ldrb	r3, [r1, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	18c0      	adds	r0, r0, r3
 8002afc:	8803      	ldrh	r3, [r0, #0]
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <USB_DeactivateEndpoint+0x158>)
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	b292      	uxth	r2, r2
 8002b06:	8002      	strh	r2, [r0, #0]
 8002b08:	e77a      	b.n	8002a00 <USB_DeactivateEndpoint+0x38>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	ffff8f8f 	.word	0xffff8f8f
 8002b10:	000080c0 	.word	0x000080c0
 8002b14:	ffff8fbf 	.word	0xffff8fbf
 8002b18:	00008080 	.word	0x00008080
 8002b1c:	0000c080 	.word	0x0000c080
 8002b20:	ffffbf8f 	.word	0xffffbf8f
 8002b24:	ffff8080 	.word	0xffff8080

08002b28 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002b28:	784b      	ldrb	r3, [r1, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002b2e:	780b      	ldrb	r3, [r1, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	18c0      	adds	r0, r0, r3
 8002b34:	8803      	ldrh	r3, [r0, #0]
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <USB_EPSetStall+0x3c>)
 8002b38:	401a      	ands	r2, r3
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	4053      	eors	r3, r2
 8002b40:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <USB_EPSetStall+0x40>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8002b46:	2000      	movs	r0, #0
 8002b48:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002b4a:	780b      	ldrb	r3, [r1, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18c0      	adds	r0, r0, r3
 8002b50:	8803      	ldrh	r3, [r0, #0]
 8002b52:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <USB_EPSetStall+0x44>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	2210      	movs	r2, #16
 8002b58:	4053      	eors	r3, r2
 8002b5a:	4a03      	ldr	r2, [pc, #12]	; (8002b68 <USB_EPSetStall+0x40>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	8003      	strh	r3, [r0, #0]
 8002b60:	e7f1      	b.n	8002b46 <USB_EPSetStall+0x1e>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	ffffbf8f 	.word	0xffffbf8f
 8002b68:	00008080 	.word	0x00008080
 8002b6c:	ffff8fbf 	.word	0xffff8fbf

08002b70 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b70:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002b72:	7b0b      	ldrb	r3, [r1, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d135      	bne.n	8002be4 <USB_EPClearStall+0x74>
  {
    if (ep->is_in != 0U)
 8002b78:	784b      	ldrb	r3, [r1, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01a      	beq.n	8002bb4 <USB_EPClearStall+0x44>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b7e:	780b      	ldrb	r3, [r1, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	18c3      	adds	r3, r0, r3
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	0652      	lsls	r2, r2, #25
 8002b88:	d505      	bpl.n	8002b96 <USB_EPClearStall+0x26>
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	4c16      	ldr	r4, [pc, #88]	; (8002be8 <USB_EPClearStall+0x78>)
 8002b8e:	4022      	ands	r2, r4
 8002b90:	4c16      	ldr	r4, [pc, #88]	; (8002bec <USB_EPClearStall+0x7c>)
 8002b92:	4322      	orrs	r2, r4
 8002b94:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b96:	78cb      	ldrb	r3, [r1, #3]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d023      	beq.n	8002be4 <USB_EPClearStall+0x74>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b9c:	780b      	ldrb	r3, [r1, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	18c0      	adds	r0, r0, r3
 8002ba2:	8803      	ldrh	r3, [r0, #0]
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <USB_EPClearStall+0x80>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2220      	movs	r2, #32
 8002baa:	4053      	eors	r3, r2
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <USB_EPClearStall+0x84>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	8003      	strh	r3, [r0, #0]
 8002bb2:	e017      	b.n	8002be4 <USB_EPClearStall+0x74>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bb4:	780b      	ldrb	r3, [r1, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	18c3      	adds	r3, r0, r3
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	0452      	lsls	r2, r2, #17
 8002bbe:	d505      	bpl.n	8002bcc <USB_EPClearStall+0x5c>
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	4c09      	ldr	r4, [pc, #36]	; (8002be8 <USB_EPClearStall+0x78>)
 8002bc4:	4022      	ands	r2, r4
 8002bc6:	4c0c      	ldr	r4, [pc, #48]	; (8002bf8 <USB_EPClearStall+0x88>)
 8002bc8:	4322      	orrs	r2, r4
 8002bca:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bcc:	780b      	ldrb	r3, [r1, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18c0      	adds	r0, r0, r3
 8002bd2:	8803      	ldrh	r3, [r0, #0]
 8002bd4:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <USB_EPClearStall+0x8c>)
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	23c0      	movs	r3, #192	; 0xc0
 8002bda:	019b      	lsls	r3, r3, #6
 8002bdc:	4053      	eors	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <USB_EPClearStall+0x84>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	bd10      	pop	{r4, pc}
 8002be8:	ffff8f8f 	.word	0xffff8f8f
 8002bec:	000080c0 	.word	0x000080c0
 8002bf0:	ffff8fbf 	.word	0xffff8fbf
 8002bf4:	00008080 	.word	0x00008080
 8002bf8:	0000c080 	.word	0x0000c080
 8002bfc:	ffffbf8f 	.word	0xffffbf8f

08002c00 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d102      	bne.n	8002c0a <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002c04:	234c      	movs	r3, #76	; 0x4c
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	52c2      	strh	r2, [r0, r3]
  }

  return HAL_OK;
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	4770      	bx	lr

08002c0e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8002c0e:	2258      	movs	r2, #88	; 0x58
 8002c10:	5a83      	ldrh	r3, [r0, r2]
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0209      	lsls	r1, r1, #8
 8002c16:	430b      	orrs	r3, r1
 8002c18:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	4770      	bx	lr

08002c1e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002c1e:	2344      	movs	r3, #68	; 0x44
 8002c20:	5ac0      	ldrh	r0, [r0, r3]
 8002c22:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002c24:	4770      	bx	lr

08002c26 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002c26:	b530      	push	{r4, r5, lr}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002c28:	3301      	adds	r3, #1
 8002c2a:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002c2c:	2480      	movs	r4, #128	; 0x80
 8002c2e:	00e4      	lsls	r4, r4, #3
 8002c30:	46a4      	mov	ip, r4
 8002c32:	4462      	add	r2, ip
 8002c34:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <USB_WritePMA+0x2c>
  uint8_t *pBuf = pbUsrBuf;
 8002c3a:	000c      	movs	r4, r1
 8002c3c:	1a41      	subs	r1, r0, r1
 8002c3e:	1908      	adds	r0, r1, r4
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002c40:	7862      	ldrb	r2, [r4, #1]
 8002c42:	0212      	lsls	r2, r2, #8
    temp1 = *pBuf;
 8002c44:	7825      	ldrb	r5, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 8002c46:	432a      	orrs	r2, r5
 8002c48:	8002      	strh	r2, [r0, #0]
  for (i = n; i != 0U; i--)
 8002c4a:	3b01      	subs	r3, #1

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8002c4c:	3402      	adds	r4, #2
  for (i = n; i != 0U; i--)
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f5      	bne.n	8002c3e <USB_WritePMA+0x18>
  }
}
 8002c52:	bd30      	pop	{r4, r5, pc}

08002c54 <USB_EPStartXfer>:
{
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	0005      	movs	r5, r0
 8002c58:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002c5a:	784b      	ldrb	r3, [r1, #1]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d02c      	beq.n	8002cba <USB_EPStartXfer+0x66>
    if (ep->doublebuffer == 0U)
 8002c60:	7b0a      	ldrb	r2, [r1, #12]
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d000      	beq.n	8002c68 <USB_EPStartXfer+0x14>
 8002c66:	e202      	b.n	800306e <USB_EPStartXfer+0x41a>
      if (ep->xfer_len > ep->maxpacket)
 8002c68:	698b      	ldr	r3, [r1, #24]
 8002c6a:	690a      	ldr	r2, [r1, #16]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d800      	bhi.n	8002c72 <USB_EPStartXfer+0x1e>
 8002c70:	e1e3      	b.n	800303a <USB_EPStartXfer+0x3e6>
        ep->xfer_len -= len;
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002c76:	2350      	movs	r3, #80	; 0x50
 8002c78:	5ae8      	ldrh	r0, [r5, r3]
 8002c7a:	7821      	ldrb	r1, [r4, #0]
 8002c7c:	00c9      	lsls	r1, r1, #3
 8002c7e:	4bc2      	ldr	r3, [pc, #776]	; (8002f88 <USB_EPStartXfer+0x334>)
 8002c80:	18eb      	adds	r3, r5, r3
 8002c82:	181b      	adds	r3, r3, r0
 8002c84:	18cb      	adds	r3, r1, r3
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d000      	beq.n	8002c8c <USB_EPStartXfer+0x38>
 8002c8a:	e1da      	b.n	8003042 <USB_EPStartXfer+0x3ee>
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	49bf      	ldr	r1, [pc, #764]	; (8002f8c <USB_EPStartXfer+0x338>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	0209      	lsls	r1, r1, #8
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c9e:	7823      	ldrb	r3, [r4, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	18ed      	adds	r5, r5, r3
 8002ca4:	882b      	ldrh	r3, [r5, #0]
 8002ca6:	4aba      	ldr	r2, [pc, #744]	; (8002f90 <USB_EPStartXfer+0x33c>)
 8002ca8:	401a      	ands	r2, r3
 8002caa:	23c0      	movs	r3, #192	; 0xc0
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	4053      	eors	r3, r2
 8002cb0:	4ab8      	ldr	r2, [pc, #736]	; (8002f94 <USB_EPStartXfer+0x340>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 8002cb6:	2000      	movs	r0, #0
}
 8002cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002cba:	690a      	ldr	r2, [r1, #16]
 8002cbc:	698e      	ldr	r6, [r1, #24]
 8002cbe:	4296      	cmp	r6, r2
 8002cc0:	d900      	bls.n	8002cc4 <USB_EPStartXfer+0x70>
 8002cc2:	0016      	movs	r6, r2
    if (ep->doublebuffer == 0U)
 8002cc4:	7b23      	ldrb	r3, [r4, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d026      	beq.n	8002d18 <USB_EPStartXfer+0xc4>
      if (ep->type == EP_TYPE_BULK)
 8002cca:	78e3      	ldrb	r3, [r4, #3]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d040      	beq.n	8002d52 <USB_EPStartXfer+0xfe>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cd0:	7823      	ldrb	r3, [r4, #0]
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	18aa      	adds	r2, r5, r2
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	0652      	lsls	r2, r2, #25
 8002cda:	d400      	bmi.n	8002cde <USB_EPStartXfer+0x8a>
 8002cdc:	e195      	b.n	800300a <USB_EPStartXfer+0x3b6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cde:	2250      	movs	r2, #80	; 0x50
 8002ce0:	5aa9      	ldrh	r1, [r5, r2]
 8002ce2:	4aa9      	ldr	r2, [pc, #676]	; (8002f88 <USB_EPStartXfer+0x334>)
 8002ce4:	18aa      	adds	r2, r5, r2
 8002ce6:	1852      	adds	r2, r2, r1
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	18d3      	adds	r3, r2, r3
 8002cec:	b2b2      	uxth	r2, r6
 8002cee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8002cf0:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cf2:	b2b3      	uxth	r3, r6
 8002cf4:	6961      	ldr	r1, [r4, #20]
 8002cf6:	0028      	movs	r0, r5
 8002cf8:	f7ff ff95 	bl	8002c26 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002cfc:	7863      	ldrb	r3, [r4, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d000      	beq.n	8002d04 <USB_EPStartXfer+0xb0>
 8002d02:	e18d      	b.n	8003020 <USB_EPStartXfer+0x3cc>
 8002d04:	7823      	ldrb	r3, [r4, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	18eb      	adds	r3, r5, r3
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	49a2      	ldr	r1, [pc, #648]	; (8002f98 <USB_EPStartXfer+0x344>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	49a2      	ldr	r1, [pc, #648]	; (8002f9c <USB_EPStartXfer+0x348>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e00f      	b.n	8002d38 <USB_EPStartXfer+0xe4>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d18:	b2b6      	uxth	r6, r6
 8002d1a:	88e2      	ldrh	r2, [r4, #6]
 8002d1c:	0033      	movs	r3, r6
 8002d1e:	6961      	ldr	r1, [r4, #20]
 8002d20:	0028      	movs	r0, r5
 8002d22:	f7ff ff80 	bl	8002c26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d26:	2350      	movs	r3, #80	; 0x50
 8002d28:	5ae9      	ldrh	r1, [r5, r3]
 8002d2a:	7823      	ldrb	r3, [r4, #0]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4a9c      	ldr	r2, [pc, #624]	; (8002fa0 <USB_EPStartXfer+0x34c>)
 8002d30:	18aa      	adds	r2, r5, r2
 8002d32:	1852      	adds	r2, r2, r1
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002d38:	7823      	ldrb	r3, [r4, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	18ed      	adds	r5, r5, r3
 8002d3e:	882b      	ldrh	r3, [r5, #0]
 8002d40:	4a98      	ldr	r2, [pc, #608]	; (8002fa4 <USB_EPStartXfer+0x350>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	2230      	movs	r2, #48	; 0x30
 8002d46:	4053      	eors	r3, r2
 8002d48:	4a92      	ldr	r2, [pc, #584]	; (8002f94 <USB_EPStartXfer+0x340>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7b2      	b.n	8002cb8 <USB_EPStartXfer+0x64>
        if (ep->xfer_len_db > ep->maxpacket)
 8002d52:	6a23      	ldr	r3, [r4, #32]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d300      	bcc.n	8002d5a <USB_EPStartXfer+0x106>
 8002d58:	e13e      	b.n	8002fd8 <USB_EPStartXfer+0x384>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002d5a:	7823      	ldrb	r3, [r4, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	18eb      	adds	r3, r5, r3
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	498d      	ldr	r1, [pc, #564]	; (8002f98 <USB_EPStartXfer+0x344>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	4990      	ldr	r1, [pc, #576]	; (8002fa8 <USB_EPStartXfer+0x354>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	801a      	strh	r2, [r3, #0]
          ep->xfer_len_db -= len;
 8002d6c:	6a23      	ldr	r3, [r4, #32]
 8002d6e:	1b9b      	subs	r3, r3, r6
 8002d70:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d72:	7823      	ldrb	r3, [r4, #0]
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	18aa      	adds	r2, r5, r2
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	0652      	lsls	r2, r2, #25
 8002d7c:	d400      	bmi.n	8002d80 <USB_EPStartXfer+0x12c>
 8002d7e:	e08b      	b.n	8002e98 <USB_EPStartXfer+0x244>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d80:	7862      	ldrb	r2, [r4, #1]
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	d128      	bne.n	8002dd8 <USB_EPStartXfer+0x184>
 8002d86:	3250      	adds	r2, #80	; 0x50
 8002d88:	5aaa      	ldrh	r2, [r5, r2]
 8002d8a:	497f      	ldr	r1, [pc, #508]	; (8002f88 <USB_EPStartXfer+0x334>)
 8002d8c:	1869      	adds	r1, r5, r1
 8002d8e:	1852      	adds	r2, r2, r1
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	d109      	bne.n	8002dac <USB_EPStartXfer+0x158>
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	497c      	ldr	r1, [pc, #496]	; (8002f8c <USB_EPStartXfer+0x338>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	801a      	strh	r2, [r3, #0]
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0209      	lsls	r1, r1, #8
 8002da6:	430a      	orrs	r2, r1
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	e017      	b.n	8002ddc <USB_EPStartXfer+0x188>
 8002dac:	2e3e      	cmp	r6, #62	; 0x3e
 8002dae:	d807      	bhi.n	8002dc0 <USB_EPStartXfer+0x16c>
 8002db0:	0872      	lsrs	r2, r6, #1
 8002db2:	2101      	movs	r1, #1
 8002db4:	4031      	ands	r1, r6
 8002db6:	1852      	adds	r2, r2, r1
 8002db8:	0292      	lsls	r2, r2, #10
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	e00d      	b.n	8002ddc <USB_EPStartXfer+0x188>
 8002dc0:	0972      	lsrs	r2, r6, #5
 8002dc2:	211f      	movs	r1, #31
 8002dc4:	4031      	ands	r1, r6
 8002dc6:	4248      	negs	r0, r1
 8002dc8:	4141      	adcs	r1, r0
 8002dca:	1a52      	subs	r2, r2, r1
 8002dcc:	0291      	lsls	r1, r2, #10
 8002dce:	4a77      	ldr	r2, [pc, #476]	; (8002fac <USB_EPStartXfer+0x358>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e001      	b.n	8002ddc <USB_EPStartXfer+0x188>
 8002dd8:	2a01      	cmp	r2, #1
 8002dda:	d025      	beq.n	8002e28 <USB_EPStartXfer+0x1d4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ddc:	b2b3      	uxth	r3, r6
 8002dde:	8962      	ldrh	r2, [r4, #10]
 8002de0:	6961      	ldr	r1, [r4, #20]
 8002de2:	0028      	movs	r0, r5
 8002de4:	f7ff ff1f 	bl	8002c26 <USB_WritePMA>
            ep->xfer_buff += len;
 8002de8:	6963      	ldr	r3, [r4, #20]
 8002dea:	199b      	adds	r3, r3, r6
 8002dec:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002dee:	6a23      	ldr	r3, [r4, #32]
 8002df0:	6922      	ldr	r2, [r4, #16]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d922      	bls.n	8002e3c <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db -= len;
 8002df6:	1b9b      	subs	r3, r3, r6
 8002df8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dfa:	7863      	ldrb	r3, [r4, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d137      	bne.n	8002e70 <USB_EPStartXfer+0x21c>
 8002e00:	3350      	adds	r3, #80	; 0x50
 8002e02:	5aeb      	ldrh	r3, [r5, r3]
 8002e04:	7822      	ldrb	r2, [r4, #0]
 8002e06:	00d2      	lsls	r2, r2, #3
 8002e08:	4965      	ldr	r1, [pc, #404]	; (8002fa0 <USB_EPStartXfer+0x34c>)
 8002e0a:	1869      	adds	r1, r5, r1
 8002e0c:	185b      	adds	r3, r3, r1
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	2e00      	cmp	r6, #0
 8002e12:	d117      	bne.n	8002e44 <USB_EPStartXfer+0x1f0>
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	495d      	ldr	r1, [pc, #372]	; (8002f8c <USB_EPStartXfer+0x338>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	801a      	strh	r2, [r3, #0]
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0209      	lsls	r1, r1, #8
 8002e22:	430a      	orrs	r2, r1
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e025      	b.n	8002e74 <USB_EPStartXfer+0x220>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e28:	324f      	adds	r2, #79	; 0x4f
 8002e2a:	5aaa      	ldrh	r2, [r5, r2]
 8002e2c:	4956      	ldr	r1, [pc, #344]	; (8002f88 <USB_EPStartXfer+0x334>)
 8002e2e:	1869      	adds	r1, r5, r1
 8002e30:	1852      	adds	r2, r2, r1
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	b2b2      	uxth	r2, r6
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	e7cf      	b.n	8002ddc <USB_EPStartXfer+0x188>
              ep->xfer_len_db = 0U;
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002e40:	001e      	movs	r6, r3
 8002e42:	e7da      	b.n	8002dfa <USB_EPStartXfer+0x1a6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e44:	2e3e      	cmp	r6, #62	; 0x3e
 8002e46:	d807      	bhi.n	8002e58 <USB_EPStartXfer+0x204>
 8002e48:	0872      	lsrs	r2, r6, #1
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4031      	ands	r1, r6
 8002e4e:	1852      	adds	r2, r2, r1
 8002e50:	0292      	lsls	r2, r2, #10
 8002e52:	b292      	uxth	r2, r2
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	e00d      	b.n	8002e74 <USB_EPStartXfer+0x220>
 8002e58:	0972      	lsrs	r2, r6, #5
 8002e5a:	211f      	movs	r1, #31
 8002e5c:	4031      	ands	r1, r6
 8002e5e:	4248      	negs	r0, r1
 8002e60:	4141      	adcs	r1, r0
 8002e62:	1a52      	subs	r2, r2, r1
 8002e64:	0291      	lsls	r1, r2, #10
 8002e66:	4a51      	ldr	r2, [pc, #324]	; (8002fac <USB_EPStartXfer+0x358>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	e001      	b.n	8002e74 <USB_EPStartXfer+0x220>
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d006      	beq.n	8002e82 <USB_EPStartXfer+0x22e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e74:	b2b3      	uxth	r3, r6
 8002e76:	8922      	ldrh	r2, [r4, #8]
 8002e78:	6961      	ldr	r1, [r4, #20]
 8002e7a:	0028      	movs	r0, r5
 8002e7c:	f7ff fed3 	bl	8002c26 <USB_WritePMA>
 8002e80:	e75a      	b.n	8002d38 <USB_EPStartXfer+0xe4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e82:	334f      	adds	r3, #79	; 0x4f
 8002e84:	5aea      	ldrh	r2, [r5, r3]
 8002e86:	7823      	ldrb	r3, [r4, #0]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4945      	ldr	r1, [pc, #276]	; (8002fa0 <USB_EPStartXfer+0x34c>)
 8002e8c:	1869      	adds	r1, r5, r1
 8002e8e:	1852      	adds	r2, r2, r1
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	b2b2      	uxth	r2, r6
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e7ed      	b.n	8002e74 <USB_EPStartXfer+0x220>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e98:	7862      	ldrb	r2, [r4, #1]
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d128      	bne.n	8002ef0 <USB_EPStartXfer+0x29c>
 8002e9e:	3250      	adds	r2, #80	; 0x50
 8002ea0:	5aa9      	ldrh	r1, [r5, r2]
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <USB_EPStartXfer+0x34c>)
 8002ea4:	18aa      	adds	r2, r5, r2
 8002ea6:	1852      	adds	r2, r2, r1
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	2e00      	cmp	r6, #0
 8002eae:	d109      	bne.n	8002ec4 <USB_EPStartXfer+0x270>
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	4936      	ldr	r1, [pc, #216]	; (8002f8c <USB_EPStartXfer+0x338>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	881a      	ldrh	r2, [r3, #0]
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0209      	lsls	r1, r1, #8
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	e017      	b.n	8002ef4 <USB_EPStartXfer+0x2a0>
 8002ec4:	2e3e      	cmp	r6, #62	; 0x3e
 8002ec6:	d807      	bhi.n	8002ed8 <USB_EPStartXfer+0x284>
 8002ec8:	0872      	lsrs	r2, r6, #1
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4031      	ands	r1, r6
 8002ece:	1852      	adds	r2, r2, r1
 8002ed0:	0292      	lsls	r2, r2, #10
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	e00d      	b.n	8002ef4 <USB_EPStartXfer+0x2a0>
 8002ed8:	0972      	lsrs	r2, r6, #5
 8002eda:	211f      	movs	r1, #31
 8002edc:	4031      	ands	r1, r6
 8002ede:	4248      	negs	r0, r1
 8002ee0:	4141      	adcs	r1, r0
 8002ee2:	1a52      	subs	r2, r2, r1
 8002ee4:	0291      	lsls	r1, r2, #10
 8002ee6:	4a31      	ldr	r2, [pc, #196]	; (8002fac <USB_EPStartXfer+0x358>)
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	b292      	uxth	r2, r2
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e001      	b.n	8002ef4 <USB_EPStartXfer+0x2a0>
 8002ef0:	2a01      	cmp	r2, #1
 8002ef2:	d025      	beq.n	8002f40 <USB_EPStartXfer+0x2ec>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ef4:	b2b3      	uxth	r3, r6
 8002ef6:	8922      	ldrh	r2, [r4, #8]
 8002ef8:	6961      	ldr	r1, [r4, #20]
 8002efa:	0028      	movs	r0, r5
 8002efc:	f7ff fe93 	bl	8002c26 <USB_WritePMA>
            ep->xfer_buff += len;
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	199b      	adds	r3, r3, r6
 8002f04:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002f06:	6a23      	ldr	r3, [r4, #32]
 8002f08:	6922      	ldr	r2, [r4, #16]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d922      	bls.n	8002f54 <USB_EPStartXfer+0x300>
              ep->xfer_len_db -= len;
 8002f0e:	1b9b      	subs	r3, r3, r6
 8002f10:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f12:	7863      	ldrb	r3, [r4, #1]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d14b      	bne.n	8002fb0 <USB_EPStartXfer+0x35c>
 8002f18:	3350      	adds	r3, #80	; 0x50
 8002f1a:	5aeb      	ldrh	r3, [r5, r3]
 8002f1c:	7822      	ldrb	r2, [r4, #0]
 8002f1e:	00d2      	lsls	r2, r2, #3
 8002f20:	4919      	ldr	r1, [pc, #100]	; (8002f88 <USB_EPStartXfer+0x334>)
 8002f22:	1869      	adds	r1, r5, r1
 8002f24:	185b      	adds	r3, r3, r1
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	2e00      	cmp	r6, #0
 8002f2a:	d117      	bne.n	8002f5c <USB_EPStartXfer+0x308>
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	4917      	ldr	r1, [pc, #92]	; (8002f8c <USB_EPStartXfer+0x338>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	0209      	lsls	r1, r1, #8
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e039      	b.n	8002fb4 <USB_EPStartXfer+0x360>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002f40:	324f      	adds	r2, #79	; 0x4f
 8002f42:	5aa9      	ldrh	r1, [r5, r2]
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <USB_EPStartXfer+0x34c>)
 8002f46:	18aa      	adds	r2, r5, r2
 8002f48:	1852      	adds	r2, r2, r1
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	18d3      	adds	r3, r2, r3
 8002f4e:	b2b2      	uxth	r2, r6
 8002f50:	801a      	strh	r2, [r3, #0]
 8002f52:	e7cf      	b.n	8002ef4 <USB_EPStartXfer+0x2a0>
              ep->xfer_len_db = 0U;
 8002f54:	2200      	movs	r2, #0
 8002f56:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002f58:	001e      	movs	r6, r3
 8002f5a:	e7da      	b.n	8002f12 <USB_EPStartXfer+0x2be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f5c:	2e3e      	cmp	r6, #62	; 0x3e
 8002f5e:	d807      	bhi.n	8002f70 <USB_EPStartXfer+0x31c>
 8002f60:	0872      	lsrs	r2, r6, #1
 8002f62:	2101      	movs	r1, #1
 8002f64:	4031      	ands	r1, r6
 8002f66:	1852      	adds	r2, r2, r1
 8002f68:	0292      	lsls	r2, r2, #10
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e021      	b.n	8002fb4 <USB_EPStartXfer+0x360>
 8002f70:	0972      	lsrs	r2, r6, #5
 8002f72:	211f      	movs	r1, #31
 8002f74:	4031      	ands	r1, r6
 8002f76:	4248      	negs	r0, r1
 8002f78:	4141      	adcs	r1, r0
 8002f7a:	1a52      	subs	r2, r2, r1
 8002f7c:	0291      	lsls	r1, r2, #10
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <USB_EPStartXfer+0x358>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	b292      	uxth	r2, r2
 8002f84:	801a      	strh	r2, [r3, #0]
 8002f86:	e015      	b.n	8002fb4 <USB_EPStartXfer+0x360>
 8002f88:	00000406 	.word	0x00000406
 8002f8c:	ffff83ff 	.word	0xffff83ff
 8002f90:	ffffbf8f 	.word	0xffffbf8f
 8002f94:	00008080 	.word	0x00008080
 8002f98:	ffff8f8f 	.word	0xffff8f8f
 8002f9c:	000080c0 	.word	0x000080c0
 8002fa0:	00000402 	.word	0x00000402
 8002fa4:	ffff8fbf 	.word	0xffff8fbf
 8002fa8:	00008180 	.word	0x00008180
 8002fac:	ffff8000 	.word	0xffff8000
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d006      	beq.n	8002fc2 <USB_EPStartXfer+0x36e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002fb4:	b2b3      	uxth	r3, r6
 8002fb6:	8962      	ldrh	r2, [r4, #10]
 8002fb8:	6961      	ldr	r1, [r4, #20]
 8002fba:	0028      	movs	r0, r5
 8002fbc:	f7ff fe33 	bl	8002c26 <USB_WritePMA>
 8002fc0:	e6ba      	b.n	8002d38 <USB_EPStartXfer+0xe4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fc2:	334f      	adds	r3, #79	; 0x4f
 8002fc4:	5aea      	ldrh	r2, [r5, r3]
 8002fc6:	7823      	ldrb	r3, [r4, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	49ac      	ldr	r1, [pc, #688]	; (800327c <USB_EPStartXfer+0x628>)
 8002fcc:	1869      	adds	r1, r5, r1
 8002fce:	1852      	adds	r2, r2, r1
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	b2b2      	uxth	r2, r6
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	e7ed      	b.n	8002fb4 <USB_EPStartXfer+0x360>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002fd8:	7822      	ldrb	r2, [r4, #0]
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	18aa      	adds	r2, r5, r2
 8002fde:	8811      	ldrh	r1, [r2, #0]
 8002fe0:	48a7      	ldr	r0, [pc, #668]	; (8003280 <USB_EPStartXfer+0x62c>)
 8002fe2:	4001      	ands	r1, r0
 8002fe4:	48a7      	ldr	r0, [pc, #668]	; (8003284 <USB_EPStartXfer+0x630>)
 8002fe6:	4301      	orrs	r1, r0
 8002fe8:	8011      	strh	r1, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002fea:	2250      	movs	r2, #80	; 0x50
 8002fec:	5aa8      	ldrh	r0, [r5, r2]
 8002fee:	7822      	ldrb	r2, [r4, #0]
 8002ff0:	00d2      	lsls	r2, r2, #3
 8002ff2:	49a5      	ldr	r1, [pc, #660]	; (8003288 <USB_EPStartXfer+0x634>)
 8002ff4:	1869      	adds	r1, r5, r1
 8002ff6:	1809      	adds	r1, r1, r0
 8002ff8:	1852      	adds	r2, r2, r1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ffe:	8922      	ldrh	r2, [r4, #8]
 8003000:	6961      	ldr	r1, [r4, #20]
 8003002:	0028      	movs	r0, r5
 8003004:	f7ff fe0f 	bl	8002c26 <USB_WritePMA>
 8003008:	e696      	b.n	8002d38 <USB_EPStartXfer+0xe4>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800300a:	2250      	movs	r2, #80	; 0x50
 800300c:	5aa9      	ldrh	r1, [r5, r2]
 800300e:	4a9e      	ldr	r2, [pc, #632]	; (8003288 <USB_EPStartXfer+0x634>)
 8003010:	18aa      	adds	r2, r5, r2
 8003012:	1852      	adds	r2, r2, r1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	b2b2      	uxth	r2, r6
 800301a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800301c:	8922      	ldrh	r2, [r4, #8]
 800301e:	e668      	b.n	8002cf2 <USB_EPStartXfer+0x9e>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003020:	2b01      	cmp	r3, #1
 8003022:	d000      	beq.n	8003026 <USB_EPStartXfer+0x3d2>
 8003024:	e688      	b.n	8002d38 <USB_EPStartXfer+0xe4>
 8003026:	7823      	ldrb	r3, [r4, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	18eb      	adds	r3, r5, r3
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	4997      	ldr	r1, [pc, #604]	; (800328c <USB_EPStartXfer+0x638>)
 8003030:	400a      	ands	r2, r1
 8003032:	4997      	ldr	r1, [pc, #604]	; (8003290 <USB_EPStartXfer+0x63c>)
 8003034:	430a      	orrs	r2, r1
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e67e      	b.n	8002d38 <USB_EPStartXfer+0xe4>
        ep->xfer_len = 0U;
 800303a:	2200      	movs	r2, #0
 800303c:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800303e:	001a      	movs	r2, r3
 8003040:	e619      	b.n	8002c76 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003042:	2a3e      	cmp	r2, #62	; 0x3e
 8003044:	d807      	bhi.n	8003056 <USB_EPStartXfer+0x402>
 8003046:	0851      	lsrs	r1, r2, #1
 8003048:	2001      	movs	r0, #1
 800304a:	4002      	ands	r2, r0
 800304c:	1889      	adds	r1, r1, r2
 800304e:	0289      	lsls	r1, r1, #10
 8003050:	b289      	uxth	r1, r1
 8003052:	8019      	strh	r1, [r3, #0]
 8003054:	e623      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 8003056:	0951      	lsrs	r1, r2, #5
 8003058:	201f      	movs	r0, #31
 800305a:	4002      	ands	r2, r0
 800305c:	4250      	negs	r0, r2
 800305e:	4142      	adcs	r2, r0
 8003060:	1a89      	subs	r1, r1, r2
 8003062:	0289      	lsls	r1, r1, #10
 8003064:	4a8b      	ldr	r2, [pc, #556]	; (8003294 <USB_EPStartXfer+0x640>)
 8003066:	430a      	orrs	r2, r1
 8003068:	b292      	uxth	r2, r2
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	e617      	b.n	8002c9e <USB_EPStartXfer+0x4a>
      if (ep->type == EP_TYPE_BULK)
 800306e:	78ca      	ldrb	r2, [r1, #3]
 8003070:	2a02      	cmp	r2, #2
 8003072:	d037      	beq.n	80030e4 <USB_EPStartXfer+0x490>
        return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8003076:	2a01      	cmp	r2, #1
 8003078:	d000      	beq.n	800307c <USB_EPStartXfer+0x428>
 800307a:	e61d      	b.n	8002cb8 <USB_EPStartXfer+0x64>
        if (ep->xfer_len > ep->maxpacket)
 800307c:	698a      	ldr	r2, [r1, #24]
 800307e:	6909      	ldr	r1, [r1, #16]
 8003080:	428a      	cmp	r2, r1
 8003082:	d800      	bhi.n	8003086 <USB_EPStartXfer+0x432>
 8003084:	e0aa      	b.n	80031dc <USB_EPStartXfer+0x588>
          ep->xfer_len -= len;
 8003086:	1a52      	subs	r2, r2, r1
 8003088:	61a2      	str	r2, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800308a:	2b00      	cmp	r3, #0
 800308c:	d000      	beq.n	8003090 <USB_EPStartXfer+0x43c>
 800308e:	e606      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 8003090:	3350      	adds	r3, #80	; 0x50
 8003092:	5aea      	ldrh	r2, [r5, r3]
 8003094:	7823      	ldrb	r3, [r4, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	487b      	ldr	r0, [pc, #492]	; (8003288 <USB_EPStartXfer+0x634>)
 800309a:	1828      	adds	r0, r5, r0
 800309c:	1812      	adds	r2, r2, r0
 800309e:	189a      	adds	r2, r3, r2
 80030a0:	2900      	cmp	r1, #0
 80030a2:	d000      	beq.n	80030a6 <USB_EPStartXfer+0x452>
 80030a4:	e09e      	b.n	80031e4 <USB_EPStartXfer+0x590>
 80030a6:	8813      	ldrh	r3, [r2, #0]
 80030a8:	487b      	ldr	r0, [pc, #492]	; (8003298 <USB_EPStartXfer+0x644>)
 80030aa:	4003      	ands	r3, r0
 80030ac:	8013      	strh	r3, [r2, #0]
 80030ae:	8813      	ldrh	r3, [r2, #0]
 80030b0:	2080      	movs	r0, #128	; 0x80
 80030b2:	0200      	lsls	r0, r0, #8
 80030b4:	4303      	orrs	r3, r0
 80030b6:	8013      	strh	r3, [r2, #0]
 80030b8:	7862      	ldrb	r2, [r4, #1]
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d000      	beq.n	80030c0 <USB_EPStartXfer+0x46c>
 80030be:	e0bd      	b.n	800323c <USB_EPStartXfer+0x5e8>
 80030c0:	2350      	movs	r3, #80	; 0x50
 80030c2:	5aea      	ldrh	r2, [r5, r3]
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	496c      	ldr	r1, [pc, #432]	; (800327c <USB_EPStartXfer+0x628>)
 80030ca:	1869      	adds	r1, r5, r1
 80030cc:	1852      	adds	r2, r2, r1
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	881a      	ldrh	r2, [r3, #0]
 80030d2:	4971      	ldr	r1, [pc, #452]	; (8003298 <USB_EPStartXfer+0x644>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0209      	lsls	r1, r1, #8
 80030de:	430a      	orrs	r2, r1
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	e5dc      	b.n	8002c9e <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12a      	bne.n	800313e <USB_EPStartXfer+0x4ea>
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	5ac3      	ldrh	r3, [r0, r3]
 80030ec:	780a      	ldrb	r2, [r1, #0]
 80030ee:	00d2      	lsls	r2, r2, #3
 80030f0:	4965      	ldr	r1, [pc, #404]	; (8003288 <USB_EPStartXfer+0x634>)
 80030f2:	1841      	adds	r1, r0, r1
 80030f4:	185b      	adds	r3, r3, r1
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	6922      	ldr	r2, [r4, #16]
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	d135      	bne.n	800316a <USB_EPStartXfer+0x516>
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	4965      	ldr	r1, [pc, #404]	; (8003298 <USB_EPStartXfer+0x644>)
 8003102:	400a      	ands	r2, r1
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0209      	lsls	r1, r1, #8
 800310c:	430a      	orrs	r2, r1
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	7863      	ldrb	r3, [r4, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d155      	bne.n	80031c2 <USB_EPStartXfer+0x56e>
 8003116:	3350      	adds	r3, #80	; 0x50
 8003118:	5aeb      	ldrh	r3, [r5, r3]
 800311a:	7822      	ldrb	r2, [r4, #0]
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	4957      	ldr	r1, [pc, #348]	; (800327c <USB_EPStartXfer+0x628>)
 8003120:	1869      	adds	r1, r5, r1
 8003122:	185b      	adds	r3, r3, r1
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	6922      	ldr	r2, [r4, #16]
 8003128:	2a00      	cmp	r2, #0
 800312a:	d134      	bne.n	8003196 <USB_EPStartXfer+0x542>
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	495a      	ldr	r1, [pc, #360]	; (8003298 <USB_EPStartXfer+0x644>)
 8003130:	400a      	ands	r2, r1
 8003132:	801a      	strh	r2, [r3, #0]
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0209      	lsls	r1, r1, #8
 800313a:	430a      	orrs	r2, r1
 800313c:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 800313e:	69e3      	ldr	r3, [r4, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d100      	bne.n	8003146 <USB_EPStartXfer+0x4f2>
 8003144:	e5ab      	b.n	8002c9e <USB_EPStartXfer+0x4a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003146:	7823      	ldrb	r3, [r4, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	18eb      	adds	r3, r5, r3
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	4953      	ldr	r1, [pc, #332]	; (800329c <USB_EPStartXfer+0x648>)
 8003150:	400a      	ands	r2, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003152:	428a      	cmp	r2, r1
 8003154:	d002      	beq.n	800315c <USB_EPStartXfer+0x508>
 8003156:	2a00      	cmp	r2, #0
 8003158:	d000      	beq.n	800315c <USB_EPStartXfer+0x508>
 800315a:	e5a0      	b.n	8002c9e <USB_EPStartXfer+0x4a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	494b      	ldr	r1, [pc, #300]	; (800328c <USB_EPStartXfer+0x638>)
 8003160:	400a      	ands	r2, r1
 8003162:	494f      	ldr	r1, [pc, #316]	; (80032a0 <USB_EPStartXfer+0x64c>)
 8003164:	430a      	orrs	r2, r1
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e599      	b.n	8002c9e <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800316a:	2a3e      	cmp	r2, #62	; 0x3e
 800316c:	d807      	bhi.n	800317e <USB_EPStartXfer+0x52a>
 800316e:	0851      	lsrs	r1, r2, #1
 8003170:	2001      	movs	r0, #1
 8003172:	4002      	ands	r2, r0
 8003174:	1889      	adds	r1, r1, r2
 8003176:	0289      	lsls	r1, r1, #10
 8003178:	b289      	uxth	r1, r1
 800317a:	8019      	strh	r1, [r3, #0]
 800317c:	e7c8      	b.n	8003110 <USB_EPStartXfer+0x4bc>
 800317e:	0951      	lsrs	r1, r2, #5
 8003180:	201f      	movs	r0, #31
 8003182:	4002      	ands	r2, r0
 8003184:	4250      	negs	r0, r2
 8003186:	4142      	adcs	r2, r0
 8003188:	1a89      	subs	r1, r1, r2
 800318a:	0289      	lsls	r1, r1, #10
 800318c:	4a41      	ldr	r2, [pc, #260]	; (8003294 <USB_EPStartXfer+0x640>)
 800318e:	430a      	orrs	r2, r1
 8003190:	b292      	uxth	r2, r2
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e7bc      	b.n	8003110 <USB_EPStartXfer+0x4bc>
 8003196:	2a3e      	cmp	r2, #62	; 0x3e
 8003198:	d807      	bhi.n	80031aa <USB_EPStartXfer+0x556>
 800319a:	0851      	lsrs	r1, r2, #1
 800319c:	2001      	movs	r0, #1
 800319e:	4002      	ands	r2, r0
 80031a0:	1889      	adds	r1, r1, r2
 80031a2:	0289      	lsls	r1, r1, #10
 80031a4:	b289      	uxth	r1, r1
 80031a6:	8019      	strh	r1, [r3, #0]
 80031a8:	e7c9      	b.n	800313e <USB_EPStartXfer+0x4ea>
 80031aa:	0951      	lsrs	r1, r2, #5
 80031ac:	201f      	movs	r0, #31
 80031ae:	4002      	ands	r2, r0
 80031b0:	4250      	negs	r0, r2
 80031b2:	4142      	adcs	r2, r0
 80031b4:	1a89      	subs	r1, r1, r2
 80031b6:	0289      	lsls	r1, r1, #10
 80031b8:	4a36      	ldr	r2, [pc, #216]	; (8003294 <USB_EPStartXfer+0x640>)
 80031ba:	430a      	orrs	r2, r1
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	e7bd      	b.n	800313e <USB_EPStartXfer+0x4ea>
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d1bb      	bne.n	800313e <USB_EPStartXfer+0x4ea>
 80031c6:	334f      	adds	r3, #79	; 0x4f
 80031c8:	5aea      	ldrh	r2, [r5, r3]
 80031ca:	7823      	ldrb	r3, [r4, #0]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	492b      	ldr	r1, [pc, #172]	; (800327c <USB_EPStartXfer+0x628>)
 80031d0:	1869      	adds	r1, r5, r1
 80031d2:	1852      	adds	r2, r2, r1
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	8a22      	ldrh	r2, [r4, #16]
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	e7b0      	b.n	800313e <USB_EPStartXfer+0x4ea>
          ep->xfer_len = 0U;
 80031dc:	2100      	movs	r1, #0
 80031de:	61a1      	str	r1, [r4, #24]
          len = ep->xfer_len;
 80031e0:	0011      	movs	r1, r2
 80031e2:	e752      	b.n	800308a <USB_EPStartXfer+0x436>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80031e4:	293e      	cmp	r1, #62	; 0x3e
 80031e6:	d81b      	bhi.n	8003220 <USB_EPStartXfer+0x5cc>
 80031e8:	084b      	lsrs	r3, r1, #1
 80031ea:	2601      	movs	r6, #1
 80031ec:	400e      	ands	r6, r1
 80031ee:	0030      	movs	r0, r6
 80031f0:	1e47      	subs	r7, r0, #1
 80031f2:	41b8      	sbcs	r0, r7
 80031f4:	1818      	adds	r0, r3, r0
 80031f6:	0280      	lsls	r0, r0, #10
 80031f8:	b280      	uxth	r0, r0
 80031fa:	8010      	strh	r0, [r2, #0]
 80031fc:	7862      	ldrb	r2, [r4, #1]
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d11c      	bne.n	800323c <USB_EPStartXfer+0x5e8>
 8003202:	2250      	movs	r2, #80	; 0x50
 8003204:	5aaa      	ldrh	r2, [r5, r2]
 8003206:	491d      	ldr	r1, [pc, #116]	; (800327c <USB_EPStartXfer+0x628>)
 8003208:	1869      	adds	r1, r5, r1
 800320a:	1852      	adds	r2, r2, r1
 800320c:	7821      	ldrb	r1, [r4, #0]
 800320e:	00c9      	lsls	r1, r1, #3
 8003210:	1852      	adds	r2, r2, r1
 8003212:	1e71      	subs	r1, r6, #1
 8003214:	418e      	sbcs	r6, r1
 8003216:	199b      	adds	r3, r3, r6
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]
 800321e:	e53e      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 8003220:	094b      	lsrs	r3, r1, #5
 8003222:	201f      	movs	r0, #31
 8003224:	4008      	ands	r0, r1
 8003226:	4246      	negs	r6, r0
 8003228:	4146      	adcs	r6, r0
 800322a:	1b9f      	subs	r7, r3, r6
 800322c:	02bf      	lsls	r7, r7, #10
 800322e:	4e19      	ldr	r6, [pc, #100]	; (8003294 <USB_EPStartXfer+0x640>)
 8003230:	433e      	orrs	r6, r7
 8003232:	b2b6      	uxth	r6, r6
 8003234:	8016      	strh	r6, [r2, #0]
 8003236:	7862      	ldrb	r2, [r4, #1]
 8003238:	2a00      	cmp	r2, #0
 800323a:	d00e      	beq.n	800325a <USB_EPStartXfer+0x606>
 800323c:	2a01      	cmp	r2, #1
 800323e:	d000      	beq.n	8003242 <USB_EPStartXfer+0x5ee>
 8003240:	e52d      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 8003242:	2350      	movs	r3, #80	; 0x50
 8003244:	5aeb      	ldrh	r3, [r5, r3]
 8003246:	7822      	ldrb	r2, [r4, #0]
 8003248:	00d2      	lsls	r2, r2, #3
 800324a:	480c      	ldr	r0, [pc, #48]	; (800327c <USB_EPStartXfer+0x628>)
 800324c:	4684      	mov	ip, r0
 800324e:	4463      	add	r3, ip
 8003250:	18d2      	adds	r2, r2, r3
 8003252:	18aa      	adds	r2, r5, r2
 8003254:	b289      	uxth	r1, r1
 8003256:	8011      	strh	r1, [r2, #0]
 8003258:	e521      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 800325a:	2250      	movs	r2, #80	; 0x50
 800325c:	5aaa      	ldrh	r2, [r5, r2]
 800325e:	4907      	ldr	r1, [pc, #28]	; (800327c <USB_EPStartXfer+0x628>)
 8003260:	1869      	adds	r1, r5, r1
 8003262:	1852      	adds	r2, r2, r1
 8003264:	7821      	ldrb	r1, [r4, #0]
 8003266:	00c9      	lsls	r1, r1, #3
 8003268:	1852      	adds	r2, r2, r1
 800326a:	4241      	negs	r1, r0
 800326c:	4148      	adcs	r0, r1
 800326e:	1a1b      	subs	r3, r3, r0
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <USB_EPStartXfer+0x640>)
 8003274:	430b      	orrs	r3, r1
 8003276:	b29b      	uxth	r3, r3
 8003278:	8013      	strh	r3, [r2, #0]
 800327a:	e510      	b.n	8002c9e <USB_EPStartXfer+0x4a>
 800327c:	00000406 	.word	0x00000406
 8003280:	ffff8e8f 	.word	0xffff8e8f
 8003284:	00008080 	.word	0x00008080
 8003288:	00000402 	.word	0x00000402
 800328c:	ffff8f8f 	.word	0xffff8f8f
 8003290:	0000c080 	.word	0x0000c080
 8003294:	ffff8000 	.word	0xffff8000
 8003298:	ffff83ff 	.word	0xffff83ff
 800329c:	00004040 	.word	0x00004040
 80032a0:	000080c0 	.word	0x000080c0

080032a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a6:	0014      	movs	r4, r2
 80032a8:	001a      	movs	r2, r3
  uint32_t n = (uint32_t)wNBytes >> 1;
 80032aa:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80032ac:	2580      	movs	r5, #128	; 0x80
 80032ae:	00ed      	lsls	r5, r5, #3
 80032b0:	46ac      	mov	ip, r5
 80032b2:	4464      	add	r4, ip
 80032b4:	1900      	adds	r0, r0, r4
 80032b6:	0005      	movs	r5, r0

  for (i = n; i != 0U; i--)
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <USB_ReadPMA+0x38>
  uint8_t *pBuf = pbUsrBuf;
 80032bc:	000d      	movs	r5, r1
  for (i = n; i != 0U; i--)
 80032be:	001e      	movs	r6, r3
 80032c0:	1a47      	subs	r7, r0, r1
 80032c2:	197c      	adds	r4, r7, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 80032c4:	8824      	ldrh	r4, [r4, #0]
 80032c6:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80032c8:	702c      	strb	r4, [r5, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80032ca:	0a24      	lsrs	r4, r4, #8
 80032cc:	706c      	strb	r4, [r5, #1]
  for (i = n; i != 0U; i--)
 80032ce:	3e01      	subs	r6, #1
    pBuf++;
 80032d0:	3502      	adds	r5, #2
  for (i = n; i != 0U; i--)
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d1f5      	bne.n	80032c2 <USB_ReadPMA+0x1e>
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	18c5      	adds	r5, r0, r3
 80032da:	18c9      	adds	r1, r1, r3
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80032dc:	07d3      	lsls	r3, r2, #31
 80032de:	d501      	bpl.n	80032e4 <USB_ReadPMA+0x40>
  {
    temp = *pdwVal;
 80032e0:	882b      	ldrh	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80032e2:	700b      	strb	r3, [r1, #0]
  }
}
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80032e8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80032ea:	23af      	movs	r3, #175	; 0xaf
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	58c3      	ldr	r3, [r0, r3]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <USBD_CDC_EP0_RxReady+0x2c>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80032f4:	22ae      	movs	r2, #174	; 0xae
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80032fa:	3ab8      	subs	r2, #184	; 0xb8
 80032fc:	5ca0      	ldrb	r0, [r4, r2]
 80032fe:	28ff      	cmp	r0, #255	; 0xff
 8003300:	d008      	beq.n	8003314 <USBD_CDC_EP0_RxReady+0x2c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <USBD_CDC_EP0_RxReady+0x30>)
 8003304:	5ca2      	ldrb	r2, [r4, r2]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	0021      	movs	r1, r4
 800330a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	22ff      	movs	r2, #255	; 0xff
 8003312:	54e2      	strb	r2, [r4, r3]

  }
  return USBD_OK;
}
 8003314:	2000      	movs	r0, #0
 8003316:	bd10      	pop	{r4, pc}
 8003318:	00000201 	.word	0x00000201

0800331c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800331c:	2343      	movs	r3, #67	; 0x43
 800331e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003320:	4800      	ldr	r0, [pc, #0]	; (8003324 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003322:	4770      	bx	lr
 8003324:	2000003c 	.word	0x2000003c

08003328 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003328:	2343      	movs	r3, #67	; 0x43
 800332a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800332c:	4800      	ldr	r0, [pc, #0]	; (8003330 <USBD_CDC_GetHSCfgDesc+0x8>)
 800332e:	4770      	bx	lr
 8003330:	20000080 	.word	0x20000080

08003334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003334:	2343      	movs	r3, #67	; 0x43
 8003336:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003338:	4800      	ldr	r0, [pc, #0]	; (800333c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800333a:	4770      	bx	lr
 800333c:	200000d0 	.word	0x200000d0

08003340 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003340:	230a      	movs	r3, #10
 8003342:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003344:	4800      	ldr	r0, [pc, #0]	; (8003348 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003346:	4770      	bx	lr
 8003348:	200000c4 	.word	0x200000c4

0800334c <USBD_CDC_DataOut>:
{
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003350:	26ae      	movs	r6, #174	; 0xae
 8003352:	00b6      	lsls	r6, r6, #2
 8003354:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003356:	f001 fae7 	bl	8004928 <USBD_LL_GetRxDataSize>
 800335a:	2383      	movs	r3, #131	; 0x83
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8003360:	59a3      	ldr	r3, [r4, r6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003366:	2383      	movs	r3, #131	; 0x83
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	18e9      	adds	r1, r5, r3
 800336c:	3b08      	subs	r3, #8
 800336e:	58e8      	ldr	r0, [r5, r3]
 8003370:	33b8      	adds	r3, #184	; 0xb8
 8003372:	58e3      	ldr	r3, [r4, r3]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4798      	blx	r3
    return USBD_OK;
 8003378:	2000      	movs	r0, #0
}
 800337a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800337c:	2002      	movs	r0, #2
 800337e:	e7fc      	b.n	800337a <USBD_CDC_DataOut+0x2e>

08003380 <USBD_CDC_DataIn>:
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	0005      	movs	r5, r0
 8003384:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003386:	23ae      	movs	r3, #174	; 0xae
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	58c6      	ldr	r6, [r0, r3]
  if (pdev->pClassData != NULL)
 800338c:	2e00      	cmp	r6, #0
 800338e:	d025      	beq.n	80033dc <USBD_CDC_DataIn+0x5c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003390:	008b      	lsls	r3, r1, #2
 8003392:	185b      	adds	r3, r3, r1
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18c3      	adds	r3, r0, r3
 8003398:	69d8      	ldr	r0, [r3, #28]
 800339a:	2800      	cmp	r0, #0
 800339c:	d00b      	beq.n	80033b6 <USBD_CDC_DataIn+0x36>
 800339e:	23b0      	movs	r3, #176	; 0xb0
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	58ea      	ldr	r2, [r5, r3]
 80033a4:	008b      	lsls	r3, r1, #2
 80033a6:	185b      	adds	r3, r3, r1
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	18d3      	adds	r3, r2, r3
 80033ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033ae:	f7fc ff31 	bl	8000214 <__aeabi_uidivmod>
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d005      	beq.n	80033c2 <USBD_CDC_DataIn+0x42>
      hcdc->TxState = 0U;
 80033b6:	2385      	movs	r3, #133	; 0x85
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	2200      	movs	r2, #0
 80033bc:	50f2      	str	r2, [r6, r3]
    return USBD_OK;
 80033be:	2000      	movs	r0, #0
}
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80033c2:	00a3      	lsls	r3, r4, #2
 80033c4:	191b      	adds	r3, r3, r4
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	18eb      	adds	r3, r5, r3
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033ce:	2300      	movs	r3, #0
 80033d0:	0021      	movs	r1, r4
 80033d2:	0028      	movs	r0, r5
 80033d4:	f001 fa96 	bl	8004904 <USBD_LL_Transmit>
    return USBD_OK;
 80033d8:	2000      	movs	r0, #0
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033da:	e7f1      	b.n	80033c0 <USBD_CDC_DataIn+0x40>
    return USBD_FAIL;
 80033dc:	2002      	movs	r0, #2
 80033de:	e7ef      	b.n	80033c0 <USBD_CDC_DataIn+0x40>

080033e0 <USBD_CDC_Setup>:
{
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	0005      	movs	r5, r0
 80033e6:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80033e8:	23ae      	movs	r3, #174	; 0xae
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	466a      	mov	r2, sp
 80033f2:	71d3      	strb	r3, [r2, #7]
  uint16_t status_info = 0U;
 80033f4:	aa01      	add	r2, sp, #4
 80033f6:	8013      	strh	r3, [r2, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033f8:	7809      	ldrb	r1, [r1, #0]
 80033fa:	3360      	adds	r3, #96	; 0x60
 80033fc:	400b      	ands	r3, r1
 80033fe:	d02c      	beq.n	800345a <USBD_CDC_Setup+0x7a>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d163      	bne.n	80034cc <USBD_CDC_Setup+0xec>
      if (req->wLength)
 8003404:	88e2      	ldrh	r2, [r4, #6]
 8003406:	2a00      	cmp	r2, #0
 8003408:	d109      	bne.n	800341e <USBD_CDC_Setup+0x3e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800340a:	7860      	ldrb	r0, [r4, #1]
 800340c:	23af      	movs	r3, #175	; 0xaf
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	58eb      	ldr	r3, [r5, r3]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	0021      	movs	r1, r4
 8003418:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800341a:	2000      	movs	r0, #0
 800341c:	e05a      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
        if (req->bmRequest & 0x80U)
 800341e:	b249      	sxtb	r1, r1
 8003420:	2900      	cmp	r1, #0
 8003422:	da0d      	bge.n	8003440 <USBD_CDC_Setup+0x60>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003424:	7860      	ldrb	r0, [r4, #1]
 8003426:	23af      	movs	r3, #175	; 0xaf
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	58eb      	ldr	r3, [r5, r3]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0031      	movs	r1, r6
 8003430:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003432:	88e2      	ldrh	r2, [r4, #6]
 8003434:	0031      	movs	r1, r6
 8003436:	0028      	movs	r0, r5
 8003438:	f000 fdfc 	bl	8004034 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800343c:	2000      	movs	r0, #0
 800343e:	e049      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
          hcdc->CmdOpCode = req->bRequest;
 8003440:	7862      	ldrb	r2, [r4, #1]
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	54f2      	strb	r2, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003448:	88e2      	ldrh	r2, [r4, #6]
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <USBD_CDC_Setup+0xf8>)
 800344c:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800344e:	88e2      	ldrh	r2, [r4, #6]
 8003450:	0031      	movs	r1, r6
 8003452:	f000 fe05 	bl	8004060 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003456:	2000      	movs	r0, #0
 8003458:	e03c      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
      switch (req->bRequest)
 800345a:	7863      	ldrb	r3, [r4, #1]
 800345c:	2b0a      	cmp	r3, #10
 800345e:	d018      	beq.n	8003492 <USBD_CDC_Setup+0xb2>
 8003460:	2b0b      	cmp	r3, #11
 8003462:	d027      	beq.n	80034b4 <USBD_CDC_Setup+0xd4>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <USBD_CDC_Setup+0x92>
          USBD_CtlError(pdev, req);
 8003468:	0021      	movs	r1, r4
 800346a:	f000 fabd 	bl	80039e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800346e:	2002      	movs	r0, #2
          break;
 8003470:	e030      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003472:	23a7      	movs	r3, #167	; 0xa7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	5cc3      	ldrb	r3, [r0, r3]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d105      	bne.n	8003488 <USBD_CDC_Setup+0xa8>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800347c:	2202      	movs	r2, #2
 800347e:	a901      	add	r1, sp, #4
 8003480:	f000 fdd8 	bl	8004034 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003484:	2000      	movs	r0, #0
 8003486:	e025      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 8003488:	0021      	movs	r1, r4
 800348a:	f000 faad 	bl	80039e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800348e:	2002      	movs	r0, #2
 8003490:	e020      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003492:	23a7      	movs	r3, #167	; 0xa7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	5cc3      	ldrb	r3, [r0, r3]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d106      	bne.n	80034aa <USBD_CDC_Setup+0xca>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800349c:	2201      	movs	r2, #1
 800349e:	466b      	mov	r3, sp
 80034a0:	1dd9      	adds	r1, r3, #7
 80034a2:	f000 fdc7 	bl	8004034 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80034a6:	2000      	movs	r0, #0
 80034a8:	e014      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 80034aa:	0021      	movs	r1, r4
 80034ac:	f000 fa9c 	bl	80039e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80034b0:	2002      	movs	r0, #2
 80034b2:	e00f      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80034b4:	23a7      	movs	r3, #167	; 0xa7
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	5cc3      	ldrb	r3, [r0, r3]
  uint8_t ret = USBD_OK;
 80034ba:	2000      	movs	r0, #0
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d009      	beq.n	80034d4 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 80034c0:	0021      	movs	r1, r4
 80034c2:	0028      	movs	r0, r5
 80034c4:	f000 fa90 	bl	80039e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80034c8:	2002      	movs	r0, #2
 80034ca:	e003      	b.n	80034d4 <USBD_CDC_Setup+0xf4>
      USBD_CtlError(pdev, req);
 80034cc:	0021      	movs	r1, r4
 80034ce:	f000 fa8b 	bl	80039e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80034d2:	2002      	movs	r0, #2
}
 80034d4:	b002      	add	sp, #8
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	00000201 	.word	0x00000201

080034dc <USBD_CDC_DeInit>:
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80034e0:	2181      	movs	r1, #129	; 0x81
 80034e2:	f001 f9d2 	bl	800488a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80034e6:	2500      	movs	r5, #0
 80034e8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80034ea:	2101      	movs	r1, #1
 80034ec:	0020      	movs	r0, r4
 80034ee:	f001 f9cc 	bl	800488a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80034f2:	23b6      	movs	r3, #182	; 0xb6
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	50e5      	str	r5, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80034f8:	2182      	movs	r1, #130	; 0x82
 80034fa:	0020      	movs	r0, r4
 80034fc:	f001 f9c5 	bl	800488a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003500:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003502:	23ae      	movs	r3, #174	; 0xae
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	58e3      	ldr	r3, [r4, r3]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <USBD_CDC_DeInit+0x48>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800350c:	23af      	movs	r3, #175	; 0xaf
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	58e3      	ldr	r3, [r4, r3]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003516:	25ae      	movs	r5, #174	; 0xae
 8003518:	00ad      	lsls	r5, r5, #2
 800351a:	5960      	ldr	r0, [r4, r5]
 800351c:	f001 fa10 	bl	8004940 <USBD_static_free>
    pdev->pClassData = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	5163      	str	r3, [r4, r5]
}
 8003524:	2000      	movs	r0, #0
 8003526:	bd70      	pop	{r4, r5, r6, pc}

08003528 <USBD_CDC_Init>:
{
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800352c:	7c03      	ldrb	r3, [r0, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d13b      	bne.n	80035aa <USBD_CDC_Init+0x82>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003532:	2680      	movs	r6, #128	; 0x80
 8003534:	00b6      	lsls	r6, r6, #2
 8003536:	0033      	movs	r3, r6
 8003538:	2202      	movs	r2, #2
 800353a:	2181      	movs	r1, #129	; 0x81
 800353c:	f001 f999 	bl	8004872 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003540:	2501      	movs	r5, #1
 8003542:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003544:	0033      	movs	r3, r6
 8003546:	2202      	movs	r2, #2
 8003548:	2101      	movs	r1, #1
 800354a:	0020      	movs	r0, r4
 800354c:	f001 f991 	bl	8004872 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003550:	23b6      	movs	r3, #182	; 0xb6
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003556:	2308      	movs	r3, #8
 8003558:	2203      	movs	r2, #3
 800355a:	2182      	movs	r1, #130	; 0x82
 800355c:	0020      	movs	r0, r4
 800355e:	f001 f988 	bl	8004872 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003562:	2301      	movs	r3, #1
 8003564:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003566:	2087      	movs	r0, #135	; 0x87
 8003568:	0080      	lsls	r0, r0, #2
 800356a:	f001 f9e5 	bl	8004938 <USBD_static_malloc>
 800356e:	0005      	movs	r5, r0
 8003570:	23ae      	movs	r3, #174	; 0xae
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 8003576:	2800      	cmp	r0, #0
 8003578:	d032      	beq.n	80035e0 <USBD_CDC_Init+0xb8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800357a:	3304      	adds	r3, #4
 800357c:	58e3      	ldr	r3, [r4, r3]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	2285      	movs	r2, #133	; 0x85
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 800358a:	3204      	adds	r2, #4
 800358c:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800358e:	7c23      	ldrb	r3, [r4, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <USBD_CDC_Init+0xa4>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003594:	2381      	movs	r3, #129	; 0x81
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	58ea      	ldr	r2, [r5, r3]
 800359a:	3bc5      	subs	r3, #197	; 0xc5
 800359c:	3bff      	subs	r3, #255	; 0xff
 800359e:	2101      	movs	r1, #1
 80035a0:	0020      	movs	r0, r4
 80035a2:	f001 f9b8 	bl	8004916 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80035a6:	2000      	movs	r0, #0
}
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	2202      	movs	r2, #2
 80035ae:	2181      	movs	r1, #129	; 0x81
 80035b0:	f001 f95f 	bl	8004872 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80035b4:	2501      	movs	r5, #1
 80035b6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80035b8:	2340      	movs	r3, #64	; 0x40
 80035ba:	2202      	movs	r2, #2
 80035bc:	2101      	movs	r1, #1
 80035be:	0020      	movs	r0, r4
 80035c0:	f001 f957 	bl	8004872 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80035c4:	23b6      	movs	r3, #182	; 0xb6
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	50e5      	str	r5, [r4, r3]
 80035ca:	e7c4      	b.n	8003556 <USBD_CDC_Init+0x2e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80035cc:	3380      	adds	r3, #128	; 0x80
 80035ce:	3a14      	subs	r2, #20
 80035d0:	58aa      	ldr	r2, [r5, r2]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	2101      	movs	r1, #1
 80035d6:	0020      	movs	r0, r4
 80035d8:	f001 f99d 	bl	8004916 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80035dc:	2000      	movs	r0, #0
 80035de:	e7e3      	b.n	80035a8 <USBD_CDC_Init+0x80>
    ret = 1U;
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7e1      	b.n	80035a8 <USBD_CDC_Init+0x80>

080035e4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80035e4:	2900      	cmp	r1, #0
 80035e6:	d004      	beq.n	80035f2 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 80035e8:	23af      	movs	r3, #175	; 0xaf
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 80035ee:	2000      	movs	r0, #0
  }

  return ret;
}
 80035f0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80035f2:	2002      	movs	r0, #2
 80035f4:	e7fc      	b.n	80035f0 <USBD_CDC_RegisterInterface+0xc>

080035f6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80035f6:	23ae      	movs	r3, #174	; 0xae
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 80035fc:	2082      	movs	r0, #130	; 0x82
 80035fe:	0080      	lsls	r0, r0, #2
 8003600:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8003602:	2184      	movs	r1, #132	; 0x84
 8003604:	0089      	lsls	r1, r1, #2
 8003606:	505a      	str	r2, [r3, r1]

  return USBD_OK;
}
 8003608:	2000      	movs	r0, #0
 800360a:	4770      	bx	lr

0800360c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800360c:	23ae      	movs	r3, #174	; 0xae
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	58c2      	ldr	r2, [r0, r3]

  hcdc->RxBuffer = pbuff;
 8003612:	3bb4      	subs	r3, #180	; 0xb4
 8003614:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
}
 8003616:	2000      	movs	r0, #0
 8003618:	4770      	bx	lr

0800361a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800361a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800361c:	23ae      	movs	r3, #174	; 0xae
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	58c2      	ldr	r2, [r0, r3]

  if (pdev->pClassData != NULL)
 8003622:	2a00      	cmp	r2, #0
 8003624:	d017      	beq.n	8003656 <USBD_CDC_TransmitPacket+0x3c>
  {
    if (hcdc->TxState == 0U)
 8003626:	3ba4      	subs	r3, #164	; 0xa4
 8003628:	58d1      	ldr	r1, [r2, r3]

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800362a:	2301      	movs	r3, #1
    if (hcdc->TxState == 0U)
 800362c:	2900      	cmp	r1, #0
 800362e:	d001      	beq.n	8003634 <USBD_CDC_TransmitPacket+0x1a>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003630:	0018      	movs	r0, r3
 8003632:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1U;
 8003634:	2385      	movs	r3, #133	; 0x85
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	3101      	adds	r1, #1
 800363a:	50d1      	str	r1, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800363c:	3b04      	subs	r3, #4
 800363e:	58d1      	ldr	r1, [r2, r3]
 8003640:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003642:	5ad3      	ldrh	r3, [r2, r3]
 8003644:	2182      	movs	r1, #130	; 0x82
 8003646:	0089      	lsls	r1, r1, #2
 8003648:	5852      	ldr	r2, [r2, r1]
 800364a:	3988      	subs	r1, #136	; 0x88
 800364c:	39ff      	subs	r1, #255	; 0xff
 800364e:	f001 f959 	bl	8004904 <USBD_LL_Transmit>
      return USBD_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e7ec      	b.n	8003630 <USBD_CDC_TransmitPacket+0x16>
    return USBD_FAIL;
 8003656:	2302      	movs	r3, #2
 8003658:	e7ea      	b.n	8003630 <USBD_CDC_TransmitPacket+0x16>

0800365a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800365a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800365c:	23ae      	movs	r3, #174	; 0xae
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	58c2      	ldr	r2, [r0, r3]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003662:	2a00      	cmp	r2, #0
 8003664:	d016      	beq.n	8003694 <USBD_CDC_ReceivePacket+0x3a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003666:	7c03      	ldrb	r3, [r0, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <USBD_CDC_ReceivePacket+0x26>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800366c:	2381      	movs	r3, #129	; 0x81
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	58d2      	ldr	r2, [r2, r3]
 8003672:	3bc5      	subs	r3, #197	; 0xc5
 8003674:	3bff      	subs	r3, #255	; 0xff
 8003676:	2101      	movs	r1, #1
 8003678:	f001 f94d 	bl	8004916 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800367c:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800367e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003680:	3380      	adds	r3, #128	; 0x80
 8003682:	2181      	movs	r1, #129	; 0x81
 8003684:	0089      	lsls	r1, r1, #2
 8003686:	5852      	ldr	r2, [r2, r1]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	2101      	movs	r1, #1
 800368c:	f001 f943 	bl	8004916 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003690:	2000      	movs	r0, #0
 8003692:	e7f4      	b.n	800367e <USBD_CDC_ReceivePacket+0x24>
    return USBD_FAIL;
 8003694:	2002      	movs	r0, #2
 8003696:	e7f2      	b.n	800367e <USBD_CDC_ReceivePacket+0x24>

08003698 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003698:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800369a:	2800      	cmp	r0, #0
 800369c:	d016      	beq.n	80036cc <USBD_Init+0x34>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800369e:	23ad      	movs	r3, #173	; 0xad
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	58c3      	ldr	r3, [r0, r3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 80036a8:	23ad      	movs	r3, #173	; 0xad
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	2400      	movs	r4, #0
 80036ae:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d002      	beq.n	80036ba <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 80036b4:	23ac      	movs	r3, #172	; 0xac
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80036ba:	23a7      	movs	r3, #167	; 0xa7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	2101      	movs	r1, #1
 80036c0:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80036c2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80036c4:	f001 f88a 	bl	80047dc <USBD_LL_Init>

  return USBD_OK;
 80036c8:	2000      	movs	r0, #0
}
 80036ca:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80036cc:	2002      	movs	r0, #2
 80036ce:	e7fc      	b.n	80036ca <USBD_Init+0x32>

080036d0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80036d0:	2900      	cmp	r1, #0
 80036d2:	d004      	beq.n	80036de <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80036d4:	23ad      	movs	r3, #173	; 0xad
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 80036da:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 80036dc:	4770      	bx	lr
    status = USBD_FAIL;
 80036de:	2002      	movs	r0, #2
 80036e0:	e7fc      	b.n	80036dc <USBD_RegisterClass+0xc>

080036e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80036e2:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80036e4:	f001 f8bc 	bl	8004860 <USBD_LL_Start>

  return USBD_OK;
}
 80036e8:	2000      	movs	r0, #0
 80036ea:	bd10      	pop	{r4, pc}

080036ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80036ec:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80036ee:	23ad      	movs	r3, #173	; 0xad
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	58c3      	ldr	r3, [r0, r3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4798      	blx	r3
    {
      ret = USBD_OK;
 80036fc:	1e43      	subs	r3, r0, #1
 80036fe:	4198      	sbcs	r0, r3
 8003700:	0040      	lsls	r0, r0, #1
    }
  }

  return ret;
}
 8003702:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003704:	2002      	movs	r0, #2
 8003706:	e7fc      	b.n	8003702 <USBD_SetClassConfig+0x16>

08003708 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003708:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800370a:	23ad      	movs	r3, #173	; 0xad
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	58c3      	ldr	r3, [r0, r3]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4798      	blx	r3

  return USBD_OK;
}
 8003714:	2000      	movs	r0, #0
 8003716:	bd10      	pop	{r4, pc}

08003718 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800371c:	23aa      	movs	r3, #170	; 0xaa
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	18c5      	adds	r5, r0, r3
 8003722:	0028      	movs	r0, r5
 8003724:	f000 f94c 	bl	80039c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003728:	23a5      	movs	r3, #165	; 0xa5
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	2201      	movs	r2, #1
 800372e:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <USBD_LL_SetupStage+0x60>)
 8003732:	5ae2      	ldrh	r2, [r4, r3]
 8003734:	3b16      	subs	r3, #22
 8003736:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003738:	3310      	adds	r3, #16
 800373a:	5ce1      	ldrb	r1, [r4, r3]
 800373c:	231f      	movs	r3, #31
 800373e:	400b      	ands	r3, r1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d00f      	beq.n	8003764 <USBD_LL_SetupStage+0x4c>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <USBD_LL_SetupStage+0x40>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d010      	beq.n	800376e <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800374c:	237f      	movs	r3, #127	; 0x7f
 800374e:	4399      	bics	r1, r3
 8003750:	0020      	movs	r0, r4
 8003752:	f001 f8a3 	bl	800489c <USBD_LL_StallEP>
      break;
 8003756:	e003      	b.n	8003760 <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8003758:	0029      	movs	r1, r5
 800375a:	0020      	movs	r0, r4
 800375c:	f000 f94e 	bl	80039fc <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003760:	2000      	movs	r0, #0
 8003762:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003764:	0029      	movs	r1, r5
 8003766:	0020      	movs	r0, r4
 8003768:	f000 fb32 	bl	8003dd0 <USBD_StdItfReq>
      break;
 800376c:	e7f8      	b.n	8003760 <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 800376e:	0029      	movs	r1, r5
 8003770:	0020      	movs	r0, r4
 8003772:	f000 fb60 	bl	8003e36 <USBD_StdEPReq>
      break;
 8003776:	e7f3      	b.n	8003760 <USBD_LL_SetupStage+0x48>
 8003778:	000002ae 	.word	0x000002ae

0800377c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800377c:	b510      	push	{r4, lr}
 800377e:	0004      	movs	r4, r0
 8003780:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003782:	2900      	cmp	r1, #0
 8003784:	d13a      	bne.n	80037fc <USBD_LL_DataOutStage+0x80>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003786:	23a5      	movs	r3, #165	; 0xa5
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	58e3      	ldr	r3, [r4, r3]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d00c      	beq.n	80037aa <USBD_LL_DataOutStage+0x2e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003790:	2000      	movs	r0, #0
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003792:	2b05      	cmp	r3, #5
 8003794:	d140      	bne.n	8003818 <USBD_LL_DataOutStage+0x9c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003796:	23a5      	movs	r3, #165	; 0xa5
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	2200      	movs	r2, #0
 800379c:	50e2      	str	r2, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 800379e:	2100      	movs	r1, #0
 80037a0:	0020      	movs	r0, r4
 80037a2:	f001 f87b 	bl	800489c <USBD_LL_StallEP>
  return USBD_OK;
 80037a6:	2000      	movs	r0, #0
 80037a8:	e036      	b.n	8003818 <USBD_LL_DataOutStage+0x9c>
      if (pep->rem_length > pep->maxpacket)
 80037aa:	0022      	movs	r2, r4
 80037ac:	3255      	adds	r2, #85	; 0x55
 80037ae:	32ff      	adds	r2, #255	; 0xff
 80037b0:	68d3      	ldr	r3, [r2, #12]
 80037b2:	6912      	ldr	r2, [r2, #16]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d90f      	bls.n	80037d8 <USBD_LL_DataOutStage+0x5c>
        pep->rem_length -= pep->maxpacket;
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	0021      	movs	r1, r4
 80037bc:	3155      	adds	r1, #85	; 0x55
 80037be:	31ff      	adds	r1, #255	; 0xff
 80037c0:	60cb      	str	r3, [r1, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d906      	bls.n	80037d4 <USBD_LL_DataOutStage+0x58>
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	0001      	movs	r1, r0
 80037ca:	0020      	movs	r0, r4
 80037cc:	f000 fc59 	bl	8004082 <USBD_CtlContinueRx>
  return USBD_OK;
 80037d0:	2000      	movs	r0, #0
 80037d2:	e021      	b.n	8003818 <USBD_LL_DataOutStage+0x9c>
        USBD_CtlContinueRx(pdev, pdata,
 80037d4:	b292      	uxth	r2, r2
 80037d6:	e7f7      	b.n	80037c8 <USBD_LL_DataOutStage+0x4c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80037d8:	23ad      	movs	r3, #173	; 0xad
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	58e3      	ldr	r3, [r4, r3]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <USBD_LL_DataOutStage+0x76>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80037e4:	22a7      	movs	r2, #167	; 0xa7
 80037e6:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80037e8:	5ca2      	ldrb	r2, [r4, r2]
 80037ea:	2a03      	cmp	r2, #3
 80037ec:	d101      	bne.n	80037f2 <USBD_LL_DataOutStage+0x76>
          pdev->pClass->EP0_RxReady(pdev);
 80037ee:	0020      	movs	r0, r4
 80037f0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80037f2:	0020      	movs	r0, r4
 80037f4:	f000 fc4d 	bl	8004092 <USBD_CtlSendStatus>
  return USBD_OK;
 80037f8:	2000      	movs	r0, #0
 80037fa:	e00d      	b.n	8003818 <USBD_LL_DataOutStage+0x9c>
  else if ((pdev->pClass->DataOut != NULL) &&
 80037fc:	23ad      	movs	r3, #173	; 0xad
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	58e3      	ldr	r3, [r4, r3]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <USBD_LL_DataOutStage+0x9e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003808:	22a7      	movs	r2, #167	; 0xa7
 800380a:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800380c:	5ca2      	ldrb	r2, [r4, r2]
 800380e:	2a03      	cmp	r2, #3
 8003810:	d105      	bne.n	800381e <USBD_LL_DataOutStage+0xa2>
    pdev->pClass->DataOut(pdev, epnum);
 8003812:	0020      	movs	r0, r4
 8003814:	4798      	blx	r3
  return USBD_OK;
 8003816:	2000      	movs	r0, #0
}
 8003818:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800381a:	2002      	movs	r0, #2
 800381c:	e7fc      	b.n	8003818 <USBD_LL_DataOutStage+0x9c>
 800381e:	2002      	movs	r0, #2
 8003820:	e7fa      	b.n	8003818 <USBD_LL_DataOutStage+0x9c>

08003822 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	0004      	movs	r4, r0
 8003826:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003828:	2900      	cmp	r1, #0
 800382a:	d159      	bne.n	80038e0 <USBD_LL_DataInStage+0xbe>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800382c:	23a5      	movs	r3, #165	; 0xa5
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	58e3      	ldr	r3, [r4, r3]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d011      	beq.n	800385a <USBD_LL_DataInStage+0x38>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003836:	2204      	movs	r2, #4
 8003838:	4393      	bics	r3, r2
 800383a:	d103      	bne.n	8003844 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0020      	movs	r0, r4
 8003840:	f001 f82c 	bl	800489c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003844:	23a8      	movs	r3, #168	; 0xa8
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	5ce3      	ldrb	r3, [r4, r3]
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800384a:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800384c:	2b01      	cmp	r3, #1
 800384e:	d155      	bne.n	80038fc <USBD_LL_DataInStage+0xda>
      pdev->dev_test_mode = 0U;
 8003850:	23a8      	movs	r3, #168	; 0xa8
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	2200      	movs	r2, #0
 8003856:	54e2      	strb	r2, [r4, r3]
 8003858:	e050      	b.n	80038fc <USBD_LL_DataInStage+0xda>
      if (pep->rem_length > pep->maxpacket)
 800385a:	6a22      	ldr	r2, [r4, #32]
 800385c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800385e:	42aa      	cmp	r2, r5
 8003860:	d822      	bhi.n	80038a8 <USBD_LL_DataInStage+0x86>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003862:	69e6      	ldr	r6, [r4, #28]
 8003864:	0029      	movs	r1, r5
 8003866:	0030      	movs	r0, r6
 8003868:	f7fc fcd4 	bl	8000214 <__aeabi_uidivmod>
 800386c:	2900      	cmp	r1, #0
 800386e:	d106      	bne.n	800387e <USBD_LL_DataInStage+0x5c>
 8003870:	42b5      	cmp	r5, r6
 8003872:	d804      	bhi.n	800387e <USBD_LL_DataInStage+0x5c>
            (pep->total_length < pdev->ep0_data_len))
 8003874:	23a6      	movs	r3, #166	; 0xa6
 8003876:	009b      	lsls	r3, r3, #2
            (pep->total_length >= pep->maxpacket) &&
 8003878:	58e3      	ldr	r3, [r4, r3]
 800387a:	429e      	cmp	r6, r3
 800387c:	d322      	bcc.n	80038c4 <USBD_LL_DataInStage+0xa2>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800387e:	23ad      	movs	r3, #173	; 0xad
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	58e3      	ldr	r3, [r4, r3]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <USBD_LL_DataInStage+0x76>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800388a:	22a7      	movs	r2, #167	; 0xa7
 800388c:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800388e:	5ca2      	ldrb	r2, [r4, r2]
 8003890:	2a03      	cmp	r2, #3
 8003892:	d101      	bne.n	8003898 <USBD_LL_DataInStage+0x76>
            pdev->pClass->EP0_TxSent(pdev);
 8003894:	0020      	movs	r0, r4
 8003896:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	0020      	movs	r0, r4
 800389c:	f000 fffe 	bl	800489c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80038a0:	0020      	movs	r0, r4
 80038a2:	f000 fc02 	bl	80040aa <USBD_CtlReceiveStatus>
 80038a6:	e7cd      	b.n	8003844 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80038a8:	1b52      	subs	r2, r2, r5
 80038aa:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80038ac:	b292      	uxth	r2, r2
 80038ae:	0001      	movs	r1, r0
 80038b0:	0020      	movs	r0, r4
 80038b2:	f000 fbcd 	bl	8004050 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80038b6:	2300      	movs	r3, #0
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	0020      	movs	r0, r4
 80038be:	f001 f82a 	bl	8004916 <USBD_LL_PrepareReceive>
 80038c2:	e7bf      	b.n	8003844 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80038c4:	2200      	movs	r2, #0
 80038c6:	0020      	movs	r0, r4
 80038c8:	f000 fbc2 	bl	8004050 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80038cc:	23a6      	movs	r3, #166	; 0xa6
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	2200      	movs	r2, #0
 80038d2:	50e2      	str	r2, [r4, r3]
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80038d4:	2300      	movs	r3, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	0020      	movs	r0, r4
 80038da:	f001 f81c 	bl	8004916 <USBD_LL_PrepareReceive>
 80038de:	e7b1      	b.n	8003844 <USBD_LL_DataInStage+0x22>
  else if ((pdev->pClass->DataIn != NULL) &&
 80038e0:	23ad      	movs	r3, #173	; 0xad
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	58e3      	ldr	r3, [r4, r3]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <USBD_LL_DataInStage+0xdc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80038ec:	22a7      	movs	r2, #167	; 0xa7
 80038ee:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80038f0:	5ca2      	ldrb	r2, [r4, r2]
 80038f2:	2a03      	cmp	r2, #3
 80038f4:	d105      	bne.n	8003902 <USBD_LL_DataInStage+0xe0>
    pdev->pClass->DataIn(pdev, epnum);
 80038f6:	0020      	movs	r0, r4
 80038f8:	4798      	blx	r3
  return USBD_OK;
 80038fa:	2000      	movs	r0, #0
}
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80038fe:	2002      	movs	r0, #2
 8003900:	e7fc      	b.n	80038fc <USBD_LL_DataInStage+0xda>
 8003902:	2002      	movs	r0, #2
 8003904:	e7fa      	b.n	80038fc <USBD_LL_DataInStage+0xda>

08003906 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003906:	b570      	push	{r4, r5, r6, lr}
 8003908:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	f000 ffaf 	bl	8004872 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003914:	2501      	movs	r5, #1
 8003916:	23ac      	movs	r3, #172	; 0xac
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	50e5      	str	r5, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800391c:	2640      	movs	r6, #64	; 0x40
 800391e:	330c      	adds	r3, #12
 8003920:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003922:	3b25      	subs	r3, #37	; 0x25
 8003924:	3bff      	subs	r3, #255	; 0xff
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	0020      	movs	r0, r4
 800392c:	f000 ffa1 	bl	8004872 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003930:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003932:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003934:	23a7      	movs	r3, #167	; 0xa7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800393a:	2300      	movs	r3, #0
 800393c:	22a5      	movs	r2, #165	; 0xa5
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
 8003942:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003944:	3210      	adds	r2, #16
 8003946:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 8003948:	23ae      	movs	r3, #174	; 0xae
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	58e3      	ldr	r3, [r4, r3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003952:	23ad      	movs	r3, #173	; 0xad
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	58e3      	ldr	r3, [r4, r3]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2100      	movs	r1, #0
 800395c:	0020      	movs	r0, r4
 800395e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003960:	2000      	movs	r0, #0
 8003962:	bd70      	pop	{r4, r5, r6, pc}

08003964 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003964:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003966:	2000      	movs	r0, #0
 8003968:	4770      	bx	lr
	...

0800396c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800396c:	23a7      	movs	r3, #167	; 0xa7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	5cc1      	ldrb	r1, [r0, r3]
 8003972:	4a03      	ldr	r2, [pc, #12]	; (8003980 <USBD_LL_Suspend+0x14>)
 8003974:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003976:	2204      	movs	r2, #4
 8003978:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800397a:	2000      	movs	r0, #0
 800397c:	4770      	bx	lr
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	0000029d 	.word	0x0000029d

08003984 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003984:	23a7      	movs	r3, #167	; 0xa7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	5cc3      	ldrb	r3, [r0, r3]
 800398a:	2b04      	cmp	r3, #4
 800398c:	d001      	beq.n	8003992 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800398e:	2000      	movs	r0, #0
 8003990:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003992:	4b02      	ldr	r3, [pc, #8]	; (800399c <USBD_LL_Resume+0x18>)
 8003994:	5cc2      	ldrb	r2, [r0, r3]
 8003996:	3b01      	subs	r3, #1
 8003998:	54c2      	strb	r2, [r0, r3]
 800399a:	e7f8      	b.n	800398e <USBD_LL_Resume+0xa>
 800399c:	0000029d 	.word	0x0000029d

080039a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80039a0:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039a2:	23a7      	movs	r3, #167	; 0xa7
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	5cc3      	ldrb	r3, [r0, r3]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d001      	beq.n	80039b0 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80039ac:	2000      	movs	r0, #0
 80039ae:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 80039b0:	23ad      	movs	r3, #173	; 0xad
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	58c3      	ldr	r3, [r0, r3]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f7      	beq.n	80039ac <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80039bc:	4798      	blx	r3
 80039be:	e7f5      	b.n	80039ac <USBD_LL_SOF+0xc>

080039c0 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 80039c0:	780b      	ldrb	r3, [r1, #0]
 80039c2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80039c4:	784b      	ldrb	r3, [r1, #1]
 80039c6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80039c8:	78ca      	ldrb	r2, [r1, #3]
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	788b      	ldrb	r3, [r1, #2]
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80039d2:	794a      	ldrb	r2, [r1, #5]
 80039d4:	0212      	lsls	r2, r2, #8
 80039d6:	790b      	ldrb	r3, [r1, #4]
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80039dc:	79ca      	ldrb	r2, [r1, #7]
 80039de:	0212      	lsls	r2, r2, #8
 80039e0:	798b      	ldrb	r3, [r1, #6]
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	80c3      	strh	r3, [r0, #6]

}
 80039e6:	4770      	bx	lr

080039e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	f000 ff55 	bl	800489c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80039f2:	2100      	movs	r1, #0
 80039f4:	0020      	movs	r0, r4
 80039f6:	f000 ff51 	bl	800489c <USBD_LL_StallEP>
}
 80039fa:	bd10      	pop	{r4, pc}

080039fc <USBD_StdDevReq>:
{
 80039fc:	b530      	push	{r4, r5, lr}
 80039fe:	b083      	sub	sp, #12
 8003a00:	0005      	movs	r5, r0
 8003a02:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a04:	780a      	ldrb	r2, [r1, #0]
 8003a06:	2360      	movs	r3, #96	; 0x60
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d006      	beq.n	8003a1c <USBD_StdDevReq+0x20>
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d004      	beq.n	8003a1c <USBD_StdDevReq+0x20>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 8003a16:	f7ff ffe7 	bl	80039e8 <USBD_CtlError>
      break;
 8003a1a:	e006      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8003a1c:	23ad      	movs	r3, #173	; 0xad
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	58eb      	ldr	r3, [r5, r3]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	0021      	movs	r1, r4
 8003a26:	0028      	movs	r0, r5
 8003a28:	4798      	blx	r3
}
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	b003      	add	sp, #12
 8003a2e:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8003a30:	784b      	ldrb	r3, [r1, #1]
 8003a32:	2b09      	cmp	r3, #9
 8003a34:	d900      	bls.n	8003a38 <USBD_StdDevReq+0x3c>
 8003a36:	e1c5      	b.n	8003dc4 <USBD_StdDevReq+0x3c8>
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4abe      	ldr	r2, [pc, #760]	; (8003d34 <USBD_StdDevReq+0x338>)
 8003a3c:	58d3      	ldr	r3, [r2, r3]
 8003a3e:	469f      	mov	pc, r3
  uint16_t len = 0U;
 8003a40:	466b      	mov	r3, sp
 8003a42:	2200      	movs	r2, #0
 8003a44:	80da      	strh	r2, [r3, #6]
  switch (req->wValue >> 8)
 8003a46:	884a      	ldrh	r2, [r1, #2]
 8003a48:	0a13      	lsrs	r3, r2, #8
 8003a4a:	b299      	uxth	r1, r3
 8003a4c:	2907      	cmp	r1, #7
 8003a4e:	d900      	bls.n	8003a52 <USBD_StdDevReq+0x56>
 8003a50:	e0b5      	b.n	8003bbe <USBD_StdDevReq+0x1c2>
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	49b8      	ldr	r1, [pc, #736]	; (8003d38 <USBD_StdDevReq+0x33c>)
 8003a56:	58cb      	ldr	r3, [r1, r3]
 8003a58:	469f      	mov	pc, r3
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a5a:	7c00      	ldrb	r0, [r0, #16]
 8003a5c:	23ac      	movs	r3, #172	; 0xac
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	58eb      	ldr	r3, [r5, r3]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	466a      	mov	r2, sp
 8003a66:	1d91      	adds	r1, r2, #6
 8003a68:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003a6a:	466b      	mov	r3, sp
 8003a6c:	3306      	adds	r3, #6
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d100      	bne.n	8003a76 <USBD_StdDevReq+0x7a>
 8003a74:	e0b3      	b.n	8003bde <USBD_StdDevReq+0x1e2>
 8003a76:	88e2      	ldrh	r2, [r4, #6]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d000      	beq.n	8003a7e <USBD_StdDevReq+0x82>
 8003a7c:	e0a4      	b.n	8003bc8 <USBD_StdDevReq+0x1cc>
      (void)USBD_CtlSendStatus(pdev);
 8003a7e:	0028      	movs	r0, r5
 8003a80:	f000 fb07 	bl	8004092 <USBD_CtlSendStatus>
 8003a84:	e7d1      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a86:	7c03      	ldrb	r3, [r0, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <USBD_StdDevReq+0xa4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003a8c:	23ad      	movs	r3, #173	; 0xad
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	58c3      	ldr	r3, [r0, r3]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	466a      	mov	r2, sp
 8003a96:	1d90      	adds	r0, r2, #6
 8003a98:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	7043      	strb	r3, [r0, #1]
 8003a9e:	e7e4      	b.n	8003a6a <USBD_StdDevReq+0x6e>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003aa0:	23ad      	movs	r3, #173	; 0xad
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	58c3      	ldr	r3, [r0, r3]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	466a      	mov	r2, sp
 8003aaa:	1d90      	adds	r0, r2, #6
 8003aac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	7043      	strb	r3, [r0, #1]
 8003ab2:	e7da      	b.n	8003a6a <USBD_StdDevReq+0x6e>
      switch ((uint8_t)(req->wValue))
 8003ab4:	b2d3      	uxtb	r3, r2
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d85d      	bhi.n	8003b76 <USBD_StdDevReq+0x17a>
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	4b9f      	ldr	r3, [pc, #636]	; (8003d3c <USBD_StdDevReq+0x340>)
 8003abe:	589b      	ldr	r3, [r3, r2]
 8003ac0:	469f      	mov	pc, r3
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003ac2:	23ac      	movs	r3, #172	; 0xac
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	58c3      	ldr	r3, [r0, r3]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <USBD_StdDevReq+0xdc>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003ace:	7c00      	ldrb	r0, [r0, #16]
 8003ad0:	466a      	mov	r2, sp
 8003ad2:	1d91      	adds	r1, r2, #6
 8003ad4:	4798      	blx	r3
 8003ad6:	e7c8      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003ad8:	0021      	movs	r1, r4
 8003ada:	f7ff ff85 	bl	80039e8 <USBD_CtlError>
 8003ade:	e7a4      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003ae0:	23ac      	movs	r3, #172	; 0xac
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	58c3      	ldr	r3, [r0, r3]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003aec:	7c00      	ldrb	r0, [r0, #16]
 8003aee:	466a      	mov	r2, sp
 8003af0:	1d91      	adds	r1, r2, #6
 8003af2:	4798      	blx	r3
 8003af4:	e7b9      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003af6:	0021      	movs	r1, r4
 8003af8:	f7ff ff76 	bl	80039e8 <USBD_CtlError>
 8003afc:	e795      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003afe:	23ac      	movs	r3, #172	; 0xac
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	58c3      	ldr	r3, [r0, r3]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <USBD_StdDevReq+0x118>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003b0a:	7c00      	ldrb	r0, [r0, #16]
 8003b0c:	466a      	mov	r2, sp
 8003b0e:	1d91      	adds	r1, r2, #6
 8003b10:	4798      	blx	r3
 8003b12:	e7aa      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b14:	0021      	movs	r1, r4
 8003b16:	f7ff ff67 	bl	80039e8 <USBD_CtlError>
 8003b1a:	e786      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003b1c:	23ac      	movs	r3, #172	; 0xac
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	58c3      	ldr	r3, [r0, r3]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <USBD_StdDevReq+0x136>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003b28:	7c00      	ldrb	r0, [r0, #16]
 8003b2a:	466a      	mov	r2, sp
 8003b2c:	1d91      	adds	r1, r2, #6
 8003b2e:	4798      	blx	r3
 8003b30:	e79b      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b32:	0021      	movs	r1, r4
 8003b34:	f7ff ff58 	bl	80039e8 <USBD_CtlError>
 8003b38:	e777      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003b3a:	23ac      	movs	r3, #172	; 0xac
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	58c3      	ldr	r3, [r0, r3]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <USBD_StdDevReq+0x154>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003b46:	7c00      	ldrb	r0, [r0, #16]
 8003b48:	466a      	mov	r2, sp
 8003b4a:	1d91      	adds	r1, r2, #6
 8003b4c:	4798      	blx	r3
 8003b4e:	e78c      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b50:	0021      	movs	r1, r4
 8003b52:	f7ff ff49 	bl	80039e8 <USBD_CtlError>
 8003b56:	e768      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b58:	23ac      	movs	r3, #172	; 0xac
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	58c3      	ldr	r3, [r0, r3]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <USBD_StdDevReq+0x172>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b64:	7c00      	ldrb	r0, [r0, #16]
 8003b66:	466a      	mov	r2, sp
 8003b68:	1d91      	adds	r1, r2, #6
 8003b6a:	4798      	blx	r3
 8003b6c:	e77d      	b.n	8003a6a <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b6e:	0021      	movs	r1, r4
 8003b70:	f7ff ff3a 	bl	80039e8 <USBD_CtlError>
 8003b74:	e759      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 8003b76:	0021      	movs	r1, r4
 8003b78:	f7ff ff36 	bl	80039e8 <USBD_CtlError>
 8003b7c:	e755      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b7e:	7c03      	ldrb	r3, [r0, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <USBD_StdDevReq+0x198>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003b84:	23ad      	movs	r3, #173	; 0xad
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	58c3      	ldr	r3, [r0, r3]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	466a      	mov	r2, sp
 8003b8e:	1d90      	adds	r0, r2, #6
 8003b90:	4798      	blx	r3
 8003b92:	e76a      	b.n	8003a6a <USBD_StdDevReq+0x6e>
        USBD_CtlError(pdev, req);
 8003b94:	0021      	movs	r1, r4
 8003b96:	f7ff ff27 	bl	80039e8 <USBD_CtlError>
 8003b9a:	e746      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b9c:	7c03      	ldrb	r3, [r0, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <USBD_StdDevReq+0x1ba>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003ba2:	23ad      	movs	r3, #173	; 0xad
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	58c3      	ldr	r3, [r0, r3]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	466a      	mov	r2, sp
 8003bac:	1d90      	adds	r0, r2, #6
 8003bae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	7043      	strb	r3, [r0, #1]
 8003bb4:	e759      	b.n	8003a6a <USBD_StdDevReq+0x6e>
        USBD_CtlError(pdev, req);
 8003bb6:	0021      	movs	r1, r4
 8003bb8:	f7ff ff16 	bl	80039e8 <USBD_CtlError>
 8003bbc:	e735      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003bbe:	0021      	movs	r1, r4
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	f7ff ff11 	bl	80039e8 <USBD_CtlError>
 8003bc6:	e730      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      len = MIN(len, req->wLength);
 8003bc8:	1c19      	adds	r1, r3, #0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d900      	bls.n	8003bd0 <USBD_StdDevReq+0x1d4>
 8003bce:	1c11      	adds	r1, r2, #0
 8003bd0:	b28a      	uxth	r2, r1
 8003bd2:	466b      	mov	r3, sp
 8003bd4:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003bd6:	0001      	movs	r1, r0
 8003bd8:	0028      	movs	r0, r5
 8003bda:	f000 fa2b 	bl	8004034 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003bde:	88e3      	ldrh	r3, [r4, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d000      	beq.n	8003be6 <USBD_StdDevReq+0x1ea>
 8003be4:	e721      	b.n	8003a2a <USBD_StdDevReq+0x2e>
 8003be6:	e74a      	b.n	8003a7e <USBD_StdDevReq+0x82>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003be8:	888b      	ldrh	r3, [r1, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d123      	bne.n	8003c36 <USBD_StdDevReq+0x23a>
 8003bee:	88cb      	ldrh	r3, [r1, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d120      	bne.n	8003c36 <USBD_StdDevReq+0x23a>
 8003bf4:	884b      	ldrh	r3, [r1, #2]
 8003bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf8:	d81d      	bhi.n	8003c36 <USBD_StdDevReq+0x23a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003bfa:	22a7      	movs	r2, #167	; 0xa7
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	5c82      	ldrb	r2, [r0, r2]
 8003c00:	2a03      	cmp	r2, #3
 8003c02:	d010      	beq.n	8003c26 <USBD_StdDevReq+0x22a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003c04:	247f      	movs	r4, #127	; 0x7f
 8003c06:	401c      	ands	r4, r3
      pdev->dev_address = dev_addr;
 8003c08:	4b4d      	ldr	r3, [pc, #308]	; (8003d40 <USBD_StdDevReq+0x344>)
 8003c0a:	54c4      	strb	r4, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003c0c:	0021      	movs	r1, r4
 8003c0e:	f000 fe70 	bl	80048f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003c12:	0028      	movs	r0, r5
 8003c14:	f000 fa3d 	bl	8004092 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003c18:	2c00      	cmp	r4, #0
 8003c1a:	d007      	beq.n	8003c2c <USBD_StdDevReq+0x230>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c1c:	23a7      	movs	r3, #167	; 0xa7
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	2202      	movs	r2, #2
 8003c22:	54ea      	strb	r2, [r5, r3]
 8003c24:	e701      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003c26:	f7ff fedf 	bl	80039e8 <USBD_CtlError>
 8003c2a:	e6fe      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003c2c:	23a7      	movs	r3, #167	; 0xa7
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	2201      	movs	r2, #1
 8003c32:	54ea      	strb	r2, [r5, r3]
 8003c34:	e6f9      	b.n	8003a2a <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003c36:	0021      	movs	r1, r4
 8003c38:	0028      	movs	r0, r5
 8003c3a:	f7ff fed5 	bl	80039e8 <USBD_CtlError>
 8003c3e:	e6f4      	b.n	8003a2a <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 8003c40:	7889      	ldrb	r1, [r1, #2]
 8003c42:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <USBD_StdDevReq+0x348>)
 8003c44:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003c46:	2901      	cmp	r1, #1
 8003c48:	d80f      	bhi.n	8003c6a <USBD_StdDevReq+0x26e>
    switch (pdev->dev_state)
 8003c4a:	23a7      	movs	r3, #167	; 0xa7
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	5cc3      	ldrb	r3, [r0, r3]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d00e      	beq.n	8003c72 <USBD_StdDevReq+0x276>
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d023      	beq.n	8003ca0 <USBD_StdDevReq+0x2a4>
        USBD_CtlError(pdev, req);
 8003c58:	0021      	movs	r1, r4
 8003c5a:	f7ff fec5 	bl	80039e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <USBD_StdDevReq+0x348>)
 8003c60:	7819      	ldrb	r1, [r3, #0]
 8003c62:	0028      	movs	r0, r5
 8003c64:	f7ff fd50 	bl	8003708 <USBD_ClrClassConfig>
 8003c68:	e6df      	b.n	8003a2a <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003c6a:	0021      	movs	r1, r4
 8003c6c:	f7ff febc 	bl	80039e8 <USBD_CtlError>
 8003c70:	e6db      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        if (cfgidx)
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d011      	beq.n	8003c9a <USBD_StdDevReq+0x29e>
          pdev->dev_config = cfgidx;
 8003c76:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c78:	23a7      	movs	r3, #167	; 0xa7
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	54c2      	strb	r2, [r0, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003c80:	f7ff fd34 	bl	80036ec <USBD_SetClassConfig>
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d003      	beq.n	8003c90 <USBD_StdDevReq+0x294>
          USBD_CtlSendStatus(pdev);
 8003c88:	0028      	movs	r0, r5
 8003c8a:	f000 fa02 	bl	8004092 <USBD_CtlSendStatus>
 8003c8e:	e6cc      	b.n	8003a2a <USBD_StdDevReq+0x2e>
            USBD_CtlError(pdev, req);
 8003c90:	0021      	movs	r1, r4
 8003c92:	0028      	movs	r0, r5
 8003c94:	f7ff fea8 	bl	80039e8 <USBD_CtlError>
 8003c98:	e6c7      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          USBD_CtlSendStatus(pdev);
 8003c9a:	f000 f9fa 	bl	8004092 <USBD_CtlSendStatus>
 8003c9e:	e6c4      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        if (cfgidx == 0U)
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d011      	beq.n	8003cc8 <USBD_StdDevReq+0x2cc>
        else if (cfgidx != pdev->dev_config)
 8003ca4:	6843      	ldr	r3, [r0, #4]
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	d01f      	beq.n	8003cea <USBD_StdDevReq+0x2ee>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003caa:	b2d9      	uxtb	r1, r3
 8003cac:	f7ff fd2c 	bl	8003708 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <USBD_StdDevReq+0x348>)
 8003cb2:	7819      	ldrb	r1, [r3, #0]
 8003cb4:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003cb6:	0028      	movs	r0, r5
 8003cb8:	f7ff fd18 	bl	80036ec <USBD_SetClassConfig>
 8003cbc:	2802      	cmp	r0, #2
 8003cbe:	d00f      	beq.n	8003ce0 <USBD_StdDevReq+0x2e4>
          USBD_CtlSendStatus(pdev);
 8003cc0:	0028      	movs	r0, r5
 8003cc2:	f000 f9e6 	bl	8004092 <USBD_CtlSendStatus>
 8003cc6:	e6b0      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003cc8:	23a7      	movs	r3, #167	; 0xa7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	2202      	movs	r2, #2
 8003cce:	54c2      	strb	r2, [r0, r3]
          pdev->dev_config = cfgidx;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6043      	str	r3, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003cd4:	f7ff fd18 	bl	8003708 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003cd8:	0028      	movs	r0, r5
 8003cda:	f000 f9da 	bl	8004092 <USBD_CtlSendStatus>
 8003cde:	e6a4      	b.n	8003a2a <USBD_StdDevReq+0x2e>
            USBD_CtlError(pdev, req);
 8003ce0:	0021      	movs	r1, r4
 8003ce2:	0028      	movs	r0, r5
 8003ce4:	f7ff fe80 	bl	80039e8 <USBD_CtlError>
 8003ce8:	e69f      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          USBD_CtlSendStatus(pdev);
 8003cea:	f000 f9d2 	bl	8004092 <USBD_CtlSendStatus>
 8003cee:	e69c      	b.n	8003a2a <USBD_StdDevReq+0x2e>
  if (req->wLength != 1U)
 8003cf0:	88cb      	ldrh	r3, [r1, #6]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10e      	bne.n	8003d14 <USBD_StdDevReq+0x318>
    switch (pdev->dev_state)
 8003cf6:	23a7      	movs	r3, #167	; 0xa7
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	5cc3      	ldrb	r3, [r0, r3]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <USBD_StdDevReq+0x32e>
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	2a02      	cmp	r2, #2
 8003d04:	d909      	bls.n	8003d1a <USBD_StdDevReq+0x31e>
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d10f      	bne.n	8003d2a <USBD_StdDevReq+0x32e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003d0a:	1d01      	adds	r1, r0, #4
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f000 f991 	bl	8004034 <USBD_CtlSendData>
 8003d12:	e68a      	b.n	8003a2a <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003d14:	f7ff fe68 	bl	80039e8 <USBD_CtlError>
 8003d18:	e687      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        pdev->dev_default_config = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003d1e:	0001      	movs	r1, r0
 8003d20:	3108      	adds	r1, #8
 8003d22:	2201      	movs	r2, #1
 8003d24:	f000 f986 	bl	8004034 <USBD_CtlSendData>
 8003d28:	e67f      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 8003d2a:	0021      	movs	r1, r4
 8003d2c:	0028      	movs	r0, r5
 8003d2e:	f7ff fe5b 	bl	80039e8 <USBD_CtlError>
 8003d32:	e67a      	b.n	8003a2a <USBD_StdDevReq+0x2e>
 8003d34:	08004dc0 	.word	0x08004dc0
 8003d38:	08004de8 	.word	0x08004de8
 8003d3c:	08004e08 	.word	0x08004e08
 8003d40:	0000029e 	.word	0x0000029e
 8003d44:	20000194 	.word	0x20000194
  switch (pdev->dev_state)
 8003d48:	23a7      	movs	r3, #167	; 0xa7
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	5cc3      	ldrb	r3, [r0, r3]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d815      	bhi.n	8003d80 <USBD_StdDevReq+0x384>
      if (req->wLength != 0x2U)
 8003d54:	88cb      	ldrh	r3, [r1, #6]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d10f      	bne.n	8003d7a <USBD_StdDevReq+0x37e>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003d5e:	23a9      	movs	r3, #169	; 0xa9
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	58c3      	ldr	r3, [r0, r3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <USBD_StdDevReq+0x370>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	310c      	adds	r1, #12
 8003d70:	2202      	movs	r2, #2
 8003d72:	0028      	movs	r0, r5
 8003d74:	f000 f95e 	bl	8004034 <USBD_CtlSendData>
 8003d78:	e657      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 8003d7a:	f7ff fe35 	bl	80039e8 <USBD_CtlError>
 8003d7e:	e654      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003d80:	f7ff fe32 	bl	80039e8 <USBD_CtlError>
 8003d84:	e651      	b.n	8003a2a <USBD_StdDevReq+0x2e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003d86:	884b      	ldrh	r3, [r1, #2]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d000      	beq.n	8003d8e <USBD_StdDevReq+0x392>
 8003d8c:	e64d      	b.n	8003a2a <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 8003d8e:	23a9      	movs	r3, #169	; 0xa9
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	2201      	movs	r2, #1
 8003d94:	50c2      	str	r2, [r0, r3]
    USBD_CtlSendStatus(pdev);
 8003d96:	f000 f97c 	bl	8004092 <USBD_CtlSendStatus>
 8003d9a:	e646      	b.n	8003a2a <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 8003d9c:	23a7      	movs	r3, #167	; 0xa7
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	5cc3      	ldrb	r3, [r0, r3]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d80a      	bhi.n	8003dbe <USBD_StdDevReq+0x3c2>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003da8:	884b      	ldrh	r3, [r1, #2]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d000      	beq.n	8003db0 <USBD_StdDevReq+0x3b4>
 8003dae:	e63c      	b.n	8003a2a <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 8003db0:	23a9      	movs	r3, #169	; 0xa9
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	2200      	movs	r2, #0
 8003db6:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 8003db8:	f000 f96b 	bl	8004092 <USBD_CtlSendStatus>
 8003dbc:	e635      	b.n	8003a2a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003dbe:	f7ff fe13 	bl	80039e8 <USBD_CtlError>
 8003dc2:	e632      	b.n	8003a2a <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 8003dc4:	0021      	movs	r1, r4
 8003dc6:	0028      	movs	r0, r5
 8003dc8:	f7ff fe0e 	bl	80039e8 <USBD_CtlError>
          break;
 8003dcc:	e62d      	b.n	8003a2a <USBD_StdDevReq+0x2e>
 8003dce:	46c0      	nop			; (mov r8, r8)

08003dd0 <USBD_StdItfReq>:
{
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0005      	movs	r5, r0
 8003dd4:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dd6:	780a      	ldrb	r2, [r1, #0]
 8003dd8:	2360      	movs	r3, #96	; 0x60
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d007      	beq.n	8003df0 <USBD_StdItfReq+0x20>
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d005      	beq.n	8003df0 <USBD_StdItfReq+0x20>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8003de8:	f7ff fdfe 	bl	80039e8 <USBD_CtlError>
}
 8003dec:	2000      	movs	r0, #0
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8003df0:	23a7      	movs	r3, #167	; 0xa7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	5ceb      	ldrb	r3, [r5, r3]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d817      	bhi.n	8003e2c <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003dfc:	7923      	ldrb	r3, [r4, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d80f      	bhi.n	8003e22 <USBD_StdItfReq+0x52>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e02:	23ad      	movs	r3, #173	; 0xad
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	58eb      	ldr	r3, [r5, r3]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	0028      	movs	r0, r5
 8003e0e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003e10:	88e3      	ldrh	r3, [r4, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ea      	bne.n	8003dec <USBD_StdItfReq+0x1c>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d1e8      	bne.n	8003dec <USBD_StdItfReq+0x1c>
              USBD_CtlSendStatus(pdev);
 8003e1a:	0028      	movs	r0, r5
 8003e1c:	f000 f939 	bl	8004092 <USBD_CtlSendStatus>
 8003e20:	e7e4      	b.n	8003dec <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8003e22:	0021      	movs	r1, r4
 8003e24:	0028      	movs	r0, r5
 8003e26:	f7ff fddf 	bl	80039e8 <USBD_CtlError>
 8003e2a:	e7df      	b.n	8003dec <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8003e2c:	0021      	movs	r1, r4
 8003e2e:	0028      	movs	r0, r5
 8003e30:	f7ff fdda 	bl	80039e8 <USBD_CtlError>
          break;
 8003e34:	e7da      	b.n	8003dec <USBD_StdItfReq+0x1c>

08003e36 <USBD_StdEPReq>:
{
 8003e36:	b570      	push	{r4, r5, r6, lr}
 8003e38:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e3a:	780a      	ldrb	r2, [r1, #0]
 8003e3c:	2360      	movs	r3, #96	; 0x60
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d006      	beq.n	8003e52 <USBD_StdEPReq+0x1c>
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d004      	beq.n	8003e52 <USBD_StdEPReq+0x1c>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <USBD_StdEPReq+0x2c>
      USBD_CtlError(pdev, req);
 8003e4c:	f7ff fdcc 	bl	80039e8 <USBD_CtlError>
      break;
 8003e50:	e005      	b.n	8003e5e <USBD_StdEPReq+0x28>
      pdev->pClass->Setup(pdev, req);
 8003e52:	23ad      	movs	r3, #173	; 0xad
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	58e3      	ldr	r3, [r4, r3]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0020      	movs	r0, r4
 8003e5c:	4798      	blx	r3
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8003e62:	888a      	ldrh	r2, [r1, #4]
 8003e64:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8003e66:	784b      	ldrb	r3, [r1, #1]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d02f      	beq.n	8003ecc <USBD_StdEPReq+0x96>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d055      	beq.n	8003f1c <USBD_StdEPReq+0xe6>
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d000      	beq.n	8003e76 <USBD_StdEPReq+0x40>
 8003e74:	e0b6      	b.n	8003fe4 <USBD_StdEPReq+0x1ae>
          switch (pdev->dev_state)
 8003e76:	23a7      	movs	r3, #167	; 0xa7
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	5ce3      	ldrb	r3, [r4, r3]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d005      	beq.n	8003e8c <USBD_StdEPReq+0x56>
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d012      	beq.n	8003eaa <USBD_StdEPReq+0x74>
              USBD_CtlError(pdev, req);
 8003e84:	0020      	movs	r0, r4
 8003e86:	f7ff fdaf 	bl	80039e8 <USBD_CtlError>
              break;
 8003e8a:	e7e8      	b.n	8003e5e <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e8c:	0643      	lsls	r3, r0, #25
 8003e8e:	d008      	beq.n	8003ea2 <USBD_StdEPReq+0x6c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003e90:	0001      	movs	r1, r0
 8003e92:	0020      	movs	r0, r4
 8003e94:	f000 fd02 	bl	800489c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f000 fcfe 	bl	800489c <USBD_LL_StallEP>
 8003ea0:	e7dd      	b.n	8003e5e <USBD_StdEPReq+0x28>
                USBD_CtlError(pdev, req);
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7ff fda0 	bl	80039e8 <USBD_CtlError>
 8003ea8:	e7d9      	b.n	8003e5e <USBD_StdEPReq+0x28>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003eaa:	884b      	ldrh	r3, [r1, #2]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8003eb0:	0643      	lsls	r3, r0, #25
 8003eb2:	d002      	beq.n	8003eba <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003eb4:	88cb      	ldrh	r3, [r1, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8003eba:	0020      	movs	r0, r4
 8003ebc:	f000 f8e9 	bl	8004092 <USBD_CtlSendStatus>
              break;
 8003ec0:	e7cd      	b.n	8003e5e <USBD_StdEPReq+0x28>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003ec2:	0001      	movs	r1, r0
 8003ec4:	0020      	movs	r0, r4
 8003ec6:	f000 fce9 	bl	800489c <USBD_LL_StallEP>
 8003eca:	e7f6      	b.n	8003eba <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8003ecc:	23a7      	movs	r3, #167	; 0xa7
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	5ce3      	ldrb	r3, [r4, r3]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d005      	beq.n	8003ee2 <USBD_StdEPReq+0xac>
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d012      	beq.n	8003f00 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7ff fd84 	bl	80039e8 <USBD_CtlError>
              break;
 8003ee0:	e7bd      	b.n	8003e5e <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ee2:	0643      	lsls	r3, r0, #25
 8003ee4:	d008      	beq.n	8003ef8 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8003ee6:	0001      	movs	r1, r0
 8003ee8:	0020      	movs	r0, r4
 8003eea:	f000 fcd7 	bl	800489c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	0020      	movs	r0, r4
 8003ef2:	f000 fcd3 	bl	800489c <USBD_LL_StallEP>
 8003ef6:	e7b2      	b.n	8003e5e <USBD_StdEPReq+0x28>
                USBD_CtlError(pdev, req);
 8003ef8:	0020      	movs	r0, r4
 8003efa:	f7ff fd75 	bl	80039e8 <USBD_CtlError>
 8003efe:	e7ae      	b.n	8003e5e <USBD_StdEPReq+0x28>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f00:	884b      	ldrh	r3, [r1, #2]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ab      	bne.n	8003e5e <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003f06:	0643      	lsls	r3, r0, #25
 8003f08:	d103      	bne.n	8003f12 <USBD_StdEPReq+0xdc>
                USBD_CtlSendStatus(pdev);
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f000 f8c1 	bl	8004092 <USBD_CtlSendStatus>
 8003f10:	e7a5      	b.n	8003e5e <USBD_StdEPReq+0x28>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f12:	0001      	movs	r1, r0
 8003f14:	0020      	movs	r0, r4
 8003f16:	f000 fcca 	bl	80048ae <USBD_LL_ClearStallEP>
 8003f1a:	e7f6      	b.n	8003f0a <USBD_StdEPReq+0xd4>
          switch (pdev->dev_state)
 8003f1c:	23a7      	movs	r3, #167	; 0xa7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	5ce3      	ldrb	r3, [r4, r3]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d005      	beq.n	8003f32 <USBD_StdEPReq+0xfc>
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d018      	beq.n	8003f5c <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f7ff fd5c 	bl	80039e8 <USBD_CtlError>
              break;
 8003f30:	e795      	b.n	8003e5e <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f32:	0643      	lsls	r3, r0, #25
 8003f34:	d003      	beq.n	8003f3e <USBD_StdEPReq+0x108>
                USBD_CtlError(pdev, req);
 8003f36:	0020      	movs	r0, r4
 8003f38:	f7ff fd56 	bl	80039e8 <USBD_CtlError>
                break;
 8003f3c:	e78f      	b.n	8003e5e <USBD_StdEPReq+0x28>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f3e:	0021      	movs	r1, r4
 8003f40:	3155      	adds	r1, #85	; 0x55
 8003f42:	31ff      	adds	r1, #255	; 0xff
 8003f44:	0613      	lsls	r3, r2, #24
 8003f46:	d406      	bmi.n	8003f56 <USBD_StdEPReq+0x120>
              pep->status = 0x0000U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	0020      	movs	r0, r4
 8003f50:	f000 f870 	bl	8004034 <USBD_CtlSendData>
              break;
 8003f54:	e783      	b.n	8003e5e <USBD_StdEPReq+0x28>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f56:	3941      	subs	r1, #65	; 0x41
 8003f58:	39ff      	subs	r1, #255	; 0xff
 8003f5a:	e7f5      	b.n	8003f48 <USBD_StdEPReq+0x112>
              if ((ep_addr & 0x80U) == 0x80U)
 8003f5c:	0613      	lsls	r3, r2, #24
 8003f5e:	d41c      	bmi.n	8003f9a <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003f60:	220f      	movs	r2, #15
 8003f62:	4002      	ands	r2, r0
 8003f64:	0093      	lsls	r3, r2, #2
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	18e3      	adds	r3, r4, r3
 8003f6c:	3359      	adds	r3, #89	; 0x59
 8003f6e:	33ff      	adds	r3, #255	; 0xff
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d026      	beq.n	8003fc4 <USBD_StdEPReq+0x18e>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003f76:	237f      	movs	r3, #127	; 0x7f
 8003f78:	4003      	ands	r3, r0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f7a:	009d      	lsls	r5, r3, #2
 8003f7c:	18ed      	adds	r5, r5, r3
 8003f7e:	00ad      	lsls	r5, r5, #2
 8003f80:	3555      	adds	r5, #85	; 0x55
 8003f82:	35ff      	adds	r5, #255	; 0xff
 8003f84:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003f86:	0643      	lsls	r3, r0, #25
 8003f88:	d120      	bne.n	8003fcc <USBD_StdEPReq+0x196>
                pep->status = 0x0000U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f8e:	2202      	movs	r2, #2
 8003f90:	0029      	movs	r1, r5
 8003f92:	0020      	movs	r0, r4
 8003f94:	f000 f84e 	bl	8004034 <USBD_CtlSendData>
              break;
 8003f98:	e761      	b.n	8003e5e <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	4002      	ands	r2, r0
 8003f9e:	0093      	lsls	r3, r2, #2
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	18e3      	adds	r3, r4, r3
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <USBD_StdEPReq+0x186>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fac:	257f      	movs	r5, #127	; 0x7f
 8003fae:	4005      	ands	r5, r0
 8003fb0:	1c6b      	adds	r3, r5, #1
 8003fb2:	009d      	lsls	r5, r3, #2
 8003fb4:	18ed      	adds	r5, r5, r3
 8003fb6:	00ad      	lsls	r5, r5, #2
 8003fb8:	1965      	adds	r5, r4, r5
 8003fba:	e7e4      	b.n	8003f86 <USBD_StdEPReq+0x150>
                  USBD_CtlError(pdev, req);
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7ff fd13 	bl	80039e8 <USBD_CtlError>
                  break;
 8003fc2:	e74c      	b.n	8003e5e <USBD_StdEPReq+0x28>
                  USBD_CtlError(pdev, req);
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	f7ff fd0f 	bl	80039e8 <USBD_CtlError>
                  break;
 8003fca:	e748      	b.n	8003e5e <USBD_StdEPReq+0x28>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003fcc:	0001      	movs	r1, r0
 8003fce:	0020      	movs	r0, r4
 8003fd0:	f000 fc76 	bl	80048c0 <USBD_LL_IsStallEP>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d002      	beq.n	8003fde <USBD_StdEPReq+0x1a8>
                pep->status = 0x0001U;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	e7d7      	b.n	8003f8e <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	e7d4      	b.n	8003f8e <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8003fe4:	0020      	movs	r0, r4
 8003fe6:	f7ff fcff 	bl	80039e8 <USBD_CtlError>
          break;
 8003fea:	e738      	b.n	8003e5e <USBD_StdEPReq+0x28>

08003fec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003fec:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d01f      	beq.n	8004032 <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003ff2:	7803      	ldrb	r3, [r0, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <USBD_GetString+0x1c>
 8003ff8:	0004      	movs	r4, r0
  uint8_t  len = 0U;
 8003ffa:	2300      	movs	r3, #0
  {
    len++;
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
    buf++;
 8004000:	3401      	adds	r4, #1
  while (*buf != '\0')
 8004002:	7825      	ldrb	r5, [r4, #0]
 8004004:	2d00      	cmp	r5, #0
 8004006:	d1f9      	bne.n	8003ffc <USBD_GetString+0x10>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004008:	3301      	adds	r3, #1
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800400e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004010:	2303      	movs	r3, #3
 8004012:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8004014:	7804      	ldrb	r4, [r0, #0]
 8004016:	2c00      	cmp	r4, #0
 8004018:	d00b      	beq.n	8004032 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800401a:	3b01      	subs	r3, #1
      unicode[idx++] =  0U;
 800401c:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800401e:	3001      	adds	r0, #1
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8004026:	3302      	adds	r3, #2
 8004028:	b2db      	uxtb	r3, r3
 800402a:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800402c:	7804      	ldrb	r4, [r0, #0]
 800402e:	2c00      	cmp	r4, #0
 8004030:	d1f5      	bne.n	800401e <USBD_GetString+0x32>
}
 8004032:	bd30      	pop	{r4, r5, pc}

08004034 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004034:	b510      	push	{r4, lr}
 8004036:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004038:	22a5      	movs	r2, #165	; 0xa5
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	2402      	movs	r4, #2
 800403e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8004040:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004042:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004044:	000a      	movs	r2, r1
 8004046:	2100      	movs	r1, #0
 8004048:	f000 fc5c 	bl	8004904 <USBD_LL_Transmit>

  return USBD_OK;
}
 800404c:	2000      	movs	r0, #0
 800404e:	bd10      	pop	{r4, pc}

08004050 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004050:	b510      	push	{r4, lr}
 8004052:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004054:	000a      	movs	r2, r1
 8004056:	2100      	movs	r1, #0
 8004058:	f000 fc54 	bl	8004904 <USBD_LL_Transmit>

  return USBD_OK;
}
 800405c:	2000      	movs	r0, #0
 800405e:	bd10      	pop	{r4, pc}

08004060 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004060:	b510      	push	{r4, lr}
 8004062:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004064:	22a5      	movs	r2, #165	; 0xa5
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	2403      	movs	r4, #3
 800406a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 800406c:	3a39      	subs	r2, #57	; 0x39
 800406e:	3aff      	subs	r2, #255	; 0xff
 8004070:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8004072:	3204      	adds	r2, #4
 8004074:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004076:	000a      	movs	r2, r1
 8004078:	2100      	movs	r1, #0
 800407a:	f000 fc4c 	bl	8004916 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800407e:	2000      	movs	r0, #0
 8004080:	bd10      	pop	{r4, pc}

08004082 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004082:	b510      	push	{r4, lr}
 8004084:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004086:	000a      	movs	r2, r1
 8004088:	2100      	movs	r1, #0
 800408a:	f000 fc44 	bl	8004916 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800408e:	2000      	movs	r0, #0
 8004090:	bd10      	pop	{r4, pc}

08004092 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004092:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004094:	23a5      	movs	r3, #165	; 0xa5
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	2204      	movs	r2, #4
 800409a:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	f000 fc2f 	bl	8004904 <USBD_LL_Transmit>

  return USBD_OK;
}
 80040a6:	2000      	movs	r0, #0
 80040a8:	bd10      	pop	{r4, pc}

080040aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80040aa:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80040ac:	23a5      	movs	r3, #165	; 0xa5
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	2205      	movs	r2, #5
 80040b2:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040b4:	2300      	movs	r3, #0
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	f000 fc2c 	bl	8004916 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040be:	2000      	movs	r0, #0
 80040c0:	bd10      	pop	{r4, pc}

080040c2 <baca_protocol_encode>:
 *	@param payload_size length of the payload buffer
 *	@param data_id ID of the device which sends the payload
 *	@return The lenght of the baca buffer. Generaly, it should be payload_size + 4
 */
uint8_t baca_protocol_encode(uint8_t* buffer, uint8_t* payload, uint8_t payload_size, uint8_t data_id)
{
 80040c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t checksum = (uint8_t) 'b';
  uint8_t buffer_length = 0;
  checksum += payload_size + 1;
 80040c4:	0016      	movs	r6, r2
 80040c6:	3663      	adds	r6, #99	; 0x63
 80040c8:	b2f6      	uxtb	r6, r6

  buffer[buffer_length++] = 'b';
 80040ca:	2462      	movs	r4, #98	; 0x62
 80040cc:	7004      	strb	r4, [r0, #0]
  buffer[buffer_length++] = payload_size + 1; // Add one for useless byte
 80040ce:	1c54      	adds	r4, r2, #1
 80040d0:	7044      	strb	r4, [r0, #1]
  buffer[buffer_length++] = data_id;
 80040d2:	7083      	strb	r3, [r0, #2]
  for (int i = 0; i < payload_size; i++)
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d012      	beq.n	80040fe <baca_protocol_encode+0x3c>
 80040d8:	000b      	movs	r3, r1
 80040da:	1889      	adds	r1, r1, r2
  buffer[buffer_length++] = data_id;
 80040dc:	2503      	movs	r5, #3
  {
	  buffer[buffer_length++] = payload[i];
 80040de:	1c6f      	adds	r7, r5, #1
 80040e0:	781c      	ldrb	r4, [r3, #0]
 80040e2:	5544      	strb	r4, [r0, r5]
	  checksum += payload[i];
 80040e4:	781c      	ldrb	r4, [r3, #0]
 80040e6:	1936      	adds	r6, r6, r4
 80040e8:	b2f6      	uxtb	r6, r6
 80040ea:	3301      	adds	r3, #1
	  buffer[buffer_length++] = payload[i];
 80040ec:	b2fd      	uxtb	r5, r7
  for (int i = 0; i < payload_size; i++)
 80040ee:	428b      	cmp	r3, r1
 80040f0:	d1f5      	bne.n	80040de <baca_protocol_encode+0x1c>
 80040f2:	3203      	adds	r2, #3
 80040f4:	b2d2      	uxtb	r2, r2
  }
  buffer[buffer_length++] = checksum;
 80040f6:	5486      	strb	r6, [r0, r2]
 80040f8:	3201      	adds	r2, #1

  return buffer_length;
 80040fa:	b2d0      	uxtb	r0, r2
}
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  buffer[buffer_length++] = data_id;
 80040fe:	2203      	movs	r2, #3
 8004100:	e7f9      	b.n	80040f6 <baca_protocol_encode+0x34>

08004102 <baca_protocol_decode>:
 *	@param buffer Buffer with the encoded message
 *	@param payload Buffer to store payload bytes
 *	@return the struct with the payload and its properties
 */
struct baca_payload baca_protocol_decode(uint8_t* buffer, uint8_t buffer_size)
{
 8004102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004104:	b0c3      	sub	sp, #268	; 0x10c
 8004106:	0004      	movs	r4, r0
	struct baca_payload ret;
	ret.data_correct = 0;

	// is a baca message with at least one byte
	if ((buffer[0] == 'b') && (buffer_size >= 4))
 8004108:	780b      	ldrb	r3, [r1, #0]
 800410a:	2b62      	cmp	r3, #98	; 0x62
 800410c:	d00b      	beq.n	8004126 <baca_protocol_decode+0x24>
				return ret;
			}
		}
	} else
	{
		return ret;
 800410e:	a901      	add	r1, sp, #4
 8004110:	2300      	movs	r3, #0
 8004112:	700b      	strb	r3, [r1, #0]
 8004114:	704b      	strb	r3, [r1, #1]
 8004116:	2202      	movs	r2, #2
 8004118:	32ff      	adds	r2, #255	; 0xff
 800411a:	0020      	movs	r0, r4
 800411c:	f000 fe22 	bl	8004d64 <memcpy>
	}
}
 8004120:	0020      	movs	r0, r4
 8004122:	b043      	add	sp, #268	; 0x10c
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((buffer[0] == 'b') && (buffer_size >= 4))
 8004126:	2a03      	cmp	r2, #3
 8004128:	d9f1      	bls.n	800410e <baca_protocol_decode+0xc>
		uint8_t payload_buffer_size = buffer[1];
 800412a:	784f      	ldrb	r7, [r1, #1]
		if (buffer_size >= payload_buffer_size + 3)
 800412c:	1cfb      	adds	r3, r7, #3
 800412e:	429a      	cmp	r2, r3
 8004130:	dbf6      	blt.n	8004120 <baca_protocol_decode+0x1e>
			uint8_t checksum = (uint8_t) 'b' + payload_buffer_size;
 8004132:	003a      	movs	r2, r7
 8004134:	3262      	adds	r2, #98	; 0x62
 8004136:	b2d2      	uxtb	r2, r2
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 8004138:	2f00      	cmp	r7, #0
 800413a:	d00b      	beq.n	8004154 <baca_protocol_decode+0x52>
 800413c:	1e7d      	subs	r5, r7, #1
 800413e:	b2ed      	uxtb	r5, r5
 8004140:	3503      	adds	r5, #3
 8004142:	2302      	movs	r3, #2
				ret.payload[i] = buffer[i+2];
 8004144:	ae01      	add	r6, sp, #4
 8004146:	5cc8      	ldrb	r0, [r1, r3]
 8004148:	5598      	strb	r0, [r3, r6]
				checksum += buffer[i+2];
 800414a:	1882      	adds	r2, r0, r2
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	3301      	adds	r3, #1
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 8004150:	42ab      	cmp	r3, r5
 8004152:	d1f8      	bne.n	8004146 <baca_protocol_decode+0x44>
			uint8_t checksum_sent = buffer[payload_buffer_size+2];
 8004154:	19c9      	adds	r1, r1, r7
			if (checksum == checksum_sent)
 8004156:	788b      	ldrb	r3, [r1, #2]
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <baca_protocol_decode+0x6e>
				return ret;
 800415c:	a901      	add	r1, sp, #4
 800415e:	2300      	movs	r3, #0
 8004160:	700b      	strb	r3, [r1, #0]
 8004162:	704f      	strb	r7, [r1, #1]
 8004164:	2202      	movs	r2, #2
 8004166:	32ff      	adds	r2, #255	; 0xff
 8004168:	0020      	movs	r0, r4
 800416a:	f000 fdfb 	bl	8004d64 <memcpy>
 800416e:	e7d7      	b.n	8004120 <baca_protocol_decode+0x1e>
				return ret;
 8004170:	a901      	add	r1, sp, #4
 8004172:	2301      	movs	r3, #1
 8004174:	700b      	strb	r3, [r1, #0]
 8004176:	704f      	strb	r7, [r1, #1]
 8004178:	2202      	movs	r2, #2
 800417a:	32ff      	adds	r2, #255	; 0xff
 800417c:	0020      	movs	r0, r4
 800417e:	f000 fdf1 	bl	8004d64 <memcpy>
 8004182:	e7cd      	b.n	8004120 <baca_protocol_decode+0x1e>

08004184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004184:	b510      	push	{r4, lr}
 8004186:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004188:	2230      	movs	r2, #48	; 0x30
 800418a:	2100      	movs	r1, #0
 800418c:	a80c      	add	r0, sp, #48	; 0x30
 800418e:	f000 fdf2 	bl	8004d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004192:	2210      	movs	r2, #16
 8004194:	2100      	movs	r1, #0
 8004196:	a807      	add	r0, sp, #28
 8004198:	f000 fded 	bl	8004d76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800419c:	2218      	movs	r2, #24
 800419e:	2100      	movs	r1, #0
 80041a0:	a801      	add	r0, sp, #4
 80041a2:	f000 fde8 	bl	8004d76 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80041a6:	2320      	movs	r3, #32
 80041a8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80041aa:	3b1f      	subs	r3, #31
 80041ac:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041ae:	a80b      	add	r0, sp, #44	; 0x2c
 80041b0:	f7fd fb88 	bl	80018c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041b4:	2307      	movs	r3, #7
 80041b6:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80041b8:	3b04      	subs	r3, #4
 80041ba:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041bc:	2400      	movs	r4, #0
 80041be:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041c0:	940a      	str	r4, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041c2:	2101      	movs	r1, #1
 80041c4:	a807      	add	r0, sp, #28
 80041c6:	f7fd fe8d 	bl	8001ee4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80041d0:	9406      	str	r4, [sp, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d2:	a801      	add	r0, sp, #4
 80041d4:	f7fd ff56 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80041d8:	b018      	add	sp, #96	; 0x60
 80041da:	bd10      	pop	{r4, pc}

080041dc <main>:
{
 80041dc:	b530      	push	{r4, r5, lr}
 80041de:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80041e0:	f7fc f908 	bl	80003f4 <HAL_Init>
  SystemClock_Config();
 80041e4:	f7ff ffce 	bl	8004184 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	2214      	movs	r2, #20
 80041ea:	2100      	movs	r1, #0
 80041ec:	a805      	add	r0, sp, #20
 80041ee:	f000 fdc2 	bl	8004d76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041f2:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <main+0xf4>)
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	2080      	movs	r0, #128	; 0x80
 80041f8:	03c0      	lsls	r0, r0, #15
 80041fa:	4301      	orrs	r1, r0
 80041fc:	6159      	str	r1, [r3, #20]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	4002      	ands	r2, r0
 8004202:	9201      	str	r2, [sp, #4]
 8004204:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	0289      	lsls	r1, r1, #10
 800420c:	430a      	orrs	r2, r1
 800420e:	615a      	str	r2, [r3, #20]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	400b      	ands	r3, r1
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8004218:	2490      	movs	r4, #144	; 0x90
 800421a:	05e4      	lsls	r4, r4, #23
 800421c:	2200      	movs	r2, #0
 800421e:	21ff      	movs	r1, #255	; 0xff
 8004220:	0020      	movs	r0, r4
 8004222:	f7fc fb7d 	bl	8000920 <HAL_GPIO_WritePin>
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : UV_LED_0_Pin UV_LED_1_Pin UV_LED_2_Pin UV_LED_3_Pin
                           UV_LED_4_Pin UV_LED_5_Pin UV_LED_6_Pin UV_LED_7_Pin */
  GPIO_InitStruct.Pin = UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8004226:	23ff      	movs	r3, #255	; 0xff
 8004228:	9305      	str	r3, [sp, #20]
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422a:	3bfe      	subs	r3, #254	; 0xfe
 800422c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2500      	movs	r5, #0
 8004230:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004232:	3302      	adds	r3, #2
 8004234:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	a905      	add	r1, sp, #20
 8004238:	0020      	movs	r0, r4
 800423a:	f7fc fa8f 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <main+0xf8>)
 8004246:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800424a:	a905      	add	r1, sp, #20
 800424c:	0020      	movs	r0, r4
 800424e:	f7fc fa85 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <main+0xfc>)
 800425a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800425e:	a905      	add	r1, sp, #20
 8004260:	0020      	movs	r0, r4
 8004262:	f7fc fa7b 	bl	800075c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	2007      	movs	r0, #7
 800426c:	f7fc f8e4 	bl	8000438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004270:	2007      	movs	r0, #7
 8004272:	f7fc f913 	bl	800049c <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 8004276:	f000 f93d 	bl	80044f4 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800427a:	2210      	movs	r2, #16
 800427c:	2100      	movs	r1, #0
 800427e:	a805      	add	r0, sp, #20
 8004280:	f000 fd79 	bl	8004d76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004284:	2208      	movs	r2, #8
 8004286:	2100      	movs	r1, #0
 8004288:	a803      	add	r0, sp, #12
 800428a:	f000 fd74 	bl	8004d76 <memset>
  htim3.Instance = TIM3;
 800428e:	4c13      	ldr	r4, [pc, #76]	; (80042dc <main+0x100>)
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <main+0x104>)
 8004292:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48-1;
 8004294:	232f      	movs	r3, #47	; 0x2f
 8004296:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004298:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 100-1;
 800429a:	3334      	adds	r3, #52	; 0x34
 800429c:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429e:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042a0:	331d      	adds	r3, #29
 80042a2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042a4:	0020      	movs	r0, r4
 80042a6:	f7fe f8f7 	bl	8002498 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	015b      	lsls	r3, r3, #5
 80042ae:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042b0:	a905      	add	r1, sp, #20
 80042b2:	0020      	movs	r0, r4
 80042b4:	f7fe f928 	bl	8002508 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b8:	9503      	str	r5, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ba:	9504      	str	r5, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042bc:	a903      	add	r1, sp, #12
 80042be:	0020      	movs	r0, r4
 80042c0:	f7fe f9cc 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
  uv_led_init();
 80042c4:	f000 fbd0 	bl	8004a68 <uv_led_init>
  HAL_TIM_Base_Start_IT(&htim3);
 80042c8:	0020      	movs	r0, r4
 80042ca:	f7fd ff83 	bl	80021d4 <HAL_TIM_Base_Start_IT>
 80042ce:	e7fe      	b.n	80042ce <main+0xf2>
 80042d0:	40021000 	.word	0x40021000
 80042d4:	10110000 	.word	0x10110000
 80042d8:	10310000 	.word	0x10310000
 80042dc:	20000524 	.word	0x20000524
 80042e0:	40000400 	.word	0x40000400

080042e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	// If the Interrupt came from SWITCH Pin
	if (GPIO_Pin == SWITCH_Pin)
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4298      	cmp	r0, r3
 80042ea:	d000      	beq.n	80042ee <HAL_GPIO_EXTI_Callback+0xa>
	{
		// Toggle the UVLEDs global enable flag
		enable_global = !enable_global;
	}
}
 80042ec:	4770      	bx	lr
		enable_global = !enable_global;
 80042ee:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_GPIO_EXTI_Callback+0x18>)
 80042f0:	7813      	ldrb	r3, [r2, #0]
 80042f2:	4259      	negs	r1, r3
 80042f4:	414b      	adcs	r3, r1
 80042f6:	7013      	strb	r3, [r2, #0]
}
 80042f8:	e7f8      	b.n	80042ec <HAL_GPIO_EXTI_Callback+0x8>
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	200003e0 	.word	0x200003e0

08004300 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	46c6      	mov	lr, r8
 8004304:	b500      	push	{lr}
 8004306:	0007      	movs	r7, r0
 /* USER CODE BEGIN Callback 0 */
	// Check if the callback came from TIM3
	if (htim->Instance == TIM3)
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800430a:	6802      	ldr	r2, [r0, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d002      	beq.n	8004316 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 }
 /* USER CODE BEGIN Callback 1 */

 /* USER CODE END Callback 1 */
}
 8004310:	bc04      	pop	{r2}
 8004312:	4690      	mov	r8, r2
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004316:	4d10      	ldr	r5, [pc, #64]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0x58>)
		for (int i = 0; i < 8; i++)
 8004318:	2400      	movs	r4, #0
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 800431a:	4e10      	ldr	r6, [pc, #64]	; (800435c <HAL_TIM_PeriodElapsedCallback+0x5c>)
				uv_led_counter[i] = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	4698      	mov	r8, r3
 8004320:	e008      	b.n	8004334 <HAL_TIM_PeriodElapsedCallback+0x34>
				uv_led_toggle(i);
 8004322:	b2e0      	uxtb	r0, r4
 8004324:	f000 fc92 	bl	8004c4c <uv_led_toggle>
				uv_led_counter[i] = 0;
 8004328:	4643      	mov	r3, r8
 800432a:	602b      	str	r3, [r5, #0]
		for (int i = 0; i < 8; i++)
 800432c:	3401      	adds	r4, #1
 800432e:	3504      	adds	r5, #4
 8004330:	2c08      	cmp	r4, #8
 8004332:	d007      	beq.n	8004344 <HAL_TIM_PeriodElapsedCallback+0x44>
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	00a2      	lsls	r2, r4, #2
 8004338:	58b2      	ldr	r2, [r6, r2]
 800433a:	4293      	cmp	r3, r2
 800433c:	d2f1      	bcs.n	8004322 <HAL_TIM_PeriodElapsedCallback+0x22>
				uv_led_counter[i]++;
 800433e:	3301      	adds	r3, #1
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	e7f3      	b.n	800432c <HAL_TIM_PeriodElapsedCallback+0x2c>
 if (htim->Instance == TIM3) {
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d1e1      	bne.n	8004310 <HAL_TIM_PeriodElapsedCallback+0x10>
   HAL_IncTick();
 800434c:	f7fc f862 	bl	8000414 <HAL_IncTick>
}
 8004350:	e7de      	b.n	8004310 <HAL_TIM_PeriodElapsedCallback+0x10>
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40000400 	.word	0x40000400
 8004358:	20000584 	.word	0x20000584
 800435c:	20000504 	.word	0x20000504

08004360 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004360:	4770      	bx	lr
	...

08004364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004364:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_MspInit+0x2c>)
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	2201      	movs	r2, #1
 800436c:	4311      	orrs	r1, r2
 800436e:	6199      	str	r1, [r3, #24]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	400a      	ands	r2, r1
 8004374:	9200      	str	r2, [sp, #0]
 8004376:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	0549      	lsls	r1, r1, #21
 800437e:	430a      	orrs	r2, r1
 8004380:	61da      	str	r2, [r3, #28]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	400b      	ands	r3, r1
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438a:	b002      	add	sp, #8
 800438c:	4770      	bx	lr
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40021000 	.word	0x40021000

08004394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004394:	b500      	push	{lr}
 8004396:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_TIM_Base_MspInit+0x34>)
 800439a:	6802      	ldr	r2, [r0, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043a0:	b003      	add	sp, #12
 80043a2:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_TIM_Base_MspInit+0x38>)
 80043a6:	69d1      	ldr	r1, [r2, #28]
 80043a8:	2302      	movs	r3, #2
 80043aa:	4319      	orrs	r1, r3
 80043ac:	61d1      	str	r1, [r2, #28]
 80043ae:	69d2      	ldr	r2, [r2, #28]
 80043b0:	4013      	ands	r3, r2
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	2010      	movs	r0, #16
 80043bc:	f7fc f83c 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043c0:	2010      	movs	r0, #16
 80043c2:	f7fc f86b 	bl	800049c <HAL_NVIC_EnableIRQ>
}
 80043c6:	e7eb      	b.n	80043a0 <HAL_TIM_Base_MspInit+0xc>
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d0:	b510      	push	{r4, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80043d6:	2200      	movs	r2, #0
 80043d8:	200d      	movs	r0, #13
 80043da:	f7fc f82d 	bl	8000438 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80043de:	200d      	movs	r0, #13
 80043e0:	f7fc f85c 	bl	800049c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80043e4:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_InitTick+0x6c>)
 80043e6:	6991      	ldr	r1, [r2, #24]
 80043e8:	2080      	movs	r0, #128	; 0x80
 80043ea:	0100      	lsls	r0, r0, #4
 80043ec:	4301      	orrs	r1, r0
 80043ee:	6191      	str	r1, [r2, #24]
 80043f0:	6993      	ldr	r3, [r2, #24]
 80043f2:	4003      	ands	r3, r0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043f8:	a901      	add	r1, sp, #4
 80043fa:	a802      	add	r0, sp, #8
 80043fc:	f7fd fe26 	bl	800204c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fd fe14 	bl	800202c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004404:	4c0e      	ldr	r4, [pc, #56]	; (8004440 <HAL_InitTick+0x70>)
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_InitTick+0x74>)
 8004408:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_InitTick+0x78>)
 800440c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800440e:	490f      	ldr	r1, [pc, #60]	; (800444c <HAL_InitTick+0x7c>)
 8004410:	f7fb fe7a 	bl	8000108 <__udivsi3>
 8004414:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8004416:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800441e:	0020      	movs	r0, r4
 8004420:	f7fe f83a 	bl	8002498 <HAL_TIM_Base_Init>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004426:	2800      	cmp	r0, #0
 8004428:	d002      	beq.n	8004430 <HAL_InitTick+0x60>
}
 800442a:	0018      	movs	r0, r3
 800442c:	b006      	add	sp, #24
 800442e:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <HAL_InitTick+0x70>)
 8004432:	f7fd fecf 	bl	80021d4 <HAL_TIM_Base_Start_IT>
 8004436:	0003      	movs	r3, r0
 8004438:	e7f7      	b.n	800442a <HAL_InitTick+0x5a>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	40021000 	.word	0x40021000
 8004440:	200005a4 	.word	0x200005a4
 8004444:	40012c00 	.word	0x40012c00
 8004448:	000003e7 	.word	0x000003e7
 800444c:	000f4240 	.word	0x000f4240

08004450 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004450:	4770      	bx	lr

08004452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004452:	e7fe      	b.n	8004452 <HardFault_Handler>

08004454 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004454:	4770      	bx	lr

08004456 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004456:	4770      	bx	lr

08004458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004458:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800445a:	f7fb ffdb 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800445e:	bd10      	pop	{r4, pc}

08004460 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004460:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004462:	2080      	movs	r0, #128	; 0x80
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	f7fc fa61 	bl	800092c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800446a:	2080      	movs	r0, #128	; 0x80
 800446c:	00c0      	lsls	r0, r0, #3
 800446e:	f7fc fa5d 	bl	800092c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004472:	bd10      	pop	{r4, pc}

08004474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004474:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004476:	4802      	ldr	r0, [pc, #8]	; (8004480 <TIM3_IRQHandler+0xc>)
 8004478:	f7fd fee2 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800447c:	bd10      	pop	{r4, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	20000524 	.word	0x20000524

08004484 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004484:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004486:	4802      	ldr	r0, [pc, #8]	; (8004490 <USB_IRQHandler+0xc>)
 8004488:	f7fc fb0a 	bl	8000aa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800448c:	bd10      	pop	{r4, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000cb0 	.word	0x20000cb0

08004494 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <SystemInit+0x48>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	480f      	ldr	r0, [pc, #60]	; (80044e0 <SystemInit+0x4c>)
 80044a2:	4002      	ands	r2, r0
 80044a4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	480e      	ldr	r0, [pc, #56]	; (80044e4 <SystemInit+0x50>)
 80044aa:	4002      	ands	r2, r0
 80044ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	480d      	ldr	r0, [pc, #52]	; (80044e8 <SystemInit+0x54>)
 80044b2:	4002      	ands	r2, r0
 80044b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	480c      	ldr	r0, [pc, #48]	; (80044ec <SystemInit+0x58>)
 80044ba:	4002      	ands	r2, r0
 80044bc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	200f      	movs	r0, #15
 80044c2:	4382      	bics	r2, r0
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	4809      	ldr	r0, [pc, #36]	; (80044f0 <SystemInit+0x5c>)
 80044ca:	4002      	ands	r2, r0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80044ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d0:	438a      	bics	r2, r1
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80044d4:	2200      	movs	r2, #0
 80044d6:	609a      	str	r2, [r3, #8]

}
 80044d8:	4770      	bx	lr
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08ffb80c 	.word	0x08ffb80c
 80044e4:	fef6ffff 	.word	0xfef6ffff
 80044e8:	fffbffff 	.word	0xfffbffff
 80044ec:	ffc0ffff 	.word	0xffc0ffff
 80044f0:	fffffe2c 	.word	0xfffffe2c

080044f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80044f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80044f6:	2200      	movs	r2, #0
 80044f8:	4911      	ldr	r1, [pc, #68]	; (8004540 <MX_USB_DEVICE_Init+0x4c>)
 80044fa:	4812      	ldr	r0, [pc, #72]	; (8004544 <MX_USB_DEVICE_Init+0x50>)
 80044fc:	f7ff f8cc 	bl	8003698 <USBD_Init>
 8004500:	2800      	cmp	r0, #0
 8004502:	d111      	bne.n	8004528 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004504:	4910      	ldr	r1, [pc, #64]	; (8004548 <MX_USB_DEVICE_Init+0x54>)
 8004506:	480f      	ldr	r0, [pc, #60]	; (8004544 <MX_USB_DEVICE_Init+0x50>)
 8004508:	f7ff f8e2 	bl	80036d0 <USBD_RegisterClass>
 800450c:	2800      	cmp	r0, #0
 800450e:	d10e      	bne.n	800452e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004510:	490e      	ldr	r1, [pc, #56]	; (800454c <MX_USB_DEVICE_Init+0x58>)
 8004512:	480c      	ldr	r0, [pc, #48]	; (8004544 <MX_USB_DEVICE_Init+0x50>)
 8004514:	f7ff f866 	bl	80035e4 <USBD_CDC_RegisterInterface>
 8004518:	2800      	cmp	r0, #0
 800451a:	d10b      	bne.n	8004534 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800451c:	4809      	ldr	r0, [pc, #36]	; (8004544 <MX_USB_DEVICE_Init+0x50>)
 800451e:	f7ff f8e0 	bl	80036e2 <USBD_Start>
 8004522:	2800      	cmp	r0, #0
 8004524:	d109      	bne.n	800453a <MX_USB_DEVICE_Init+0x46>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004526:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004528:	f7ff ff1a 	bl	8004360 <Error_Handler>
 800452c:	e7ea      	b.n	8004504 <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 800452e:	f7ff ff17 	bl	8004360 <Error_Handler>
 8004532:	e7ed      	b.n	8004510 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 8004534:	f7ff ff14 	bl	8004360 <Error_Handler>
 8004538:	e7f0      	b.n	800451c <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 800453a:	f7ff ff11 	bl	8004360 <Error_Handler>
}
 800453e:	e7f2      	b.n	8004526 <MX_USB_DEVICE_Init+0x32>
 8004540:	20000128 	.word	0x20000128
 8004544:	200005ec 	.word	0x200005ec
 8004548:	20000004 	.word	0x20000004
 800454c:	20000118 	.word	0x20000118

08004550 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004550:	2000      	movs	r0, #0
 8004552:	4770      	bx	lr

08004554 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004554:	2000      	movs	r0, #0
 8004556:	4770      	bx	lr

08004558 <CDC_Init_FS>:
{
 8004558:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800455a:	4c06      	ldr	r4, [pc, #24]	; (8004574 <CDC_Init_FS+0x1c>)
 800455c:	2200      	movs	r2, #0
 800455e:	4906      	ldr	r1, [pc, #24]	; (8004578 <CDC_Init_FS+0x20>)
 8004560:	0020      	movs	r0, r4
 8004562:	f7ff f848 	bl	80035f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004566:	4905      	ldr	r1, [pc, #20]	; (800457c <CDC_Init_FS+0x24>)
 8004568:	0020      	movs	r0, r4
 800456a:	f7ff f84f 	bl	800360c <USBD_CDC_SetRxBuffer>
}
 800456e:	2000      	movs	r0, #0
 8004570:	bd10      	pop	{r4, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200005ec 	.word	0x200005ec
 8004578:	20000ab0 	.word	0x20000ab0
 800457c:	200008b0 	.word	0x200008b0

08004580 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	0005      	movs	r5, r0
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004584:	4809      	ldr	r0, [pc, #36]	; (80045ac <CDC_Transmit_FS+0x2c>)
 8004586:	23ae      	movs	r3, #174	; 0xae
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	58c4      	ldr	r4, [r0, r3]
  if (hcdc->TxState != 0){
 800458c:	3ba4      	subs	r3, #164	; 0xa4
 800458e:	58e3      	ldr	r3, [r4, r3]
    return USBD_BUSY;
 8004590:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8004592:	2b00      	cmp	r3, #0
 8004594:	d000      	beq.n	8004598 <CDC_Transmit_FS+0x18>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004596:	bd70      	pop	{r4, r5, r6, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004598:	4c04      	ldr	r4, [pc, #16]	; (80045ac <CDC_Transmit_FS+0x2c>)
 800459a:	000a      	movs	r2, r1
 800459c:	0029      	movs	r1, r5
 800459e:	0020      	movs	r0, r4
 80045a0:	f7ff f829 	bl	80035f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80045a4:	0020      	movs	r0, r4
 80045a6:	f7ff f838 	bl	800361a <USBD_CDC_TransmitPacket>
  return result;
 80045aa:	e7f4      	b.n	8004596 <CDC_Transmit_FS+0x16>
 80045ac:	200005ec 	.word	0x200005ec

080045b0 <CDC_Receive_FS>:
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	b0c6      	sub	sp, #280	; 0x118
 80045b4:	000c      	movs	r4, r1
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80045b6:	4d3b      	ldr	r5, [pc, #236]	; (80046a4 <CDC_Receive_FS+0xf4>)
 80045b8:	0001      	movs	r1, r0
 80045ba:	0028      	movs	r0, r5
 80045bc:	f7ff f826 	bl	800360c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80045c0:	0028      	movs	r0, r5
 80045c2:	f7ff f84a 	bl	800365a <USBD_CDC_ReceivePacket>
	struct baca_payload received_message = baca_protocol_decode(UserRxBufferFS, (uint8_t) Len);
 80045c6:	ad05      	add	r5, sp, #20
 80045c8:	b2e2      	uxtb	r2, r4
 80045ca:	4937      	ldr	r1, [pc, #220]	; (80046a8 <CDC_Receive_FS+0xf8>)
 80045cc:	0028      	movs	r0, r5
 80045ce:	f7ff fd98 	bl	8004102 <baca_protocol_decode>
	if (received_message.data_correct == 1)
 80045d2:	782b      	ldrb	r3, [r5, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d002      	beq.n	80045de <CDC_Receive_FS+0x2e>
}
 80045d8:	2000      	movs	r0, #0
 80045da:	b046      	add	sp, #280	; 0x118
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
	struct baca_payload received_message = baca_protocol_decode(UserRxBufferFS, (uint8_t) Len);
 80045de:	ab05      	add	r3, sp, #20
 80045e0:	7859      	ldrb	r1, [r3, #1]
		switch (baca_id)
 80045e2:	789b      	ldrb	r3, [r3, #2]
 80045e4:	3370      	adds	r3, #112	; 0x70
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	2a06      	cmp	r2, #6
 80045ea:	d8f5      	bhi.n	80045d8 <CDC_Receive_FS+0x28>
 80045ec:	0093      	lsls	r3, r2, #2
 80045ee:	4a2f      	ldr	r2, [pc, #188]	; (80046ac <CDC_Receive_FS+0xfc>)
 80045f0:	58d3      	ldr	r3, [r2, r3]
 80045f2:	469f      	mov	pc, r3
				enable_global = !enable_global;
 80045f4:	4a2e      	ldr	r2, [pc, #184]	; (80046b0 <CDC_Receive_FS+0x100>)
 80045f6:	7813      	ldrb	r3, [r2, #0]
 80045f8:	4259      	negs	r1, r3
 80045fa:	414b      	adcs	r3, r1
 80045fc:	7013      	strb	r3, [r2, #0]
				break;
 80045fe:	e7eb      	b.n	80045d8 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 9)
 8004600:	2909      	cmp	r1, #9
 8004602:	d1e9      	bne.n	80045d8 <CDC_Receive_FS+0x28>
 8004604:	2400      	movs	r4, #0
						uv_led_enable(i, (uint8_t) received_message.payload[i+1]);
 8004606:	ab05      	add	r3, sp, #20
 8004608:	191b      	adds	r3, r3, r4
 800460a:	78d9      	ldrb	r1, [r3, #3]
 800460c:	b2e0      	uxtb	r0, r4
 800460e:	f000 facd 	bl	8004bac <uv_led_enable>
 8004612:	3401      	adds	r4, #1
					for (uint8_t i = 0; i < 8; i++)
 8004614:	2c08      	cmp	r4, #8
 8004616:	d1f6      	bne.n	8004606 <CDC_Receive_FS+0x56>
 8004618:	e7de      	b.n	80045d8 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 9)
 800461a:	2909      	cmp	r1, #9
 800461c:	d1dc      	bne.n	80045d8 <CDC_Receive_FS+0x28>
 800461e:	2400      	movs	r4, #0
 8004620:	e002      	b.n	8004628 <CDC_Receive_FS+0x78>
 8004622:	3401      	adds	r4, #1
					for (uint8_t i = 0; i < 8; i++)
 8004624:	2c08      	cmp	r4, #8
 8004626:	d0d7      	beq.n	80045d8 <CDC_Receive_FS+0x28>
 8004628:	b2e0      	uxtb	r0, r4
 800462a:	ab05      	add	r3, sp, #20
 800462c:	191b      	adds	r3, r3, r4
						if (received_message.payload[i] != 0)
 800462e:	789a      	ldrb	r2, [r3, #2]
 8004630:	2a00      	cmp	r2, #0
 8004632:	d0f6      	beq.n	8004622 <CDC_Receive_FS+0x72>
							uv_led_set_frequency(i, (uint32_t) received_message.payload[i+1]);
 8004634:	78d9      	ldrb	r1, [r3, #3]
 8004636:	f000 fa6b 	bl	8004b10 <uv_led_set_frequency>
 800463a:	e7f2      	b.n	8004622 <CDC_Receive_FS+0x72>
				if (received_message.payload_size == 3)
 800463c:	2903      	cmp	r1, #3
 800463e:	d1cb      	bne.n	80045d8 <CDC_Receive_FS+0x28>
					uv_led_enable((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 8004640:	ab05      	add	r3, sp, #20
 8004642:	7919      	ldrb	r1, [r3, #4]
 8004644:	78d8      	ldrb	r0, [r3, #3]
 8004646:	f000 fab1 	bl	8004bac <uv_led_enable>
 800464a:	e7c5      	b.n	80045d8 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 3)
 800464c:	2903      	cmp	r1, #3
 800464e:	d1c3      	bne.n	80045d8 <CDC_Receive_FS+0x28>
					uv_led_set_frequency((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 8004650:	ab05      	add	r3, sp, #20
 8004652:	7919      	ldrb	r1, [r3, #4]
 8004654:	78d8      	ldrb	r0, [r3, #3]
 8004656:	f000 fa5b 	bl	8004b10 <uv_led_set_frequency>
 800465a:	e7bd      	b.n	80045d8 <CDC_Receive_FS+0x28>
					baca_protocol_encode(baca_buffer, uv_led_enabled, 8, 0x95);
 800465c:	2395      	movs	r3, #149	; 0x95
 800465e:	2208      	movs	r2, #8
 8004660:	4914      	ldr	r1, [pc, #80]	; (80046b4 <CDC_Receive_FS+0x104>)
 8004662:	a802      	add	r0, sp, #8
 8004664:	f7ff fd2d 	bl	80040c2 <baca_protocol_encode>
					CDC_Transmit_FS(baca_buffer, baca_buffer_length);
 8004668:	210c      	movs	r1, #12
 800466a:	a802      	add	r0, sp, #8
 800466c:	f7ff ff88 	bl	8004580 <CDC_Transmit_FS>
				break;
 8004670:	e7b2      	b.n	80045d8 <CDC_Receive_FS+0x28>
		switch (baca_id)
 8004672:	2400      	movs	r4, #0
						frequencies_to_send[j] = (uint8_t)(TIMER_FREQ/(2*uv_led_periods_ms[j]));
 8004674:	4e10      	ldr	r6, [pc, #64]	; (80046b8 <CDC_Receive_FS+0x108>)
 8004676:	4d11      	ldr	r5, [pc, #68]	; (80046bc <CDC_Receive_FS+0x10c>)
 8004678:	00a3      	lsls	r3, r4, #2
 800467a:	58f1      	ldr	r1, [r6, r3]
 800467c:	0049      	lsls	r1, r1, #1
 800467e:	0028      	movs	r0, r5
 8004680:	f7fb fd42 	bl	8000108 <__udivsi3>
 8004684:	466b      	mov	r3, sp
 8004686:	54e0      	strb	r0, [r4, r3]
 8004688:	3401      	adds	r4, #1
					for (uint8_t j = 0; j < 8; j++)
 800468a:	2c08      	cmp	r4, #8
 800468c:	d1f4      	bne.n	8004678 <CDC_Receive_FS+0xc8>
					baca_protocol_encode(baca_buffer, frequencies_to_send , 8, 0x96);
 800468e:	2396      	movs	r3, #150	; 0x96
 8004690:	2208      	movs	r2, #8
 8004692:	4669      	mov	r1, sp
 8004694:	a802      	add	r0, sp, #8
 8004696:	f7ff fd14 	bl	80040c2 <baca_protocol_encode>
					CDC_Transmit_FS(baca_buffer, baca_buffer_length);
 800469a:	210c      	movs	r1, #12
 800469c:	a802      	add	r0, sp, #8
 800469e:	f7ff ff6f 	bl	8004580 <CDC_Transmit_FS>
				break;
 80046a2:	e799      	b.n	80045d8 <CDC_Receive_FS+0x28>
 80046a4:	200005ec 	.word	0x200005ec
 80046a8:	200008b0 	.word	0x200008b0
 80046ac:	08004e38 	.word	0x08004e38
 80046b0:	200003e0 	.word	0x200003e0
 80046b4:	2000057c 	.word	0x2000057c
 80046b8:	20000504 	.word	0x20000504
 80046bc:	00002710 	.word	0x00002710

080046c0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d004      	beq.n	80046ce <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80046c4:	3802      	subs	r0, #2
 80046c6:	1e43      	subs	r3, r0, #1
 80046c8:	4198      	sbcs	r0, r3
 80046ca:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80046cc:	4770      	bx	lr
      usb_status = USBD_OK;
 80046ce:	2000      	movs	r0, #0
 80046d0:	e7fc      	b.n	80046cc <USBD_Get_USB_Status+0xc>
	...

080046d4 <HAL_PCD_MspInit>:
{
 80046d4:	b500      	push	{lr}
 80046d6:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_PCD_MspInit+0x38>)
 80046da:	6802      	ldr	r2, [r0, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_PCD_MspInit+0x10>
}
 80046e0:	b003      	add	sp, #12
 80046e2:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <HAL_PCD_MspInit+0x3c>)
 80046e6:	69d1      	ldr	r1, [r2, #28]
 80046e8:	2080      	movs	r0, #128	; 0x80
 80046ea:	0400      	lsls	r0, r0, #16
 80046ec:	4301      	orrs	r1, r0
 80046ee:	61d1      	str	r1, [r2, #28]
 80046f0:	69d3      	ldr	r3, [r2, #28]
 80046f2:	4003      	ands	r3, r0
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2100      	movs	r1, #0
 80046fc:	201f      	movs	r0, #31
 80046fe:	f7fb fe9b 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004702:	201f      	movs	r0, #31
 8004704:	f7fb feca 	bl	800049c <HAL_NVIC_EnableIRQ>
}
 8004708:	e7ea      	b.n	80046e0 <HAL_PCD_MspInit+0xc>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	40005c00 	.word	0x40005c00
 8004710:	40021000 	.word	0x40021000

08004714 <HAL_PCD_SetupStageCallback>:
{
 8004714:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004716:	23ac      	movs	r3, #172	; 0xac
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	18c1      	adds	r1, r0, r3
 800471c:	3340      	adds	r3, #64	; 0x40
 800471e:	58c0      	ldr	r0, [r0, r3]
 8004720:	f7fe fffa 	bl	8003718 <USBD_LL_SetupStage>
}
 8004724:	bd10      	pop	{r4, pc}

08004726 <HAL_PCD_DataOutStageCallback>:
{
 8004726:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	185b      	adds	r3, r3, r1
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	18c3      	adds	r3, r0, r3
 8004730:	337d      	adds	r3, #125	; 0x7d
 8004732:	33ff      	adds	r3, #255	; 0xff
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	23bc      	movs	r3, #188	; 0xbc
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	58c0      	ldr	r0, [r0, r3]
 800473c:	f7ff f81e 	bl	800377c <USBD_LL_DataOutStage>
}
 8004740:	bd10      	pop	{r4, pc}

08004742 <HAL_PCD_DataInStageCallback>:
{
 8004742:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	185b      	adds	r3, r3, r1
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	18c3      	adds	r3, r0, r3
 800474c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800474e:	23bc      	movs	r3, #188	; 0xbc
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	58c0      	ldr	r0, [r0, r3]
 8004754:	f7ff f865 	bl	8003822 <USBD_LL_DataInStage>
}
 8004758:	bd10      	pop	{r4, pc}

0800475a <HAL_PCD_SOFCallback>:
{
 800475a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800475c:	23bc      	movs	r3, #188	; 0xbc
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	58c0      	ldr	r0, [r0, r3]
 8004762:	f7ff f91d 	bl	80039a0 <USBD_LL_SOF>
}
 8004766:	bd10      	pop	{r4, pc}

08004768 <HAL_PCD_ResetCallback>:
{
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800476c:	6883      	ldr	r3, [r0, #8]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d001      	beq.n	8004776 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8004772:	f7ff fdf5 	bl	8004360 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004776:	25bc      	movs	r5, #188	; 0xbc
 8004778:	00ad      	lsls	r5, r5, #2
 800477a:	2101      	movs	r1, #1
 800477c:	5960      	ldr	r0, [r4, r5]
 800477e:	f7ff f8f1 	bl	8003964 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004782:	5960      	ldr	r0, [r4, r5]
 8004784:	f7ff f8bf 	bl	8003906 <USBD_LL_Reset>
}
 8004788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800478c <HAL_PCD_SuspendCallback>:
{
 800478c:	b510      	push	{r4, lr}
 800478e:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004790:	23bc      	movs	r3, #188	; 0xbc
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	58c0      	ldr	r0, [r0, r3]
 8004796:	f7ff f8e9 	bl	800396c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800479a:	69a3      	ldr	r3, [r4, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80047a0:	4a02      	ldr	r2, [pc, #8]	; (80047ac <HAL_PCD_SuspendCallback+0x20>)
 80047a2:	6913      	ldr	r3, [r2, #16]
 80047a4:	2106      	movs	r1, #6
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6113      	str	r3, [r2, #16]
}
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <HAL_PCD_ResumeCallback>:
{
 80047b0:	b510      	push	{r4, lr}
 80047b2:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80047b4:	6983      	ldr	r3, [r0, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80047ba:	23bc      	movs	r3, #188	; 0xbc
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	58e0      	ldr	r0, [r4, r3]
 80047c0:	f7ff f8e0 	bl	8003984 <USBD_LL_Resume>
}
 80047c4:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80047c6:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_PCD_ResumeCallback+0x28>)
 80047c8:	6913      	ldr	r3, [r2, #16]
 80047ca:	2106      	movs	r1, #6
 80047cc:	438b      	bics	r3, r1
 80047ce:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80047d0:	f7ff fcd8 	bl	8004184 <SystemClock_Config>
 80047d4:	e7f1      	b.n	80047ba <HAL_PCD_ResumeCallback+0xa>
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <USBD_LL_Init>:
{
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80047e0:	481d      	ldr	r0, [pc, #116]	; (8004858 <USBD_LL_Init+0x7c>)
 80047e2:	23bc      	movs	r3, #188	; 0xbc
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 80047e8:	3b30      	subs	r3, #48	; 0x30
 80047ea:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <USBD_LL_Init+0x80>)
 80047ee:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80047f0:	2308      	movs	r3, #8
 80047f2:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80047f4:	3b06      	subs	r3, #6
 80047f6:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80047f8:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80047fe:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004800:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004802:	f7fc f8a1 	bl	8000948 <HAL_PCD_Init>
 8004806:	2800      	cmp	r0, #0
 8004808:	d123      	bne.n	8004852 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800480a:	25b0      	movs	r5, #176	; 0xb0
 800480c:	00ad      	lsls	r5, r5, #2
 800480e:	2318      	movs	r3, #24
 8004810:	2200      	movs	r2, #0
 8004812:	2100      	movs	r1, #0
 8004814:	5960      	ldr	r0, [r4, r5]
 8004816:	f7fd f823 	bl	8001860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800481a:	2358      	movs	r3, #88	; 0x58
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	5960      	ldr	r0, [r4, r5]
 8004822:	f7fd f81d 	bl	8001860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004826:	23c0      	movs	r3, #192	; 0xc0
 8004828:	2200      	movs	r2, #0
 800482a:	2181      	movs	r1, #129	; 0x81
 800482c:	5960      	ldr	r0, [r4, r5]
 800482e:	f7fd f817 	bl	8001860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004832:	2388      	movs	r3, #136	; 0x88
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2200      	movs	r2, #0
 8004838:	2101      	movs	r1, #1
 800483a:	5960      	ldr	r0, [r4, r5]
 800483c:	f7fd f810 	bl	8001860 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	5960      	ldr	r0, [r4, r5]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2200      	movs	r2, #0
 8004848:	2182      	movs	r1, #130	; 0x82
 800484a:	f7fd f809 	bl	8001860 <HAL_PCDEx_PMAConfig>
}
 800484e:	2000      	movs	r0, #0
 8004850:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8004852:	f7ff fd85 	bl	8004360 <Error_Handler>
 8004856:	e7d8      	b.n	800480a <USBD_LL_Init+0x2e>
 8004858:	20000cb0 	.word	0x20000cb0
 800485c:	40005c00 	.word	0x40005c00

08004860 <USBD_LL_Start>:
{
 8004860:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004862:	23b0      	movs	r3, #176	; 0xb0
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	58c0      	ldr	r0, [r0, r3]
 8004868:	f7fc f8ec 	bl	8000a44 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800486c:	f7ff ff28 	bl	80046c0 <USBD_Get_USB_Status>
}
 8004870:	bd10      	pop	{r4, pc}

08004872 <USBD_LL_OpenEP>:
{
 8004872:	b510      	push	{r4, lr}
 8004874:	0014      	movs	r4, r2
 8004876:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004878:	23b0      	movs	r3, #176	; 0xb0
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	58c0      	ldr	r0, [r0, r3]
 800487e:	0023      	movs	r3, r4
 8004880:	f7fc feb0 	bl	80015e4 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004884:	f7ff ff1c 	bl	80046c0 <USBD_Get_USB_Status>
}
 8004888:	bd10      	pop	{r4, pc}

0800488a <USBD_LL_CloseEP>:
{
 800488a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800488c:	23b0      	movs	r3, #176	; 0xb0
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	58c0      	ldr	r0, [r0, r3]
 8004892:	f7fc fee6 	bl	8001662 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004896:	f7ff ff13 	bl	80046c0 <USBD_Get_USB_Status>
}
 800489a:	bd10      	pop	{r4, pc}

0800489c <USBD_LL_StallEP>:
{
 800489c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800489e:	23b0      	movs	r3, #176	; 0xb0
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	58c0      	ldr	r0, [r0, r3]
 80048a4:	f7fc ff6a 	bl	800177c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048a8:	f7ff ff0a 	bl	80046c0 <USBD_Get_USB_Status>
}
 80048ac:	bd10      	pop	{r4, pc}

080048ae <USBD_LL_ClearStallEP>:
{
 80048ae:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80048b0:	23b0      	movs	r3, #176	; 0xb0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	58c0      	ldr	r0, [r0, r3]
 80048b6:	f7fc ff97 	bl	80017e8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048ba:	f7ff ff01 	bl	80046c0 <USBD_Get_USB_Status>
}
 80048be:	bd10      	pop	{r4, pc}

080048c0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80048c0:	23b0      	movs	r3, #176	; 0xb0
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80048c6:	b24a      	sxtb	r2, r1
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	db09      	blt.n	80048e0 <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80048cc:	227f      	movs	r2, #127	; 0x7f
 80048ce:	400a      	ands	r2, r1
 80048d0:	0091      	lsls	r1, r2, #2
 80048d2:	1889      	adds	r1, r1, r2
 80048d4:	00c9      	lsls	r1, r1, #3
 80048d6:	185b      	adds	r3, r3, r1
 80048d8:	336b      	adds	r3, #107	; 0x6b
 80048da:	33ff      	adds	r3, #255	; 0xff
 80048dc:	7818      	ldrb	r0, [r3, #0]
}
 80048de:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80048e0:	227f      	movs	r2, #127	; 0x7f
 80048e2:	400a      	ands	r2, r1
 80048e4:	3201      	adds	r2, #1
 80048e6:	0091      	lsls	r1, r2, #2
 80048e8:	1889      	adds	r1, r1, r2
 80048ea:	00c9      	lsls	r1, r1, #3
 80048ec:	185b      	adds	r3, r3, r1
 80048ee:	7898      	ldrb	r0, [r3, #2]
 80048f0:	e7f5      	b.n	80048de <USBD_LL_IsStallEP+0x1e>

080048f2 <USBD_LL_SetUSBAddress>:
{
 80048f2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80048f4:	23b0      	movs	r3, #176	; 0xb0
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	58c0      	ldr	r0, [r0, r3]
 80048fa:	f7fc f8ba 	bl	8000a72 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048fe:	f7ff fedf 	bl	80046c0 <USBD_Get_USB_Status>
}
 8004902:	bd10      	pop	{r4, pc}

08004904 <USBD_LL_Transmit>:
{
 8004904:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004906:	24b0      	movs	r4, #176	; 0xb0
 8004908:	00a4      	lsls	r4, r4, #2
 800490a:	5900      	ldr	r0, [r0, r4]
 800490c:	f7fc ff12 	bl	8001734 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004910:	f7ff fed6 	bl	80046c0 <USBD_Get_USB_Status>
}
 8004914:	bd10      	pop	{r4, pc}

08004916 <USBD_LL_PrepareReceive>:
{
 8004916:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004918:	24b0      	movs	r4, #176	; 0xb0
 800491a:	00a4      	lsls	r4, r4, #2
 800491c:	5900      	ldr	r0, [r0, r4]
 800491e:	f7fc fed4 	bl	80016ca <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004922:	f7ff fecd 	bl	80046c0 <USBD_Get_USB_Status>
}
 8004926:	bd10      	pop	{r4, pc}

08004928 <USBD_LL_GetRxDataSize>:
{
 8004928:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800492a:	23b0      	movs	r3, #176	; 0xb0
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	58c0      	ldr	r0, [r0, r3]
 8004930:	f7fc fef6 	bl	8001720 <HAL_PCD_EP_GetRxCount>
}
 8004934:	bd10      	pop	{r4, pc}
	...

08004938 <USBD_static_malloc>:
}
 8004938:	4800      	ldr	r0, [pc, #0]	; (800493c <USBD_static_malloc+0x4>)
 800493a:	4770      	bx	lr
 800493c:	20000198 	.word	0x20000198

08004940 <USBD_static_free>:
}
 8004940:	4770      	bx	lr
	...

08004944 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004944:	2312      	movs	r3, #18
 8004946:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004948:	4800      	ldr	r0, [pc, #0]	; (800494c <USBD_FS_DeviceDescriptor+0x8>)
 800494a:	4770      	bx	lr
 800494c:	20000144 	.word	0x20000144

08004950 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004950:	2304      	movs	r3, #4
 8004952:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004954:	4800      	ldr	r0, [pc, #0]	; (8004958 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004956:	4770      	bx	lr
 8004958:	20000158 	.word	0x20000158

0800495c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800495c:	b510      	push	{r4, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800495e:	2a00      	cmp	r2, #0
 8004960:	d014      	beq.n	800498c <IntToUnicode+0x30>
 8004962:	000b      	movs	r3, r1
 8004964:	3a01      	subs	r2, #1
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	0052      	lsls	r2, r2, #1
 800496a:	3102      	adds	r1, #2
 800496c:	1851      	adds	r1, r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800496e:	2400      	movs	r4, #0
 8004970:	e006      	b.n	8004980 <IntToUnicode+0x24>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004972:	3237      	adds	r2, #55	; 0x37
 8004974:	701a      	strb	r2, [r3, #0]
    value = value << 4;
 8004976:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004978:	705c      	strb	r4, [r3, #1]
 800497a:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 800497c:	428b      	cmp	r3, r1
 800497e:	d005      	beq.n	800498c <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8004980:	0f02      	lsrs	r2, r0, #28
 8004982:	2a09      	cmp	r2, #9
 8004984:	d8f5      	bhi.n	8004972 <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004986:	3230      	adds	r2, #48	; 0x30
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e7f4      	b.n	8004976 <IntToUnicode+0x1a>
  }
}
 800498c:	bd10      	pop	{r4, pc}
	...

08004990 <USBD_FS_SerialStrDescriptor>:
{
 8004990:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004992:	231a      	movs	r3, #26
 8004994:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <USBD_FS_SerialStrDescriptor+0x34>)
 8004998:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <USBD_FS_SerialStrDescriptor+0x38>)
  deviceserial0 += deviceserial2;
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d101      	bne.n	80049a8 <USBD_FS_SerialStrDescriptor+0x18>
}
 80049a4:	4809      	ldr	r0, [pc, #36]	; (80049cc <USBD_FS_SerialStrDescriptor+0x3c>)
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <USBD_FS_SerialStrDescriptor+0x40>)
 80049aa:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80049ac:	4c07      	ldr	r4, [pc, #28]	; (80049cc <USBD_FS_SerialStrDescriptor+0x3c>)
 80049ae:	1ca1      	adds	r1, r4, #2
 80049b0:	2208      	movs	r2, #8
 80049b2:	f7ff ffd3 	bl	800495c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80049b6:	0021      	movs	r1, r4
 80049b8:	3112      	adds	r1, #18
 80049ba:	2204      	movs	r2, #4
 80049bc:	0028      	movs	r0, r5
 80049be:	f7ff ffcd 	bl	800495c <IntToUnicode>
 80049c2:	e7ef      	b.n	80049a4 <USBD_FS_SerialStrDescriptor+0x14>
 80049c4:	1ffff7ac 	.word	0x1ffff7ac
 80049c8:	1ffff7b4 	.word	0x1ffff7b4
 80049cc:	2000015c 	.word	0x2000015c
 80049d0:	1ffff7b0 	.word	0x1ffff7b0

080049d4 <USBD_FS_ProductStrDescriptor>:
{
 80049d4:	b510      	push	{r4, lr}
 80049d6:	000a      	movs	r2, r1
  if(speed == 0)
 80049d8:	2800      	cmp	r0, #0
 80049da:	d005      	beq.n	80049e8 <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80049dc:	4905      	ldr	r1, [pc, #20]	; (80049f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80049de:	4806      	ldr	r0, [pc, #24]	; (80049f8 <USBD_FS_ProductStrDescriptor+0x24>)
 80049e0:	f7ff fb04 	bl	8003fec <USBD_GetString>
}
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80049e6:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80049e8:	4902      	ldr	r1, [pc, #8]	; (80049f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <USBD_FS_ProductStrDescriptor+0x24>)
 80049ec:	f7ff fafe 	bl	8003fec <USBD_GetString>
 80049f0:	e7f8      	b.n	80049e4 <USBD_FS_ProductStrDescriptor+0x10>
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	20000fa4 	.word	0x20000fa4
 80049f8:	08004e80 	.word	0x08004e80

080049fc <USBD_FS_ManufacturerStrDescriptor>:
{
 80049fc:	b510      	push	{r4, lr}
 80049fe:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004a00:	4c03      	ldr	r4, [pc, #12]	; (8004a10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004a02:	0021      	movs	r1, r4
 8004a04:	4803      	ldr	r0, [pc, #12]	; (8004a14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004a06:	f7ff faf1 	bl	8003fec <USBD_GetString>
}
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000fa4 	.word	0x20000fa4
 8004a14:	08004e70 	.word	0x08004e70

08004a18 <USBD_FS_ConfigStrDescriptor>:
{
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d005      	beq.n	8004a2c <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004a20:	4905      	ldr	r1, [pc, #20]	; (8004a38 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004a22:	4806      	ldr	r0, [pc, #24]	; (8004a3c <USBD_FS_ConfigStrDescriptor+0x24>)
 8004a24:	f7ff fae2 	bl	8003fec <USBD_GetString>
}
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004a2a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004a2c:	4902      	ldr	r1, [pc, #8]	; (8004a38 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004a2e:	4803      	ldr	r0, [pc, #12]	; (8004a3c <USBD_FS_ConfigStrDescriptor+0x24>)
 8004a30:	f7ff fadc 	bl	8003fec <USBD_GetString>
 8004a34:	e7f8      	b.n	8004a28 <USBD_FS_ConfigStrDescriptor+0x10>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000fa4 	.word	0x20000fa4
 8004a3c:	08004e54 	.word	0x08004e54

08004a40 <USBD_FS_InterfaceStrDescriptor>:
{
 8004a40:	b510      	push	{r4, lr}
 8004a42:	000a      	movs	r2, r1
  if(speed == 0)
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d005      	beq.n	8004a54 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a48:	4905      	ldr	r1, [pc, #20]	; (8004a60 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a4a:	4806      	ldr	r0, [pc, #24]	; (8004a64 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8004a4c:	f7ff face 	bl	8003fec <USBD_GetString>
}
 8004a50:	4803      	ldr	r0, [pc, #12]	; (8004a60 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a52:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a54:	4902      	ldr	r1, [pc, #8]	; (8004a60 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a56:	4803      	ldr	r0, [pc, #12]	; (8004a64 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8004a58:	f7ff fac8 	bl	8003fec <USBD_GetString>
 8004a5c:	e7f8      	b.n	8004a50 <USBD_FS_InterfaceStrDescriptor+0x10>
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	20000fa4 	.word	0x20000fa4
 8004a64:	08004e60 	.word	0x08004e60

08004a68 <uv_led_init>:
 *
 * @param Void
 * @ return Void
 */
void uv_led_init( void )
{
 8004a68:	b510      	push	{r4, lr}
	// bind the ports and pins to the arrays
	uv_led_ports[0] = UV_LED_0_GPIO_Port;
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <uv_led_init+0x7c>)
 8004a6c:	2290      	movs	r2, #144	; 0x90
 8004a6e:	05d2      	lsls	r2, r2, #23
 8004a70:	601a      	str	r2, [r3, #0]
	uv_led_ports[1] = UV_LED_1_GPIO_Port;
 8004a72:	605a      	str	r2, [r3, #4]
	uv_led_ports[2] = UV_LED_2_GPIO_Port;
 8004a74:	609a      	str	r2, [r3, #8]
	uv_led_ports[3] = UV_LED_3_GPIO_Port;
 8004a76:	60da      	str	r2, [r3, #12]
	uv_led_ports[4] = UV_LED_4_GPIO_Port;
 8004a78:	611a      	str	r2, [r3, #16]
	uv_led_ports[5] = UV_LED_5_GPIO_Port;
 8004a7a:	615a      	str	r2, [r3, #20]
	uv_led_ports[6] = UV_LED_6_GPIO_Port;
 8004a7c:	619a      	str	r2, [r3, #24]
	uv_led_ports[7] = UV_LED_7_GPIO_Port;
 8004a7e:	61da      	str	r2, [r3, #28]

	uv_led_pins[0] = UV_LED_0_Pin;
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <uv_led_init+0x80>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	801a      	strh	r2, [r3, #0]
	uv_led_pins[1] = UV_LED_1_Pin;
 8004a86:	3201      	adds	r2, #1
 8004a88:	805a      	strh	r2, [r3, #2]
	uv_led_pins[2] = UV_LED_2_Pin;
 8004a8a:	3202      	adds	r2, #2
 8004a8c:	809a      	strh	r2, [r3, #4]
	uv_led_pins[3] = UV_LED_3_Pin;
 8004a8e:	3204      	adds	r2, #4
 8004a90:	80da      	strh	r2, [r3, #6]
	uv_led_pins[4] = UV_LED_4_Pin;
 8004a92:	3208      	adds	r2, #8
 8004a94:	811a      	strh	r2, [r3, #8]
	uv_led_pins[5] = UV_LED_5_Pin;
 8004a96:	3210      	adds	r2, #16
 8004a98:	815a      	strh	r2, [r3, #10]
	uv_led_pins[6] = UV_LED_6_Pin;
 8004a9a:	3220      	adds	r2, #32
 8004a9c:	819a      	strh	r2, [r3, #12]
	uv_led_pins[7] = UV_LED_7_Pin;
 8004a9e:	3240      	adds	r2, #64	; 0x40
 8004aa0:	81da      	strh	r2, [r3, #14]

	// UVLEDs global enable flag is disabled by default
	enable_global = 0;
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <uv_led_init+0x84>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <uv_led_init+0x88>)

	// Read setup from FLASH
	// Load uv_led_enabled values from FLASH
	uint32_t flash_address_enabled = FLASH_UVLEDS_ENABLED_ADDR;
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <uv_led_init+0x8c>)

	for(uint8_t i = 0; i < 8; i++)
 8004aac:	4812      	ldr	r0, [pc, #72]	; (8004af8 <uv_led_init+0x90>)
	{
		uv_led_enabled[i] = *(uint16_t *)flash_address_enabled;
 8004aae:	8819      	ldrh	r1, [r3, #0]
 8004ab0:	7011      	strb	r1, [r2, #0]
		flash_address_enabled += 2;
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	3201      	adds	r2, #1
	for(uint8_t i = 0; i < 8; i++)
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	d1f9      	bne.n	8004aae <uv_led_init+0x46>
	}

	// Load uv_led_periods_ms values from FLASH
	uint32_t flash_address_periods = FLASH_UVLEDS_PERIODS_ADDR;
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <uv_led_init+0x94>)

	for(uint8_t i = 0; i < 8; i++)
	{
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 8004abc:	4c10      	ldr	r4, [pc, #64]	; (8004b00 <uv_led_init+0x98>)
	for(uint8_t i = 0; i < 8; i++)
 8004abe:	4811      	ldr	r0, [pc, #68]	; (8004b04 <uv_led_init+0x9c>)
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 8004ac0:	4a11      	ldr	r2, [pc, #68]	; (8004b08 <uv_led_init+0xa0>)
 8004ac2:	189a      	adds	r2, r3, r2
 8004ac4:	8819      	ldrh	r1, [r3, #0]
 8004ac6:	50a1      	str	r1, [r4, r2]
		flash_address_periods += 4;
 8004ac8:	3304      	adds	r3, #4
	for(uint8_t i = 0; i < 8; i++)
 8004aca:	4283      	cmp	r3, r0
 8004acc:	d1f8      	bne.n	8004ac0 <uv_led_init+0x58>
	}

	// Reset the counters
	for (uint8_t i = 0; i < 8; i++)
	{
		uv_led_counter[i] = 0;
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <uv_led_init+0xa4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	611a      	str	r2, [r3, #16]
 8004adc:	615a      	str	r2, [r3, #20]
 8004ade:	619a      	str	r2, [r3, #24]
 8004ae0:	61da      	str	r2, [r3, #28]
	}
}
 8004ae2:	bd10      	pop	{r4, pc}
 8004ae4:	200003e4 	.word	0x200003e4
 8004ae8:	2000056c 	.word	0x2000056c
 8004aec:	200003e0 	.word	0x200003e0
 8004af0:	2000057c 	.word	0x2000057c
 8004af4:	08007000 	.word	0x08007000
 8004af8:	08007010 	.word	0x08007010
 8004afc:	08007400 	.word	0x08007400
 8004b00:	20000504 	.word	0x20000504
 8004b04:	08007420 	.word	0x08007420
 8004b08:	f7ff8c00 	.word	0xf7ff8c00
 8004b0c:	20000584 	.word	0x20000584

08004b10 <uv_led_set_frequency>:
 * @param led_id ID of the LED (0-7)
 * @param frequency frequency of the UV LED
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_set_frequency( uint8_t led_id, uint8_t frequency)
{
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	b084      	sub	sp, #16
			HAL_FLASH_Lock();
			return 1;
		}
		return 0;
	}
	return 0;
 8004b14:	2300      	movs	r3, #0
	if ((0 <= led_id) && (led_id < 8))
 8004b16:	2807      	cmp	r0, #7
 8004b18:	d802      	bhi.n	8004b20 <uv_led_set_frequency+0x10>
		if ((UV_LED_FREQ_MIN <= frequency) && (frequency <= UV_LED_FREQ_MAX)) {
 8004b1a:	1e4a      	subs	r2, r1, #1
 8004b1c:	2a3b      	cmp	r2, #59	; 0x3b
 8004b1e:	d902      	bls.n	8004b26 <uv_led_set_frequency+0x16>
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	b004      	add	sp, #16
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
			uv_led_periods_ms[(uint8_t)led_id] = (uint32_t)period;
 8004b26:	0084      	lsls	r4, r0, #2
			uint32_t period = (TIMER_FREQ/frequency)/2;
 8004b28:	4819      	ldr	r0, [pc, #100]	; (8004b90 <uv_led_set_frequency+0x80>)
 8004b2a:	f7fb fb77 	bl	800021c <__divsi3>
			uv_led_periods_ms[(uint8_t)led_id] = (uint32_t)period;
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <uv_led_set_frequency+0x84>)
 8004b30:	50e0      	str	r0, [r4, r3]
			uv_led_counter [(uint8_t)led_id] = 0;
 8004b32:	2500      	movs	r5, #0
 8004b34:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <uv_led_set_frequency+0x88>)
 8004b36:	50e5      	str	r5, [r4, r3]
			HAL_FLASH_Unlock();
 8004b38:	f7fb fcda 	bl	80004f0 <HAL_FLASH_Unlock>
			uint32_t PAGEError = 0;
 8004b3c:	9500      	str	r5, [sp, #0]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004b3e:	9501      	str	r5, [sp, #4]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_PERIODS_ADDR;
 8004b40:	4c16      	ldr	r4, [pc, #88]	; (8004b9c <uv_led_set_frequency+0x8c>)
 8004b42:	9402      	str	r4, [sp, #8]
			EraseInitStruct.NbPages     = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	9303      	str	r3, [sp, #12]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8004b48:	4669      	mov	r1, sp
 8004b4a:	a801      	add	r0, sp, #4
 8004b4c:	f7fb fda6 	bl	800069c <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <uv_led_set_frequency+0x90>)
 8004b52:	6913      	ldr	r3, [r2, #16]
 8004b54:	2102      	movs	r1, #2
 8004b56:	438b      	bics	r3, r1
 8004b58:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004b5a:	f7fb fcdd 	bl	8000518 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8004b5e:	f7fb fcc7 	bl	80004f0 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, uv_led_periods_ms[i]);
 8004b62:	4e0c      	ldr	r6, [pc, #48]	; (8004b94 <uv_led_set_frequency+0x84>)
			for(int i = 0; i <8; i++)
 8004b64:	4d0f      	ldr	r5, [pc, #60]	; (8004ba4 <uv_led_set_frequency+0x94>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, uv_led_periods_ms[i]);
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <uv_led_set_frequency+0x98>)
 8004b68:	18e3      	adds	r3, r4, r3
 8004b6a:	58f2      	ldr	r2, [r6, r3]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	0021      	movs	r1, r4
 8004b70:	2002      	movs	r0, #2
 8004b72:	f7fb fd09 	bl	8000588 <HAL_FLASH_Program>
				flashAddress += 4;
 8004b76:	3404      	adds	r4, #4
			for(int i = 0; i <8; i++)
 8004b78:	42ac      	cmp	r4, r5
 8004b7a:	d1f4      	bne.n	8004b66 <uv_led_set_frequency+0x56>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <uv_led_set_frequency+0x90>)
 8004b7e:	6913      	ldr	r3, [r2, #16]
 8004b80:	2101      	movs	r1, #1
 8004b82:	438b      	bics	r3, r1
 8004b84:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004b86:	f7fb fcc7 	bl	8000518 <HAL_FLASH_Lock>
			return 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7c8      	b.n	8004b20 <uv_led_set_frequency+0x10>
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	00001388 	.word	0x00001388
 8004b94:	20000504 	.word	0x20000504
 8004b98:	20000584 	.word	0x20000584
 8004b9c:	08007400 	.word	0x08007400
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	08007420 	.word	0x08007420
 8004ba8:	f7ff8c00 	.word	0xf7ff8c00

08004bac <uv_led_enable>:
 * @param led_id ID of the LED (0-7)
 * @param enable 1 if the LED is enables, otherwise 0
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_enable(uint8_t led_id, uint8_t enable)
{
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	b084      	sub	sp, #16
			HAL_FLASH_Lock();
			return 1;
		}
		return 0;
	}
	return 0;
 8004bb0:	2300      	movs	r3, #0
	if ((0 <= led_id) && (led_id < 8))
 8004bb2:	2807      	cmp	r0, #7
 8004bb4:	d801      	bhi.n	8004bba <uv_led_enable+0xe>
		if ((enable == 0) || (enable == 1))
 8004bb6:	2901      	cmp	r1, #1
 8004bb8:	d902      	bls.n	8004bc0 <uv_led_enable+0x14>
}
 8004bba:	0018      	movs	r0, r3
 8004bbc:	b004      	add	sp, #16
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
			uv_led_enabled[led_id] = enable;
 8004bc0:	4d1b      	ldr	r5, [pc, #108]	; (8004c30 <uv_led_enable+0x84>)
 8004bc2:	5429      	strb	r1, [r5, r0]
			uv_led_counter [(uint8_t)led_id] = 0;
 8004bc4:	0083      	lsls	r3, r0, #2
 8004bc6:	2400      	movs	r4, #0
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <uv_led_enable+0x88>)
 8004bca:	509c      	str	r4, [r3, r2]
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], enable);
 8004bcc:	0040      	lsls	r0, r0, #1
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <uv_led_enable+0x8c>)
 8004bd0:	5a86      	ldrh	r6, [r0, r2]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <uv_led_enable+0x90>)
 8004bd4:	5898      	ldr	r0, [r3, r2]
 8004bd6:	000a      	movs	r2, r1
 8004bd8:	0031      	movs	r1, r6
 8004bda:	f7fb fea1 	bl	8000920 <HAL_GPIO_WritePin>
			HAL_FLASH_Unlock();
 8004bde:	f7fb fc87 	bl	80004f0 <HAL_FLASH_Unlock>
			uint32_t PAGEError = 0;
 8004be2:	9400      	str	r4, [sp, #0]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004be4:	9401      	str	r4, [sp, #4]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_ENABLED_ADDR;
 8004be6:	4c16      	ldr	r4, [pc, #88]	; (8004c40 <uv_led_enable+0x94>)
 8004be8:	9402      	str	r4, [sp, #8]
			EraseInitStruct.NbPages     = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	9303      	str	r3, [sp, #12]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8004bee:	4669      	mov	r1, sp
 8004bf0:	a801      	add	r0, sp, #4
 8004bf2:	f7fb fd53 	bl	800069c <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8004bf6:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <uv_led_enable+0x98>)
 8004bf8:	6913      	ldr	r3, [r2, #16]
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	438b      	bics	r3, r1
 8004bfe:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004c00:	f7fb fc8a 	bl	8000518 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8004c04:	f7fb fc74 	bl	80004f0 <HAL_FLASH_Unlock>
			for(int i = 0; i <8; i++)
 8004c08:	4e0f      	ldr	r6, [pc, #60]	; (8004c48 <uv_led_enable+0x9c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, uv_led_enabled[i]);
 8004c0a:	782a      	ldrb	r2, [r5, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	0021      	movs	r1, r4
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fb fcb9 	bl	8000588 <HAL_FLASH_Program>
				flashAddress += 2;
 8004c16:	3402      	adds	r4, #2
 8004c18:	3501      	adds	r5, #1
			for(int i = 0; i <8; i++)
 8004c1a:	42b4      	cmp	r4, r6
 8004c1c:	d1f5      	bne.n	8004c0a <uv_led_enable+0x5e>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <uv_led_enable+0x98>)
 8004c20:	6913      	ldr	r3, [r2, #16]
 8004c22:	2101      	movs	r1, #1
 8004c24:	438b      	bics	r3, r1
 8004c26:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004c28:	f7fb fc76 	bl	8000518 <HAL_FLASH_Lock>
			return 1;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e7c4      	b.n	8004bba <uv_led_enable+0xe>
 8004c30:	2000057c 	.word	0x2000057c
 8004c34:	20000584 	.word	0x20000584
 8004c38:	2000056c 	.word	0x2000056c
 8004c3c:	200003e4 	.word	0x200003e4
 8004c40:	08007000 	.word	0x08007000
 8004c44:	40022000 	.word	0x40022000
 8004c48:	08007010 	.word	0x08007010

08004c4c <uv_led_toggle>:
 *
 * 	@param led_id ID of the LED to be toggled
 * 	@return Void
 */
void uv_led_toggle(uint8_t led_id)
{
 8004c4c:	b570      	push	{r4, r5, r6, lr}
		if ((uv_led_enabled[led_id]))
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <uv_led_toggle+0x3c>)
 8004c50:	5c1b      	ldrb	r3, [r3, r0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d100      	bne.n	8004c58 <uv_led_toggle+0xc>
		{
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
		}
}
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
 8004c58:	0082      	lsls	r2, r0, #2
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <uv_led_toggle+0x40>)
 8004c5c:	58d4      	ldr	r4, [r2, r3]
 8004c5e:	0040      	lsls	r0, r0, #1
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <uv_led_toggle+0x44>)
 8004c62:	5ac5      	ldrh	r5, [r0, r3]
 8004c64:	0029      	movs	r1, r5
 8004c66:	0020      	movs	r0, r4
 8004c68:	f7fb fe54 	bl	8000914 <HAL_GPIO_ReadPin>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d103      	bne.n	8004c7a <uv_led_toggle+0x2e>
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <uv_led_toggle+0x48>)
 8004c74:	781a      	ldrb	r2, [r3, #0]
 8004c76:	1e53      	subs	r3, r2, #1
 8004c78:	419a      	sbcs	r2, r3
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	0029      	movs	r1, r5
 8004c7e:	0020      	movs	r0, r4
 8004c80:	f7fb fe4e 	bl	8000920 <HAL_GPIO_WritePin>
}
 8004c84:	e7e7      	b.n	8004c56 <uv_led_toggle+0xa>
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	2000057c 	.word	0x2000057c
 8004c8c:	200003e4 	.word	0x200003e4
 8004c90:	2000056c 	.word	0x2000056c
 8004c94:	200003e0 	.word	0x200003e0

08004c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c98:	4813      	ldr	r0, [pc, #76]	; (8004ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c9a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004c9c:	4813      	ldr	r0, [pc, #76]	; (8004cec <LoopForever+0x6>)
    LDR R1, [R0]
 8004c9e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004ca0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <LoopForever+0xa>)
    CMP R1, R2
 8004ca4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004ca6:	d105      	bne.n	8004cb4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004ca8:	4812      	ldr	r0, [pc, #72]	; (8004cf4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004caa:	4913      	ldr	r1, [pc, #76]	; (8004cf8 <LoopForever+0x12>)
    STR R1, [R0]
 8004cac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004cae:	4813      	ldr	r0, [pc, #76]	; (8004cfc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004cb0:	4913      	ldr	r1, [pc, #76]	; (8004d00 <LoopForever+0x1a>)
    STR R1, [R0]
 8004cb2:	6001      	str	r1, [r0, #0]

08004cb4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cb4:	4813      	ldr	r0, [pc, #76]	; (8004d04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004cb6:	4914      	ldr	r1, [pc, #80]	; (8004d08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <LoopForever+0x26>)
  movs r3, #0
 8004cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cbc:	e002      	b.n	8004cc4 <LoopCopyDataInit>

08004cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc2:	3304      	adds	r3, #4

08004cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cc8:	d3f9      	bcc.n	8004cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004ccc:	4c11      	ldr	r4, [pc, #68]	; (8004d14 <LoopForever+0x2e>)
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd0:	e001      	b.n	8004cd6 <LoopFillZerobss>

08004cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd4:	3204      	adds	r2, #4

08004cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cd8:	d3fb      	bcc.n	8004cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004cda:	f7ff fbdb 	bl	8004494 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004cde:	f000 f81d 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ce2:	f7ff fa7b 	bl	80041dc <main>

08004ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ce6:	e7fe      	b.n	8004ce6 <LoopForever>
  ldr   r0, =_estack
 8004ce8:	200017ff 	.word	0x200017ff
    LDR R0,=0x00000004
 8004cec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004cf0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004cf4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004cf8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004cfc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004d00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d08:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8004d0c:	08004e9c 	.word	0x08004e9c
  ldr r2, =_sbss
 8004d10:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8004d14:	200011a4 	.word	0x200011a4

08004d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d18:	e7fe      	b.n	8004d18 <ADC1_IRQHandler>
	...

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	2600      	movs	r6, #0
 8004d20:	4d0c      	ldr	r5, [pc, #48]	; (8004d54 <__libc_init_array+0x38>)
 8004d22:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	10a4      	asrs	r4, r4, #2
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	f000 f82b 	bl	8004d88 <_init>
 8004d32:	4d0a      	ldr	r5, [pc, #40]	; (8004d5c <__libc_init_array+0x40>)
 8004d34:	4c0a      	ldr	r4, [pc, #40]	; (8004d60 <__libc_init_array+0x44>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	00b3      	lsls	r3, r6, #2
 8004d42:	58eb      	ldr	r3, [r5, r3]
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	00b3      	lsls	r3, r6, #2
 8004d4c:	58eb      	ldr	r3, [r5, r3]
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004e94 	.word	0x08004e94
 8004d58:	08004e94 	.word	0x08004e94
 8004d5c:	08004e94 	.word	0x08004e94
 8004d60:	08004e98 	.word	0x08004e98

08004d64 <memcpy>:
 8004d64:	2300      	movs	r3, #0
 8004d66:	b510      	push	{r4, lr}
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d100      	bne.n	8004d6e <memcpy+0xa>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	5ccc      	ldrb	r4, [r1, r3]
 8004d70:	54c4      	strb	r4, [r0, r3]
 8004d72:	3301      	adds	r3, #1
 8004d74:	e7f8      	b.n	8004d68 <memcpy+0x4>

08004d76 <memset>:
 8004d76:	0003      	movs	r3, r0
 8004d78:	1812      	adds	r2, r2, r0
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d100      	bne.n	8004d80 <memset+0xa>
 8004d7e:	4770      	bx	lr
 8004d80:	7019      	strb	r1, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	e7f9      	b.n	8004d7a <memset+0x4>
	...

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
