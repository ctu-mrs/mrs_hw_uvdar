
UVDAR_Board_Proto_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e38  08004e38  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e38  08004e38  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e38  08004e38  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000180  08004fbc  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  08004fbc  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a620  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d67  00000000  00000000  0003a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ef83  00000000  00000000  0003e52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000fd0  00000000  00000000  0004d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001250  00000000  00000000  0004e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c06e  00000000  00000000  0004f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000112ea  00000000  00000000  0006b73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00092860  00000000  00000000  0007ca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0010f288  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002794  00000000  00000000  0010f304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d34 	.word	0x08004d34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08004d34 	.word	0x08004d34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_InitTick+0x40>)
 80003fa:	7819      	ldrb	r1, [r3, #0]
 80003fc:	20fa      	movs	r0, #250	; 0xfa
 80003fe:	0080      	lsls	r0, r0, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	0001      	movs	r1, r0
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_InitTick+0x44>)
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	f7ff fe7d 	bl	8000108 <__udivsi3>
 800040e:	f000 f877 	bl	8000500 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000414:	2800      	cmp	r0, #0
 8000416:	d101      	bne.n	800041c <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000418:	2c03      	cmp	r4, #3
 800041a:	d901      	bls.n	8000420 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800041c:	0018      	movs	r0, r3
 800041e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000420:	3001      	adds	r0, #1
 8000422:	2200      	movs	r2, #0
 8000424:	0021      	movs	r1, r4
 8000426:	4240      	negs	r0, r0
 8000428:	f000 f82c 	bl	8000484 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <HAL_InitTick+0x48>)
 800042e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000430:	2300      	movs	r3, #0
 8000432:	e7f3      	b.n	800041c <HAL_InitTick+0x28>
 8000434:	20000000 	.word	0x20000000
 8000438:	20000118 	.word	0x20000118
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_Init>:
{
 8000440:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <HAL_Init+0x1c>)
 8000444:	6813      	ldr	r3, [r2, #0]
 8000446:	2110      	movs	r1, #16
 8000448:	430b      	orrs	r3, r1
 800044a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff ffd1 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 8000452:	f003 ff9d 	bl	8004390 <HAL_MspInit>
}
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	40022000 	.word	0x40022000

08000460 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000460:	4a03      	ldr	r2, [pc, #12]	; (8000470 <HAL_IncTick+0x10>)
 8000462:	6811      	ldr	r1, [r2, #0]
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <HAL_IncTick+0x14>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	185b      	adds	r3, r3, r1
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	4770      	bx	lr
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	200003c0 	.word	0x200003c0
 8000474:	20000000 	.word	0x20000000

08000478 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000478:	4b01      	ldr	r3, [pc, #4]	; (8000480 <HAL_GetTick+0x8>)
 800047a:	6818      	ldr	r0, [r3, #0]
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200003c0 	.word	0x200003c0

08000484 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000484:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000486:	2800      	cmp	r0, #0
 8000488:	db14      	blt.n	80004b4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048a:	0884      	lsrs	r4, r0, #2
 800048c:	00a4      	lsls	r4, r4, #2
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <HAL_NVIC_SetPriority+0x5c>)
 8000490:	469c      	mov	ip, r3
 8000492:	4464      	add	r4, ip
 8000494:	26c0      	movs	r6, #192	; 0xc0
 8000496:	00b6      	lsls	r6, r6, #2
 8000498:	59a5      	ldr	r5, [r4, r6]
 800049a:	2203      	movs	r2, #3
 800049c:	4010      	ands	r0, r2
 800049e:	00c0      	lsls	r0, r0, #3
 80004a0:	23ff      	movs	r3, #255	; 0xff
 80004a2:	001a      	movs	r2, r3
 80004a4:	4082      	lsls	r2, r0
 80004a6:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004a8:	0189      	lsls	r1, r1, #6
 80004aa:	400b      	ands	r3, r1
 80004ac:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ae:	432b      	orrs	r3, r5
 80004b0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b4:	b2c0      	uxtb	r0, r0
 80004b6:	220f      	movs	r2, #15
 80004b8:	4002      	ands	r2, r0
 80004ba:	3a08      	subs	r2, #8
 80004bc:	0892      	lsrs	r2, r2, #2
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_NVIC_SetPriority+0x60>)
 80004c2:	18d3      	adds	r3, r2, r3
 80004c4:	69dd      	ldr	r5, [r3, #28]
 80004c6:	2403      	movs	r4, #3
 80004c8:	4020      	ands	r0, r4
 80004ca:	00c0      	lsls	r0, r0, #3
 80004cc:	22ff      	movs	r2, #255	; 0xff
 80004ce:	0014      	movs	r4, r2
 80004d0:	4084      	lsls	r4, r0
 80004d2:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d4:	0189      	lsls	r1, r1, #6
 80004d6:	4011      	ands	r1, r2
 80004d8:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004da:	4329      	orrs	r1, r5
 80004dc:	61d9      	str	r1, [r3, #28]
 80004de:	e7e8      	b.n	80004b2 <HAL_NVIC_SetPriority+0x2e>
 80004e0:	e000e100 	.word	0xe000e100
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004e8:	2800      	cmp	r0, #0
 80004ea:	db05      	blt.n	80004f8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ec:	231f      	movs	r3, #31
 80004ee:	4018      	ands	r0, r3
 80004f0:	3b1e      	subs	r3, #30
 80004f2:	4083      	lsls	r3, r0
 80004f4:	4a01      	ldr	r2, [pc, #4]	; (80004fc <HAL_NVIC_EnableIRQ+0x14>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	e000e100 	.word	0xe000e100

08000500 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000500:	1e43      	subs	r3, r0, #1
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000504:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000506:	4293      	cmp	r3, r2
 8000508:	d80e      	bhi.n	8000528 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_SYSTICK_Config+0x30>)
 800050c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <HAL_SYSTICK_Config+0x34>)
 8000510:	6a03      	ldr	r3, [r0, #32]
 8000512:	021b      	lsls	r3, r3, #8
 8000514:	0a1b      	lsrs	r3, r3, #8
 8000516:	21c0      	movs	r1, #192	; 0xc0
 8000518:	0609      	lsls	r1, r1, #24
 800051a:	430b      	orrs	r3, r1
 800051c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800051e:	2300      	movs	r3, #0
 8000520:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000522:	3307      	adds	r3, #7
 8000524:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000526:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000528:	4770      	bx	lr
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	00ffffff 	.word	0x00ffffff
 8000530:	e000e010 	.word	0xe000e010
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <FLASH_SetErrorCode+0x34>)
 800053a:	68da      	ldr	r2, [r3, #12]
  uint32_t flags = 0U;
 800053c:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800053e:	06d2      	lsls	r2, r2, #27
 8000540:	d505      	bpl.n	800054e <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <FLASH_SetErrorCode+0x38>)
 8000544:	69d3      	ldr	r3, [r2, #28]
 8000546:	2102      	movs	r1, #2
 8000548:	430b      	orrs	r3, r1
 800054a:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800054c:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <FLASH_SetErrorCode+0x34>)
 8000550:	68d2      	ldr	r2, [r2, #12]
 8000552:	0752      	lsls	r2, r2, #29
 8000554:	d506      	bpl.n	8000564 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000556:	4906      	ldr	r1, [pc, #24]	; (8000570 <FLASH_SetErrorCode+0x38>)
 8000558:	69ca      	ldr	r2, [r1, #28]
 800055a:	2001      	movs	r0, #1
 800055c:	4302      	orrs	r2, r0
 800055e:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8000560:	2204      	movs	r2, #4
 8000562:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000564:	4a01      	ldr	r2, [pc, #4]	; (800056c <FLASH_SetErrorCode+0x34>)
 8000566:	60d3      	str	r3, [r2, #12]
}  
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40022000 	.word	0x40022000
 8000570:	200003c8 	.word	0x200003c8

08000574 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_FLASH_Unlock+0x1c>)
 8000576:	691b      	ldr	r3, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000578:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	d507      	bpl.n	800058e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_FLASH_Unlock+0x1c>)
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_FLASH_Unlock+0x20>)
 8000582:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_FLASH_Unlock+0x24>)
 8000586:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000588:	6918      	ldr	r0, [r3, #16]
 800058a:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 800058c:	0fc0      	lsrs	r0, r0, #31
}
 800058e:	4770      	bx	lr
 8000590:	40022000 	.word	0x40022000
 8000594:	45670123 	.word	0x45670123
 8000598:	cdef89ab 	.word	0xcdef89ab

0800059c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <HAL_FLASH_Lock+0x10>)
 800059e:	6913      	ldr	r3, [r2, #16]
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6113      	str	r3, [r2, #16]
}
 80005a6:	2000      	movs	r0, #0
 80005a8:	4770      	bx	lr
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40022000 	.word	0x40022000

080005b0 <FLASH_WaitForLastOperation>:
{
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ff60 	bl	8000478 <HAL_GetTick>
 80005b8:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005ba:	4e13      	ldr	r6, [pc, #76]	; (8000608 <FLASH_WaitForLastOperation+0x58>)
 80005bc:	2501      	movs	r5, #1
 80005be:	68f3      	ldr	r3, [r6, #12]
 80005c0:	421d      	tst	r5, r3
 80005c2:	d00a      	beq.n	80005da <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80005c4:	1c63      	adds	r3, r4, #1
 80005c6:	d0fa      	beq.n	80005be <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d01a      	beq.n	8000602 <FLASH_WaitForLastOperation+0x52>
 80005cc:	f7ff ff54 	bl	8000478 <HAL_GetTick>
 80005d0:	1bc0      	subs	r0, r0, r7
 80005d2:	42a0      	cmp	r0, r4
 80005d4:	d9f3      	bls.n	80005be <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80005d6:	2003      	movs	r0, #3
 80005d8:	e012      	b.n	8000600 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <FLASH_WaitForLastOperation+0x58>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	069b      	lsls	r3, r3, #26
 80005e0:	d502      	bpl.n	80005e8 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <FLASH_WaitForLastOperation+0x58>)
 80005e4:	2220      	movs	r2, #32
 80005e6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <FLASH_WaitForLastOperation+0x58>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	06db      	lsls	r3, r3, #27
 80005ee:	d404      	bmi.n	80005fa <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <FLASH_WaitForLastOperation+0x58>)
 80005f2:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80005f4:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80005f6:	075b      	lsls	r3, r3, #29
 80005f8:	d502      	bpl.n	8000600 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 80005fa:	f7ff ff9d 	bl	8000538 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80005fe:	2001      	movs	r0, #1
}
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8000602:	2003      	movs	r0, #3
 8000604:	e7fc      	b.n	8000600 <FLASH_WaitForLastOperation+0x50>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_FLASH_Program>:
{
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	46de      	mov	lr, fp
 8000610:	4657      	mov	r7, sl
 8000612:	464e      	mov	r6, r9
 8000614:	4645      	mov	r5, r8
 8000616:	b5e0      	push	{r5, r6, r7, lr}
 8000618:	b083      	sub	sp, #12
 800061a:	0004      	movs	r4, r0
 800061c:	000e      	movs	r6, r1
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <HAL_FLASH_Program+0xc0>)
 8000624:	7e1b      	ldrb	r3, [r3, #24]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d04b      	beq.n	80006c2 <HAL_FLASH_Program+0xb6>
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <HAL_FLASH_Program+0xc0>)
 800062c:	2201      	movs	r2, #1
 800062e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000630:	4827      	ldr	r0, [pc, #156]	; (80006d0 <HAL_FLASH_Program+0xc4>)
 8000632:	f7ff ffbd 	bl	80005b0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000636:	2800      	cmp	r0, #0
 8000638:	d139      	bne.n	80006ae <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800063a:	2c01      	cmp	r4, #1
 800063c:	d043      	beq.n	80006c6 <HAL_FLASH_Program+0xba>
      nbiterations = 4U;
 800063e:	3c02      	subs	r4, #2
 8000640:	4263      	negs	r3, r4
 8000642:	415c      	adcs	r4, r3
 8000644:	4264      	negs	r4, r4
 8000646:	2301      	movs	r3, #1
 8000648:	439c      	bics	r4, r3
 800064a:	46a0      	mov	r8, r4
 800064c:	3303      	adds	r3, #3
 800064e:	469c      	mov	ip, r3
 8000650:	44e0      	add	r8, ip
{
 8000652:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <HAL_FLASH_Program+0xc0>)
 8000656:	469b      	mov	fp, r3
 8000658:	2300      	movs	r3, #0
 800065a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800065c:	4c1d      	ldr	r4, [pc, #116]	; (80006d4 <HAL_FLASH_Program+0xc8>)
 800065e:	e01e      	b.n	800069e <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000660:	2220      	movs	r2, #32
 8000662:	1ad2      	subs	r2, r2, r3
 8000664:	4649      	mov	r1, r9
 8000666:	4091      	lsls	r1, r2
 8000668:	000a      	movs	r2, r1
 800066a:	9901      	ldr	r1, [sp, #4]
 800066c:	40d9      	lsrs	r1, r3
 800066e:	000b      	movs	r3, r1
 8000670:	4313      	orrs	r3, r2
 8000672:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000674:	465a      	mov	r2, fp
 8000676:	4651      	mov	r1, sl
 8000678:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800067a:	6922      	ldr	r2, [r4, #16]
 800067c:	2701      	movs	r7, #1
 800067e:	433a      	orrs	r2, r7
 8000680:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000682:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <HAL_FLASH_Program+0xc4>)
 8000686:	f7ff ff93 	bl	80005b0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800068a:	6923      	ldr	r3, [r4, #16]
 800068c:	43bb      	bics	r3, r7
 800068e:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8000690:	2800      	cmp	r0, #0
 8000692:	d10c      	bne.n	80006ae <HAL_FLASH_Program+0xa2>
 8000694:	3501      	adds	r5, #1
 8000696:	3602      	adds	r6, #2
    for (index = 0U; index < nbiterations; index++)
 8000698:	b2eb      	uxtb	r3, r5
 800069a:	4598      	cmp	r8, r3
 800069c:	d907      	bls.n	80006ae <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800069e:	012b      	lsls	r3, r5, #4
 80006a0:	2220      	movs	r2, #32
 80006a2:	4252      	negs	r2, r2
 80006a4:	189a      	adds	r2, r3, r2
 80006a6:	d4db      	bmi.n	8000660 <HAL_FLASH_Program+0x54>
 80006a8:	464b      	mov	r3, r9
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	e7e1      	b.n	8000672 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <HAL_FLASH_Program+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	b003      	add	sp, #12
 80006b6:	bc3c      	pop	{r2, r3, r4, r5}
 80006b8:	4690      	mov	r8, r2
 80006ba:	4699      	mov	r9, r3
 80006bc:	46a2      	mov	sl, r4
 80006be:	46ab      	mov	fp, r5
 80006c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80006c2:	2002      	movs	r0, #2
 80006c4:	e7f6      	b.n	80006b4 <HAL_FLASH_Program+0xa8>
      nbiterations = 1U;
 80006c6:	2301      	movs	r3, #1
 80006c8:	4698      	mov	r8, r3
 80006ca:	e7c2      	b.n	8000652 <HAL_FLASH_Program+0x46>
 80006cc:	200003c8 	.word	0x200003c8
 80006d0:	0000c350 	.word	0x0000c350
 80006d4:	40022000 	.word	0x40022000

080006d8 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <FLASH_MassErase+0x1c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <FLASH_MassErase+0x20>)
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	2104      	movs	r1, #4
 80006e4:	430a      	orrs	r2, r1
 80006e6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80006e8:	691a      	ldr	r2, [r3, #16]
 80006ea:	313c      	adds	r1, #60	; 0x3c
 80006ec:	430a      	orrs	r2, r1
 80006ee:	611a      	str	r2, [r3, #16]
}
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	200003c8 	.word	0x200003c8
 80006f8:	40022000 	.word	0x40022000

080006fc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <FLASH_PageErase+0x1c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <FLASH_PageErase+0x20>)
 8000704:	691a      	ldr	r2, [r3, #16]
 8000706:	2102      	movs	r1, #2
 8000708:	430a      	orrs	r2, r1
 800070a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800070c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	313e      	adds	r1, #62	; 0x3e
 8000712:	430a      	orrs	r2, r1
 8000714:	611a      	str	r2, [r3, #16]
}
 8000716:	4770      	bx	lr
 8000718:	200003c8 	.word	0x200003c8
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_FLASHEx_Erase>:
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	46c6      	mov	lr, r8
 8000724:	b500      	push	{lr}
 8000726:	0006      	movs	r6, r0
 8000728:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <HAL_FLASHEx_Erase+0xb4>)
 800072c:	7e1b      	ldrb	r3, [r3, #24]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d04d      	beq.n	80007ce <HAL_FLASHEx_Erase+0xae>
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <HAL_FLASHEx_Erase+0xb4>)
 8000734:	2201      	movs	r2, #1
 8000736:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000738:	6803      	ldr	r3, [r0, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d029      	beq.n	8000792 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800073e:	4826      	ldr	r0, [pc, #152]	; (80007d8 <HAL_FLASHEx_Erase+0xb8>)
 8000740:	f7ff ff36 	bl	80005b0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000744:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000746:	2800      	cmp	r0, #0
 8000748:	d129      	bne.n	800079e <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFFU;
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	4642      	mov	r2, r8
 8000750:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8000752:	6874      	ldr	r4, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000754:	68b3      	ldr	r3, [r6, #8]
 8000756:	029b      	lsls	r3, r3, #10
 8000758:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 800075a:	429c      	cmp	r4, r3
 800075c:	d235      	bcs.n	80007ca <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800075e:	4f1f      	ldr	r7, [pc, #124]	; (80007dc <HAL_FLASHEx_Erase+0xbc>)
 8000760:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8000762:	0020      	movs	r0, r4
 8000764:	f7ff ffca 	bl	80006fc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000768:	481b      	ldr	r0, [pc, #108]	; (80007d8 <HAL_FLASHEx_Erase+0xb8>)
 800076a:	f7ff ff21 	bl	80005b0 <FLASH_WaitForLastOperation>
 800076e:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	43ab      	bics	r3, r5
 8000774:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8000776:	2800      	cmp	r0, #0
 8000778:	d124      	bne.n	80007c4 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	469c      	mov	ip, r3
 8000780:	4464      	add	r4, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000782:	68b3      	ldr	r3, [r6, #8]
 8000784:	029b      	lsls	r3, r3, #10
 8000786:	6871      	ldr	r1, [r6, #4]
 8000788:	468c      	mov	ip, r1
 800078a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800078c:	42a3      	cmp	r3, r4
 800078e:	d8e8      	bhi.n	8000762 <HAL_FLASHEx_Erase+0x42>
 8000790:	e005      	b.n	800079e <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <HAL_FLASHEx_Erase+0xb8>)
 8000794:	f7ff ff0c 	bl	80005b0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000798:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800079a:	2800      	cmp	r0, #0
 800079c:	d006      	beq.n	80007ac <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_FLASHEx_Erase+0xb4>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	7619      	strb	r1, [r3, #24]
}
 80007a4:	0010      	movs	r0, r2
 80007a6:	bc04      	pop	{r2}
 80007a8:	4690      	mov	r8, r2
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80007ac:	f7ff ff94 	bl	80006d8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <HAL_FLASHEx_Erase+0xb8>)
 80007b2:	f7ff fefd 	bl	80005b0 <FLASH_WaitForLastOperation>
 80007b6:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80007b8:	4908      	ldr	r1, [pc, #32]	; (80007dc <HAL_FLASHEx_Erase+0xbc>)
 80007ba:	690b      	ldr	r3, [r1, #16]
 80007bc:	2004      	movs	r0, #4
 80007be:	4383      	bics	r3, r0
 80007c0:	610b      	str	r3, [r1, #16]
 80007c2:	e7ec      	b.n	800079e <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 80007c4:	4643      	mov	r3, r8
 80007c6:	601c      	str	r4, [r3, #0]
            break;
 80007c8:	e7e9      	b.n	800079e <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80007ca:	2201      	movs	r2, #1
 80007cc:	e7e7      	b.n	800079e <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 80007ce:	2202      	movs	r2, #2
 80007d0:	e7e8      	b.n	80007a4 <HAL_FLASHEx_Erase+0x84>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	200003c8 	.word	0x200003c8
 80007d8:	0000c350 	.word	0x0000c350
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	46de      	mov	lr, fp
 80007e4:	4657      	mov	r7, sl
 80007e6:	464e      	mov	r6, r9
 80007e8:	4645      	mov	r5, r8
 80007ea:	b5e0      	push	{r5, r6, r7, lr}
 80007ec:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ee:	680a      	ldr	r2, [r1, #0]
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d100      	bne.n	80007f6 <HAL_GPIO_Init+0x16>
 80007f4:	e0be      	b.n	8000974 <HAL_GPIO_Init+0x194>
  uint32_t position = 0x00u;
 80007f6:	2400      	movs	r4, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	2310      	movs	r3, #16
 80007fa:	469a      	mov	sl, r3
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007fc:	3b0d      	subs	r3, #13
 80007fe:	4699      	mov	r9, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000800:	4b60      	ldr	r3, [pc, #384]	; (8000984 <HAL_GPIO_Init+0x1a4>)
 8000802:	18c3      	adds	r3, r0, r3
 8000804:	425d      	negs	r5, r3
 8000806:	416b      	adcs	r3, r5
 8000808:	425b      	negs	r3, r3
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	e046      	b.n	800089c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3u];
 800080e:	08e5      	lsrs	r5, r4, #3
 8000810:	00ad      	lsls	r5, r5, #2
 8000812:	1946      	adds	r6, r0, r5
 8000814:	9600      	str	r6, [sp, #0]
 8000816:	6a36      	ldr	r6, [r6, #32]
 8000818:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081a:	2607      	movs	r6, #7
 800081c:	4026      	ands	r6, r4
 800081e:	00b6      	lsls	r6, r6, #2
 8000820:	46b4      	mov	ip, r6
 8000822:	260f      	movs	r6, #15
 8000824:	4665      	mov	r5, ip
 8000826:	40ae      	lsls	r6, r5
 8000828:	46b3      	mov	fp, r6
 800082a:	4646      	mov	r6, r8
 800082c:	465d      	mov	r5, fp
 800082e:	43ae      	bics	r6, r5
 8000830:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000832:	690e      	ldr	r6, [r1, #16]
 8000834:	4665      	mov	r5, ip
 8000836:	40ae      	lsls	r6, r5
 8000838:	46b4      	mov	ip, r6
 800083a:	4646      	mov	r6, r8
 800083c:	4665      	mov	r5, ip
 800083e:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 8000840:	0035      	movs	r5, r6
 8000842:	9e00      	ldr	r6, [sp, #0]
 8000844:	6235      	str	r5, [r6, #32]
 8000846:	e058      	b.n	80008fa <HAL_GPIO_Init+0x11a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000848:	2500      	movs	r5, #0
 800084a:	40bd      	lsls	r5, r7
 800084c:	4666      	mov	r6, ip
 800084e:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000850:	609d      	str	r5, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000852:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <HAL_GPIO_Init+0x1a8>)
 8000854:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8000856:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000858:	684e      	ldr	r6, [r1, #4]
 800085a:	03f6      	lsls	r6, r6, #15
 800085c:	d500      	bpl.n	8000860 <HAL_GPIO_Init+0x80>
 800085e:	e081      	b.n	8000964 <HAL_GPIO_Init+0x184>
        temp &= ~(iocurrent);
 8000860:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000862:	4f49      	ldr	r7, [pc, #292]	; (8000988 <HAL_GPIO_Init+0x1a8>)
 8000864:	603b      	str	r3, [r7, #0]

        temp = EXTI->EMR;
 8000866:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000868:	684e      	ldr	r6, [r1, #4]
 800086a:	03b6      	lsls	r6, r6, #14
 800086c:	d47c      	bmi.n	8000968 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 800086e:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000870:	4f45      	ldr	r7, [pc, #276]	; (8000988 <HAL_GPIO_Init+0x1a8>)
 8000872:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000874:	68bb      	ldr	r3, [r7, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000876:	684e      	ldr	r6, [r1, #4]
 8000878:	02f6      	lsls	r6, r6, #11
 800087a:	d477      	bmi.n	800096c <HAL_GPIO_Init+0x18c>
        temp &= ~(iocurrent);
 800087c:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800087e:	4f42      	ldr	r7, [pc, #264]	; (8000988 <HAL_GPIO_Init+0x1a8>)
 8000880:	60bb      	str	r3, [r7, #8]

        temp = EXTI->FTSR;
 8000882:	68fb      	ldr	r3, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000884:	684e      	ldr	r6, [r1, #4]
 8000886:	02b6      	lsls	r6, r6, #10
 8000888:	d472      	bmi.n	8000970 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800088a:	402b      	ands	r3, r5
 800088c:	001a      	movs	r2, r3
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800088e:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <HAL_GPIO_Init+0x1a8>)
 8000890:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000892:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000894:	680a      	ldr	r2, [r1, #0]
 8000896:	0013      	movs	r3, r2
 8000898:	40e3      	lsrs	r3, r4
 800089a:	d06b      	beq.n	8000974 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800089c:	2501      	movs	r5, #1
 800089e:	40a5      	lsls	r5, r4
 80008a0:	402a      	ands	r2, r5
    if (iocurrent != 0x00u)
 80008a2:	d0f6      	beq.n	8000892 <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a4:	684b      	ldr	r3, [r1, #4]
 80008a6:	4657      	mov	r7, sl
 80008a8:	43bb      	bics	r3, r7
 80008aa:	3b01      	subs	r3, #1
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d813      	bhi.n	80008d8 <HAL_GPIO_Init+0xf8>
        temp = GPIOx->OSPEEDR;
 80008b0:	6883      	ldr	r3, [r0, #8]
 80008b2:	0066      	lsls	r6, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008b4:	464f      	mov	r7, r9
 80008b6:	40b7      	lsls	r7, r6
 80008b8:	43bb      	bics	r3, r7
 80008ba:	001f      	movs	r7, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008bc:	68cb      	ldr	r3, [r1, #12]
 80008be:	40b3      	lsls	r3, r6
 80008c0:	433b      	orrs	r3, r7
        GPIOx->OSPEEDR = temp;
 80008c2:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80008c4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c6:	43ab      	bics	r3, r5
 80008c8:	001d      	movs	r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ca:	684b      	ldr	r3, [r1, #4]
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	2601      	movs	r6, #1
 80008d0:	4033      	ands	r3, r6
 80008d2:	40a3      	lsls	r3, r4
 80008d4:	432b      	orrs	r3, r5
        GPIOx->OTYPER = temp;
 80008d6:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80008d8:	68c5      	ldr	r5, [r0, #12]
 80008da:	0067      	lsls	r7, r4, #1
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008dc:	464b      	mov	r3, r9
 80008de:	40bb      	lsls	r3, r7
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401d      	ands	r5, r3
 80008e4:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e6:	688d      	ldr	r5, [r1, #8]
 80008e8:	40bd      	lsls	r5, r7
 80008ea:	4666      	mov	r6, ip
 80008ec:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80008ee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f0:	684d      	ldr	r5, [r1, #4]
 80008f2:	4656      	mov	r6, sl
 80008f4:	43b5      	bics	r5, r6
 80008f6:	2d02      	cmp	r5, #2
 80008f8:	d089      	beq.n	800080e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80008fa:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008fc:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008fe:	684b      	ldr	r3, [r1, #4]
 8000900:	464e      	mov	r6, r9
 8000902:	4033      	ands	r3, r6
 8000904:	40bb      	lsls	r3, r7
 8000906:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 8000908:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800090a:	684b      	ldr	r3, [r1, #4]
 800090c:	2580      	movs	r5, #128	; 0x80
 800090e:	056d      	lsls	r5, r5, #21
 8000910:	422b      	tst	r3, r5
 8000912:	d0be      	beq.n	8000892 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_GPIO_Init+0x1ac>)
 8000916:	699d      	ldr	r5, [r3, #24]
 8000918:	2601      	movs	r6, #1
 800091a:	4335      	orrs	r5, r6
 800091c:	619d      	str	r5, [r3, #24]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4033      	ands	r3, r6
 8000922:	9303      	str	r3, [sp, #12]
 8000924:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000926:	08a3      	lsrs	r3, r4, #2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4d19      	ldr	r5, [pc, #100]	; (8000990 <HAL_GPIO_Init+0x1b0>)
 800092c:	46ac      	mov	ip, r5
 800092e:	4463      	add	r3, ip
 8000930:	689d      	ldr	r5, [r3, #8]
 8000932:	46ac      	mov	ip, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000934:	464f      	mov	r7, r9
 8000936:	4027      	ands	r7, r4
 8000938:	00bf      	lsls	r7, r7, #2
 800093a:	250f      	movs	r5, #15
 800093c:	40bd      	lsls	r5, r7
 800093e:	4666      	mov	r6, ip
 8000940:	43ae      	bics	r6, r5
 8000942:	46b4      	mov	ip, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000944:	2590      	movs	r5, #144	; 0x90
 8000946:	05ed      	lsls	r5, r5, #23
 8000948:	42a8      	cmp	r0, r5
 800094a:	d100      	bne.n	800094e <HAL_GPIO_Init+0x16e>
 800094c:	e77c      	b.n	8000848 <HAL_GPIO_Init+0x68>
 800094e:	4d11      	ldr	r5, [pc, #68]	; (8000994 <HAL_GPIO_Init+0x1b4>)
 8000950:	42a8      	cmp	r0, r5
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x180>
 8000954:	2502      	movs	r5, #2
 8000956:	9e01      	ldr	r6, [sp, #4]
 8000958:	43ae      	bics	r6, r5
 800095a:	0035      	movs	r5, r6
 800095c:	3505      	adds	r5, #5
 800095e:	e774      	b.n	800084a <HAL_GPIO_Init+0x6a>
 8000960:	2501      	movs	r5, #1
 8000962:	e772      	b.n	800084a <HAL_GPIO_Init+0x6a>
          temp |= iocurrent;
 8000964:	4313      	orrs	r3, r2
 8000966:	e77c      	b.n	8000862 <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 8000968:	4313      	orrs	r3, r2
 800096a:	e781      	b.n	8000870 <HAL_GPIO_Init+0x90>
          temp |= iocurrent;
 800096c:	4313      	orrs	r3, r2
 800096e:	e786      	b.n	800087e <HAL_GPIO_Init+0x9e>
          temp |= iocurrent;
 8000970:	431a      	orrs	r2, r3
 8000972:	e78c      	b.n	800088e <HAL_GPIO_Init+0xae>
  } 
}
 8000974:	b005      	add	sp, #20
 8000976:	bc3c      	pop	{r2, r3, r4, r5}
 8000978:	4690      	mov	r8, r2
 800097a:	4699      	mov	r9, r3
 800097c:	46a2      	mov	sl, r4
 800097e:	46ab      	mov	fp, r5
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	b7fff800 	.word	0xb7fff800
 8000988:	40010400 	.word	0x40010400
 800098c:	40021000 	.word	0x40021000
 8000990:	40010000 	.word	0x40010000
 8000994:	48000400 	.word	0x48000400

08000998 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000998:	6900      	ldr	r0, [r0, #16]
 800099a:	4008      	ands	r0, r1
 800099c:	1e41      	subs	r1, r0, #1
 800099e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80009a0:	b2c0      	uxtb	r0, r0
  }
 80009a2:	4770      	bx	lr

080009a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009a8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80009aa:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ac:	6181      	str	r1, [r0, #24]
 80009ae:	e7fc      	b.n	80009aa <HAL_GPIO_WritePin+0x6>

080009b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009b0:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4218      	tst	r0, r3
 80009b8:	d100      	bne.n	80009bc <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80009ba:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80009be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009c0:	f003 fca6 	bl	8004310 <HAL_GPIO_EXTI_Callback>
}
 80009c4:	e7f9      	b.n	80009ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40010400 	.word	0x40010400

080009cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ce:	46d6      	mov	lr, sl
 80009d0:	464f      	mov	r7, r9
 80009d2:	4646      	mov	r6, r8
 80009d4:	b5c0      	push	{r6, r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009da:	d100      	bne.n	80009de <HAL_PCD_Init+0x12>
 80009dc:	e06f      	b.n	8000abe <HAL_PCD_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <HAL_PCD_Init+0xf8>)
 80009e0:	5cc3      	ldrb	r3, [r0, r3]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d05f      	beq.n	8000aa6 <HAL_PCD_Init+0xda>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <HAL_PCD_Init+0xf8>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	54e2      	strb	r2, [r4, r3]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	f001 fe89 	bl	8002704 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009f2:	6861      	ldr	r1, [r4, #4]
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d039      	beq.n	8000a6c <HAL_PCD_Init+0xa0>
 80009f8:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80009fa:	2329      	movs	r3, #41	; 0x29
 80009fc:	4698      	mov	r8, r3
 80009fe:	3b28      	subs	r3, #40	; 0x28
 8000a00:	469c      	mov	ip, r3
    hpcd->IN_ep[i].num = i;
 8000a02:	3327      	adds	r3, #39	; 0x27
 8000a04:	4699      	mov	r9, r3
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a06:	3303      	adds	r3, #3
 8000a08:	469a      	mov	sl, r3
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	0090      	lsls	r0, r2, #2
 8000a0e:	1883      	adds	r3, r0, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	18e3      	adds	r3, r4, r3
    hpcd->IN_ep[i].is_in = 1U;
 8000a14:	4646      	mov	r6, r8
 8000a16:	4667      	mov	r7, ip
 8000a18:	559f      	strb	r7, [r3, r6]
    hpcd->IN_ep[i].num = i;
 8000a1a:	464e      	mov	r6, r9
 8000a1c:	559a      	strb	r2, [r3, r6]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a20:	4656      	mov	r6, sl
 8000a22:	559d      	strb	r5, [r3, r6]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a24:	639d      	str	r5, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a26:	63dd      	str	r5, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a28:	641d      	str	r5, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	428a      	cmp	r2, r1
 8000a30:	d3ec      	bcc.n	8000a0c <HAL_PCD_Init+0x40>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a32:	2000      	movs	r0, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a34:	2500      	movs	r5, #0
 8000a36:	0082      	lsls	r2, r0, #2
 8000a38:	1813      	adds	r3, r2, r0
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	18e3      	adds	r3, r4, r3
 8000a3e:	001e      	movs	r6, r3
 8000a40:	366a      	adds	r6, #106	; 0x6a
 8000a42:	36ff      	adds	r6, #255	; 0xff
 8000a44:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].num = i;
 8000a46:	3e01      	subs	r6, #1
 8000a48:	7030      	strb	r0, [r6, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a4a:	3603      	adds	r6, #3
 8000a4c:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a4e:	360d      	adds	r6, #13
 8000a50:	6035      	str	r5, [r6, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a52:	337d      	adds	r3, #125	; 0x7d
 8000a54:	33ff      	adds	r3, #255	; 0xff
 8000a56:	601d      	str	r5, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	00d2      	lsls	r2, r2, #3
 8000a5c:	18a2      	adds	r2, r4, r2
 8000a5e:	3281      	adds	r2, #129	; 0x81
 8000a60:	32ff      	adds	r2, #255	; 0xff
 8000a62:	6015      	str	r5, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a64:	3001      	adds	r0, #1
 8000a66:	b2c0      	uxtb	r0, r0
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	d3e4      	bcc.n	8000a36 <HAL_PCD_Init+0x6a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a6c:	0023      	movs	r3, r4
 8000a6e:	3310      	adds	r3, #16
 8000a70:	466a      	mov	r2, sp
 8000a72:	cb23      	ldmia	r3!, {r0, r1, r5}
 8000a74:	c223      	stmia	r2!, {r0, r1, r5}
 8000a76:	cb03      	ldmia	r3!, {r0, r1}
 8000a78:	c203      	stmia	r2!, {r0, r1}
 8000a7a:	6861      	ldr	r1, [r4, #4]
 8000a7c:	68a2      	ldr	r2, [r4, #8]
 8000a7e:	68e3      	ldr	r3, [r4, #12]
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	f001 fe49 	bl	8002718 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000a86:	2324      	movs	r3, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	54e2      	strb	r2, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_PCD_Init+0xf8>)
 8000a8e:	3201      	adds	r2, #1
 8000a90:	54e2      	strb	r2, [r4, r3]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000a92:	2000      	movs	r0, #0
  if (hpcd->Init.lpm_enable == 1U)
 8000a94:	69e3      	ldr	r3, [r4, #28]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d00c      	beq.n	8000ab4 <HAL_PCD_Init+0xe8>
}
 8000a9a:	b006      	add	sp, #24
 8000a9c:	bc1c      	pop	{r2, r3, r4}
 8000a9e:	4690      	mov	r8, r2
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	46a2      	mov	sl, r4
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000aa6:	23aa      	movs	r3, #170	; 0xaa
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8000aae:	f003 fde7 	bl	8004680 <HAL_PCD_MspInit>
 8000ab2:	e798      	b.n	80009e6 <HAL_PCD_Init+0x1a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ab4:	0020      	movs	r0, r4
 8000ab6:	f000 ff32 	bl	800191e <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8000aba:	2000      	movs	r0, #0
 8000abc:	e7ed      	b.n	8000a9a <HAL_PCD_Init+0xce>
    return HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	e7eb      	b.n	8000a9a <HAL_PCD_Init+0xce>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	000002a9 	.word	0x000002a9

08000ac8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	5cc3      	ldrb	r3, [r0, r3]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d00d      	beq.n	8000af2 <HAL_PCD_Start+0x2a>
 8000ad6:	25aa      	movs	r5, #170	; 0xaa
 8000ad8:	00ad      	lsls	r5, r5, #2
 8000ada:	2301      	movs	r3, #1
 8000adc:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000ade:	6800      	ldr	r0, [r0, #0]
 8000ae0:	f001 fe06 	bl	80026f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	f002 f8a8 	bl	8002c3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000aea:	2300      	movs	r3, #0
 8000aec:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 8000aee:	2000      	movs	r0, #0
}
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000af2:	2002      	movs	r0, #2
 8000af4:	e7fc      	b.n	8000af0 <HAL_PCD_Start+0x28>

08000af6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000af6:	b570      	push	{r4, r5, r6, lr}
 8000af8:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000afa:	23aa      	movs	r3, #170	; 0xaa
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	5cc3      	ldrb	r3, [r0, r3]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d00c      	beq.n	8000b1e <HAL_PCD_SetAddress+0x28>
 8000b04:	25aa      	movs	r5, #170	; 0xaa
 8000b06:	00ad      	lsls	r5, r5, #2
 8000b08:	2301      	movs	r3, #1
 8000b0a:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 8000b0c:	3323      	adds	r3, #35	; 0x23
 8000b0e:	54c1      	strb	r1, [r0, r3]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b10:	6800      	ldr	r0, [r0, #0]
 8000b12:	f002 f88b 	bl	8002c2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b16:	2300      	movs	r3, #0
 8000b18:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 8000b1a:	2000      	movs	r0, #0
}
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	e7fc      	b.n	8000b1c <HAL_PCD_SetAddress+0x26>
	...

08000b24 <HAL_PCD_IRQHandler>:
{
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b26:	46de      	mov	lr, fp
 8000b28:	4657      	mov	r7, sl
 8000b2a:	464e      	mov	r6, r9
 8000b2c:	4645      	mov	r5, r8
 8000b2e:	b5e0      	push	{r5, r6, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000b34:	6800      	ldr	r0, [r0, #0]
 8000b36:	f002 f888 	bl	8002c4a <USB_ReadInterrupts>
 8000b3a:	0403      	lsls	r3, r0, #16
 8000b3c:	d500      	bpl.n	8000b40 <HAL_PCD_IRQHandler+0x1c>
 8000b3e:	e08a      	b.n	8000c56 <HAL_PCD_IRQHandler+0x132>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	f002 f882 	bl	8002c4a <USB_ReadInterrupts>
 8000b46:	0543      	lsls	r3, r0, #21
 8000b48:	d501      	bpl.n	8000b4e <HAL_PCD_IRQHandler+0x2a>
 8000b4a:	f000 fd45 	bl	80015d8 <HAL_PCD_IRQHandler+0xab4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000b4e:	6820      	ldr	r0, [r4, #0]
 8000b50:	f002 f87b 	bl	8002c4a <USB_ReadInterrupts>
 8000b54:	0443      	lsls	r3, r0, #17
 8000b56:	d505      	bpl.n	8000b64 <HAL_PCD_IRQHandler+0x40>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b58:	6821      	ldr	r1, [r4, #0]
 8000b5a:	2244      	movs	r2, #68	; 0x44
 8000b5c:	5a8b      	ldrh	r3, [r1, r2]
 8000b5e:	48cd      	ldr	r0, [pc, #820]	; (8000e94 <HAL_PCD_IRQHandler+0x370>)
 8000b60:	4003      	ands	r3, r0
 8000b62:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	f002 f870 	bl	8002c4a <USB_ReadInterrupts>
 8000b6a:	0483      	lsls	r3, r0, #18
 8000b6c:	d505      	bpl.n	8000b7a <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000b6e:	6821      	ldr	r1, [r4, #0]
 8000b70:	2244      	movs	r2, #68	; 0x44
 8000b72:	5a8b      	ldrh	r3, [r1, r2]
 8000b74:	48c8      	ldr	r0, [pc, #800]	; (8000e98 <HAL_PCD_IRQHandler+0x374>)
 8000b76:	4003      	ands	r3, r0
 8000b78:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	f002 f865 	bl	8002c4a <USB_ReadInterrupts>
 8000b80:	04c3      	lsls	r3, r0, #19
 8000b82:	d51a      	bpl.n	8000bba <HAL_PCD_IRQHandler+0x96>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000b84:	6821      	ldr	r1, [r4, #0]
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	5aca      	ldrh	r2, [r1, r3]
 8000b8a:	2004      	movs	r0, #4
 8000b8c:	4382      	bics	r2, r0
 8000b8e:	52ca      	strh	r2, [r1, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b90:	6821      	ldr	r1, [r4, #0]
 8000b92:	5aca      	ldrh	r2, [r1, r3]
 8000b94:	3004      	adds	r0, #4
 8000b96:	4382      	bics	r2, r0
 8000b98:	52ca      	strh	r2, [r1, r3]
    if (hpcd->LPM_State == LPM_L1)
 8000b9a:	23b8      	movs	r3, #184	; 0xb8
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	5ce3      	ldrb	r3, [r4, r3]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_PCD_IRQHandler+0x84>
 8000ba4:	f000 fd27 	bl	80015f6 <HAL_PCD_IRQHandler+0xad2>
    HAL_PCD_ResumeCallback(hpcd);
 8000ba8:	0020      	movs	r0, r4
 8000baa:	f003 fdd7 	bl	800475c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000bae:	6821      	ldr	r1, [r4, #0]
 8000bb0:	2244      	movs	r2, #68	; 0x44
 8000bb2:	5a8b      	ldrh	r3, [r1, r2]
 8000bb4:	48b9      	ldr	r0, [pc, #740]	; (8000e9c <HAL_PCD_IRQHandler+0x378>)
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	528b      	strh	r3, [r1, r2]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000bba:	6820      	ldr	r0, [r4, #0]
 8000bbc:	f002 f845 	bl	8002c4a <USB_ReadInterrupts>
 8000bc0:	0503      	lsls	r3, r0, #20
 8000bc2:	d501      	bpl.n	8000bc8 <HAL_PCD_IRQHandler+0xa4>
 8000bc4:	f000 fd21 	bl	800160a <HAL_PCD_IRQHandler+0xae6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f002 f83e 	bl	8002c4a <USB_ReadInterrupts>
 8000bce:	0603      	lsls	r3, r0, #24
 8000bd0:	d528      	bpl.n	8000c24 <HAL_PCD_IRQHandler+0x100>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000bd2:	6821      	ldr	r1, [r4, #0]
 8000bd4:	2244      	movs	r2, #68	; 0x44
 8000bd6:	5a8b      	ldrh	r3, [r1, r2]
 8000bd8:	2080      	movs	r0, #128	; 0x80
 8000bda:	4383      	bics	r3, r0
 8000bdc:	528b      	strh	r3, [r1, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000bde:	23b8      	movs	r3, #184	; 0xb8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	5ce3      	ldrb	r3, [r4, r3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_PCD_IRQHandler+0xc8>
 8000be8:	f000 fd25 	bl	8001636 <HAL_PCD_IRQHandler+0xb12>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000bec:	6821      	ldr	r1, [r4, #0]
 8000bee:	3340      	adds	r3, #64	; 0x40
 8000bf0:	5aca      	ldrh	r2, [r1, r3]
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	52ca      	strh	r2, [r1, r3]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000bf8:	6821      	ldr	r1, [r4, #0]
 8000bfa:	5aca      	ldrh	r2, [r1, r3]
 8000bfc:	2008      	movs	r0, #8
 8000bfe:	4302      	orrs	r2, r0
 8000c00:	52ca      	strh	r2, [r1, r3]
      hpcd->LPM_State = LPM_L1;
 8000c02:	23b8      	movs	r3, #184	; 0xb8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	2201      	movs	r2, #1
 8000c08:	54e2      	strb	r2, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000c0a:	2354      	movs	r3, #84	; 0x54
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	5ad2      	ldrh	r2, [r2, r3]
 8000c10:	0892      	lsrs	r2, r2, #2
 8000c12:	3b18      	subs	r3, #24
 8000c14:	4013      	ands	r3, r2
 8000c16:	22b9      	movs	r2, #185	; 0xb9
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f000 fe90 	bl	8001944 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000c24:	6820      	ldr	r0, [r4, #0]
 8000c26:	f002 f810 	bl	8002c4a <USB_ReadInterrupts>
 8000c2a:	0583      	lsls	r3, r0, #22
 8000c2c:	d501      	bpl.n	8000c32 <HAL_PCD_IRQHandler+0x10e>
 8000c2e:	f000 fd07 	bl	8001640 <HAL_PCD_IRQHandler+0xb1c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000c32:	6820      	ldr	r0, [r4, #0]
 8000c34:	f002 f809 	bl	8002c4a <USB_ReadInterrupts>
 8000c38:	05c3      	lsls	r3, r0, #23
 8000c3a:	d505      	bpl.n	8000c48 <HAL_PCD_IRQHandler+0x124>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c3c:	6821      	ldr	r1, [r4, #0]
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	5a8b      	ldrh	r3, [r1, r2]
 8000c42:	4897      	ldr	r0, [pc, #604]	; (8000ea0 <HAL_PCD_IRQHandler+0x37c>)
 8000c44:	4003      	ands	r3, r0
 8000c46:	528b      	strh	r3, [r1, r2]
}
 8000c48:	b003      	add	sp, #12
 8000c4a:	bc3c      	pop	{r2, r3, r4, r5}
 8000c4c:	4690      	mov	r8, r2
 8000c4e:	4699      	mov	r9, r3
 8000c50:	46a2      	mov	sl, r4
 8000c52:	46ab      	mov	fp, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000c56:	2644      	movs	r6, #68	; 0x44
          ep->xfer_len_db = 0U;
          ep->xfer_fill_db = 0;
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000c58:	231f      	movs	r3, #31
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	469a      	mov	sl, r3
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	5b83      	ldrh	r3, [r0, r6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db00      	blt.n	8000c6c <HAL_PCD_IRQHandler+0x148>
 8000c6a:	e769      	b.n	8000b40 <HAL_PCD_IRQHandler+0x1c>
    wIstr = hpcd->Instance->ISTR;
 8000c6c:	5b83      	ldrh	r3, [r0, r6]
 8000c6e:	b29b      	uxth	r3, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000c70:	250f      	movs	r5, #15
 8000c72:	401d      	ands	r5, r3
    if (epindex == 0U)
 8000c74:	d000      	beq.n	8000c78 <HAL_PCD_IRQHandler+0x154>
 8000c76:	e0be      	b.n	8000df6 <HAL_PCD_IRQHandler+0x2d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000c78:	06db      	lsls	r3, r3, #27
 8000c7a:	d552      	bpl.n	8000d22 <HAL_PCD_IRQHandler+0x1fe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000c7c:	8803      	ldrh	r3, [r0, #0]
 8000c7e:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000c80:	051a      	lsls	r2, r3, #20
 8000c82:	d500      	bpl.n	8000c86 <HAL_PCD_IRQHandler+0x162>
 8000c84:	e07e      	b.n	8000d84 <HAL_PCD_IRQHandler+0x260>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dae9      	bge.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c8c:	8803      	ldrh	r3, [r0, #0]
 8000c8e:	4a85      	ldr	r2, [pc, #532]	; (8000ea4 <HAL_PCD_IRQHandler+0x380>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	4313      	orrs	r3, r2
 8000c96:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	2350      	movs	r3, #80	; 0x50
 8000c9c:	5ac3      	ldrh	r3, [r0, r3]
 8000c9e:	22b4      	movs	r2, #180	; 0xb4
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	5ca2      	ldrb	r2, [r4, r2]
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	1882      	adds	r2, r0, r2
 8000ca8:	189b      	adds	r3, r3, r2
 8000caa:	4a7f      	ldr	r2, [pc, #508]	; (8000ea8 <HAL_PCD_IRQHandler+0x384>)
 8000cac:	4694      	mov	ip, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	059b      	lsls	r3, r3, #22
 8000cb4:	0d9b      	lsrs	r3, r3, #22
 8000cb6:	0022      	movs	r2, r4
 8000cb8:	3269      	adds	r2, #105	; 0x69
 8000cba:	32ff      	adds	r2, #255	; 0xff
 8000cbc:	61d3      	str	r3, [r2, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00f      	beq.n	8000ce2 <HAL_PCD_IRQHandler+0x1be>
 8000cc2:	6951      	ldr	r1, [r2, #20]
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_PCD_IRQHandler+0x1be>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000cc8:	0015      	movs	r5, r2
 8000cca:	88d2      	ldrh	r2, [r2, #6]
 8000ccc:	f002 fb00 	bl	80032d0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000cd0:	696b      	ldr	r3, [r5, #20]
 8000cd2:	69ea      	ldr	r2, [r5, #28]
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f003 fcf8 	bl	80046d2 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ce2:	6822      	ldr	r2, [r4, #0]
 8000ce4:	2350      	movs	r3, #80	; 0x50
 8000ce6:	5ad1      	ldrh	r1, [r2, r3]
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <HAL_PCD_IRQHandler+0x384>)
 8000cea:	18d3      	adds	r3, r2, r3
 8000cec:	185b      	adds	r3, r3, r1
 8000cee:	0022      	movs	r2, r4
 8000cf0:	3269      	adds	r2, #105	; 0x69
 8000cf2:	32ff      	adds	r2, #255	; 0xff
 8000cf4:	6912      	ldr	r2, [r2, #16]
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d167      	bne.n	8000dca <HAL_PCD_IRQHandler+0x2a6>
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	496b      	ldr	r1, [pc, #428]	; (8000eac <HAL_PCD_IRQHandler+0x388>)
 8000cfe:	400a      	ands	r2, r1
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0209      	lsls	r1, r1, #8
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000d0c:	6822      	ldr	r2, [r4, #0]
 8000d0e:	8813      	ldrh	r3, [r2, #0]
 8000d10:	4967      	ldr	r1, [pc, #412]	; (8000eb0 <HAL_PCD_IRQHandler+0x38c>)
 8000d12:	4019      	ands	r1, r3
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	019b      	lsls	r3, r3, #6
 8000d18:	404b      	eors	r3, r1
 8000d1a:	4966      	ldr	r1, [pc, #408]	; (8000eb4 <HAL_PCD_IRQHandler+0x390>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	8013      	strh	r3, [r2, #0]
 8000d20:	e79e      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d22:	8803      	ldrh	r3, [r0, #0]
 8000d24:	4a64      	ldr	r2, [pc, #400]	; (8000eb8 <HAL_PCD_IRQHandler+0x394>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0212      	lsls	r2, r2, #8
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	2350      	movs	r3, #80	; 0x50
 8000d34:	5ad3      	ldrh	r3, [r2, r3]
 8000d36:	2128      	movs	r1, #40	; 0x28
 8000d38:	5c61      	ldrb	r1, [r4, r1]
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	1852      	adds	r2, r2, r1
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	4a5e      	ldr	r2, [pc, #376]	; (8000ebc <HAL_PCD_IRQHandler+0x398>)
 8000d42:	4694      	mov	ip, r2
 8000d44:	4463      	add	r3, ip
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	059b      	lsls	r3, r3, #22
 8000d4a:	0d9b      	lsrs	r3, r3, #22
 8000d4c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000d4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000d50:	4694      	mov	ip, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d56:	2100      	movs	r1, #0
 8000d58:	0020      	movs	r0, r4
 8000d5a:	f003 fcc8 	bl	80046ee <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d5e:	2324      	movs	r3, #36	; 0x24
 8000d60:	5ce3      	ldrb	r3, [r4, r3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d100      	bne.n	8000d68 <HAL_PCD_IRQHandler+0x244>
 8000d66:	e77b      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
 8000d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d000      	beq.n	8000d70 <HAL_PCD_IRQHandler+0x24c>
 8000d6e:	e777      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d70:	2224      	movs	r2, #36	; 0x24
 8000d72:	5ca3      	ldrb	r3, [r4, r2]
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	430b      	orrs	r3, r1
 8000d78:	3934      	subs	r1, #52	; 0x34
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	54a3      	strb	r3, [r4, r2]
 8000d82:	e76d      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d84:	2350      	movs	r3, #80	; 0x50
 8000d86:	5ac3      	ldrh	r3, [r0, r3]
 8000d88:	22b4      	movs	r2, #180	; 0xb4
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	5ca2      	ldrb	r2, [r4, r2]
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	1882      	adds	r2, r0, r2
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <HAL_PCD_IRQHandler+0x384>)
 8000d96:	4694      	mov	ip, r2
 8000d98:	4463      	add	r3, ip
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	059b      	lsls	r3, r3, #22
 8000d9e:	0d9b      	lsrs	r3, r3, #22
 8000da0:	0022      	movs	r2, r4
 8000da2:	3269      	adds	r2, #105	; 0x69
 8000da4:	32ff      	adds	r2, #255	; 0xff
 8000da6:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000da8:	88d2      	ldrh	r2, [r2, #6]
 8000daa:	21ac      	movs	r1, #172	; 0xac
 8000dac:	0089      	lsls	r1, r1, #2
 8000dae:	1861      	adds	r1, r4, r1
 8000db0:	f002 fa8e 	bl	80032d0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	8813      	ldrh	r3, [r2, #0]
 8000db8:	493a      	ldr	r1, [pc, #232]	; (8000ea4 <HAL_PCD_IRQHandler+0x380>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f003 fc7c 	bl	80046c0 <HAL_PCD_SetupStageCallback>
 8000dc8:	e74a      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000dca:	2a3e      	cmp	r2, #62	; 0x3e
 8000dcc:	d807      	bhi.n	8000dde <HAL_PCD_IRQHandler+0x2ba>
 8000dce:	0851      	lsrs	r1, r2, #1
 8000dd0:	4650      	mov	r0, sl
 8000dd2:	4002      	ands	r2, r0
 8000dd4:	1889      	adds	r1, r1, r2
 8000dd6:	0289      	lsls	r1, r1, #10
 8000dd8:	b289      	uxth	r1, r1
 8000dda:	8019      	strh	r1, [r3, #0]
 8000ddc:	e796      	b.n	8000d0c <HAL_PCD_IRQHandler+0x1e8>
 8000dde:	0951      	lsrs	r1, r2, #5
 8000de0:	4640      	mov	r0, r8
 8000de2:	4002      	ands	r2, r0
 8000de4:	4250      	negs	r0, r2
 8000de6:	4142      	adcs	r2, r0
 8000de8:	1a89      	subs	r1, r1, r2
 8000dea:	0289      	lsls	r1, r1, #10
 8000dec:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <HAL_PCD_IRQHandler+0x39c>)
 8000dee:	430a      	orrs	r2, r1
 8000df0:	b292      	uxth	r2, r2
 8000df2:	801a      	strh	r2, [r3, #0]
 8000df4:	e78a      	b.n	8000d0c <HAL_PCD_IRQHandler+0x1e8>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000df6:	00af      	lsls	r7, r5, #2
 8000df8:	19c0      	adds	r0, r0, r7
 8000dfa:	8803      	ldrh	r3, [r0, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4699      	mov	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db5e      	blt.n	8000ec4 <HAL_PCD_IRQHandler+0x3a0>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e06:	464b      	mov	r3, r9
 8000e08:	061b      	lsls	r3, r3, #24
 8000e0a:	d400      	bmi.n	8000e0e <HAL_PCD_IRQHandler+0x2ea>
 8000e0c:	e728      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	19da      	adds	r2, r3, r7
 8000e12:	8813      	ldrh	r3, [r2, #0]
 8000e14:	4928      	ldr	r1, [pc, #160]	; (8000eb8 <HAL_PCD_IRQHandler+0x394>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0209      	lsls	r1, r1, #8
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	8013      	strh	r3, [r2, #0]
 8000e20:	00ab      	lsls	r3, r5, #2
 8000e22:	195b      	adds	r3, r3, r5
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	18e7      	adds	r7, r4, r3
        if ((ep->type != EP_TYPE_BULK) ||
 8000e28:	232b      	movs	r3, #43	; 0x2b
 8000e2a:	5cfb      	ldrb	r3, [r7, r3]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d100      	bne.n	8000e32 <HAL_PCD_IRQHandler+0x30e>
 8000e30:	e1e0      	b.n	80011f4 <HAL_PCD_IRQHandler+0x6d0>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e32:	6820      	ldr	r0, [r4, #0]
 8000e34:	2350      	movs	r3, #80	; 0x50
 8000e36:	5ac2      	ldrh	r2, [r0, r3]
          if (ep->xfer_len > TxByteNbre)
 8000e38:	00ab      	lsls	r3, r5, #2
 8000e3a:	195b      	adds	r3, r3, r5
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	18e3      	adds	r3, r4, r3
 8000e40:	6c19      	ldr	r1, [r3, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e42:	2328      	movs	r3, #40	; 0x28
 8000e44:	5cfb      	ldrb	r3, [r7, r3]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	18c3      	adds	r3, r0, r3
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_PCD_IRQHandler+0x398>)
 8000e4e:	4694      	mov	ip, r2
 8000e50:	4463      	add	r3, ip
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	059b      	lsls	r3, r3, #22
          if (ep->xfer_len > TxByteNbre)
 8000e56:	0d9b      	lsrs	r3, r3, #22
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d800      	bhi.n	8000e5e <HAL_PCD_IRQHandler+0x33a>
 8000e5c:	e217      	b.n	800128e <HAL_PCD_IRQHandler+0x76a>
            ep->xfer_len -= TxByteNbre;
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	00aa      	lsls	r2, r5, #2
 8000e62:	1952      	adds	r2, r2, r5
 8000e64:	00d2      	lsls	r2, r2, #3
 8000e66:	18a2      	adds	r2, r4, r2
 8000e68:	6411      	str	r1, [r2, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000e6a:	2900      	cmp	r1, #0
 8000e6c:	d100      	bne.n	8000e70 <HAL_PCD_IRQHandler+0x34c>
 8000e6e:	e214      	b.n	800129a <HAL_PCD_IRQHandler+0x776>
            ep->xfer_buff += TxByteNbre;
 8000e70:	00aa      	lsls	r2, r5, #2
 8000e72:	1951      	adds	r1, r2, r5
 8000e74:	00c9      	lsls	r1, r1, #3
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8000e7a:	18ff      	adds	r7, r7, r3
 8000e7c:	63cf      	str	r7, [r1, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000e7e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	644b      	str	r3, [r1, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8000e84:	3501      	adds	r5, #1
 8000e86:	00a9      	lsls	r1, r5, #2
 8000e88:	1949      	adds	r1, r1, r5
 8000e8a:	00c9      	lsls	r1, r1, #3
 8000e8c:	1861      	adds	r1, r4, r1
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e8e:	f001 fef7 	bl	8002c80 <USB_EPStartXfer>
 8000e92:	e6e5      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
 8000e94:	ffffbfff 	.word	0xffffbfff
 8000e98:	ffffdfff 	.word	0xffffdfff
 8000e9c:	ffffefff 	.word	0xffffefff
 8000ea0:	fffffeff 	.word	0xfffffeff
 8000ea4:	00000f8f 	.word	0x00000f8f
 8000ea8:	00000406 	.word	0x00000406
 8000eac:	ffff83ff 	.word	0xffff83ff
 8000eb0:	ffffbf8f 	.word	0xffffbf8f
 8000eb4:	00008080 	.word	0x00008080
 8000eb8:	ffff8f0f 	.word	0xffff8f0f
 8000ebc:	00000402 	.word	0x00000402
 8000ec0:	ffff8000 	.word	0xffff8000
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ec4:	8803      	ldrh	r3, [r0, #0]
 8000ec6:	4ac4      	ldr	r2, [pc, #784]	; (80011d8 <HAL_PCD_IRQHandler+0x6b4>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	8003      	strh	r3, [r0, #0]
        if (ep->doublebuffer == 0U)
 8000ed0:	197b      	adds	r3, r7, r5
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	18e3      	adds	r3, r4, r3
 8000ed6:	3375      	adds	r3, #117	; 0x75
 8000ed8:	33ff      	adds	r3, #255	; 0xff
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14a      	bne.n	8000f76 <HAL_PCD_IRQHandler+0x452>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	3350      	adds	r3, #80	; 0x50
 8000ee4:	5ac2      	ldrh	r2, [r0, r3]
 8000ee6:	197b      	adds	r3, r7, r5
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	18e3      	adds	r3, r4, r3
 8000eec:	3369      	adds	r3, #105	; 0x69
 8000eee:	33ff      	adds	r3, #255	; 0xff
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	18c3      	adds	r3, r0, r3
 8000ef6:	18d2      	adds	r2, r2, r3
 8000ef8:	4bb8      	ldr	r3, [pc, #736]	; (80011dc <HAL_PCD_IRQHandler+0x6b8>)
 8000efa:	469c      	mov	ip, r3
 8000efc:	4462      	add	r2, ip
 8000efe:	8813      	ldrh	r3, [r2, #0]
 8000f00:	059b      	lsls	r3, r3, #22
 8000f02:	0d9b      	lsrs	r3, r3, #22
 8000f04:	469b      	mov	fp, r3
          if (count != 0U)
 8000f06:	d128      	bne.n	8000f5a <HAL_PCD_IRQHandler+0x436>
        ep->xfer_count += count;
 8000f08:	465a      	mov	r2, fp
 8000f0a:	00ab      	lsls	r3, r5, #2
 8000f0c:	195b      	adds	r3, r3, r5
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	18e3      	adds	r3, r4, r3
 8000f12:	0018      	movs	r0, r3
 8000f14:	3085      	adds	r0, #133	; 0x85
 8000f16:	30ff      	adds	r0, #255	; 0xff
 8000f18:	6801      	ldr	r1, [r0, #0]
 8000f1a:	4459      	add	r1, fp
 8000f1c:	6001      	str	r1, [r0, #0]
        ep->xfer_buff += count;
 8000f1e:	3808      	subs	r0, #8
 8000f20:	6801      	ldr	r1, [r0, #0]
 8000f22:	4459      	add	r1, fp
 8000f24:	6001      	str	r1, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000f26:	3381      	adds	r3, #129	; 0x81
 8000f28:	33ff      	adds	r3, #255	; 0xff
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <HAL_PCD_IRQHandler+0x420>
 8000f30:	00ab      	lsls	r3, r5, #2
 8000f32:	195b      	adds	r3, r3, r5
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	18e3      	adds	r3, r4, r3
 8000f38:	3379      	adds	r3, #121	; 0x79
 8000f3a:	33ff      	adds	r3, #255	; 0xff
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d300      	bcc.n	8000f44 <HAL_PCD_IRQHandler+0x420>
 8000f42:	e13e      	b.n	80011c2 <HAL_PCD_IRQHandler+0x69e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000f44:	00ab      	lsls	r3, r5, #2
 8000f46:	195b      	adds	r3, r3, r5
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	18e3      	adds	r3, r4, r3
 8000f4c:	3369      	adds	r3, #105	; 0x69
 8000f4e:	33ff      	adds	r3, #255	; 0xff
 8000f50:	7819      	ldrb	r1, [r3, #0]
 8000f52:	0020      	movs	r0, r4
 8000f54:	f003 fbbd 	bl	80046d2 <HAL_PCD_DataOutStageCallback>
 8000f58:	e755      	b.n	8000e06 <HAL_PCD_IRQHandler+0x2e2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f5a:	197b      	adds	r3, r7, r5
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	18e3      	adds	r3, r4, r3
 8000f60:	001a      	movs	r2, r3
 8000f62:	326f      	adds	r2, #111	; 0x6f
 8000f64:	32ff      	adds	r2, #255	; 0xff
 8000f66:	8812      	ldrh	r2, [r2, #0]
 8000f68:	337d      	adds	r3, #125	; 0x7d
 8000f6a:	33ff      	adds	r3, #255	; 0xff
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	465b      	mov	r3, fp
 8000f70:	f002 f9ae 	bl	80032d0 <USB_ReadPMA>
 8000f74:	e7c8      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
          if (ep->type == EP_TYPE_BULK)
 8000f76:	00ab      	lsls	r3, r5, #2
 8000f78:	195b      	adds	r3, r3, r5
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	18e3      	adds	r3, r4, r3
 8000f7e:	336c      	adds	r3, #108	; 0x6c
 8000f80:	33ff      	adds	r3, #255	; 0xff
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d034      	beq.n	8000ff2 <HAL_PCD_IRQHandler+0x4ce>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000f88:	00ab      	lsls	r3, r5, #2
 8000f8a:	195b      	adds	r3, r3, r5
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	18e3      	adds	r3, r4, r3
 8000f90:	3369      	adds	r3, #105	; 0x69
 8000f92:	33ff      	adds	r3, #255	; 0xff
 8000f94:	7819      	ldrb	r1, [r3, #0]
 8000f96:	0089      	lsls	r1, r1, #2
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	880a      	ldrh	r2, [r1, #0]
 8000fa0:	488f      	ldr	r0, [pc, #572]	; (80011e0 <HAL_PCD_IRQHandler+0x6bc>)
 8000fa2:	4002      	ands	r2, r0
 8000fa4:	488f      	ldr	r0, [pc, #572]	; (80011e4 <HAL_PCD_IRQHandler+0x6c0>)
 8000fa6:	4302      	orrs	r2, r0
 8000fa8:	800a      	strh	r2, [r1, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000faa:	6820      	ldr	r0, [r4, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	009a      	lsls	r2, r3, #2
 8000fb0:	1882      	adds	r2, r0, r2
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	0452      	lsls	r2, r2, #17
 8000fb6:	d400      	bmi.n	8000fba <HAL_PCD_IRQHandler+0x496>
 8000fb8:	e0e6      	b.n	8001188 <HAL_PCD_IRQHandler+0x664>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fba:	2250      	movs	r2, #80	; 0x50
 8000fbc:	5a82      	ldrh	r2, [r0, r2]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	18c3      	adds	r3, r0, r3
 8000fc2:	18d3      	adds	r3, r2, r3
 8000fc4:	4a88      	ldr	r2, [pc, #544]	; (80011e8 <HAL_PCD_IRQHandler+0x6c4>)
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	4463      	add	r3, ip
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	059b      	lsls	r3, r3, #22
 8000fce:	0d9b      	lsrs	r3, r3, #22
 8000fd0:	469b      	mov	fp, r3
              if (count != 0U)
 8000fd2:	d099      	beq.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fd4:	00ab      	lsls	r3, r5, #2
 8000fd6:	195b      	adds	r3, r3, r5
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	18e3      	adds	r3, r4, r3
 8000fdc:	001a      	movs	r2, r3
 8000fde:	3271      	adds	r2, #113	; 0x71
 8000fe0:	32ff      	adds	r2, #255	; 0xff
 8000fe2:	8812      	ldrh	r2, [r2, #0]
 8000fe4:	337d      	adds	r3, #125	; 0x7d
 8000fe6:	33ff      	adds	r3, #255	; 0xff
 8000fe8:	6819      	ldr	r1, [r3, #0]
 8000fea:	465b      	mov	r3, fp
 8000fec:	f002 f970 	bl	80032d0 <USB_ReadPMA>
 8000ff0:	e78a      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	045b      	lsls	r3, r3, #17
 8000ff6:	d563      	bpl.n	80010c0 <HAL_PCD_IRQHandler+0x59c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	2350      	movs	r3, #80	; 0x50
 8000ffc:	5ac2      	ldrh	r2, [r0, r3]
 8000ffe:	00ab      	lsls	r3, r5, #2
 8001000:	195b      	adds	r3, r3, r5
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	18e3      	adds	r3, r4, r3
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	0019      	movs	r1, r3
 800100a:	3169      	adds	r1, #105	; 0x69
 800100c:	31ff      	adds	r1, #255	; 0xff
 800100e:	7809      	ldrb	r1, [r1, #0]
 8001010:	00cb      	lsls	r3, r1, #3
 8001012:	469c      	mov	ip, r3
 8001014:	4484      	add	ip, r0
 8001016:	4462      	add	r2, ip
 8001018:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <HAL_PCD_IRQHandler+0x6c4>)
 800101a:	469c      	mov	ip, r3
 800101c:	4462      	add	r2, ip
 800101e:	8812      	ldrh	r2, [r2, #0]
 8001020:	0592      	lsls	r2, r2, #22
 8001022:	0d93      	lsrs	r3, r2, #22
 8001024:	469b      	mov	fp, r3
    if (ep->xfer_len >= count)
 8001026:	9b01      	ldr	r3, [sp, #4]
 8001028:	3381      	adds	r3, #129	; 0x81
 800102a:	33ff      	adds	r3, #255	; 0xff
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	455a      	cmp	r2, fp
 8001030:	d332      	bcc.n	8001098 <HAL_PCD_IRQHandler+0x574>
      ep->xfer_len -= count;
 8001032:	465b      	mov	r3, fp
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	00ab      	lsls	r3, r5, #2
 8001038:	195b      	adds	r3, r3, r5
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	18e3      	adds	r3, r4, r3
 800103e:	3381      	adds	r3, #129	; 0x81
 8001040:	33ff      	adds	r3, #255	; 0xff
 8001042:	601a      	str	r2, [r3, #0]
    if (ep->xfer_len == 0U)
 8001044:	2a00      	cmp	r2, #0
 8001046:	d02f      	beq.n	80010a8 <HAL_PCD_IRQHandler+0x584>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001048:	464b      	mov	r3, r9
 800104a:	065b      	lsls	r3, r3, #25
 800104c:	d510      	bpl.n	8001070 <HAL_PCD_IRQHandler+0x54c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800104e:	00ab      	lsls	r3, r5, #2
 8001050:	195b      	adds	r3, r3, r5
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	18e3      	adds	r3, r4, r3
 8001056:	3369      	adds	r3, #105	; 0x69
 8001058:	33ff      	adds	r3, #255	; 0xff
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	469c      	mov	ip, r3
 8001062:	4462      	add	r2, ip
 8001064:	8813      	ldrh	r3, [r2, #0]
 8001066:	495e      	ldr	r1, [pc, #376]	; (80011e0 <HAL_PCD_IRQHandler+0x6bc>)
 8001068:	400b      	ands	r3, r1
 800106a:	495e      	ldr	r1, [pc, #376]	; (80011e4 <HAL_PCD_IRQHandler+0x6c0>)
 800106c:	430b      	orrs	r3, r1
 800106e:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8001070:	465b      	mov	r3, fp
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <HAL_PCD_IRQHandler+0x554>
 8001076:	e747      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001078:	00ab      	lsls	r3, r5, #2
 800107a:	195b      	adds	r3, r3, r5
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	18e3      	adds	r3, r4, r3
 8001080:	001a      	movs	r2, r3
 8001082:	3271      	adds	r2, #113	; 0x71
 8001084:	32ff      	adds	r2, #255	; 0xff
 8001086:	8812      	ldrh	r2, [r2, #0]
 8001088:	337d      	adds	r3, #125	; 0x7d
 800108a:	33ff      	adds	r3, #255	; 0xff
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	465b      	mov	r3, fp
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	f002 f91d 	bl	80032d0 <USB_ReadPMA>
 8001096:	e737      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
      ep->xfer_len = 0U;
 8001098:	00ab      	lsls	r3, r5, #2
 800109a:	195b      	adds	r3, r3, r5
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	18e3      	adds	r3, r4, r3
 80010a0:	3381      	adds	r3, #129	; 0x81
 80010a2:	33ff      	adds	r3, #255	; 0xff
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80010a8:	0089      	lsls	r1, r1, #2
 80010aa:	1840      	adds	r0, r0, r1
 80010ac:	8803      	ldrh	r3, [r0, #0]
 80010ae:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_PCD_IRQHandler+0x6c8>)
 80010b0:	401a      	ands	r2, r3
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	4053      	eors	r3, r2
 80010b8:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_PCD_IRQHandler+0x6cc>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	8003      	strh	r3, [r0, #0]
 80010be:	e7c3      	b.n	8001048 <HAL_PCD_IRQHandler+0x524>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	2350      	movs	r3, #80	; 0x50
 80010c4:	5ac2      	ldrh	r2, [r0, r3]
 80010c6:	00ab      	lsls	r3, r5, #2
 80010c8:	195b      	adds	r3, r3, r5
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	18e3      	adds	r3, r4, r3
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	0019      	movs	r1, r3
 80010d2:	3169      	adds	r1, #105	; 0x69
 80010d4:	31ff      	adds	r1, #255	; 0xff
 80010d6:	7809      	ldrb	r1, [r1, #0]
 80010d8:	00cb      	lsls	r3, r1, #3
 80010da:	469c      	mov	ip, r3
 80010dc:	4484      	add	ip, r0
 80010de:	4462      	add	r2, ip
 80010e0:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <HAL_PCD_IRQHandler+0x6b8>)
 80010e2:	469c      	mov	ip, r3
 80010e4:	4462      	add	r2, ip
 80010e6:	8812      	ldrh	r2, [r2, #0]
 80010e8:	0592      	lsls	r2, r2, #22
 80010ea:	0d93      	lsrs	r3, r2, #22
 80010ec:	469b      	mov	fp, r3
    if (ep->xfer_len >= count)
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	3381      	adds	r3, #129	; 0x81
 80010f2:	33ff      	adds	r3, #255	; 0xff
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	455a      	cmp	r2, fp
 80010f8:	d332      	bcc.n	8001160 <HAL_PCD_IRQHandler+0x63c>
      ep->xfer_len -= count;
 80010fa:	465b      	mov	r3, fp
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	00ab      	lsls	r3, r5, #2
 8001100:	195b      	adds	r3, r3, r5
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	18e3      	adds	r3, r4, r3
 8001106:	3381      	adds	r3, #129	; 0x81
 8001108:	33ff      	adds	r3, #255	; 0xff
 800110a:	601a      	str	r2, [r3, #0]
    if (ep->xfer_len == 0U)
 800110c:	2a00      	cmp	r2, #0
 800110e:	d02f      	beq.n	8001170 <HAL_PCD_IRQHandler+0x64c>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001110:	464b      	mov	r3, r9
 8001112:	065b      	lsls	r3, r3, #25
 8001114:	d410      	bmi.n	8001138 <HAL_PCD_IRQHandler+0x614>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001116:	00ab      	lsls	r3, r5, #2
 8001118:	195b      	adds	r3, r3, r5
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	18e3      	adds	r3, r4, r3
 800111e:	3369      	adds	r3, #105	; 0x69
 8001120:	33ff      	adds	r3, #255	; 0xff
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	469c      	mov	ip, r3
 800112a:	4462      	add	r2, ip
 800112c:	8813      	ldrh	r3, [r2, #0]
 800112e:	492c      	ldr	r1, [pc, #176]	; (80011e0 <HAL_PCD_IRQHandler+0x6bc>)
 8001130:	400b      	ands	r3, r1
 8001132:	492c      	ldr	r1, [pc, #176]	; (80011e4 <HAL_PCD_IRQHandler+0x6c0>)
 8001134:	430b      	orrs	r3, r1
 8001136:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8001138:	465b      	mov	r3, fp
 800113a:	2b00      	cmp	r3, #0
 800113c:	d100      	bne.n	8001140 <HAL_PCD_IRQHandler+0x61c>
 800113e:	e6e3      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001140:	00ab      	lsls	r3, r5, #2
 8001142:	195b      	adds	r3, r3, r5
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	18e3      	adds	r3, r4, r3
 8001148:	001a      	movs	r2, r3
 800114a:	3273      	adds	r2, #115	; 0x73
 800114c:	32ff      	adds	r2, #255	; 0xff
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	337d      	adds	r3, #125	; 0x7d
 8001152:	33ff      	adds	r3, #255	; 0xff
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	465b      	mov	r3, fp
 8001158:	6820      	ldr	r0, [r4, #0]
 800115a:	f002 f8b9 	bl	80032d0 <USB_ReadPMA>
 800115e:	e6d3      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
      ep->xfer_len = 0U;
 8001160:	00ab      	lsls	r3, r5, #2
 8001162:	195b      	adds	r3, r3, r5
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	18e3      	adds	r3, r4, r3
 8001168:	3381      	adds	r3, #129	; 0x81
 800116a:	33ff      	adds	r3, #255	; 0xff
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001170:	0089      	lsls	r1, r1, #2
 8001172:	1840      	adds	r0, r0, r1
 8001174:	8803      	ldrh	r3, [r0, #0]
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_PCD_IRQHandler+0x6c8>)
 8001178:	401a      	ands	r2, r3
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	4053      	eors	r3, r2
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_PCD_IRQHandler+0x6cc>)
 8001182:	4313      	orrs	r3, r2
 8001184:	8003      	strh	r3, [r0, #0]
 8001186:	e7c3      	b.n	8001110 <HAL_PCD_IRQHandler+0x5ec>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001188:	2250      	movs	r2, #80	; 0x50
 800118a:	5a82      	ldrh	r2, [r0, r2]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	18c3      	adds	r3, r0, r3
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_PCD_IRQHandler+0x6b8>)
 8001194:	4694      	mov	ip, r2
 8001196:	4463      	add	r3, ip
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	059b      	lsls	r3, r3, #22
 800119c:	0d9b      	lsrs	r3, r3, #22
 800119e:	469b      	mov	fp, r3
              if (count != 0U)
 80011a0:	d100      	bne.n	80011a4 <HAL_PCD_IRQHandler+0x680>
 80011a2:	e6b1      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011a4:	00ab      	lsls	r3, r5, #2
 80011a6:	195b      	adds	r3, r3, r5
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	18e3      	adds	r3, r4, r3
 80011ac:	001a      	movs	r2, r3
 80011ae:	3273      	adds	r2, #115	; 0x73
 80011b0:	32ff      	adds	r2, #255	; 0xff
 80011b2:	8812      	ldrh	r2, [r2, #0]
 80011b4:	337d      	adds	r3, #125	; 0x7d
 80011b6:	33ff      	adds	r3, #255	; 0xff
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	465b      	mov	r3, fp
 80011bc:	f002 f888 	bl	80032d0 <USB_ReadPMA>
 80011c0:	e6a2      	b.n	8000f08 <HAL_PCD_IRQHandler+0x3e4>
        ep = &hpcd->OUT_ep[epindex];
 80011c2:	00a9      	lsls	r1, r5, #2
 80011c4:	1949      	adds	r1, r1, r5
 80011c6:	00c9      	lsls	r1, r1, #3
 80011c8:	3169      	adds	r1, #105	; 0x69
 80011ca:	31ff      	adds	r1, #255	; 0xff
 80011cc:	1861      	adds	r1, r4, r1
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	f001 fd56 	bl	8002c80 <USB_EPStartXfer>
 80011d4:	e617      	b.n	8000e06 <HAL_PCD_IRQHandler+0x2e2>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	00000f8f 	.word	0x00000f8f
 80011dc:	00000406 	.word	0x00000406
 80011e0:	ffff8f8f 	.word	0xffff8f8f
 80011e4:	000080c0 	.word	0x000080c0
 80011e8:	00000402 	.word	0x00000402
 80011ec:	ffffbf8f 	.word	0xffffbf8f
 80011f0:	00008080 	.word	0x00008080
        if ((ep->type != EP_TYPE_BULK) ||
 80011f4:	464b      	mov	r3, r9
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	d400      	bmi.n	80011fc <HAL_PCD_IRQHandler+0x6d8>
 80011fa:	e61a      	b.n	8000e32 <HAL_PCD_IRQHandler+0x30e>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011fc:	464b      	mov	r3, r9
 80011fe:	065b      	lsls	r3, r3, #25
 8001200:	d400      	bmi.n	8001204 <HAL_PCD_IRQHandler+0x6e0>
 8001202:	e0f9      	b.n	80013f8 <HAL_PCD_IRQHandler+0x8d4>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	469b      	mov	fp, r3
 8001208:	2350      	movs	r3, #80	; 0x50
 800120a:	465a      	mov	r2, fp
 800120c:	5ad2      	ldrh	r2, [r2, r3]
 800120e:	3b28      	subs	r3, #40	; 0x28
 8001210:	5cf9      	ldrb	r1, [r7, r3]
    if (ep->xfer_len > TxByteNbre)
 8001212:	00ab      	lsls	r3, r5, #2
 8001214:	195b      	adds	r3, r3, r5
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	18e3      	adds	r3, r4, r3
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800121c:	00c8      	lsls	r0, r1, #3
 800121e:	4684      	mov	ip, r0
 8001220:	44dc      	add	ip, fp
 8001222:	4462      	add	r2, ip
 8001224:	48d5      	ldr	r0, [pc, #852]	; (800157c <HAL_PCD_IRQHandler+0xa58>)
 8001226:	4684      	mov	ip, r0
 8001228:	4462      	add	r2, ip
 800122a:	8812      	ldrh	r2, [r2, #0]
 800122c:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len > TxByteNbre)
 800122e:	0d92      	lsrs	r2, r2, #22
 8001230:	4293      	cmp	r3, r2
 8001232:	d938      	bls.n	80012a6 <HAL_PCD_IRQHandler+0x782>
      ep->xfer_len -= TxByteNbre;
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	469c      	mov	ip, r3
 8001238:	00ab      	lsls	r3, r5, #2
 800123a:	195b      	adds	r3, r3, r5
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	18e3      	adds	r3, r4, r3
 8001240:	4660      	mov	r0, ip
 8001242:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001244:	2800      	cmp	r0, #0
 8001246:	d034      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x78e>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001248:	464b      	mov	r3, r9
 800124a:	045b      	lsls	r3, r3, #17
 800124c:	d508      	bpl.n	8001260 <HAL_PCD_IRQHandler+0x73c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800124e:	0089      	lsls	r1, r1, #2
 8001250:	4459      	add	r1, fp
 8001252:	0008      	movs	r0, r1
 8001254:	880b      	ldrh	r3, [r1, #0]
 8001256:	49ca      	ldr	r1, [pc, #808]	; (8001580 <HAL_PCD_IRQHandler+0xa5c>)
 8001258:	400b      	ands	r3, r1
 800125a:	49ca      	ldr	r1, [pc, #808]	; (8001584 <HAL_PCD_IRQHandler+0xa60>)
 800125c:	430b      	orrs	r3, r1
 800125e:	8003      	strh	r3, [r0, #0]
      if (ep->xfer_fill_db == 1U)
 8001260:	00ab      	lsls	r3, r5, #2
 8001262:	195b      	adds	r3, r3, r5
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	18e3      	adds	r3, r4, r3
 8001268:	334c      	adds	r3, #76	; 0x4c
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d033      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x7b4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001270:	2328      	movs	r3, #40	; 0x28
 8001272:	5cfa      	ldrb	r2, [r7, r3]
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	469c      	mov	ip, r3
 800127a:	4462      	add	r2, ip
 800127c:	8813      	ldrh	r3, [r2, #0]
 800127e:	49c2      	ldr	r1, [pc, #776]	; (8001588 <HAL_PCD_IRQHandler+0xa64>)
 8001280:	400b      	ands	r3, r1
 8001282:	2130      	movs	r1, #48	; 0x30
 8001284:	404b      	eors	r3, r1
 8001286:	49c1      	ldr	r1, [pc, #772]	; (800158c <HAL_PCD_IRQHandler+0xa68>)
 8001288:	430b      	orrs	r3, r1
 800128a:	8013      	strh	r3, [r2, #0]
 800128c:	e4e8      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
            ep->xfer_len = 0U;
 800128e:	00ab      	lsls	r3, r5, #2
 8001290:	195d      	adds	r5, r3, r5
 8001292:	00ed      	lsls	r5, r5, #3
 8001294:	1965      	adds	r5, r4, r5
 8001296:	2300      	movs	r3, #0
 8001298:	642b      	str	r3, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800129a:	2328      	movs	r3, #40	; 0x28
 800129c:	5cf9      	ldrb	r1, [r7, r3]
 800129e:	0020      	movs	r0, r4
 80012a0:	f003 fa25 	bl	80046ee <HAL_PCD_DataInStageCallback>
 80012a4:	e4dc      	b.n	8000c60 <HAL_PCD_IRQHandler+0x13c>
      ep->xfer_len = 0U;
 80012a6:	00ab      	lsls	r3, r5, #2
 80012a8:	195d      	adds	r5, r3, r5
 80012aa:	00ed      	lsls	r5, r5, #3
 80012ac:	1965      	adds	r5, r4, r5
 80012ae:	2300      	movs	r3, #0
 80012b0:	642b      	str	r3, [r5, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012b2:	0020      	movs	r0, r4
 80012b4:	f003 fa1b 	bl	80046ee <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80012b8:	464b      	mov	r3, r9
 80012ba:	045b      	lsls	r3, r3, #17
 80012bc:	d5d8      	bpl.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80012be:	2328      	movs	r3, #40	; 0x28
 80012c0:	5cfa      	ldrb	r2, [r7, r3]
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	469c      	mov	ip, r3
 80012c8:	4462      	add	r2, ip
 80012ca:	8813      	ldrh	r3, [r2, #0]
 80012cc:	49ac      	ldr	r1, [pc, #688]	; (8001580 <HAL_PCD_IRQHandler+0xa5c>)
 80012ce:	400b      	ands	r3, r1
 80012d0:	49ac      	ldr	r1, [pc, #688]	; (8001584 <HAL_PCD_IRQHandler+0xa60>)
 80012d2:	430b      	orrs	r3, r1
 80012d4:	8013      	strh	r3, [r2, #0]
 80012d6:	e7cb      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxByteNbre;
 80012d8:	00ab      	lsls	r3, r5, #2
 80012da:	195b      	adds	r3, r3, r5
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	18e3      	adds	r3, r4, r3
 80012e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012e2:	1889      	adds	r1, r1, r2
 80012e4:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80012e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012e8:	1889      	adds	r1, r1, r2
 80012ea:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80012ec:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	4299      	cmp	r1, r3
 80012f2:	d322      	bcc.n	800133a <HAL_PCD_IRQHandler+0x816>
          ep->xfer_len_db -= len;
 80012f4:	00aa      	lsls	r2, r5, #2
 80012f6:	1952      	adds	r2, r2, r5
 80012f8:	00d2      	lsls	r2, r2, #3
 80012fa:	18a2      	adds	r2, r4, r2
 80012fc:	1ac9      	subs	r1, r1, r3
 80012fe:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001300:	2229      	movs	r2, #41	; 0x29
 8001302:	5cba      	ldrb	r2, [r7, r2]
 8001304:	2a00      	cmp	r2, #0
 8001306:	d157      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x894>
 8001308:	6821      	ldr	r1, [r4, #0]
 800130a:	3250      	adds	r2, #80	; 0x50
 800130c:	5a88      	ldrh	r0, [r1, r2]
 800130e:	3a28      	subs	r2, #40	; 0x28
 8001310:	5cba      	ldrb	r2, [r7, r2]
 8001312:	00d2      	lsls	r2, r2, #3
 8001314:	4691      	mov	r9, r2
 8001316:	4a99      	ldr	r2, [pc, #612]	; (800157c <HAL_PCD_IRQHandler+0xa58>)
 8001318:	4694      	mov	ip, r2
 800131a:	4461      	add	r1, ip
 800131c:	1809      	adds	r1, r1, r0
 800131e:	000a      	movs	r2, r1
 8001320:	444a      	add	r2, r9
 8001322:	2b00      	cmp	r3, #0
 8001324:	d12f      	bne.n	8001386 <HAL_PCD_IRQHandler+0x862>
 8001326:	8811      	ldrh	r1, [r2, #0]
 8001328:	4899      	ldr	r0, [pc, #612]	; (8001590 <HAL_PCD_IRQHandler+0xa6c>)
 800132a:	4001      	ands	r1, r0
 800132c:	8011      	strh	r1, [r2, #0]
 800132e:	8811      	ldrh	r1, [r2, #0]
 8001330:	2080      	movs	r0, #128	; 0x80
 8001332:	0200      	lsls	r0, r0, #8
 8001334:	4301      	orrs	r1, r0
 8001336:	8011      	strh	r1, [r2, #0]
 8001338:	e040      	b.n	80013bc <HAL_PCD_IRQHandler+0x898>
        else if (ep->xfer_len_db == 0U)
 800133a:	2900      	cmp	r1, #0
 800133c:	d107      	bne.n	800134e <HAL_PCD_IRQHandler+0x82a>
          ep->xfer_fill_db = 0U;
 800133e:	00ab      	lsls	r3, r5, #2
 8001340:	195b      	adds	r3, r3, r5
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	18e3      	adds	r3, r4, r3
 8001346:	334c      	adds	r3, #76	; 0x4c
 8001348:	7019      	strb	r1, [r3, #0]
          len = TxByteNbre;
 800134a:	0013      	movs	r3, r2
 800134c:	e7d8      	b.n	8001300 <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_fill_db = 0U;
 800134e:	00ab      	lsls	r3, r5, #2
 8001350:	195b      	adds	r3, r3, r5
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	18e3      	adds	r3, r4, r3
 8001356:	0018      	movs	r0, r3
 8001358:	304c      	adds	r0, #76	; 0x4c
 800135a:	2200      	movs	r2, #0
 800135c:	7002      	strb	r2, [r0, #0]
          ep->xfer_len_db = 0U;
 800135e:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001360:	2329      	movs	r3, #41	; 0x29
 8001362:	5cfa      	ldrb	r2, [r7, r3]
          len = ep->xfer_len_db;
 8001364:	000b      	movs	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001366:	2a00      	cmp	r2, #0
 8001368:	d126      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x894>
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	2250      	movs	r2, #80	; 0x50
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	5a98      	ldrh	r0, [r3, r2]
 8001372:	3a28      	subs	r2, #40	; 0x28
 8001374:	5cba      	ldrb	r2, [r7, r2]
 8001376:	00d2      	lsls	r2, r2, #3
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <HAL_PCD_IRQHandler+0xa58>)
 800137a:	469c      	mov	ip, r3
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	4463      	add	r3, ip
 8001380:	181b      	adds	r3, r3, r0
 8001382:	18d2      	adds	r2, r2, r3
          len = ep->xfer_len_db;
 8001384:	000b      	movs	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001386:	2b3e      	cmp	r3, #62	; 0x3e
 8001388:	d807      	bhi.n	800139a <HAL_PCD_IRQHandler+0x876>
 800138a:	0859      	lsrs	r1, r3, #1
 800138c:	4650      	mov	r0, sl
 800138e:	4018      	ands	r0, r3
 8001390:	1809      	adds	r1, r1, r0
 8001392:	0289      	lsls	r1, r1, #10
 8001394:	b289      	uxth	r1, r1
 8001396:	8011      	strh	r1, [r2, #0]
 8001398:	e010      	b.n	80013bc <HAL_PCD_IRQHandler+0x898>
 800139a:	0959      	lsrs	r1, r3, #5
 800139c:	4689      	mov	r9, r1
 800139e:	4640      	mov	r0, r8
 80013a0:	4018      	ands	r0, r3
 80013a2:	4241      	negs	r1, r0
 80013a4:	4141      	adcs	r1, r0
 80013a6:	0008      	movs	r0, r1
 80013a8:	4649      	mov	r1, r9
 80013aa:	1a09      	subs	r1, r1, r0
 80013ac:	0288      	lsls	r0, r1, #10
 80013ae:	4979      	ldr	r1, [pc, #484]	; (8001594 <HAL_PCD_IRQHandler+0xa70>)
 80013b0:	4301      	orrs	r1, r0
 80013b2:	b289      	uxth	r1, r1
 80013b4:	8011      	strh	r1, [r2, #0]
 80013b6:	e001      	b.n	80013bc <HAL_PCD_IRQHandler+0x898>
 80013b8:	2a01      	cmp	r2, #1
 80013ba:	d00d      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x8b4>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80013bc:	b29b      	uxth	r3, r3
 80013be:	00a9      	lsls	r1, r5, #2
 80013c0:	194a      	adds	r2, r1, r5
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	18a2      	adds	r2, r4, r2
 80013c6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80013c8:	1949      	adds	r1, r1, r5
 80013ca:	00c9      	lsls	r1, r1, #3
 80013cc:	1861      	adds	r1, r4, r1
 80013ce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f001 fc3e 	bl	8002c52 <USB_WritePMA>
 80013d6:	e74b      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	2150      	movs	r1, #80	; 0x50
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	5a50      	ldrh	r0, [r2, r1]
 80013e0:	3928      	subs	r1, #40	; 0x28
 80013e2:	5c79      	ldrb	r1, [r7, r1]
 80013e4:	00c9      	lsls	r1, r1, #3
 80013e6:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_PCD_IRQHandler+0xa58>)
 80013e8:	4694      	mov	ip, r2
 80013ea:	9a01      	ldr	r2, [sp, #4]
 80013ec:	4462      	add	r2, ip
 80013ee:	1812      	adds	r2, r2, r0
 80013f0:	188a      	adds	r2, r1, r2
 80013f2:	b299      	uxth	r1, r3
 80013f4:	8011      	strh	r1, [r2, #0]
 80013f6:	e7e1      	b.n	80013bc <HAL_PCD_IRQHandler+0x898>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	469b      	mov	fp, r3
 80013fc:	2350      	movs	r3, #80	; 0x50
 80013fe:	465a      	mov	r2, fp
 8001400:	5ad2      	ldrh	r2, [r2, r3]
 8001402:	3b28      	subs	r3, #40	; 0x28
 8001404:	5cf9      	ldrb	r1, [r7, r3]
    if (ep->xfer_len >= TxByteNbre)
 8001406:	00ab      	lsls	r3, r5, #2
 8001408:	195b      	adds	r3, r3, r5
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	18e3      	adds	r3, r4, r3
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001410:	00c8      	lsls	r0, r1, #3
 8001412:	4684      	mov	ip, r0
 8001414:	44dc      	add	ip, fp
 8001416:	4462      	add	r2, ip
 8001418:	485f      	ldr	r0, [pc, #380]	; (8001598 <HAL_PCD_IRQHandler+0xa74>)
 800141a:	4684      	mov	ip, r0
 800141c:	4462      	add	r2, ip
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len >= TxByteNbre)
 8001422:	0d92      	lsrs	r2, r2, #22
 8001424:	4293      	cmp	r3, r2
 8001426:	d351      	bcc.n	80014cc <HAL_PCD_IRQHandler+0x9a8>
      ep->xfer_len -= TxByteNbre;
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	469c      	mov	ip, r3
 800142c:	00ab      	lsls	r3, r5, #2
 800142e:	195b      	adds	r3, r3, r5
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	18e3      	adds	r3, r4, r3
 8001434:	4660      	mov	r0, ip
 8001436:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001438:	2800      	cmp	r0, #0
 800143a:	d04d      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x9b4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800143c:	464b      	mov	r3, r9
 800143e:	045b      	lsls	r3, r3, #17
 8001440:	d408      	bmi.n	8001454 <HAL_PCD_IRQHandler+0x930>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001442:	0089      	lsls	r1, r1, #2
 8001444:	4459      	add	r1, fp
 8001446:	0008      	movs	r0, r1
 8001448:	880b      	ldrh	r3, [r1, #0]
 800144a:	494d      	ldr	r1, [pc, #308]	; (8001580 <HAL_PCD_IRQHandler+0xa5c>)
 800144c:	400b      	ands	r3, r1
 800144e:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_PCD_IRQHandler+0xa60>)
 8001450:	430b      	orrs	r3, r1
 8001452:	8003      	strh	r3, [r0, #0]
      if (ep->xfer_fill_db == 1U)
 8001454:	00ab      	lsls	r3, r5, #2
 8001456:	195b      	adds	r3, r3, r5
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	18e3      	adds	r3, r4, r3
 800145c:	334c      	adds	r3, #76	; 0x4c
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d000      	beq.n	8001466 <HAL_PCD_IRQHandler+0x942>
 8001464:	e704      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxByteNbre;
 8001466:	00ab      	lsls	r3, r5, #2
 8001468:	195b      	adds	r3, r3, r5
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	18e3      	adds	r3, r4, r3
 800146e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001470:	1889      	adds	r1, r1, r2
 8001472:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001474:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001476:	1889      	adds	r1, r1, r2
 8001478:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800147a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	4298      	cmp	r0, r3
 8001480:	d33e      	bcc.n	8001500 <HAL_PCD_IRQHandler+0x9dc>
          ep->xfer_len_db -= len;
 8001482:	00aa      	lsls	r2, r5, #2
 8001484:	1952      	adds	r2, r2, r5
 8001486:	00d2      	lsls	r2, r2, #3
 8001488:	18a2      	adds	r2, r4, r2
 800148a:	1ac0      	subs	r0, r0, r3
 800148c:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800148e:	6821      	ldr	r1, [r4, #0]
 8001490:	9101      	str	r1, [sp, #4]
 8001492:	2029      	movs	r0, #41	; 0x29
 8001494:	5c3a      	ldrb	r2, [r7, r0]
 8001496:	2a00      	cmp	r2, #0
 8001498:	d000      	beq.n	800149c <HAL_PCD_IRQHandler+0x978>
 800149a:	e07f      	b.n	800159c <HAL_PCD_IRQHandler+0xa78>
 800149c:	3250      	adds	r2, #80	; 0x50
 800149e:	5a88      	ldrh	r0, [r1, r2]
 80014a0:	3a28      	subs	r2, #40	; 0x28
 80014a2:	5cba      	ldrb	r2, [r7, r2]
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	4691      	mov	r9, r2
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <HAL_PCD_IRQHandler+0xa74>)
 80014aa:	4694      	mov	ip, r2
 80014ac:	4461      	add	r1, ip
 80014ae:	1841      	adds	r1, r0, r1
 80014b0:	000a      	movs	r2, r1
 80014b2:	444a      	add	r2, r9
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d148      	bne.n	800154a <HAL_PCD_IRQHandler+0xa26>
 80014b8:	8811      	ldrh	r1, [r2, #0]
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <HAL_PCD_IRQHandler+0xa6c>)
 80014bc:	4001      	ands	r1, r0
 80014be:	8011      	strh	r1, [r2, #0]
 80014c0:	8811      	ldrh	r1, [r2, #0]
 80014c2:	2080      	movs	r0, #128	; 0x80
 80014c4:	0200      	lsls	r0, r0, #8
 80014c6:	4301      	orrs	r1, r0
 80014c8:	8011      	strh	r1, [r2, #0]
 80014ca:	e069      	b.n	80015a0 <HAL_PCD_IRQHandler+0xa7c>
      ep->xfer_len = 0U;
 80014cc:	00ab      	lsls	r3, r5, #2
 80014ce:	195d      	adds	r5, r3, r5
 80014d0:	00ed      	lsls	r5, r5, #3
 80014d2:	1965      	adds	r5, r4, r5
 80014d4:	2300      	movs	r3, #0
 80014d6:	642b      	str	r3, [r5, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014d8:	0020      	movs	r0, r4
 80014da:	f003 f908 	bl	80046ee <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80014de:	464b      	mov	r3, r9
 80014e0:	045b      	lsls	r3, r3, #17
 80014e2:	d500      	bpl.n	80014e6 <HAL_PCD_IRQHandler+0x9c2>
 80014e4:	e6c4      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	5cfa      	ldrb	r2, [r7, r3]
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	469c      	mov	ip, r3
 80014f0:	4462      	add	r2, ip
 80014f2:	8813      	ldrh	r3, [r2, #0]
 80014f4:	4922      	ldr	r1, [pc, #136]	; (8001580 <HAL_PCD_IRQHandler+0xa5c>)
 80014f6:	400b      	ands	r3, r1
 80014f8:	4922      	ldr	r1, [pc, #136]	; (8001584 <HAL_PCD_IRQHandler+0xa60>)
 80014fa:	430b      	orrs	r3, r1
 80014fc:	8013      	strh	r3, [r2, #0]
 80014fe:	e6b7      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        else if (ep->xfer_len_db == 0U)
 8001500:	2800      	cmp	r0, #0
 8001502:	d108      	bne.n	8001516 <HAL_PCD_IRQHandler+0x9f2>
          ep->xfer_fill_db = 0U;
 8001504:	00ab      	lsls	r3, r5, #2
 8001506:	195b      	adds	r3, r3, r5
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	18e3      	adds	r3, r4, r3
 800150c:	334c      	adds	r3, #76	; 0x4c
 800150e:	2100      	movs	r1, #0
 8001510:	7019      	strb	r1, [r3, #0]
          len = TxByteNbre;
 8001512:	0013      	movs	r3, r2
 8001514:	e7bb      	b.n	800148e <HAL_PCD_IRQHandler+0x96a>
          ep->xfer_len_db = 0U;
 8001516:	00ab      	lsls	r3, r5, #2
 8001518:	195b      	adds	r3, r3, r5
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	18e3      	adds	r3, r4, r3
 800151e:	2200      	movs	r2, #0
 8001520:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001522:	334c      	adds	r3, #76	; 0x4c
 8001524:	701a      	strb	r2, [r3, #0]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001526:	6821      	ldr	r1, [r4, #0]
 8001528:	9101      	str	r1, [sp, #4]
 800152a:	2329      	movs	r3, #41	; 0x29
 800152c:	5cfa      	ldrb	r2, [r7, r3]
          len = ep->xfer_len_db;
 800152e:	0003      	movs	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001530:	2a00      	cmp	r2, #0
 8001532:	d133      	bne.n	800159c <HAL_PCD_IRQHandler+0xa78>
 8001534:	2350      	movs	r3, #80	; 0x50
 8001536:	5aca      	ldrh	r2, [r1, r3]
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_PCD_IRQHandler+0xa74>)
 800153a:	469c      	mov	ip, r3
 800153c:	4461      	add	r1, ip
 800153e:	1852      	adds	r2, r2, r1
 8001540:	2328      	movs	r3, #40	; 0x28
 8001542:	5cfb      	ldrb	r3, [r7, r3]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	18d2      	adds	r2, r2, r3
          len = ep->xfer_len_db;
 8001548:	0003      	movs	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800154a:	2b3e      	cmp	r3, #62	; 0x3e
 800154c:	d807      	bhi.n	800155e <HAL_PCD_IRQHandler+0xa3a>
 800154e:	0859      	lsrs	r1, r3, #1
 8001550:	4650      	mov	r0, sl
 8001552:	4018      	ands	r0, r3
 8001554:	1809      	adds	r1, r1, r0
 8001556:	0289      	lsls	r1, r1, #10
 8001558:	b289      	uxth	r1, r1
 800155a:	8011      	strh	r1, [r2, #0]
 800155c:	e020      	b.n	80015a0 <HAL_PCD_IRQHandler+0xa7c>
 800155e:	0959      	lsrs	r1, r3, #5
 8001560:	4689      	mov	r9, r1
 8001562:	4640      	mov	r0, r8
 8001564:	4018      	ands	r0, r3
 8001566:	4241      	negs	r1, r0
 8001568:	4141      	adcs	r1, r0
 800156a:	0008      	movs	r0, r1
 800156c:	4649      	mov	r1, r9
 800156e:	1a09      	subs	r1, r1, r0
 8001570:	0288      	lsls	r0, r1, #10
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <HAL_PCD_IRQHandler+0xa70>)
 8001574:	4301      	orrs	r1, r0
 8001576:	b289      	uxth	r1, r1
 8001578:	8011      	strh	r1, [r2, #0]
 800157a:	e011      	b.n	80015a0 <HAL_PCD_IRQHandler+0xa7c>
 800157c:	00000402 	.word	0x00000402
 8001580:	ffff8f8f 	.word	0xffff8f8f
 8001584:	0000c080 	.word	0x0000c080
 8001588:	ffff8fbf 	.word	0xffff8fbf
 800158c:	00008080 	.word	0x00008080
 8001590:	ffff83ff 	.word	0xffff83ff
 8001594:	ffff8000 	.word	0xffff8000
 8001598:	00000406 	.word	0x00000406
 800159c:	2a01      	cmp	r2, #1
 800159e:	d00d      	beq.n	80015bc <HAL_PCD_IRQHandler+0xa98>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	00a9      	lsls	r1, r5, #2
 80015a4:	194a      	adds	r2, r1, r5
 80015a6:	00d2      	lsls	r2, r2, #3
 80015a8:	18a2      	adds	r2, r4, r2
 80015aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80015ac:	1949      	adds	r1, r1, r5
 80015ae:	00c9      	lsls	r1, r1, #3
 80015b0:	1861      	adds	r1, r4, r1
 80015b2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	f001 fb4c 	bl	8002c52 <USB_WritePMA>
 80015ba:	e659      	b.n	8001270 <HAL_PCD_IRQHandler+0x74c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80015bc:	2050      	movs	r0, #80	; 0x50
 80015be:	5a08      	ldrh	r0, [r1, r0]
 80015c0:	2128      	movs	r1, #40	; 0x28
 80015c2:	5c79      	ldrb	r1, [r7, r1]
 80015c4:	00c9      	lsls	r1, r1, #3
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_PCD_IRQHandler+0xb34>)
 80015c8:	4694      	mov	ip, r2
 80015ca:	4461      	add	r1, ip
 80015cc:	9a01      	ldr	r2, [sp, #4]
 80015ce:	188a      	adds	r2, r1, r2
 80015d0:	1882      	adds	r2, r0, r2
 80015d2:	b299      	uxth	r1, r3
 80015d4:	8011      	strh	r1, [r2, #0]
 80015d6:	e7e3      	b.n	80015a0 <HAL_PCD_IRQHandler+0xa7c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015d8:	6821      	ldr	r1, [r4, #0]
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	5a8b      	ldrh	r3, [r1, r2]
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <HAL_PCD_IRQHandler+0xb38>)
 80015e0:	4003      	ands	r3, r0
 80015e2:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 80015e4:	0020      	movs	r0, r4
 80015e6:	f003 f895 	bl	8004714 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015ea:	2100      	movs	r1, #0
 80015ec:	0020      	movs	r0, r4
 80015ee:	f7ff fa82 	bl	8000af6 <HAL_PCD_SetAddress>
 80015f2:	f7ff faac 	bl	8000b4e <HAL_PCD_IRQHandler+0x2a>
      hpcd->LPM_State = LPM_L0;
 80015f6:	23b8      	movs	r3, #184	; 0xb8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	2200      	movs	r2, #0
 80015fc:	54e2      	strb	r2, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015fe:	2100      	movs	r1, #0
 8001600:	0020      	movs	r0, r4
 8001602:	f000 f99f 	bl	8001944 <HAL_PCDEx_LPM_Callback>
 8001606:	f7ff facf 	bl	8000ba8 <HAL_PCD_IRQHandler+0x84>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800160a:	6821      	ldr	r1, [r4, #0]
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	5aca      	ldrh	r2, [r1, r3]
 8001610:	2008      	movs	r0, #8
 8001612:	4302      	orrs	r2, r0
 8001614:	52ca      	strh	r2, [r1, r3]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001616:	6820      	ldr	r0, [r4, #0]
 8001618:	2144      	movs	r1, #68	; 0x44
 800161a:	5a42      	ldrh	r2, [r0, r1]
 800161c:	4d10      	ldr	r5, [pc, #64]	; (8001660 <HAL_PCD_IRQHandler+0xb3c>)
 800161e:	402a      	ands	r2, r5
 8001620:	5242      	strh	r2, [r0, r1]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	5aca      	ldrh	r2, [r1, r3]
 8001626:	2004      	movs	r0, #4
 8001628:	4302      	orrs	r2, r0
 800162a:	52ca      	strh	r2, [r1, r3]
    HAL_PCD_SuspendCallback(hpcd);
 800162c:	0020      	movs	r0, r4
 800162e:	f003 f883 	bl	8004738 <HAL_PCD_SuspendCallback>
 8001632:	f7ff fac9 	bl	8000bc8 <HAL_PCD_IRQHandler+0xa4>
      HAL_PCD_SuspendCallback(hpcd);
 8001636:	0020      	movs	r0, r4
 8001638:	f003 f87e 	bl	8004738 <HAL_PCD_SuspendCallback>
 800163c:	f7ff faf2 	bl	8000c24 <HAL_PCD_IRQHandler+0x100>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001640:	6821      	ldr	r1, [r4, #0]
 8001642:	2244      	movs	r2, #68	; 0x44
 8001644:	5a8b      	ldrh	r3, [r1, r2]
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_PCD_IRQHandler+0xb40>)
 8001648:	4003      	ands	r3, r0
 800164a:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 800164c:	0020      	movs	r0, r4
 800164e:	f003 f85a 	bl	8004706 <HAL_PCD_SOFCallback>
 8001652:	f7ff faee 	bl	8000c32 <HAL_PCD_IRQHandler+0x10e>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	00000406 	.word	0x00000406
 800165c:	fffffbff 	.word	0xfffffbff
 8001660:	fffff7ff 	.word	0xfffff7ff
 8001664:	fffffdff 	.word	0xfffffdff

08001668 <HAL_PCD_EP_Open>:
{
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	0005      	movs	r5, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800166c:	b248      	sxtb	r0, r1
 800166e:	2800      	cmp	r0, #0
 8001670:	db2a      	blt.n	80016c8 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001672:	2607      	movs	r6, #7
 8001674:	400e      	ands	r6, r1
 8001676:	00b4      	lsls	r4, r6, #2
 8001678:	19a0      	adds	r0, r4, r6
 800167a:	00c0      	lsls	r0, r0, #3
 800167c:	3069      	adds	r0, #105	; 0x69
 800167e:	30ff      	adds	r0, #255	; 0xff
 8001680:	1828      	adds	r0, r5, r0
    ep->is_in = 0U;
 8001682:	19a4      	adds	r4, r4, r6
 8001684:	00e4      	lsls	r4, r4, #3
 8001686:	192c      	adds	r4, r5, r4
 8001688:	346a      	adds	r4, #106	; 0x6a
 800168a:	34ff      	adds	r4, #255	; 0xff
 800168c:	2600      	movs	r6, #0
 800168e:	7026      	strb	r6, [r4, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001690:	2407      	movs	r4, #7
 8001692:	4021      	ands	r1, r4
 8001694:	7001      	strb	r1, [r0, #0]
  ep->maxpacket = ep_mps;
 8001696:	6102      	str	r2, [r0, #16]
  ep->type = ep_type;
 8001698:	70c3      	strb	r3, [r0, #3]
  if (ep->is_in != 0U)
 800169a:	7842      	ldrb	r2, [r0, #1]
 800169c:	2a00      	cmp	r2, #0
 800169e:	d000      	beq.n	80016a2 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80016a0:	81c1      	strh	r1, [r0, #14]
  if (ep_type == EP_TYPE_BULK)
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d01a      	beq.n	80016dc <HAL_PCD_EP_Open+0x74>
  __HAL_LOCK(hpcd);
 80016a6:	23aa      	movs	r3, #170	; 0xaa
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	5ceb      	ldrb	r3, [r5, r3]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d018      	beq.n	80016e2 <HAL_PCD_EP_Open+0x7a>
 80016b0:	24aa      	movs	r4, #170	; 0xaa
 80016b2:	00a4      	lsls	r4, r4, #2
 80016b4:	2301      	movs	r3, #1
 80016b6:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016b8:	0001      	movs	r1, r0
 80016ba:	6828      	ldr	r0, [r5, #0]
 80016bc:	f001 f83c 	bl	8002738 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016c0:	2300      	movs	r3, #0
 80016c2:	552b      	strb	r3, [r5, r4]
  return ret;
 80016c4:	2000      	movs	r0, #0
}
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c8:	2407      	movs	r4, #7
 80016ca:	400c      	ands	r4, r1
 80016cc:	1c66      	adds	r6, r4, #1
 80016ce:	00b4      	lsls	r4, r6, #2
 80016d0:	19a0      	adds	r0, r4, r6
 80016d2:	00c0      	lsls	r0, r0, #3
 80016d4:	1828      	adds	r0, r5, r0
    ep->is_in = 1U;
 80016d6:	2601      	movs	r6, #1
 80016d8:	7046      	strb	r6, [r0, #1]
 80016da:	e7d9      	b.n	8001690 <HAL_PCD_EP_Open+0x28>
    ep->data_pid_start = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	7103      	strb	r3, [r0, #4]
 80016e0:	e7e1      	b.n	80016a6 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 80016e2:	2002      	movs	r0, #2
 80016e4:	e7ef      	b.n	80016c6 <HAL_PCD_EP_Open+0x5e>

080016e6 <HAL_PCD_EP_Close>:
{
 80016e6:	b570      	push	{r4, r5, r6, lr}
 80016e8:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80016ea:	b24b      	sxtb	r3, r1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db22      	blt.n	8001736 <HAL_PCD_EP_Close+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f0:	2007      	movs	r0, #7
 80016f2:	4008      	ands	r0, r1
 80016f4:	0082      	lsls	r2, r0, #2
 80016f6:	1813      	adds	r3, r2, r0
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	3369      	adds	r3, #105	; 0x69
 80016fc:	33ff      	adds	r3, #255	; 0xff
 80016fe:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 8001700:	1812      	adds	r2, r2, r0
 8001702:	00d2      	lsls	r2, r2, #3
 8001704:	18a2      	adds	r2, r4, r2
 8001706:	326a      	adds	r2, #106	; 0x6a
 8001708:	32ff      	adds	r2, #255	; 0xff
 800170a:	2000      	movs	r0, #0
 800170c:	7010      	strb	r0, [r2, #0]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800170e:	2207      	movs	r2, #7
 8001710:	4011      	ands	r1, r2
 8001712:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001714:	22aa      	movs	r2, #170	; 0xaa
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	5ca2      	ldrb	r2, [r4, r2]
 800171a:	2a01      	cmp	r2, #1
 800171c:	d015      	beq.n	800174a <HAL_PCD_EP_Close+0x64>
 800171e:	25aa      	movs	r5, #170	; 0xaa
 8001720:	00ad      	lsls	r5, r5, #2
 8001722:	2201      	movs	r2, #1
 8001724:	5562      	strb	r2, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001726:	0019      	movs	r1, r3
 8001728:	6820      	ldr	r0, [r4, #0]
 800172a:	f001 f963 	bl	80029f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800172e:	2300      	movs	r3, #0
 8001730:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001732:	2000      	movs	r0, #0
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001736:	2207      	movs	r2, #7
 8001738:	400a      	ands	r2, r1
 800173a:	1c50      	adds	r0, r2, #1
 800173c:	0082      	lsls	r2, r0, #2
 800173e:	1813      	adds	r3, r2, r0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 8001744:	2001      	movs	r0, #1
 8001746:	7058      	strb	r0, [r3, #1]
 8001748:	e7e1      	b.n	800170e <HAL_PCD_EP_Close+0x28>
  __HAL_LOCK(hpcd);
 800174a:	2002      	movs	r0, #2
 800174c:	e7f2      	b.n	8001734 <HAL_PCD_EP_Close+0x4e>

0800174e <HAL_PCD_EP_Receive>:
{
 800174e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001750:	2607      	movs	r6, #7
 8001752:	400e      	ands	r6, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001754:	00b4      	lsls	r4, r6, #2
 8001756:	19a1      	adds	r1, r4, r6
 8001758:	00c9      	lsls	r1, r1, #3
 800175a:	3169      	adds	r1, #105	; 0x69
 800175c:	31ff      	adds	r1, #255	; 0xff
 800175e:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 8001760:	19a5      	adds	r5, r4, r6
 8001762:	00ed      	lsls	r5, r5, #3
 8001764:	1945      	adds	r5, r0, r5
 8001766:	002f      	movs	r7, r5
 8001768:	377d      	adds	r7, #125	; 0x7d
 800176a:	37ff      	adds	r7, #255	; 0xff
 800176c:	603a      	str	r2, [r7, #0]
  ep->xfer_len = len;
 800176e:	002a      	movs	r2, r5
 8001770:	3281      	adds	r2, #129	; 0x81
 8001772:	32ff      	adds	r2, #255	; 0xff
 8001774:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8001776:	3204      	adds	r2, #4
 8001778:	2300      	movs	r3, #0
 800177a:	6013      	str	r3, [r2, #0]
  ep->is_in = 0U;
 800177c:	356a      	adds	r5, #106	; 0x6a
 800177e:	35ff      	adds	r5, #255	; 0xff
 8001780:	702b      	strb	r3, [r5, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001782:	19a4      	adds	r4, r4, r6
 8001784:	00e4      	lsls	r4, r4, #3
 8001786:	1904      	adds	r4, r0, r4
 8001788:	3469      	adds	r4, #105	; 0x69
 800178a:	34ff      	adds	r4, #255	; 0xff
 800178c:	7026      	strb	r6, [r4, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800178e:	2e00      	cmp	r6, #0
 8001790:	d004      	beq.n	800179c <HAL_PCD_EP_Receive+0x4e>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001792:	6800      	ldr	r0, [r0, #0]
 8001794:	f001 fa74 	bl	8002c80 <USB_EPStartXfer>
}
 8001798:	2000      	movs	r0, #0
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800179c:	6800      	ldr	r0, [r0, #0]
 800179e:	f001 fa6f 	bl	8002c80 <USB_EPStartXfer>
 80017a2:	e7f9      	b.n	8001798 <HAL_PCD_EP_Receive+0x4a>

080017a4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017a4:	2307      	movs	r3, #7
 80017a6:	400b      	ands	r3, r1
 80017a8:	0099      	lsls	r1, r3, #2
 80017aa:	18c9      	adds	r1, r1, r3
 80017ac:	00c9      	lsls	r1, r1, #3
 80017ae:	1840      	adds	r0, r0, r1
 80017b0:	3085      	adds	r0, #133	; 0x85
 80017b2:	30ff      	adds	r0, #255	; 0xff
 80017b4:	6800      	ldr	r0, [r0, #0]
}
 80017b6:	4770      	bx	lr

080017b8 <HAL_PCD_EP_Transmit>:
{
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	2607      	movs	r6, #7
 80017bc:	400e      	ands	r6, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	1c74      	adds	r4, r6, #1
 80017c0:	00a1      	lsls	r1, r4, #2
 80017c2:	1909      	adds	r1, r1, r4
 80017c4:	00c9      	lsls	r1, r1, #3
 80017c6:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 80017c8:	00b4      	lsls	r4, r6, #2
 80017ca:	19a5      	adds	r5, r4, r6
 80017cc:	00ed      	lsls	r5, r5, #3
 80017ce:	1945      	adds	r5, r0, r5
 80017d0:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 80017d2:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80017d4:	002f      	movs	r7, r5
 80017d6:	374c      	adds	r7, #76	; 0x4c
 80017d8:	2201      	movs	r2, #1
 80017da:	703a      	strb	r2, [r7, #0]
  ep->xfer_len_db = len;
 80017dc:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 80017e2:	2429      	movs	r4, #41	; 0x29
 80017e4:	552a      	strb	r2, [r5, r4]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e6:	3227      	adds	r2, #39	; 0x27
 80017e8:	54ae      	strb	r6, [r5, r2]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ea:	2e00      	cmp	r6, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_PCD_EP_Transmit+0x40>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ee:	6800      	ldr	r0, [r0, #0]
 80017f0:	f001 fa46 	bl	8002c80 <USB_EPStartXfer>
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017f8:	6800      	ldr	r0, [r0, #0]
 80017fa:	f001 fa41 	bl	8002c80 <USB_EPStartXfer>
 80017fe:	e7f9      	b.n	80017f4 <HAL_PCD_EP_Transmit+0x3c>

08001800 <HAL_PCD_EP_SetStall>:
{
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	0004      	movs	r4, r0
 8001804:	2507      	movs	r5, #7
 8001806:	400d      	ands	r5, r1
    return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	429d      	cmp	r5, r3
 800180e:	d822      	bhi.n	8001856 <HAL_PCD_EP_SetStall+0x56>
  if ((0x80U & ep_addr) == 0x80U)
 8001810:	b24b      	sxtb	r3, r1
 8001812:	2b00      	cmp	r3, #0
 8001814:	db20      	blt.n	8001858 <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr];
 8001816:	008a      	lsls	r2, r1, #2
 8001818:	1853      	adds	r3, r2, r1
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	3369      	adds	r3, #105	; 0x69
 800181e:	33ff      	adds	r3, #255	; 0xff
 8001820:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 8001822:	1852      	adds	r2, r2, r1
 8001824:	00d2      	lsls	r2, r2, #3
 8001826:	18a2      	adds	r2, r4, r2
 8001828:	326a      	adds	r2, #106	; 0x6a
 800182a:	32ff      	adds	r2, #255	; 0xff
 800182c:	2100      	movs	r1, #0
 800182e:	7011      	strb	r1, [r2, #0]
  ep->is_stall = 1U;
 8001830:	2201      	movs	r2, #1
 8001832:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001834:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001836:	22aa      	movs	r2, #170	; 0xaa
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	5ca2      	ldrb	r2, [r4, r2]
 800183c:	2a01      	cmp	r2, #1
 800183e:	d013      	beq.n	8001868 <HAL_PCD_EP_SetStall+0x68>
 8001840:	25aa      	movs	r5, #170	; 0xaa
 8001842:	00ad      	lsls	r5, r5, #2
 8001844:	2201      	movs	r2, #1
 8001846:	5562      	strb	r2, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001848:	0019      	movs	r1, r3
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f001 f982 	bl	8002b54 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001850:	2300      	movs	r3, #0
 8001852:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
}
 8001856:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001858:	1c68      	adds	r0, r5, #1
 800185a:	0082      	lsls	r2, r0, #2
 800185c:	1813      	adds	r3, r2, r0
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 8001862:	2101      	movs	r1, #1
 8001864:	7059      	strb	r1, [r3, #1]
 8001866:	e7e3      	b.n	8001830 <HAL_PCD_EP_SetStall+0x30>
  __HAL_LOCK(hpcd);
 8001868:	2002      	movs	r0, #2
 800186a:	e7f4      	b.n	8001856 <HAL_PCD_EP_SetStall+0x56>

0800186c <HAL_PCD_EP_ClrStall>:
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001870:	230f      	movs	r3, #15
 8001872:	400b      	ands	r3, r1
    return HAL_ERROR;
 8001874:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001876:	6862      	ldr	r2, [r4, #4]
 8001878:	4293      	cmp	r3, r2
 800187a:	d826      	bhi.n	80018ca <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 800187c:	b24b      	sxtb	r3, r1
 800187e:	2b00      	cmp	r3, #0
 8001880:	db24      	blt.n	80018cc <HAL_PCD_EP_ClrStall+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001882:	2007      	movs	r0, #7
 8001884:	4008      	ands	r0, r1
 8001886:	0082      	lsls	r2, r0, #2
 8001888:	1813      	adds	r3, r2, r0
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	3369      	adds	r3, #105	; 0x69
 800188e:	33ff      	adds	r3, #255	; 0xff
 8001890:	18e3      	adds	r3, r4, r3
    ep->is_in = 0U;
 8001892:	1812      	adds	r2, r2, r0
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	18a2      	adds	r2, r4, r2
 8001898:	326a      	adds	r2, #106	; 0x6a
 800189a:	32ff      	adds	r2, #255	; 0xff
 800189c:	2000      	movs	r0, #0
 800189e:	7010      	strb	r0, [r2, #0]
  ep->is_stall = 0U;
 80018a0:	2200      	movs	r2, #0
 80018a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a4:	3207      	adds	r2, #7
 80018a6:	4011      	ands	r1, r2
 80018a8:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 80018aa:	22aa      	movs	r2, #170	; 0xaa
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	5ca2      	ldrb	r2, [r4, r2]
 80018b0:	2a01      	cmp	r2, #1
 80018b2:	d015      	beq.n	80018e0 <HAL_PCD_EP_ClrStall+0x74>
 80018b4:	25aa      	movs	r5, #170	; 0xaa
 80018b6:	00ad      	lsls	r5, r5, #2
 80018b8:	2201      	movs	r2, #1
 80018ba:	5562      	strb	r2, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018bc:	0019      	movs	r1, r3
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	f001 f96c 	bl	8002b9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018c4:	2300      	movs	r3, #0
 80018c6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	2207      	movs	r2, #7
 80018ce:	400a      	ands	r2, r1
 80018d0:	1c50      	adds	r0, r2, #1
 80018d2:	0082      	lsls	r2, r0, #2
 80018d4:	1813      	adds	r3, r2, r0
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	18e3      	adds	r3, r4, r3
    ep->is_in = 1U;
 80018da:	2001      	movs	r0, #1
 80018dc:	7058      	strb	r0, [r3, #1]
 80018de:	e7df      	b.n	80018a0 <HAL_PCD_EP_ClrStall+0x34>
  __HAL_LOCK(hpcd);
 80018e0:	2002      	movs	r0, #2
 80018e2:	e7f2      	b.n	80018ca <HAL_PCD_EP_ClrStall+0x5e>

080018e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80018e4:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018e6:	060c      	lsls	r4, r1, #24
 80018e8:	d50f      	bpl.n	800190a <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ea:	2407      	movs	r4, #7
 80018ec:	4021      	ands	r1, r4
 80018ee:	3101      	adds	r1, #1
 80018f0:	008c      	lsls	r4, r1, #2
 80018f2:	1861      	adds	r1, r4, r1
 80018f4:	00c9      	lsls	r1, r1, #3
 80018f6:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d00d      	beq.n	8001918 <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80018fc:	2201      	movs	r2, #1
 80018fe:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001900:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 8001906:	2000      	movs	r0, #0
 8001908:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800190a:	008c      	lsls	r4, r1, #2
 800190c:	1861      	adds	r1, r4, r1
 800190e:	00c9      	lsls	r1, r1, #3
 8001910:	3169      	adds	r1, #105	; 0x69
 8001912:	31ff      	adds	r1, #255	; 0xff
 8001914:	1840      	adds	r0, r0, r1
 8001916:	e7ef      	b.n	80018f8 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8001918:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800191a:	80c3      	strh	r3, [r0, #6]
 800191c:	e7f3      	b.n	8001906 <HAL_PCDEx_PMAConfig+0x22>

0800191e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800191e:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8001920:	23ba      	movs	r3, #186	; 0xba
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	2101      	movs	r1, #1
 8001926:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 8001928:	3b08      	subs	r3, #8
 800192a:	2100      	movs	r1, #0
 800192c:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800192e:	2354      	movs	r3, #84	; 0x54
 8001930:	5ad1      	ldrh	r1, [r2, r3]
 8001932:	2001      	movs	r0, #1
 8001934:	4301      	orrs	r1, r0
 8001936:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001938:	5ad1      	ldrh	r1, [r2, r3]
 800193a:	2002      	movs	r0, #2
 800193c:	4301      	orrs	r1, r0
 800193e:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 8001940:	2000      	movs	r0, #0
 8001942:	4770      	bx	lr

08001944 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001944:	4770      	bx	lr
	...

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	46ce      	mov	lr, r9
 800194c:	4647      	mov	r7, r8
 800194e:	b580      	push	{r7, lr}
 8001950:	b083      	sub	sp, #12
 8001952:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	d100      	bne.n	8001958 <HAL_RCC_OscConfig+0x10>
 8001956:	e2a2      	b.n	8001e9e <HAL_RCC_OscConfig+0x556>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001958:	6803      	ldr	r3, [r0, #0]
 800195a:	07db      	lsls	r3, r3, #31
 800195c:	d52c      	bpl.n	80019b8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195e:	4bbc      	ldr	r3, [pc, #752]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	230c      	movs	r3, #12
 8001964:	4013      	ands	r3, r2
 8001966:	2b04      	cmp	r3, #4
 8001968:	d01d      	beq.n	80019a6 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196a:	4bb9      	ldr	r3, [pc, #740]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	230c      	movs	r3, #12
 8001970:	4013      	ands	r3, r2
 8001972:	2b08      	cmp	r3, #8
 8001974:	d00e      	beq.n	8001994 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	6863      	ldr	r3, [r4, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d043      	beq.n	8001a04 <HAL_RCC_OscConfig+0xbc>
 800197c:	2b00      	cmp	r3, #0
 800197e:	d15a      	bne.n	8001a36 <HAL_RCC_OscConfig+0xee>
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	49b3      	ldr	r1, [pc, #716]	; (8001c54 <HAL_RCC_OscConfig+0x30c>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	49b2      	ldr	r1, [pc, #712]	; (8001c58 <HAL_RCC_OscConfig+0x310>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e03d      	b.n	8001a10 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	22c0      	movs	r2, #192	; 0xc0
 800199a:	0252      	lsls	r2, r2, #9
 800199c:	4013      	ands	r3, r2
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	0252      	lsls	r2, r2, #9
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d1e7      	bne.n	8001976 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	039b      	lsls	r3, r3, #14
 80019ac:	d504      	bpl.n	80019b8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <HAL_RCC_OscConfig+0x70>
 80019b6:	e273      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	079b      	lsls	r3, r3, #30
 80019bc:	d57d      	bpl.n	8001aba <HAL_RCC_OscConfig+0x172>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019be:	4ba4      	ldr	r3, [pc, #656]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	220c      	movs	r2, #12
 80019c4:	421a      	tst	r2, r3
 80019c6:	d067      	beq.n	8001a98 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019c8:	4ba1      	ldr	r3, [pc, #644]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	230c      	movs	r3, #12
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d058      	beq.n	8001a86 <HAL_RCC_OscConfig+0x13e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d4:	68e3      	ldr	r3, [r4, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x94>
 80019da:	e091      	b.n	8001b00 <HAL_RCC_OscConfig+0x1b8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4a9c      	ldr	r2, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7fe fd47 	bl	8000478 <HAL_GetTick>
 80019ea:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	4e98      	ldr	r6, [pc, #608]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 80019ee:	2502      	movs	r5, #2
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	421d      	tst	r5, r3
 80019f4:	d17b      	bne.n	8001aee <HAL_RCC_OscConfig+0x1a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7fe fd3f 	bl	8000478 <HAL_GetTick>
 80019fa:	1bc0      	subs	r0, r0, r7
 80019fc:	2802      	cmp	r0, #2
 80019fe:	d9f7      	bls.n	80019f0 <HAL_RCC_OscConfig+0xa8>
          {
            return HAL_TIMEOUT;
 8001a00:	2003      	movs	r0, #3
 8001a02:	e24d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a06:	6811      	ldr	r1, [r2, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a10:	6863      	ldr	r3, [r4, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8001a16:	f7fe fd2f 	bl	8000478 <HAL_GetTick>
 8001a1a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1c:	4e8c      	ldr	r6, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a1e:	2580      	movs	r5, #128	; 0x80
 8001a20:	02ad      	lsls	r5, r5, #10
 8001a22:	6833      	ldr	r3, [r6, #0]
 8001a24:	422b      	tst	r3, r5
 8001a26:	d1c7      	bne.n	80019b8 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7fe fd26 	bl	8000478 <HAL_GetTick>
 8001a2c:	1bc0      	subs	r0, r0, r7
 8001a2e:	2864      	cmp	r0, #100	; 0x64
 8001a30:	d9f7      	bls.n	8001a22 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8001a32:	2003      	movs	r0, #3
 8001a34:	e234      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_OscConfig+0x106>
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4985      	ldr	r1, [pc, #532]	; (8001c54 <HAL_RCC_OscConfig+0x30c>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4984      	ldr	r1, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x310>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e7e0      	b.n	8001a10 <HAL_RCC_OscConfig+0xc8>
 8001a4e:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	02d2      	lsls	r2, r2, #11
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	0252      	lsls	r2, r2, #9
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e7d4      	b.n	8001a10 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001a66:	f7fe fd07 	bl	8000478 <HAL_GetTick>
 8001a6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6c:	4e78      	ldr	r6, [pc, #480]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a6e:	2580      	movs	r5, #128	; 0x80
 8001a70:	02ad      	lsls	r5, r5, #10
 8001a72:	6833      	ldr	r3, [r6, #0]
 8001a74:	422b      	tst	r3, r5
 8001a76:	d09f      	beq.n	80019b8 <HAL_RCC_OscConfig+0x70>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7fe fcfe 	bl	8000478 <HAL_GetTick>
 8001a7c:	1bc0      	subs	r0, r0, r7
 8001a7e:	2864      	cmp	r0, #100	; 0x64
 8001a80:	d9f7      	bls.n	8001a72 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001a82:	2003      	movs	r0, #3
 8001a84:	e20c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	22c0      	movs	r2, #192	; 0xc0
 8001a8c:	0252      	lsls	r2, r2, #9
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0212      	lsls	r2, r2, #8
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d19d      	bne.n	80019d4 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a98:	4b6d      	ldr	r3, [pc, #436]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	079b      	lsls	r3, r3, #30
 8001a9e:	d504      	bpl.n	8001aaa <HAL_RCC_OscConfig+0x162>
        return HAL_ERROR;
 8001aa0:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	68e3      	ldr	r3, [r4, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d000      	beq.n	8001aaa <HAL_RCC_OscConfig+0x162>
 8001aa8:	e1fa      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4969      	ldr	r1, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001aac:	680a      	ldr	r2, [r1, #0]
 8001aae:	6923      	ldr	r3, [r4, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	20f8      	movs	r0, #248	; 0xf8
 8001ab4:	4382      	bics	r2, r0
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	071b      	lsls	r3, r3, #28
 8001abe:	d547      	bpl.n	8001b50 <HAL_RCC_OscConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac0:	69e3      	ldr	r3, [r4, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d030      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4a62      	ldr	r2, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001ac8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001aca:	2101      	movs	r1, #1
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fcd2 	bl	8000478 <HAL_GetTick>
 8001ad4:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4e5e      	ldr	r6, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001ad8:	2502      	movs	r5, #2
 8001ada:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001adc:	421d      	tst	r5, r3
 8001ade:	d137      	bne.n	8001b50 <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7fe fcca 	bl	8000478 <HAL_GetTick>
 8001ae4:	1bc0      	subs	r0, r0, r7
 8001ae6:	2802      	cmp	r0, #2
 8001ae8:	d9f7      	bls.n	8001ada <HAL_RCC_OscConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001aea:	2003      	movs	r0, #3
 8001aec:	e1d8      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4958      	ldr	r1, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001af0:	680a      	ldr	r2, [r1, #0]
 8001af2:	6923      	ldr	r3, [r4, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	20f8      	movs	r0, #248	; 0xf8
 8001af8:	4382      	bics	r2, r0
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
 8001afe:	e7dc      	b.n	8001aba <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	438b      	bics	r3, r1
 8001b08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fcb5 	bl	8000478 <HAL_GetTick>
 8001b0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b10:	4e4f      	ldr	r6, [pc, #316]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b12:	2502      	movs	r5, #2
 8001b14:	6833      	ldr	r3, [r6, #0]
 8001b16:	421d      	tst	r5, r3
 8001b18:	d0cf      	beq.n	8001aba <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7fe fcad 	bl	8000478 <HAL_GetTick>
 8001b1e:	1bc0      	subs	r0, r0, r7
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9f7      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
 8001b24:	2003      	movs	r0, #3
 8001b26:	e1bb      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	438b      	bics	r3, r1
 8001b30:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7fe fca1 	bl	8000478 <HAL_GetTick>
 8001b36:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4e45      	ldr	r6, [pc, #276]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b3a:	2502      	movs	r5, #2
 8001b3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b3e:	421d      	tst	r5, r3
 8001b40:	d006      	beq.n	8001b50 <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b42:	f7fe fc99 	bl	8000478 <HAL_GetTick>
 8001b46:	1bc0      	subs	r0, r0, r7
 8001b48:	2802      	cmp	r0, #2
 8001b4a:	d9f7      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1f4>
        {
          return HAL_TIMEOUT;
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	e1a7      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	075b      	lsls	r3, r3, #29
 8001b54:	d400      	bmi.n	8001b58 <HAL_RCC_OscConfig+0x210>
 8001b56:	e088      	b.n	8001c6a <HAL_RCC_OscConfig+0x322>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	d40b      	bmi.n	8001b7c <HAL_RCC_OscConfig+0x234>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b66:	69d1      	ldr	r1, [r2, #28]
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	0540      	lsls	r0, r0, #21
 8001b6c:	4301      	orrs	r1, r0
 8001b6e:	61d1      	str	r1, [r2, #28]
 8001b70:	69d3      	ldr	r3, [r2, #28]
 8001b72:	4003      	ands	r3, r0
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x314>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	05db      	lsls	r3, r3, #23
 8001b82:	d50e      	bpl.n	8001ba2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	68a3      	ldr	r3, [r4, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d021      	beq.n	8001bce <HAL_RCC_OscConfig+0x286>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d138      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b8>
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001b90:	6a1a      	ldr	r2, [r3, #32]
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	3103      	adds	r1, #3
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
 8001ba0:	e01a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x290>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_RCC_OscConfig+0x314>)
 8001ba4:	6811      	ldr	r1, [r2, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001bae:	f7fe fc63 	bl	8000478 <HAL_GetTick>
 8001bb2:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4f29      	ldr	r7, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0x314>)
 8001bb6:	2680      	movs	r6, #128	; 0x80
 8001bb8:	0076      	lsls	r6, r6, #1
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4233      	tst	r3, r6
 8001bbe:	d1e1      	bne.n	8001b84 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7fe fc5a 	bl	8000478 <HAL_GetTick>
 8001bc4:	1b40      	subs	r0, r0, r5
 8001bc6:	2864      	cmp	r0, #100	; 0x64
 8001bc8:	d9f7      	bls.n	8001bba <HAL_RCC_OscConfig+0x272>
          return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
 8001bcc:	e168      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bce:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001bd0:	6a13      	ldr	r3, [r2, #32]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	68a3      	ldr	r3, [r4, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d026      	beq.n	8001c2c <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7fe fc4b 	bl	8000478 <HAL_GetTick>
 8001be2:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4f1a      	ldr	r7, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001be6:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	4d1d      	ldr	r5, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	421e      	tst	r6, r3
 8001bee:	d139      	bne.n	8001c64 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fc42 	bl	8000478 <HAL_GetTick>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	1ac0      	subs	r0, r0, r3
 8001bf8:	42a8      	cmp	r0, r5
 8001bfa:	d9f6      	bls.n	8001bea <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_TIMEOUT;
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	e14f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d009      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2d0>
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001c06:	6a1a      	ldr	r2, [r3, #32]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	438a      	bics	r2, r1
 8001c0c:	621a      	str	r2, [r3, #32]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	3103      	adds	r1, #3
 8001c12:	438a      	bics	r2, r1
 8001c14:	621a      	str	r2, [r3, #32]
 8001c16:	e7df      	b.n	8001bd8 <HAL_RCC_OscConfig+0x290>
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	621a      	str	r2, [r3, #32]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	3903      	subs	r1, #3
 8001c26:	430a      	orrs	r2, r1
 8001c28:	621a      	str	r2, [r3, #32]
 8001c2a:	e7d5      	b.n	8001bd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe fc24 	bl	8000478 <HAL_GetTick>
 8001c30:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	4f07      	ldr	r7, [pc, #28]	; (8001c50 <HAL_RCC_OscConfig+0x308>)
 8001c34:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	4d0a      	ldr	r5, [pc, #40]	; (8001c60 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	421e      	tst	r6, r3
 8001c3c:	d012      	beq.n	8001c64 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fc1b 	bl	8000478 <HAL_GetTick>
 8001c42:	464b      	mov	r3, r9
 8001c44:	1ac0      	subs	r0, r0, r3
 8001c46:	42a8      	cmp	r0, r5
 8001c48:	d9f6      	bls.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e128      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	fffeffff 	.word	0xfffeffff
 8001c58:	fffbffff 	.word	0xfffbffff
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c64:	4643      	mov	r3, r8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d03c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	06db      	lsls	r3, r3, #27
 8001c6e:	d510      	bpl.n	8001c92 <HAL_RCC_OscConfig+0x34a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c70:	6963      	ldr	r3, [r4, #20]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d03c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x3a8>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c76:	3305      	adds	r3, #5
 8001c78:	d15b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c7a:	4a8d      	ldr	r2, [pc, #564]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001c7c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c7e:	2104      	movs	r1, #4
 8001c80:	438b      	bics	r3, r1
 8001c82:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c84:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c86:	69a3      	ldr	r3, [r4, #24]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	20f8      	movs	r0, #248	; 0xf8
 8001c8c:	4381      	bics	r1, r0
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	069b      	lsls	r3, r3, #26
 8001c96:	d574      	bpl.n	8001d82 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c98:	4b85      	ldr	r3, [pc, #532]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d065      	beq.n	8001d70 <HAL_RCC_OscConfig+0x428>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ca4:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	230c      	movs	r3, #12
 8001caa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d058      	beq.n	8001d62 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cb0:	6a23      	ldr	r3, [r4, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x370>
 8001cb6:	e086      	b.n	8001dc6 <HAL_RCC_OscConfig+0x47e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cb8:	4a7d      	ldr	r2, [pc, #500]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001cba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fbd8 	bl	8000478 <HAL_GetTick>
 8001cc8:	0007      	movs	r7, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cca:	4e79      	ldr	r6, [pc, #484]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001ccc:	2580      	movs	r5, #128	; 0x80
 8001cce:	026d      	lsls	r5, r5, #9
 8001cd0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001cd2:	422b      	tst	r3, r5
 8001cd4:	d155      	bne.n	8001d82 <HAL_RCC_OscConfig+0x43a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd6:	f7fe fbcf 	bl	8000478 <HAL_GetTick>
 8001cda:	1bc0      	subs	r0, r0, r7
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9f7      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	e0dd      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4a72      	ldr	r2, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001ce6:	69d3      	ldr	r3, [r2, #28]
 8001ce8:	4972      	ldr	r1, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x56c>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	e7bc      	b.n	8001c6a <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfc:	3903      	subs	r1, #3
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d02:	f7fe fbb9 	bl	8000478 <HAL_GetTick>
 8001d06:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d08:	4e69      	ldr	r6, [pc, #420]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d0a:	2502      	movs	r5, #2
 8001d0c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001d0e:	421d      	tst	r5, r3
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3d8>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d12:	f7fe fbb1 	bl	8000478 <HAL_GetTick>
 8001d16:	1bc0      	subs	r0, r0, r7
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	d9f7      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	e0bf      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d20:	4963      	ldr	r1, [pc, #396]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d22:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001d24:	69a3      	ldr	r3, [r4, #24]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	20f8      	movs	r0, #248	; 0xf8
 8001d2a:	4382      	bics	r2, r0
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	634b      	str	r3, [r1, #52]	; 0x34
 8001d30:	e7af      	b.n	8001c92 <HAL_RCC_OscConfig+0x34a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d36:	2104      	movs	r1, #4
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	3903      	subs	r1, #3
 8001d40:	438a      	bics	r2, r1
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d44:	f7fe fb98 	bl	8000478 <HAL_GetTick>
 8001d48:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d4a:	4e59      	ldr	r6, [pc, #356]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d4c:	2502      	movs	r5, #2
 8001d4e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001d50:	421d      	tst	r5, r3
 8001d52:	d09e      	beq.n	8001c92 <HAL_RCC_OscConfig+0x34a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d54:	f7fe fb90 	bl	8000478 <HAL_GetTick>
 8001d58:	1bc0      	subs	r0, r0, r7
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9f7      	bls.n	8001d4e <HAL_RCC_OscConfig+0x406>
          return HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
 8001d60:	e09e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d62:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	22c0      	movs	r2, #192	; 0xc0
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d19f      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x368>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	03db      	lsls	r3, r3, #15
 8001d76:	d504      	bpl.n	8001d82 <HAL_RCC_OscConfig+0x43a>
        return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d7a:	6a23      	ldr	r3, [r4, #32]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d000      	beq.n	8001d82 <HAL_RCC_OscConfig+0x43a>
 8001d80:	e08e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
        }
      }
    }
  }

  return HAL_OK;
 8001d84:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <HAL_RCC_OscConfig+0x444>
 8001d8a:	e089      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d8e:	6851      	ldr	r1, [r2, #4]
 8001d90:	220c      	movs	r2, #12
 8001d92:	400a      	ands	r2, r1
 8001d94:	2a08      	cmp	r2, #8
 8001d96:	d068      	beq.n	8001e6a <HAL_RCC_OscConfig+0x522>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d029      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	4945      	ldr	r1, [pc, #276]	; (8001eb8 <HAL_RCC_OscConfig+0x570>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001da6:	f7fe fb67 	bl	8000478 <HAL_GetTick>
 8001daa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	4d40      	ldr	r5, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001dae:	2480      	movs	r4, #128	; 0x80
 8001db0:	04a4      	lsls	r4, r4, #18
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	4223      	tst	r3, r4
 8001db6:	d056      	beq.n	8001e66 <HAL_RCC_OscConfig+0x51e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fb5e 	bl	8000478 <HAL_GetTick>
 8001dbc:	1b80      	subs	r0, r0, r6
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	d9f7      	bls.n	8001db2 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	e06c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI48_DISABLE();
 8001dc6:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001dc8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001dca:	493c      	ldr	r1, [pc, #240]	; (8001ebc <HAL_RCC_OscConfig+0x574>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fb52 	bl	8000478 <HAL_GetTick>
 8001dd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dd6:	4e36      	ldr	r6, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001dd8:	2580      	movs	r5, #128	; 0x80
 8001dda:	026d      	lsls	r5, r5, #9
 8001ddc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001dde:	422b      	tst	r3, r5
 8001de0:	d0cf      	beq.n	8001d82 <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de2:	f7fe fb49 	bl	8000478 <HAL_GetTick>
 8001de6:	1bc0      	subs	r0, r0, r7
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d9f7      	bls.n	8001ddc <HAL_RCC_OscConfig+0x494>
            return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e057      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x570>)
 8001df6:	400b      	ands	r3, r1
 8001df8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001dfa:	f7fe fb3d 	bl	8000478 <HAL_GetTick>
 8001dfe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	4e2b      	ldr	r6, [pc, #172]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001e02:	2580      	movs	r5, #128	; 0x80
 8001e04:	04ad      	lsls	r5, r5, #18
 8001e06:	6833      	ldr	r3, [r6, #0]
 8001e08:	422b      	tst	r3, r5
 8001e0a:	d006      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fb34 	bl	8000478 <HAL_GetTick>
 8001e10:	1bc0      	subs	r0, r0, r7
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f7      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4be>
            return HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
 8001e18:	e042      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	210f      	movs	r1, #15
 8001e20:	438a      	bics	r2, r1
 8001e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e24:	430a      	orrs	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e2e:	4302      	orrs	r2, r0
 8001e30:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <HAL_RCC_OscConfig+0x578>)
 8001e32:	4001      	ands	r1, r0
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	0452      	lsls	r2, r2, #17
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e42:	f7fe fb19 	bl	8000478 <HAL_GetTick>
 8001e46:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	4d19      	ldr	r5, [pc, #100]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001e4a:	2480      	movs	r4, #128	; 0x80
 8001e4c:	04a4      	lsls	r4, r4, #18
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	4223      	tst	r3, r4
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fb10 	bl	8000478 <HAL_GetTick>
 8001e58:	1b80      	subs	r0, r0, r6
 8001e5a:	2802      	cmp	r0, #2
 8001e5c:	d9f7      	bls.n	8001e4e <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8001e5e:	2003      	movs	r0, #3
 8001e60:	e01e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
  return HAL_OK;
 8001e62:	2000      	movs	r0, #0
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
 8001e66:	2000      	movs	r0, #0
 8001e68:	e01a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d01d      	beq.n	8001eaa <HAL_RCC_OscConfig+0x562>
        pll_config  = RCC->CFGR;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_OscConfig+0x568>)
 8001e70:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001e72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	4013      	ands	r3, r2
          return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001e7e:	42ab      	cmp	r3, r5
 8001e80:	d10e      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e82:	230f      	movs	r3, #15
 8001e84:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d109      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	20f0      	movs	r0, #240	; 0xf0
 8001e8e:	0380      	lsls	r0, r0, #14
 8001e90:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e94:	1a10      	subs	r0, r2, r0
 8001e96:	1e42      	subs	r2, r0, #1
 8001e98:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 8001e9a:	b2c0      	uxtb	r0, r0
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
 8001e9e:	2001      	movs	r0, #1
}
 8001ea0:	b003      	add	sp, #12
 8001ea2:	bc0c      	pop	{r2, r3}
 8001ea4:	4690      	mov	r8, r2
 8001ea6:	4699      	mov	r9, r3
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	e7f8      	b.n	8001ea0 <HAL_RCC_OscConfig+0x558>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	efffffff 	.word	0xefffffff
 8001eb8:	feffffff 	.word	0xfeffffff
 8001ebc:	fffeffff 	.word	0xfffeffff
 8001ec0:	ffc27fff 	.word	0xffc27fff

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b530      	push	{r4, r5, lr}
 8001ec6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ec8:	aa04      	add	r2, sp, #16
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x90>)
 8001ecc:	0018      	movs	r0, r3
 8001ece:	c832      	ldmia	r0!, {r1, r4, r5}
 8001ed0:	c232      	stmia	r2!, {r1, r4, r5}
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ed8:	466a      	mov	r2, sp
 8001eda:	3310      	adds	r3, #16
 8001edc:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001ede:	c213      	stmia	r2!, {r0, r1, r4}
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	230c      	movs	r3, #12
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x48>
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x44>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	3b04      	subs	r3, #4
 8001ef6:	4258      	negs	r0, r3
 8001ef8:	4158      	adcs	r0, r3
 8001efa:	4240      	negs	r0, r0
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	4018      	ands	r0, r3
 8001f00:	469c      	mov	ip, r3
 8001f02:	4460      	add	r0, ip
      break;
    }
  }
  return sysclockfreq;
}
 8001f04:	b009      	add	sp, #36	; 0x24
 8001f06:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI48_VALUE;
 8001f08:	4815      	ldr	r0, [pc, #84]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0a:	e7fb      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f0c:	0c91      	lsrs	r1, r2, #18
 8001f0e:	230f      	movs	r3, #15
 8001f10:	4019      	ands	r1, r3
 8001f12:	a804      	add	r0, sp, #16
 8001f14:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f16:	4910      	ldr	r1, [pc, #64]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	4669      	mov	r1, sp
 8001f1e:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f20:	23c0      	movs	r3, #192	; 0xc0
 8001f22:	025b      	lsls	r3, r3, #9
 8001f24:	401a      	ands	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x7c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	025b      	lsls	r3, r3, #9
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d009      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x86>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f38:	f7fe f8e6 	bl	8000108 <__udivsi3>
 8001f3c:	4360      	muls	r0, r4
 8001f3e:	e7e1      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f42:	f7fe f8e1 	bl	8000108 <__udivsi3>
 8001f46:	4360      	muls	r0, r4
 8001f48:	e7dc      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f4c:	f7fe f8dc 	bl	8000108 <__udivsi3>
 8001f50:	4360      	muls	r0, r4
 8001f52:	e7d7      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
 8001f54:	08004d4c 	.word	0x08004d4c
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	02dc6c00 	.word	0x02dc6c00
 8001f64:	00f42400 	.word	0x00f42400

08001f68 <HAL_RCC_ClockConfig>:
{
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	46ce      	mov	lr, r9
 8001f6c:	4647      	mov	r7, r8
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	0004      	movs	r4, r0
 8001f72:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x12>
 8001f78:	e089      	b.n	800208e <HAL_RCC_ClockConfig+0x126>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d20a      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4944      	ldr	r1, [pc, #272]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 8001f88:	680b      	ldr	r3, [r1, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	432b      	orrs	r3, r5
 8001f90:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	680b      	ldr	r3, [r1, #0]
 8001f94:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f98:	42aa      	cmp	r2, r5
 8001f9a:	d179      	bne.n	8002090 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	079a      	lsls	r2, r3, #30
 8001fa0:	d50e      	bpl.n	8001fc0 <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa2:	075b      	lsls	r3, r3, #29
 8001fa4:	d505      	bpl.n	8001fb2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fa8:	6851      	ldr	r1, [r2, #4]
 8001faa:	23e0      	movs	r3, #224	; 0xe0
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fb4:	6853      	ldr	r3, [r2, #4]
 8001fb6:	21f0      	movs	r1, #240	; 0xf0
 8001fb8:	438b      	bics	r3, r1
 8001fba:	68a1      	ldr	r1, [r4, #8]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	07db      	lsls	r3, r3, #31
 8001fc4:	d538      	bpl.n	8002038 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d027      	beq.n	8002020 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d02b      	beq.n	800202c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4a31      	ldr	r2, [pc, #196]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fd6:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	0792      	lsls	r2, r2, #30
 8001fdc:	d405      	bmi.n	8001fea <HAL_RCC_ClockConfig+0x82>
 8001fde:	e057      	b.n	8002090 <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fe2:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	0392      	lsls	r2, r2, #14
 8001fe8:	d552      	bpl.n	8002090 <HAL_RCC_ClockConfig+0x128>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	492c      	ldr	r1, [pc, #176]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fec:	684a      	ldr	r2, [r1, #4]
 8001fee:	2003      	movs	r0, #3
 8001ff0:	4382      	bics	r2, r0
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001ff6:	f7fe fa3f 	bl	8000478 <HAL_GetTick>
 8001ffa:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffc:	4f27      	ldr	r7, [pc, #156]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001ffe:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x138>)
 8002002:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4032      	ands	r2, r6
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d013      	beq.n	8002038 <HAL_RCC_ClockConfig+0xd0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fa32 	bl	8000478 <HAL_GetTick>
 8002014:	464b      	mov	r3, r9
 8002016:	1ac0      	subs	r0, r0, r3
 8002018:	4540      	cmp	r0, r8
 800201a:	d9f3      	bls.n	8002004 <HAL_RCC_ClockConfig+0x9c>
        return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3
 800201e:	e037      	b.n	8002090 <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8002022:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	0192      	lsls	r2, r2, #6
 8002028:	d4df      	bmi.n	8001fea <HAL_RCC_ClockConfig+0x82>
 800202a:	e031      	b.n	8002090 <HAL_RCC_ClockConfig+0x128>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 800202e:	6b52      	ldr	r2, [r2, #52]	; 0x34
        return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002032:	03d2      	lsls	r2, r2, #15
 8002034:	d4d9      	bmi.n	8001fea <HAL_RCC_ClockConfig+0x82>
 8002036:	e02b      	b.n	8002090 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	4013      	ands	r3, r2
 8002040:	42ab      	cmp	r3, r5
 8002042:	d90a      	bls.n	800205a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002044:	4914      	ldr	r1, [pc, #80]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 8002046:	680b      	ldr	r3, [r1, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4393      	bics	r3, r2
 800204c:	432b      	orrs	r3, r5
 800204e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002050:	680b      	ldr	r3, [r1, #0]
 8002052:	401a      	ands	r2, r3
      return HAL_ERROR;
 8002054:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	42aa      	cmp	r2, r5
 8002058:	d11a      	bne.n	8002090 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	075b      	lsls	r3, r3, #29
 800205e:	d506      	bpl.n	800206e <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8002062:	6853      	ldr	r3, [r2, #4]
 8002064:	490f      	ldr	r1, [pc, #60]	; (80020a4 <HAL_RCC_ClockConfig+0x13c>)
 8002066:	400b      	ands	r3, r1
 8002068:	68e1      	ldr	r1, [r4, #12]
 800206a:	430b      	orrs	r3, r1
 800206c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800206e:	f7ff ff29 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	0f1b      	lsrs	r3, r3, #28
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x140>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	40d8      	lsrs	r0, r3
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x144>)
 8002082:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002084:	2000      	movs	r0, #0
 8002086:	f7fe f9b5 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 800208a:	2000      	movs	r0, #0
 800208c:	e000      	b.n	8002090 <HAL_RCC_ClockConfig+0x128>
    return HAL_ERROR;
 800208e:	2001      	movs	r0, #1
}
 8002090:	bc0c      	pop	{r2, r3}
 8002092:	4690      	mov	r8, r2
 8002094:	4699      	mov	r9, r3
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	00001388 	.word	0x00001388
 80020a4:	fffff8ff 	.word	0xfffff8ff
 80020a8:	08004dcc 	.word	0x08004dcc
 80020ac:	20000118 	.word	0x20000118

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	46ce      	mov	lr, r9
 80020b4:	4647      	mov	r7, r8
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b083      	sub	sp, #12
 80020ba:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020bc:	6803      	ldr	r3, [r0, #0]
 80020be:	03db      	lsls	r3, r3, #15
 80020c0:	d536      	bpl.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020c4:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	d40a      	bmi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020ce:	69d1      	ldr	r1, [r2, #28]
 80020d0:	2080      	movs	r0, #128	; 0x80
 80020d2:	0540      	lsls	r0, r0, #21
 80020d4:	4301      	orrs	r1, r0
 80020d6:	61d1      	str	r1, [r2, #28]
 80020d8:	69d3      	ldr	r3, [r2, #28]
 80020da:	4003      	ands	r3, r0
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020e0:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	05db      	lsls	r3, r3, #23
 80020e8:	d550      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	22c0      	movs	r2, #192	; 0xc0
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f4:	d013      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80020f6:	6861      	ldr	r1, [r4, #4]
 80020f8:	400a      	ands	r2, r1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d00f      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002100:	6a18      	ldr	r0, [r3, #32]
 8002102:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002104:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002106:	6a1e      	ldr	r6, [r3, #32]
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0249      	lsls	r1, r1, #9
 800210c:	4331      	orrs	r1, r6
 800210e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	6a19      	ldr	r1, [r3, #32]
 8002112:	4e38      	ldr	r6, [pc, #224]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002114:	4031      	ands	r1, r6
 8002116:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002118:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211a:	07c3      	lsls	r3, r0, #31
 800211c:	d44d      	bmi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002120:	6a13      	ldr	r3, [r2, #32]
 8002122:	4933      	ldr	r1, [pc, #204]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002124:	400b      	ands	r3, r1
 8002126:	6861      	ldr	r1, [r4, #4]
 8002128:	430b      	orrs	r3, r1
 800212a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212c:	2d01      	cmp	r5, #1
 800212e:	d056      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	07db      	lsls	r3, r3, #31
 8002134:	d506      	bpl.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002138:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800213a:	2103      	movs	r1, #3
 800213c:	438b      	bics	r3, r1
 800213e:	68a1      	ldr	r1, [r4, #8]
 8002140:	430b      	orrs	r3, r1
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	d506      	bpl.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214a:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800214c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800214e:	2110      	movs	r1, #16
 8002150:	438b      	bics	r3, r1
 8002152:	68e1      	ldr	r1, [r4, #12]
 8002154:	430b      	orrs	r3, r1
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	039b      	lsls	r3, r3, #14
 800215c:	d506      	bpl.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002160:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	438b      	bics	r3, r1
 8002166:	6961      	ldr	r1, [r4, #20]
 8002168:	430b      	orrs	r3, r1
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800216c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	055b      	lsls	r3, r3, #21
 8002172:	d506      	bpl.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002176:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	438b      	bics	r3, r1
 800217c:	6921      	ldr	r1, [r4, #16]
 800217e:	430b      	orrs	r3, r1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002182:	b003      	add	sp, #12
 8002184:	bc0c      	pop	{r2, r3}
 8002186:	4690      	mov	r8, r2
 8002188:	4699      	mov	r9, r3
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800218e:	6811      	ldr	r1, [r2, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	430b      	orrs	r3, r1
 8002196:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002198:	f7fe f96e 	bl	8000478 <HAL_GetTick>
 800219c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4f13      	ldr	r7, [pc, #76]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021a0:	2680      	movs	r6, #128	; 0x80
 80021a2:	0076      	lsls	r6, r6, #1
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4233      	tst	r3, r6
 80021a8:	d19f      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe f965 	bl	8000478 <HAL_GetTick>
 80021ae:	4643      	mov	r3, r8
 80021b0:	1ac0      	subs	r0, r0, r3
 80021b2:	2864      	cmp	r0, #100	; 0x64
 80021b4:	d9f6      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e7e3      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 80021ba:	f7fe f95d 	bl	8000478 <HAL_GetTick>
 80021be:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4f09      	ldr	r7, [pc, #36]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021c2:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80021c6:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	421e      	tst	r6, r3
 80021cc:	d1a7      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe f953 	bl	8000478 <HAL_GetTick>
 80021d2:	464b      	mov	r3, r9
 80021d4:	1ac0      	subs	r0, r0, r3
 80021d6:	4540      	cmp	r0, r8
 80021d8:	d9f6      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
 80021da:	2003      	movs	r0, #3
 80021dc:	e7d1      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	69d3      	ldr	r3, [r2, #28]
 80021e0:	4906      	ldr	r1, [pc, #24]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021e2:	400b      	ands	r3, r1
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	e7a3      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	fffffcff 	.word	0xfffffcff
 80021f4:	fffeffff 	.word	0xfffeffff
 80021f8:	00001388 	.word	0x00001388
 80021fc:	efffffff 	.word	0xefffffff

08002200 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002200:	233d      	movs	r3, #61	; 0x3d
 8002202:	5cc2      	ldrb	r2, [r0, r3]
  {
    return HAL_ERROR;
 8002204:	3b3c      	subs	r3, #60	; 0x3c
  if (htim->State != HAL_TIM_STATE_READY)
 8002206:	2a01      	cmp	r2, #1
 8002208:	d001      	beq.n	800220e <HAL_TIM_Base_Start_IT+0xe>
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 800220a:	0018      	movs	r0, r3
 800220c:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 800220e:	333c      	adds	r3, #60	; 0x3c
 8002210:	3201      	adds	r2, #1
 8002212:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	6802      	ldr	r2, [r0, #0]
 8002216:	68d3      	ldr	r3, [r2, #12]
 8002218:	2101      	movs	r1, #1
 800221a:	430b      	orrs	r3, r1
 800221c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221e:	6803      	ldr	r3, [r0, #0]
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_TIM_Base_Start_IT+0x5c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00c      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x40>
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	05d2      	lsls	r2, r2, #23
 800222a:	4293      	cmp	r3, r2
 800222c:	d008      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x40>
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <HAL_TIM_Base_Start_IT+0x60>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d005      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e7e4      	b.n	800220a <HAL_TIM_Base_Start_IT+0xa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	2207      	movs	r2, #7
 8002244:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	2a06      	cmp	r2, #6
 8002248:	d005      	beq.n	8002256 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e7d9      	b.n	800220a <HAL_TIM_Base_Start_IT+0xa>
 8002256:	2300      	movs	r3, #0
 8002258:	e7d7      	b.n	800220a <HAL_TIM_Base_Start_IT+0xa>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400

08002264 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002268:	4770      	bx	lr

0800226a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IRQHandler>:
{
 800226c:	b510      	push	{r4, lr}
 800226e:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	0792      	lsls	r2, r2, #30
 8002276:	d50f      	bpl.n	8002298 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	0792      	lsls	r2, r2, #30
 800227c:	d50c      	bpl.n	8002298 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800227e:	2203      	movs	r2, #3
 8002280:	4252      	negs	r2, r2
 8002282:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002284:	2301      	movs	r3, #1
 8002286:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	079b      	lsls	r3, r3, #30
 800228e:	d063      	beq.n	8002358 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8002290:	f7ff ffe9 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002294:	2300      	movs	r3, #0
 8002296:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	0752      	lsls	r2, r2, #29
 800229e:	d512      	bpl.n	80022c6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	0752      	lsls	r2, r2, #29
 80022a4:	d50f      	bpl.n	80022c6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022a6:	2205      	movs	r2, #5
 80022a8:	4252      	negs	r2, r2
 80022aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	23c0      	movs	r3, #192	; 0xc0
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	421a      	tst	r2, r3
 80022ba:	d053      	beq.n	8002364 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80022bc:	0020      	movs	r0, r4
 80022be:	f7ff ffd2 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	2300      	movs	r3, #0
 80022c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	0712      	lsls	r2, r2, #28
 80022cc:	d510      	bpl.n	80022f0 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	0712      	lsls	r2, r2, #28
 80022d2:	d50d      	bpl.n	80022f0 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d4:	2209      	movs	r2, #9
 80022d6:	4252      	negs	r2, r2
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022da:	2304      	movs	r3, #4
 80022dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	079b      	lsls	r3, r3, #30
 80022e4:	d045      	beq.n	8002372 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	0020      	movs	r0, r4
 80022e8:	f7ff ffbd 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ec:	2300      	movs	r3, #0
 80022ee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	06d2      	lsls	r2, r2, #27
 80022f6:	d512      	bpl.n	800231e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	06d2      	lsls	r2, r2, #27
 80022fc:	d50f      	bpl.n	800231e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fe:	2211      	movs	r2, #17
 8002300:	4252      	negs	r2, r2
 8002302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002304:	2308      	movs	r3, #8
 8002306:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	23c0      	movs	r3, #192	; 0xc0
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	421a      	tst	r2, r3
 8002312:	d035      	beq.n	8002380 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8002314:	0020      	movs	r0, r4
 8002316:	f7ff ffa6 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	2300      	movs	r3, #0
 800231c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	07d2      	lsls	r2, r2, #31
 8002324:	d502      	bpl.n	800232c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	07d2      	lsls	r2, r2, #31
 800232a:	d430      	bmi.n	800238e <HAL_TIM_IRQHandler+0x122>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	0612      	lsls	r2, r2, #24
 8002332:	d502      	bpl.n	800233a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	0612      	lsls	r2, r2, #24
 8002338:	d430      	bmi.n	800239c <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	0652      	lsls	r2, r2, #25
 8002340:	d502      	bpl.n	8002348 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	0652      	lsls	r2, r2, #25
 8002346:	d430      	bmi.n	80023aa <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	0692      	lsls	r2, r2, #26
 800234e:	d502      	bpl.n	8002356 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	0692      	lsls	r2, r2, #26
 8002354:	d430      	bmi.n	80023b8 <HAL_TIM_IRQHandler+0x14c>
}
 8002356:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002358:	f7ff ff84 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	0020      	movs	r0, r4
 800235e:	f7ff ff83 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002362:	e797      	b.n	8002294 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002364:	0020      	movs	r0, r4
 8002366:	f7ff ff7d 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236a:	0020      	movs	r0, r4
 800236c:	f7ff ff7c 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
 8002370:	e7a7      	b.n	80022c2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	0020      	movs	r0, r4
 8002374:	f7ff ff76 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	0020      	movs	r0, r4
 800237a:	f7ff ff75 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
 800237e:	e7b5      	b.n	80022ec <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002380:	0020      	movs	r0, r4
 8002382:	f7ff ff6f 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002386:	0020      	movs	r0, r4
 8002388:	f7ff ff6e 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
 800238c:	e7c5      	b.n	800231a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238e:	2202      	movs	r2, #2
 8002390:	4252      	negs	r2, r2
 8002392:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002394:	0020      	movs	r0, r4
 8002396:	f001 ffc9 	bl	800432c <HAL_TIM_PeriodElapsedCallback>
 800239a:	e7c7      	b.n	800232c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	2281      	movs	r2, #129	; 0x81
 800239e:	4252      	negs	r2, r2
 80023a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023a2:	0020      	movs	r0, r4
 80023a4:	f000 f9a3 	bl	80026ee <HAL_TIMEx_BreakCallback>
 80023a8:	e7c7      	b.n	800233a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023aa:	2241      	movs	r2, #65	; 0x41
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023b0:	0020      	movs	r0, r4
 80023b2:	f7ff ff5a 	bl	800226a <HAL_TIM_TriggerCallback>
 80023b6:	e7c7      	b.n	8002348 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	4252      	negs	r2, r2
 80023bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80023be:	0020      	movs	r0, r4
 80023c0:	f000 f994 	bl	80026ec <HAL_TIMEx_CommutCallback>
}
 80023c4:	e7c7      	b.n	8002356 <HAL_TIM_IRQHandler+0xea>
	...

080023c8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ca:	4a38      	ldr	r2, [pc, #224]	; (80024ac <TIM_Base_SetConfig+0xe4>)
 80023cc:	4290      	cmp	r0, r2
 80023ce:	d01e      	beq.n	800240e <TIM_Base_SetConfig+0x46>
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	05d2      	lsls	r2, r2, #23
 80023d4:	4290      	cmp	r0, r2
 80023d6:	d039      	beq.n	800244c <TIM_Base_SetConfig+0x84>
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <TIM_Base_SetConfig+0xe8>)
 80023da:	4290      	cmp	r0, r2
 80023dc:	d012      	beq.n	8002404 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	4a35      	ldr	r2, [pc, #212]	; (80024b4 <TIM_Base_SetConfig+0xec>)
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d038      	beq.n	8002456 <TIM_Base_SetConfig+0x8e>
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <TIM_Base_SetConfig+0xf0>)
 80023e6:	4290      	cmp	r0, r2
 80023e8:	d051      	beq.n	800248e <TIM_Base_SetConfig+0xc6>
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <TIM_Base_SetConfig+0xf4>)
 80023ec:	4290      	cmp	r0, r2
 80023ee:	d040      	beq.n	8002472 <TIM_Base_SetConfig+0xaa>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	4393      	bics	r3, r2
 80023f4:	694a      	ldr	r2, [r1, #20]
 80023f6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80023f8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023fa:	688b      	ldr	r3, [r1, #8]
 80023fc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023fe:	680b      	ldr	r3, [r1, #0]
 8002400:	6283      	str	r3, [r0, #40]	; 0x28
 8002402:	e020      	b.n	8002446 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002404:	2270      	movs	r2, #112	; 0x70
 8002406:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002408:	684a      	ldr	r2, [r1, #4]
 800240a:	4313      	orrs	r3, r2
 800240c:	e003      	b.n	8002416 <TIM_Base_SetConfig+0x4e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240e:	2270      	movs	r2, #112	; 0x70
 8002410:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002412:	684a      	ldr	r2, [r1, #4]
 8002414:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <TIM_Base_SetConfig+0xf8>)
 8002418:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	68ca      	ldr	r2, [r1, #12]
 800241c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	4393      	bics	r3, r2
 8002422:	694a      	ldr	r2, [r1, #20]
 8002424:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002426:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002428:	688b      	ldr	r3, [r1, #8]
 800242a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800242c:	680b      	ldr	r3, [r1, #0]
 800242e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <TIM_Base_SetConfig+0xe4>)
 8002432:	4298      	cmp	r0, r3
 8002434:	d005      	beq.n	8002442 <TIM_Base_SetConfig+0x7a>
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <TIM_Base_SetConfig+0xf0>)
 8002438:	4298      	cmp	r0, r3
 800243a:	d002      	beq.n	8002442 <TIM_Base_SetConfig+0x7a>
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <TIM_Base_SetConfig+0xf4>)
 800243e:	4298      	cmp	r0, r3
 8002440:	d101      	bne.n	8002446 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002442:	690b      	ldr	r3, [r1, #16]
 8002444:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002446:	2301      	movs	r3, #1
 8002448:	6143      	str	r3, [r0, #20]
}
 800244a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244c:	2270      	movs	r2, #112	; 0x70
 800244e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002450:	684a      	ldr	r2, [r1, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	e7df      	b.n	8002416 <TIM_Base_SetConfig+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <TIM_Base_SetConfig+0xf8>)
 8002458:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245a:	68ca      	ldr	r2, [r1, #12]
 800245c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	4393      	bics	r3, r2
 8002462:	694a      	ldr	r2, [r1, #20]
 8002464:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002466:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002468:	688b      	ldr	r3, [r1, #8]
 800246a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800246c:	680b      	ldr	r3, [r1, #0]
 800246e:	6283      	str	r3, [r0, #40]	; 0x28
 8002470:	e7e9      	b.n	8002446 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <TIM_Base_SetConfig+0xf8>)
 8002474:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	68ca      	ldr	r2, [r1, #12]
 8002478:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	4393      	bics	r3, r2
 800247e:	694a      	ldr	r2, [r1, #20]
 8002480:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002482:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002484:	688b      	ldr	r3, [r1, #8]
 8002486:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002488:	680b      	ldr	r3, [r1, #0]
 800248a:	6283      	str	r3, [r0, #40]	; 0x28
 800248c:	e7d9      	b.n	8002442 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <TIM_Base_SetConfig+0xf8>)
 8002490:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002492:	68ca      	ldr	r2, [r1, #12]
 8002494:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	4393      	bics	r3, r2
 800249a:	694a      	ldr	r2, [r1, #20]
 800249c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800249e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a0:	688b      	ldr	r3, [r1, #8]
 80024a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024a4:	680b      	ldr	r3, [r1, #0]
 80024a6:	6283      	str	r3, [r0, #40]	; 0x28
 80024a8:	e7cb      	b.n	8002442 <TIM_Base_SetConfig+0x7a>
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40002000 	.word	0x40002000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	fffffcff 	.word	0xfffffcff

080024c4 <HAL_TIM_Base_Init>:
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80024c8:	d026      	beq.n	8002518 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	233d      	movs	r3, #61	; 0x3d
 80024cc:	5cc3      	ldrb	r3, [r0, r3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01c      	beq.n	800250c <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80024d2:	253d      	movs	r5, #61	; 0x3d
 80024d4:	2302      	movs	r3, #2
 80024d6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d8:	1d21      	adds	r1, r4, #4
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	f7ff ff74 	bl	80023c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	2301      	movs	r3, #1
 80024e2:	2246      	movs	r2, #70	; 0x46
 80024e4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	3a08      	subs	r2, #8
 80024e8:	54a3      	strb	r3, [r4, r2]
 80024ea:	3201      	adds	r2, #1
 80024ec:	54a3      	strb	r3, [r4, r2]
 80024ee:	3201      	adds	r2, #1
 80024f0:	54a3      	strb	r3, [r4, r2]
 80024f2:	3201      	adds	r2, #1
 80024f4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f6:	3201      	adds	r2, #1
 80024f8:	54a3      	strb	r3, [r4, r2]
 80024fa:	3201      	adds	r2, #1
 80024fc:	54a3      	strb	r3, [r4, r2]
 80024fe:	3201      	adds	r2, #1
 8002500:	54a3      	strb	r3, [r4, r2]
 8002502:	3201      	adds	r2, #1
 8002504:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002506:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
}
 800250a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800250c:	333c      	adds	r3, #60	; 0x3c
 800250e:	2200      	movs	r2, #0
 8002510:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002512:	f001 ff55 	bl	80043c0 <HAL_TIM_Base_MspInit>
 8002516:	e7dc      	b.n	80024d2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e7f6      	b.n	800250a <HAL_TIM_Base_Init+0x46>

0800251c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800251c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002520:	4d03      	ldr	r5, [pc, #12]	; (8002530 <TIM_ETR_SetConfig+0x14>)
 8002522:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	430a      	orrs	r2, r1
 8002528:	4313      	orrs	r3, r2
 800252a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252c:	6083      	str	r3, [r0, #8]
}
 800252e:	bd30      	pop	{r4, r5, pc}
 8002530:	ffff00ff 	.word	0xffff00ff

08002534 <HAL_TIM_ConfigClockSource>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002538:	233c      	movs	r3, #60	; 0x3c
 800253a:	5cc3      	ldrb	r3, [r0, r3]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d100      	bne.n	8002542 <HAL_TIM_ConfigClockSource+0xe>
 8002540:	e09c      	b.n	800267c <HAL_TIM_ConfigClockSource+0x148>
 8002542:	233c      	movs	r3, #60	; 0x3c
 8002544:	2201      	movs	r2, #1
 8002546:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	3301      	adds	r3, #1
 800254a:	3201      	adds	r2, #1
 800254c:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800254e:	6802      	ldr	r2, [r0, #0]
 8002550:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002552:	484b      	ldr	r0, [pc, #300]	; (8002680 <HAL_TIM_ConfigClockSource+0x14c>)
 8002554:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002556:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002558:	680b      	ldr	r3, [r1, #0]
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d100      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x2c>
 800255e:	e073      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x114>
 8002560:	d915      	bls.n	800258e <HAL_TIM_ConfigClockSource+0x5a>
 8002562:	2b60      	cmp	r3, #96	; 0x60
 8002564:	d055      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xde>
 8002566:	d925      	bls.n	80025b4 <HAL_TIM_ConfigClockSource+0x80>
 8002568:	2b70      	cmp	r3, #112	; 0x70
 800256a:	d03f      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0xb8>
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	0192      	lsls	r2, r2, #6
 8002570:	4293      	cmp	r3, r2
 8002572:	d146      	bne.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	68cb      	ldr	r3, [r1, #12]
 8002576:	684a      	ldr	r2, [r1, #4]
 8002578:	6889      	ldr	r1, [r1, #8]
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	f7ff ffce 	bl	800251c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	6891      	ldr	r1, [r2, #8]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	01db      	lsls	r3, r3, #7
 8002588:	430b      	orrs	r3, r1
 800258a:	6093      	str	r3, [r2, #8]
      break;
 800258c:	e039      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 800258e:	2b10      	cmp	r3, #16
 8002590:	d007      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x6e>
 8002592:	d904      	bls.n	800259e <HAL_TIM_ConfigClockSource+0x6a>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d004      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x6e>
 8002598:	2b30      	cmp	r3, #48	; 0x30
 800259a:	d002      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x6e>
 800259c:	e031      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12f      	bne.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a2:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025a4:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a6:	2070      	movs	r0, #112	; 0x70
 80025a8:	4382      	bics	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025aa:	3869      	subs	r0, #105	; 0x69
 80025ac:	4303      	orrs	r3, r0
 80025ae:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80025b0:	608b      	str	r3, [r1, #8]
 80025b2:	e026      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 80025b4:	2b50      	cmp	r3, #80	; 0x50
 80025b6:	d124      	bne.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	6848      	ldr	r0, [r1, #4]
 80025bc:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80025be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c0:	6a1d      	ldr	r5, [r3, #32]
 80025c2:	2601      	movs	r6, #1
 80025c4:	43b5      	bics	r5, r6
 80025c6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c8:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ca:	36ef      	adds	r6, #239	; 0xef
 80025cc:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d2:	250a      	movs	r5, #10
 80025d4:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80025d6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80025d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025da:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025dc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025de:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025e0:	2170      	movs	r1, #112	; 0x70
 80025e2:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e4:	3919      	subs	r1, #25
 80025e6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80025e8:	6093      	str	r3, [r2, #8]
 80025ea:	e00a      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 80025ec:	68cb      	ldr	r3, [r1, #12]
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	6889      	ldr	r1, [r1, #8]
 80025f2:	6820      	ldr	r0, [r4, #0]
 80025f4:	f7ff ff92 	bl	800251c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fc:	2177      	movs	r1, #119	; 0x77
 80025fe:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002600:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002602:	233d      	movs	r3, #61	; 0x3d
 8002604:	2201      	movs	r2, #1
 8002606:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002608:	3b01      	subs	r3, #1
 800260a:	2200      	movs	r2, #0
 800260c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800260e:	2000      	movs	r0, #0
}
 8002610:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	684a      	ldr	r2, [r1, #4]
 8002616:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002618:	6a18      	ldr	r0, [r3, #32]
 800261a:	2510      	movs	r5, #16
 800261c:	43a8      	bics	r0, r5
 800261e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002620:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8002622:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002624:	4e17      	ldr	r6, [pc, #92]	; (8002684 <HAL_TIM_ConfigClockSource+0x150>)
 8002626:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002628:	0309      	lsls	r1, r1, #12
 800262a:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262c:	25a0      	movs	r5, #160	; 0xa0
 800262e:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002634:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002636:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002638:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800263a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800263c:	2170      	movs	r1, #112	; 0x70
 800263e:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002640:	3909      	subs	r1, #9
 8002642:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002644:	6093      	str	r3, [r2, #8]
 8002646:	e7dc      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	6848      	ldr	r0, [r1, #4]
 800264c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800264e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002650:	6a1d      	ldr	r5, [r3, #32]
 8002652:	2601      	movs	r6, #1
 8002654:	43b5      	bics	r5, r6
 8002656:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002658:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800265a:	36ef      	adds	r6, #239	; 0xef
 800265c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002662:	250a      	movs	r5, #10
 8002664:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8002666:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800266a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800266c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800266e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002670:	2170      	movs	r1, #112	; 0x70
 8002672:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002674:	3929      	subs	r1, #41	; 0x29
 8002676:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e7c2      	b.n	8002602 <HAL_TIM_ConfigClockSource+0xce>
  __HAL_LOCK(htim);
 800267c:	2002      	movs	r0, #2
 800267e:	e7c7      	b.n	8002610 <HAL_TIM_ConfigClockSource+0xdc>
 8002680:	ffff0088 	.word	0xffff0088
 8002684:	ffff0fff 	.word	0xffff0fff

08002688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002688:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268a:	233c      	movs	r3, #60	; 0x3c
 800268c:	5cc3      	ldrb	r3, [r0, r3]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d025      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002692:	233c      	movs	r3, #60	; 0x3c
 8002694:	2201      	movs	r2, #1
 8002696:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	3301      	adds	r3, #1
 800269a:	3201      	adds	r2, #1
 800269c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800269e:	6804      	ldr	r4, [r0, #0]
 80026a0:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a4:	2570      	movs	r5, #112	; 0x70
 80026a6:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a8:	680d      	ldr	r5, [r1, #0]
 80026aa:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ac:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	4c0c      	ldr	r4, [pc, #48]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 80026b2:	42a3      	cmp	r3, r4
 80026b4:	d006      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80026b6:	2480      	movs	r4, #128	; 0x80
 80026b8:	05e4      	lsls	r4, r4, #23
 80026ba:	42a3      	cmp	r3, r4
 80026bc:	d002      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80026be:	4c0a      	ldr	r4, [pc, #40]	; (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80026c0:	42a3      	cmp	r3, r4
 80026c2:	d104      	bne.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026c4:	2480      	movs	r4, #128	; 0x80
 80026c6:	43a2      	bics	r2, r4
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026c8:	6849      	ldr	r1, [r1, #4]
 80026ca:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ce:	233d      	movs	r3, #61	; 0x3d
 80026d0:	2201      	movs	r2, #1
 80026d2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80026d4:	3b01      	subs	r3, #1
 80026d6:	2200      	movs	r2, #0
 80026d8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80026da:	2000      	movs	r0, #0
}
 80026dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80026de:	2002      	movs	r0, #2
 80026e0:	e7fc      	b.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ee:	4770      	bx	lr

080026f0 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80026f0:	2344      	movs	r3, #68	; 0x44
 80026f2:	2200      	movs	r2, #0
 80026f4:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80026f6:	3b04      	subs	r3, #4
 80026f8:	4a01      	ldr	r2, [pc, #4]	; (8002700 <USB_EnableGlobalInt+0x10>)
 80026fa:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr
 8002700:	ffffbf80 	.word	0xffffbf80

08002704 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	5a83      	ldrh	r3, [r0, r2]
 8002708:	4902      	ldr	r1, [pc, #8]	; (8002714 <USB_DisableGlobalInt+0x10>)
 800270a:	400b      	ands	r3, r1
 800270c:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800270e:	2000      	movs	r0, #0
 8002710:	4770      	bx	lr
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	0000407f 	.word	0x0000407f

08002718 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002718:	b084      	sub	sp, #16
 800271a:	9101      	str	r1, [sp, #4]
 800271c:	9202      	str	r2, [sp, #8]
 800271e:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	2301      	movs	r3, #1
 8002724:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800272a:	3204      	adds	r2, #4
 800272c:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800272e:	320c      	adds	r2, #12
 8002730:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8002732:	2000      	movs	r0, #0
 8002734:	b004      	add	sp, #16
 8002736:	4770      	bx	lr

08002738 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800273a:	780d      	ldrb	r5, [r1, #0]
 800273c:	00ad      	lsls	r5, r5, #2
 800273e:	1945      	adds	r5, r0, r5
 8002740:	882b      	ldrh	r3, [r5, #0]
 8002742:	4a9f      	ldr	r2, [pc, #636]	; (80029c0 <USB_ActivateEndpoint+0x288>)
 8002744:	4013      	ands	r3, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002746:	78ca      	ldrb	r2, [r1, #3]
 8002748:	2a01      	cmp	r2, #1
 800274a:	d04e      	beq.n	80027ea <USB_ActivateEndpoint+0xb2>
 800274c:	2a00      	cmp	r2, #0
 800274e:	d042      	beq.n	80027d6 <USB_ActivateEndpoint+0x9e>
 8002750:	2a02      	cmp	r2, #2
 8002752:	d003      	beq.n	800275c <USB_ActivateEndpoint+0x24>
 8002754:	2a03      	cmp	r2, #3
 8002756:	d043      	beq.n	80027e0 <USB_ActivateEndpoint+0xa8>
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002758:	2401      	movs	r4, #1
 800275a:	e000      	b.n	800275e <USB_ActivateEndpoint+0x26>
  HAL_StatusTypeDef ret = HAL_OK;
 800275c:	2400      	movs	r4, #0
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800275e:	4a99      	ldr	r2, [pc, #612]	; (80029c4 <USB_ActivateEndpoint+0x28c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	802b      	strh	r3, [r5, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002766:	780e      	ldrb	r6, [r1, #0]
 8002768:	00b5      	lsls	r5, r6, #2
 800276a:	1945      	adds	r5, r0, r5
 800276c:	882b      	ldrh	r3, [r5, #0]
 800276e:	4f96      	ldr	r7, [pc, #600]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 8002770:	403b      	ands	r3, r7
 8002772:	4333      	orrs	r3, r6
 8002774:	431a      	orrs	r2, r3
 8002776:	b292      	uxth	r2, r2
 8002778:	802a      	strh	r2, [r5, #0]

  if (ep->doublebuffer == 0U)
 800277a:	7b0b      	ldrb	r3, [r1, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d000      	beq.n	8002782 <USB_ActivateEndpoint+0x4a>
 8002780:	e091      	b.n	80028a6 <USB_ActivateEndpoint+0x16e>
  {
    if (ep->is_in != 0U)
 8002782:	784b      	ldrb	r3, [r1, #1]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03f      	beq.n	8002808 <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002788:	2350      	movs	r3, #80	; 0x50
 800278a:	5ac5      	ldrh	r5, [r0, r3]
 800278c:	780a      	ldrb	r2, [r1, #0]
 800278e:	00d2      	lsls	r2, r2, #3
 8002790:	1882      	adds	r2, r0, r2
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	18eb      	adds	r3, r5, r3
 800279a:	88ca      	ldrh	r2, [r1, #6]
 800279c:	0852      	lsrs	r2, r2, #1
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027a2:	780b      	ldrb	r3, [r1, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	18c3      	adds	r3, r0, r3
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	d504      	bpl.n	80027b8 <USB_ActivateEndpoint+0x80>
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	403a      	ands	r2, r7
 80027b2:	4d86      	ldr	r5, [pc, #536]	; (80029cc <USB_ActivateEndpoint+0x294>)
 80027b4:	432a      	orrs	r2, r5
 80027b6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80027b8:	78cb      	ldrb	r3, [r1, #3]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d01a      	beq.n	80027f4 <USB_ActivateEndpoint+0xbc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80027be:	780b      	ldrb	r3, [r1, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	18c0      	adds	r0, r0, r3
 80027c4:	8803      	ldrh	r3, [r0, #0]
 80027c6:	4a82      	ldr	r2, [pc, #520]	; (80029d0 <USB_ActivateEndpoint+0x298>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	2220      	movs	r2, #32
 80027cc:	4053      	eors	r3, r2
 80027ce:	4a81      	ldr	r2, [pc, #516]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	8003      	strh	r3, [r0, #0]
 80027d4:	e04f      	b.n	8002876 <USB_ActivateEndpoint+0x13e>
      wEpRegVal |= USB_EP_CONTROL;
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027dc:	2400      	movs	r4, #0
      break;
 80027de:	e7be      	b.n	800275e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80027e0:	22c0      	movs	r2, #192	; 0xc0
 80027e2:	00d2      	lsls	r2, r2, #3
 80027e4:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027e6:	2400      	movs	r4, #0
      break;
 80027e8:	e7b9      	b.n	800275e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	4313      	orrs	r3, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80027f0:	2400      	movs	r4, #0
      break;
 80027f2:	e7b4      	b.n	800275e <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027f4:	780b      	ldrb	r3, [r1, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	18c0      	adds	r0, r0, r3
 80027fa:	8803      	ldrh	r3, [r0, #0]
 80027fc:	4a74      	ldr	r2, [pc, #464]	; (80029d0 <USB_ActivateEndpoint+0x298>)
 80027fe:	4013      	ands	r3, r2
 8002800:	4a74      	ldr	r2, [pc, #464]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	8003      	strh	r3, [r0, #0]
 8002806:	e036      	b.n	8002876 <USB_ActivateEndpoint+0x13e>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002808:	2650      	movs	r6, #80	; 0x50
 800280a:	5b85      	ldrh	r5, [r0, r6]
 800280c:	780a      	ldrb	r2, [r1, #0]
 800280e:	00d2      	lsls	r2, r2, #3
 8002810:	1812      	adds	r2, r2, r0
 8002812:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <USB_ActivateEndpoint+0x2a0>)
 8002814:	18d3      	adds	r3, r2, r3
 8002816:	18eb      	adds	r3, r5, r3
 8002818:	88ca      	ldrh	r2, [r1, #6]
 800281a:	0852      	lsrs	r2, r2, #1
 800281c:	0052      	lsls	r2, r2, #1
 800281e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002820:	5b85      	ldrh	r5, [r0, r6]
 8002822:	780a      	ldrb	r2, [r1, #0]
 8002824:	00d2      	lsls	r2, r2, #3
 8002826:	1812      	adds	r2, r2, r0
 8002828:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <USB_ActivateEndpoint+0x2a4>)
 800282a:	18d3      	adds	r3, r2, r3
 800282c:	18eb      	adds	r3, r5, r3
 800282e:	690a      	ldr	r2, [r1, #16]
 8002830:	2a00      	cmp	r2, #0
 8002832:	d122      	bne.n	800287a <USB_ActivateEndpoint+0x142>
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	4d6a      	ldr	r5, [pc, #424]	; (80029e0 <USB_ActivateEndpoint+0x2a8>)
 8002838:	402a      	ands	r2, r5
 800283a:	801a      	strh	r2, [r3, #0]
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	2580      	movs	r5, #128	; 0x80
 8002840:	022d      	lsls	r5, r5, #8
 8002842:	432a      	orrs	r2, r5
 8002844:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002846:	780b      	ldrb	r3, [r1, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	18c3      	adds	r3, r0, r3
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	0452      	lsls	r2, r2, #17
 8002850:	d505      	bpl.n	800285e <USB_ActivateEndpoint+0x126>
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	4d5c      	ldr	r5, [pc, #368]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 8002856:	402a      	ands	r2, r5
 8002858:	4d62      	ldr	r5, [pc, #392]	; (80029e4 <USB_ActivateEndpoint+0x2ac>)
 800285a:	432a      	orrs	r2, r5
 800285c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800285e:	780b      	ldrb	r3, [r1, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	18c0      	adds	r0, r0, r3
 8002864:	8803      	ldrh	r3, [r0, #0]
 8002866:	4a60      	ldr	r2, [pc, #384]	; (80029e8 <USB_ActivateEndpoint+0x2b0>)
 8002868:	401a      	ands	r2, r3
 800286a:	23c0      	movs	r3, #192	; 0xc0
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	4053      	eors	r3, r2
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002876:	0020      	movs	r0, r4
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800287a:	2a3e      	cmp	r2, #62	; 0x3e
 800287c:	d807      	bhi.n	800288e <USB_ActivateEndpoint+0x156>
 800287e:	0855      	lsrs	r5, r2, #1
 8002880:	2601      	movs	r6, #1
 8002882:	4032      	ands	r2, r6
 8002884:	18ad      	adds	r5, r5, r2
 8002886:	02ad      	lsls	r5, r5, #10
 8002888:	b2ad      	uxth	r5, r5
 800288a:	801d      	strh	r5, [r3, #0]
 800288c:	e7db      	b.n	8002846 <USB_ActivateEndpoint+0x10e>
 800288e:	0955      	lsrs	r5, r2, #5
 8002890:	261f      	movs	r6, #31
 8002892:	4032      	ands	r2, r6
 8002894:	4256      	negs	r6, r2
 8002896:	4172      	adcs	r2, r6
 8002898:	1aad      	subs	r5, r5, r2
 800289a:	02ad      	lsls	r5, r5, #10
 800289c:	4a53      	ldr	r2, [pc, #332]	; (80029ec <USB_ActivateEndpoint+0x2b4>)
 800289e:	432a      	orrs	r2, r5
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	e7cf      	b.n	8002846 <USB_ActivateEndpoint+0x10e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80028a6:	780b      	ldrb	r3, [r1, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	18c3      	adds	r3, r0, r3
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	4d46      	ldr	r5, [pc, #280]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 80028b0:	402a      	ands	r2, r5
 80028b2:	4d4f      	ldr	r5, [pc, #316]	; (80029f0 <USB_ActivateEndpoint+0x2b8>)
 80028b4:	432a      	orrs	r2, r5
 80028b6:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80028b8:	2650      	movs	r6, #80	; 0x50
 80028ba:	5b85      	ldrh	r5, [r0, r6]
 80028bc:	780a      	ldrb	r2, [r1, #0]
 80028be:	00d2      	lsls	r2, r2, #3
 80028c0:	1812      	adds	r2, r2, r0
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	18d3      	adds	r3, r2, r3
 80028c8:	18eb      	adds	r3, r5, r3
 80028ca:	890a      	ldrh	r2, [r1, #8]
 80028cc:	0852      	lsrs	r2, r2, #1
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	5b85      	ldrh	r5, [r0, r6]
 80028d4:	780a      	ldrb	r2, [r1, #0]
 80028d6:	00d2      	lsls	r2, r2, #3
 80028d8:	1812      	adds	r2, r2, r0
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <USB_ActivateEndpoint+0x2a0>)
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	18eb      	adds	r3, r5, r3
 80028e0:	894a      	ldrh	r2, [r1, #10]
 80028e2:	0852      	lsrs	r2, r2, #1
 80028e4:	0052      	lsls	r2, r2, #1
 80028e6:	801a      	strh	r2, [r3, #0]
    if (ep->is_in == 0U)
 80028e8:	784b      	ldrb	r3, [r1, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d12e      	bne.n	800294c <USB_ActivateEndpoint+0x214>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028ee:	780b      	ldrb	r3, [r1, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	18c3      	adds	r3, r0, r3
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	0452      	lsls	r2, r2, #17
 80028f8:	d505      	bpl.n	8002906 <USB_ActivateEndpoint+0x1ce>
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	4d32      	ldr	r5, [pc, #200]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 80028fe:	402a      	ands	r2, r5
 8002900:	4d38      	ldr	r5, [pc, #224]	; (80029e4 <USB_ActivateEndpoint+0x2ac>)
 8002902:	432a      	orrs	r2, r5
 8002904:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002906:	780b      	ldrb	r3, [r1, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	18c3      	adds	r3, r0, r3
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	0652      	lsls	r2, r2, #25
 8002910:	d505      	bpl.n	800291e <USB_ActivateEndpoint+0x1e6>
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	4d2c      	ldr	r5, [pc, #176]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 8002916:	402a      	ands	r2, r5
 8002918:	4d2c      	ldr	r5, [pc, #176]	; (80029cc <USB_ActivateEndpoint+0x294>)
 800291a:	432a      	orrs	r2, r5
 800291c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800291e:	780d      	ldrb	r5, [r1, #0]
 8002920:	00ad      	lsls	r5, r5, #2
 8002922:	1945      	adds	r5, r0, r5
 8002924:	882b      	ldrh	r3, [r5, #0]
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <USB_ActivateEndpoint+0x2b0>)
 8002928:	401a      	ands	r2, r3
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	4053      	eors	r3, r2
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <USB_ActivateEndpoint+0x28c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	802b      	strh	r3, [r5, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002938:	780b      	ldrb	r3, [r1, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	18c0      	adds	r0, r0, r3
 800293e:	8803      	ldrh	r3, [r0, #0]
 8002940:	4923      	ldr	r1, [pc, #140]	; (80029d0 <USB_ActivateEndpoint+0x298>)
 8002942:	400b      	ands	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	b292      	uxth	r2, r2
 8002948:	8002      	strh	r2, [r0, #0]
 800294a:	e794      	b.n	8002876 <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800294c:	780b      	ldrb	r3, [r1, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	18c3      	adds	r3, r0, r3
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	0452      	lsls	r2, r2, #17
 8002956:	d505      	bpl.n	8002964 <USB_ActivateEndpoint+0x22c>
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	4d1b      	ldr	r5, [pc, #108]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 800295c:	402a      	ands	r2, r5
 800295e:	4d21      	ldr	r5, [pc, #132]	; (80029e4 <USB_ActivateEndpoint+0x2ac>)
 8002960:	432a      	orrs	r2, r5
 8002962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002964:	780b      	ldrb	r3, [r1, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	18c3      	adds	r3, r0, r3
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	0652      	lsls	r2, r2, #25
 800296e:	d505      	bpl.n	800297c <USB_ActivateEndpoint+0x244>
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	4d15      	ldr	r5, [pc, #84]	; (80029c8 <USB_ActivateEndpoint+0x290>)
 8002974:	402a      	ands	r2, r5
 8002976:	4d15      	ldr	r5, [pc, #84]	; (80029cc <USB_ActivateEndpoint+0x294>)
 8002978:	432a      	orrs	r2, r5
 800297a:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 800297c:	78cb      	ldrb	r3, [r1, #3]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d014      	beq.n	80029ac <USB_ActivateEndpoint+0x274>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002982:	780a      	ldrb	r2, [r1, #0]
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	1882      	adds	r2, r0, r2
 8002988:	8813      	ldrh	r3, [r2, #0]
 800298a:	4d11      	ldr	r5, [pc, #68]	; (80029d0 <USB_ActivateEndpoint+0x298>)
 800298c:	402b      	ands	r3, r5
 800298e:	2520      	movs	r5, #32
 8002990:	406b      	eors	r3, r5
 8002992:	4d10      	ldr	r5, [pc, #64]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 8002994:	432b      	orrs	r3, r5
 8002996:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002998:	780b      	ldrb	r3, [r1, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	18c3      	adds	r3, r0, r3
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	4911      	ldr	r1, [pc, #68]	; (80029e8 <USB_ActivateEndpoint+0x2b0>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	490b      	ldr	r1, [pc, #44]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	e764      	b.n	8002876 <USB_ActivateEndpoint+0x13e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029ac:	780b      	ldrb	r3, [r1, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	18c3      	adds	r3, r0, r3
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	4d06      	ldr	r5, [pc, #24]	; (80029d0 <USB_ActivateEndpoint+0x298>)
 80029b6:	402a      	ands	r2, r5
 80029b8:	4d06      	ldr	r5, [pc, #24]	; (80029d4 <USB_ActivateEndpoint+0x29c>)
 80029ba:	432a      	orrs	r2, r5
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	e7eb      	b.n	8002998 <USB_ActivateEndpoint+0x260>
 80029c0:	ffff898f 	.word	0xffff898f
 80029c4:	ffff8080 	.word	0xffff8080
 80029c8:	ffff8f8f 	.word	0xffff8f8f
 80029cc:	000080c0 	.word	0x000080c0
 80029d0:	ffff8fbf 	.word	0xffff8fbf
 80029d4:	00008080 	.word	0x00008080
 80029d8:	00000404 	.word	0x00000404
 80029dc:	00000406 	.word	0x00000406
 80029e0:	ffff83ff 	.word	0xffff83ff
 80029e4:	0000c080 	.word	0x0000c080
 80029e8:	ffffbf8f 	.word	0xffffbf8f
 80029ec:	ffff8000 	.word	0xffff8000
 80029f0:	00008180 	.word	0x00008180

080029f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80029f4:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80029f6:	7b0b      	ldrb	r3, [r1, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d12f      	bne.n	8002a5c <USB_DeactivateEndpoint+0x68>
  {
    if (ep->is_in != 0U)
 80029fc:	784b      	ldrb	r3, [r1, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <USB_DeactivateEndpoint+0x3c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a02:	780b      	ldrb	r3, [r1, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	18c3      	adds	r3, r0, r3
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	d505      	bpl.n	8002a1a <USB_DeactivateEndpoint+0x26>
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	4c49      	ldr	r4, [pc, #292]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002a12:	4022      	ands	r2, r4
 8002a14:	4c49      	ldr	r4, [pc, #292]	; (8002b3c <USB_DeactivateEndpoint+0x148>)
 8002a16:	4322      	orrs	r2, r4
 8002a18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a1a:	780b      	ldrb	r3, [r1, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	18c0      	adds	r0, r0, r3
 8002a20:	8803      	ldrh	r3, [r0, #0]
 8002a22:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <USB_DeactivateEndpoint+0x14c>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	4a47      	ldr	r2, [pc, #284]	; (8002b44 <USB_DeactivateEndpoint+0x150>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a30:	780b      	ldrb	r3, [r1, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	18c3      	adds	r3, r0, r3
 8002a36:	881a      	ldrh	r2, [r3, #0]
 8002a38:	0452      	lsls	r2, r2, #17
 8002a3a:	d505      	bpl.n	8002a48 <USB_DeactivateEndpoint+0x54>
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	4c3e      	ldr	r4, [pc, #248]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002a40:	4022      	ands	r2, r4
 8002a42:	4c41      	ldr	r4, [pc, #260]	; (8002b48 <USB_DeactivateEndpoint+0x154>)
 8002a44:	4322      	orrs	r2, r4
 8002a46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a48:	780b      	ldrb	r3, [r1, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	18c0      	adds	r0, r0, r3
 8002a4e:	8803      	ldrh	r3, [r0, #0]
 8002a50:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <USB_DeactivateEndpoint+0x158>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <USB_DeactivateEndpoint+0x150>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	8003      	strh	r3, [r0, #0]
 8002a5a:	e7e7      	b.n	8002a2c <USB_DeactivateEndpoint+0x38>
    if (ep->is_in == 0U)
 8002a5c:	784b      	ldrb	r3, [r1, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d134      	bne.n	8002acc <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a62:	780b      	ldrb	r3, [r1, #0]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	18c3      	adds	r3, r0, r3
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	0452      	lsls	r2, r2, #17
 8002a6c:	d505      	bpl.n	8002a7a <USB_DeactivateEndpoint+0x86>
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	4c31      	ldr	r4, [pc, #196]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002a72:	4022      	ands	r2, r4
 8002a74:	4c34      	ldr	r4, [pc, #208]	; (8002b48 <USB_DeactivateEndpoint+0x154>)
 8002a76:	4322      	orrs	r2, r4
 8002a78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a7a:	780b      	ldrb	r3, [r1, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	18c3      	adds	r3, r0, r3
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	0652      	lsls	r2, r2, #25
 8002a84:	d505      	bpl.n	8002a92 <USB_DeactivateEndpoint+0x9e>
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	4c2b      	ldr	r4, [pc, #172]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002a8a:	4022      	ands	r2, r4
 8002a8c:	4c2b      	ldr	r4, [pc, #172]	; (8002b3c <USB_DeactivateEndpoint+0x148>)
 8002a8e:	4322      	orrs	r2, r4
 8002a90:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8002a92:	780b      	ldrb	r3, [r1, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	18c3      	adds	r3, r0, r3
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	4c27      	ldr	r4, [pc, #156]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002a9c:	4022      	ands	r2, r4
 8002a9e:	4c27      	ldr	r4, [pc, #156]	; (8002b3c <USB_DeactivateEndpoint+0x148>)
 8002aa0:	4322      	orrs	r2, r4
 8002aa2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002aa4:	780c      	ldrb	r4, [r1, #0]
 8002aa6:	00a4      	lsls	r4, r4, #2
 8002aa8:	1904      	adds	r4, r0, r4
 8002aaa:	8823      	ldrh	r3, [r4, #0]
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <USB_DeactivateEndpoint+0x158>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <USB_DeactivateEndpoint+0x15c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ab8:	780b      	ldrb	r3, [r1, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	18c0      	adds	r0, r0, r3
 8002abe:	8803      	ldrh	r3, [r0, #0]
 8002ac0:	491f      	ldr	r1, [pc, #124]	; (8002b40 <USB_DeactivateEndpoint+0x14c>)
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	8002      	strh	r2, [r0, #0]
 8002aca:	e7af      	b.n	8002a2c <USB_DeactivateEndpoint+0x38>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002acc:	780b      	ldrb	r3, [r1, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	18c3      	adds	r3, r0, r3
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	0452      	lsls	r2, r2, #17
 8002ad6:	d505      	bpl.n	8002ae4 <USB_DeactivateEndpoint+0xf0>
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	4c17      	ldr	r4, [pc, #92]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002adc:	4022      	ands	r2, r4
 8002ade:	4c1a      	ldr	r4, [pc, #104]	; (8002b48 <USB_DeactivateEndpoint+0x154>)
 8002ae0:	4322      	orrs	r2, r4
 8002ae2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ae4:	780b      	ldrb	r3, [r1, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18c3      	adds	r3, r0, r3
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	0652      	lsls	r2, r2, #25
 8002aee:	d505      	bpl.n	8002afc <USB_DeactivateEndpoint+0x108>
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	4c11      	ldr	r4, [pc, #68]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002af4:	4022      	ands	r2, r4
 8002af6:	4c11      	ldr	r4, [pc, #68]	; (8002b3c <USB_DeactivateEndpoint+0x148>)
 8002af8:	4322      	orrs	r2, r4
 8002afa:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002afc:	780b      	ldrb	r3, [r1, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	18c3      	adds	r3, r0, r3
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	4c0c      	ldr	r4, [pc, #48]	; (8002b38 <USB_DeactivateEndpoint+0x144>)
 8002b06:	4022      	ands	r2, r4
 8002b08:	4c0f      	ldr	r4, [pc, #60]	; (8002b48 <USB_DeactivateEndpoint+0x154>)
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b0e:	780c      	ldrb	r4, [r1, #0]
 8002b10:	00a4      	lsls	r4, r4, #2
 8002b12:	1904      	adds	r4, r0, r4
 8002b14:	8823      	ldrh	r3, [r4, #0]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <USB_DeactivateEndpoint+0x14c>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <USB_DeactivateEndpoint+0x15c>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b22:	780b      	ldrb	r3, [r1, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	18c0      	adds	r0, r0, r3
 8002b28:	8803      	ldrh	r3, [r0, #0]
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <USB_DeactivateEndpoint+0x158>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	b292      	uxth	r2, r2
 8002b32:	8002      	strh	r2, [r0, #0]
 8002b34:	e77a      	b.n	8002a2c <USB_DeactivateEndpoint+0x38>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	ffff8f8f 	.word	0xffff8f8f
 8002b3c:	000080c0 	.word	0x000080c0
 8002b40:	ffff8fbf 	.word	0xffff8fbf
 8002b44:	00008080 	.word	0x00008080
 8002b48:	0000c080 	.word	0x0000c080
 8002b4c:	ffffbf8f 	.word	0xffffbf8f
 8002b50:	ffff8080 	.word	0xffff8080

08002b54 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002b54:	784b      	ldrb	r3, [r1, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002b5a:	780b      	ldrb	r3, [r1, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	18c0      	adds	r0, r0, r3
 8002b60:	8803      	ldrh	r3, [r0, #0]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <USB_EPSetStall+0x3c>)
 8002b64:	401a      	ands	r2, r3
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	015b      	lsls	r3, r3, #5
 8002b6a:	4053      	eors	r3, r2
 8002b6c:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <USB_EPSetStall+0x40>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002b76:	780b      	ldrb	r3, [r1, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	18c0      	adds	r0, r0, r3
 8002b7c:	8803      	ldrh	r3, [r0, #0]
 8002b7e:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <USB_EPSetStall+0x44>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	2210      	movs	r2, #16
 8002b84:	4053      	eors	r3, r2
 8002b86:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <USB_EPSetStall+0x40>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	8003      	strh	r3, [r0, #0]
 8002b8c:	e7f1      	b.n	8002b72 <USB_EPSetStall+0x1e>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	ffffbf8f 	.word	0xffffbf8f
 8002b94:	00008080 	.word	0x00008080
 8002b98:	ffff8fbf 	.word	0xffff8fbf

08002b9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b9c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002b9e:	7b0b      	ldrb	r3, [r1, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d135      	bne.n	8002c10 <USB_EPClearStall+0x74>
  {
    if (ep->is_in != 0U)
 8002ba4:	784b      	ldrb	r3, [r1, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <USB_EPClearStall+0x44>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002baa:	780b      	ldrb	r3, [r1, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	18c3      	adds	r3, r0, r3
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	0652      	lsls	r2, r2, #25
 8002bb4:	d505      	bpl.n	8002bc2 <USB_EPClearStall+0x26>
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	4c16      	ldr	r4, [pc, #88]	; (8002c14 <USB_EPClearStall+0x78>)
 8002bba:	4022      	ands	r2, r4
 8002bbc:	4c16      	ldr	r4, [pc, #88]	; (8002c18 <USB_EPClearStall+0x7c>)
 8002bbe:	4322      	orrs	r2, r4
 8002bc0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bc2:	78cb      	ldrb	r3, [r1, #3]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d023      	beq.n	8002c10 <USB_EPClearStall+0x74>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002bc8:	780b      	ldrb	r3, [r1, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	18c0      	adds	r0, r0, r3
 8002bce:	8803      	ldrh	r3, [r0, #0]
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <USB_EPClearStall+0x80>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	4053      	eors	r3, r2
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <USB_EPClearStall+0x84>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	8003      	strh	r3, [r0, #0]
 8002bde:	e017      	b.n	8002c10 <USB_EPClearStall+0x74>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002be0:	780b      	ldrb	r3, [r1, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	18c3      	adds	r3, r0, r3
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	0452      	lsls	r2, r2, #17
 8002bea:	d505      	bpl.n	8002bf8 <USB_EPClearStall+0x5c>
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	4c09      	ldr	r4, [pc, #36]	; (8002c14 <USB_EPClearStall+0x78>)
 8002bf0:	4022      	ands	r2, r4
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <USB_EPClearStall+0x88>)
 8002bf4:	4322      	orrs	r2, r4
 8002bf6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bf8:	780b      	ldrb	r3, [r1, #0]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	18c0      	adds	r0, r0, r3
 8002bfe:	8803      	ldrh	r3, [r0, #0]
 8002c00:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <USB_EPClearStall+0x8c>)
 8002c02:	401a      	ands	r2, r3
 8002c04:	23c0      	movs	r3, #192	; 0xc0
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	4053      	eors	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <USB_EPClearStall+0x84>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8002c10:	2000      	movs	r0, #0
 8002c12:	bd10      	pop	{r4, pc}
 8002c14:	ffff8f8f 	.word	0xffff8f8f
 8002c18:	000080c0 	.word	0x000080c0
 8002c1c:	ffff8fbf 	.word	0xffff8fbf
 8002c20:	00008080 	.word	0x00008080
 8002c24:	0000c080 	.word	0x0000c080
 8002c28:	ffffbf8f 	.word	0xffffbf8f

08002c2c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	d102      	bne.n	8002c36 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002c30:	234c      	movs	r3, #76	; 0x4c
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	52c2      	strh	r2, [r0, r3]
  }

  return HAL_OK;
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	4770      	bx	lr

08002c3a <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8002c3a:	2258      	movs	r2, #88	; 0x58
 8002c3c:	5a83      	ldrh	r3, [r0, r2]
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	0209      	lsls	r1, r1, #8
 8002c42:	430b      	orrs	r3, r1
 8002c44:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8002c46:	2000      	movs	r0, #0
 8002c48:	4770      	bx	lr

08002c4a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002c4a:	2344      	movs	r3, #68	; 0x44
 8002c4c:	5ac0      	ldrh	r0, [r0, r3]
 8002c4e:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002c50:	4770      	bx	lr

08002c52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002c52:	b530      	push	{r4, r5, lr}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002c54:	3301      	adds	r3, #1
 8002c56:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002c58:	2480      	movs	r4, #128	; 0x80
 8002c5a:	00e4      	lsls	r4, r4, #3
 8002c5c:	46a4      	mov	ip, r4
 8002c5e:	4462      	add	r2, ip
 8002c60:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <USB_WritePMA+0x2c>
  uint8_t *pBuf = pbUsrBuf;
 8002c66:	000c      	movs	r4, r1
 8002c68:	1a41      	subs	r1, r0, r1
 8002c6a:	1908      	adds	r0, r1, r4
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002c6c:	7862      	ldrb	r2, [r4, #1]
 8002c6e:	0212      	lsls	r2, r2, #8
    temp1 = *pBuf;
 8002c70:	7825      	ldrb	r5, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 8002c72:	432a      	orrs	r2, r5
 8002c74:	8002      	strh	r2, [r0, #0]
  for (i = n; i != 0U; i--)
 8002c76:	3b01      	subs	r3, #1

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8002c78:	3402      	adds	r4, #2
  for (i = n; i != 0U; i--)
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f5      	bne.n	8002c6a <USB_WritePMA+0x18>
  }
}
 8002c7e:	bd30      	pop	{r4, r5, pc}

08002c80 <USB_EPStartXfer>:
{
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	0005      	movs	r5, r0
 8002c84:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002c86:	784b      	ldrb	r3, [r1, #1]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d02c      	beq.n	8002ce6 <USB_EPStartXfer+0x66>
    if (ep->doublebuffer == 0U)
 8002c8c:	7b0a      	ldrb	r2, [r1, #12]
 8002c8e:	2a00      	cmp	r2, #0
 8002c90:	d000      	beq.n	8002c94 <USB_EPStartXfer+0x14>
 8002c92:	e202      	b.n	800309a <USB_EPStartXfer+0x41a>
      if (ep->xfer_len > ep->maxpacket)
 8002c94:	698b      	ldr	r3, [r1, #24]
 8002c96:	690a      	ldr	r2, [r1, #16]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d800      	bhi.n	8002c9e <USB_EPStartXfer+0x1e>
 8002c9c:	e1e3      	b.n	8003066 <USB_EPStartXfer+0x3e6>
        ep->xfer_len -= len;
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ca2:	2350      	movs	r3, #80	; 0x50
 8002ca4:	5ae8      	ldrh	r0, [r5, r3]
 8002ca6:	7821      	ldrb	r1, [r4, #0]
 8002ca8:	00c9      	lsls	r1, r1, #3
 8002caa:	4bc2      	ldr	r3, [pc, #776]	; (8002fb4 <USB_EPStartXfer+0x334>)
 8002cac:	18eb      	adds	r3, r5, r3
 8002cae:	181b      	adds	r3, r3, r0
 8002cb0:	18cb      	adds	r3, r1, r3
 8002cb2:	2a00      	cmp	r2, #0
 8002cb4:	d000      	beq.n	8002cb8 <USB_EPStartXfer+0x38>
 8002cb6:	e1da      	b.n	800306e <USB_EPStartXfer+0x3ee>
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	49bf      	ldr	r1, [pc, #764]	; (8002fb8 <USB_EPStartXfer+0x338>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	881a      	ldrh	r2, [r3, #0]
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0209      	lsls	r1, r1, #8
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cca:	7823      	ldrb	r3, [r4, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	18ed      	adds	r5, r5, r3
 8002cd0:	882b      	ldrh	r3, [r5, #0]
 8002cd2:	4aba      	ldr	r2, [pc, #744]	; (8002fbc <USB_EPStartXfer+0x33c>)
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	019b      	lsls	r3, r3, #6
 8002cda:	4053      	eors	r3, r2
 8002cdc:	4ab8      	ldr	r2, [pc, #736]	; (8002fc0 <USB_EPStartXfer+0x340>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 8002ce2:	2000      	movs	r0, #0
}
 8002ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002ce6:	690a      	ldr	r2, [r1, #16]
 8002ce8:	698e      	ldr	r6, [r1, #24]
 8002cea:	4296      	cmp	r6, r2
 8002cec:	d900      	bls.n	8002cf0 <USB_EPStartXfer+0x70>
 8002cee:	0016      	movs	r6, r2
    if (ep->doublebuffer == 0U)
 8002cf0:	7b23      	ldrb	r3, [r4, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d026      	beq.n	8002d44 <USB_EPStartXfer+0xc4>
      if (ep->type == EP_TYPE_BULK)
 8002cf6:	78e3      	ldrb	r3, [r4, #3]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d040      	beq.n	8002d7e <USB_EPStartXfer+0xfe>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	009a      	lsls	r2, r3, #2
 8002d00:	18aa      	adds	r2, r5, r2
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	0652      	lsls	r2, r2, #25
 8002d06:	d400      	bmi.n	8002d0a <USB_EPStartXfer+0x8a>
 8002d08:	e195      	b.n	8003036 <USB_EPStartXfer+0x3b6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d0a:	2250      	movs	r2, #80	; 0x50
 8002d0c:	5aa9      	ldrh	r1, [r5, r2]
 8002d0e:	4aa9      	ldr	r2, [pc, #676]	; (8002fb4 <USB_EPStartXfer+0x334>)
 8002d10:	18aa      	adds	r2, r5, r2
 8002d12:	1852      	adds	r2, r2, r1
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	18d3      	adds	r3, r2, r3
 8002d18:	b2b2      	uxth	r2, r6
 8002d1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8002d1c:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d1e:	b2b3      	uxth	r3, r6
 8002d20:	6961      	ldr	r1, [r4, #20]
 8002d22:	0028      	movs	r0, r5
 8002d24:	f7ff ff95 	bl	8002c52 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002d28:	7863      	ldrb	r3, [r4, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d000      	beq.n	8002d30 <USB_EPStartXfer+0xb0>
 8002d2e:	e18d      	b.n	800304c <USB_EPStartXfer+0x3cc>
 8002d30:	7823      	ldrb	r3, [r4, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	18eb      	adds	r3, r5, r3
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	49a2      	ldr	r1, [pc, #648]	; (8002fc4 <USB_EPStartXfer+0x344>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	49a2      	ldr	r1, [pc, #648]	; (8002fc8 <USB_EPStartXfer+0x348>)
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	e00f      	b.n	8002d64 <USB_EPStartXfer+0xe4>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d44:	b2b6      	uxth	r6, r6
 8002d46:	88e2      	ldrh	r2, [r4, #6]
 8002d48:	0033      	movs	r3, r6
 8002d4a:	6961      	ldr	r1, [r4, #20]
 8002d4c:	0028      	movs	r0, r5
 8002d4e:	f7ff ff80 	bl	8002c52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d52:	2350      	movs	r3, #80	; 0x50
 8002d54:	5ae9      	ldrh	r1, [r5, r3]
 8002d56:	7823      	ldrb	r3, [r4, #0]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4a9c      	ldr	r2, [pc, #624]	; (8002fcc <USB_EPStartXfer+0x34c>)
 8002d5c:	18aa      	adds	r2, r5, r2
 8002d5e:	1852      	adds	r2, r2, r1
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002d64:	7823      	ldrb	r3, [r4, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	18ed      	adds	r5, r5, r3
 8002d6a:	882b      	ldrh	r3, [r5, #0]
 8002d6c:	4a98      	ldr	r2, [pc, #608]	; (8002fd0 <USB_EPStartXfer+0x350>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2230      	movs	r2, #48	; 0x30
 8002d72:	4053      	eors	r3, r2
 8002d74:	4a92      	ldr	r2, [pc, #584]	; (8002fc0 <USB_EPStartXfer+0x340>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e7b2      	b.n	8002ce4 <USB_EPStartXfer+0x64>
        if (ep->xfer_len_db > ep->maxpacket)
 8002d7e:	6a23      	ldr	r3, [r4, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d300      	bcc.n	8002d86 <USB_EPStartXfer+0x106>
 8002d84:	e13e      	b.n	8003004 <USB_EPStartXfer+0x384>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002d86:	7823      	ldrb	r3, [r4, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	18eb      	adds	r3, r5, r3
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	498d      	ldr	r1, [pc, #564]	; (8002fc4 <USB_EPStartXfer+0x344>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	4990      	ldr	r1, [pc, #576]	; (8002fd4 <USB_EPStartXfer+0x354>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	801a      	strh	r2, [r3, #0]
          ep->xfer_len_db -= len;
 8002d98:	6a23      	ldr	r3, [r4, #32]
 8002d9a:	1b9b      	subs	r3, r3, r6
 8002d9c:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d9e:	7823      	ldrb	r3, [r4, #0]
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	18aa      	adds	r2, r5, r2
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	0652      	lsls	r2, r2, #25
 8002da8:	d400      	bmi.n	8002dac <USB_EPStartXfer+0x12c>
 8002daa:	e08b      	b.n	8002ec4 <USB_EPStartXfer+0x244>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dac:	7862      	ldrb	r2, [r4, #1]
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	d128      	bne.n	8002e04 <USB_EPStartXfer+0x184>
 8002db2:	3250      	adds	r2, #80	; 0x50
 8002db4:	5aaa      	ldrh	r2, [r5, r2]
 8002db6:	497f      	ldr	r1, [pc, #508]	; (8002fb4 <USB_EPStartXfer+0x334>)
 8002db8:	1869      	adds	r1, r5, r1
 8002dba:	1852      	adds	r2, r2, r1
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	d109      	bne.n	8002dd8 <USB_EPStartXfer+0x158>
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	497c      	ldr	r1, [pc, #496]	; (8002fb8 <USB_EPStartXfer+0x338>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	881a      	ldrh	r2, [r3, #0]
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	0209      	lsls	r1, r1, #8
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e017      	b.n	8002e08 <USB_EPStartXfer+0x188>
 8002dd8:	2e3e      	cmp	r6, #62	; 0x3e
 8002dda:	d807      	bhi.n	8002dec <USB_EPStartXfer+0x16c>
 8002ddc:	0872      	lsrs	r2, r6, #1
 8002dde:	2101      	movs	r1, #1
 8002de0:	4031      	ands	r1, r6
 8002de2:	1852      	adds	r2, r2, r1
 8002de4:	0292      	lsls	r2, r2, #10
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e00d      	b.n	8002e08 <USB_EPStartXfer+0x188>
 8002dec:	0972      	lsrs	r2, r6, #5
 8002dee:	211f      	movs	r1, #31
 8002df0:	4031      	ands	r1, r6
 8002df2:	4248      	negs	r0, r1
 8002df4:	4141      	adcs	r1, r0
 8002df6:	1a52      	subs	r2, r2, r1
 8002df8:	0291      	lsls	r1, r2, #10
 8002dfa:	4a77      	ldr	r2, [pc, #476]	; (8002fd8 <USB_EPStartXfer+0x358>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	e001      	b.n	8002e08 <USB_EPStartXfer+0x188>
 8002e04:	2a01      	cmp	r2, #1
 8002e06:	d025      	beq.n	8002e54 <USB_EPStartXfer+0x1d4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e08:	b2b3      	uxth	r3, r6
 8002e0a:	8962      	ldrh	r2, [r4, #10]
 8002e0c:	6961      	ldr	r1, [r4, #20]
 8002e0e:	0028      	movs	r0, r5
 8002e10:	f7ff ff1f 	bl	8002c52 <USB_WritePMA>
            ep->xfer_buff += len;
 8002e14:	6963      	ldr	r3, [r4, #20]
 8002e16:	199b      	adds	r3, r3, r6
 8002e18:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002e1a:	6a23      	ldr	r3, [r4, #32]
 8002e1c:	6922      	ldr	r2, [r4, #16]
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d922      	bls.n	8002e68 <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db -= len;
 8002e22:	1b9b      	subs	r3, r3, r6
 8002e24:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e26:	7863      	ldrb	r3, [r4, #1]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d137      	bne.n	8002e9c <USB_EPStartXfer+0x21c>
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	5aeb      	ldrh	r3, [r5, r3]
 8002e30:	7822      	ldrb	r2, [r4, #0]
 8002e32:	00d2      	lsls	r2, r2, #3
 8002e34:	4965      	ldr	r1, [pc, #404]	; (8002fcc <USB_EPStartXfer+0x34c>)
 8002e36:	1869      	adds	r1, r5, r1
 8002e38:	185b      	adds	r3, r3, r1
 8002e3a:	18d3      	adds	r3, r2, r3
 8002e3c:	2e00      	cmp	r6, #0
 8002e3e:	d117      	bne.n	8002e70 <USB_EPStartXfer+0x1f0>
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	495d      	ldr	r1, [pc, #372]	; (8002fb8 <USB_EPStartXfer+0x338>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	0209      	lsls	r1, r1, #8
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	e025      	b.n	8002ea0 <USB_EPStartXfer+0x220>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e54:	324f      	adds	r2, #79	; 0x4f
 8002e56:	5aaa      	ldrh	r2, [r5, r2]
 8002e58:	4956      	ldr	r1, [pc, #344]	; (8002fb4 <USB_EPStartXfer+0x334>)
 8002e5a:	1869      	adds	r1, r5, r1
 8002e5c:	1852      	adds	r2, r2, r1
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	18d3      	adds	r3, r2, r3
 8002e62:	b2b2      	uxth	r2, r6
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	e7cf      	b.n	8002e08 <USB_EPStartXfer+0x188>
              ep->xfer_len_db = 0U;
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002e6c:	001e      	movs	r6, r3
 8002e6e:	e7da      	b.n	8002e26 <USB_EPStartXfer+0x1a6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e70:	2e3e      	cmp	r6, #62	; 0x3e
 8002e72:	d807      	bhi.n	8002e84 <USB_EPStartXfer+0x204>
 8002e74:	0872      	lsrs	r2, r6, #1
 8002e76:	2101      	movs	r1, #1
 8002e78:	4031      	ands	r1, r6
 8002e7a:	1852      	adds	r2, r2, r1
 8002e7c:	0292      	lsls	r2, r2, #10
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	e00d      	b.n	8002ea0 <USB_EPStartXfer+0x220>
 8002e84:	0972      	lsrs	r2, r6, #5
 8002e86:	211f      	movs	r1, #31
 8002e88:	4031      	ands	r1, r6
 8002e8a:	4248      	negs	r0, r1
 8002e8c:	4141      	adcs	r1, r0
 8002e8e:	1a52      	subs	r2, r2, r1
 8002e90:	0291      	lsls	r1, r2, #10
 8002e92:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <USB_EPStartXfer+0x358>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b292      	uxth	r2, r2
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	e001      	b.n	8002ea0 <USB_EPStartXfer+0x220>
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d006      	beq.n	8002eae <USB_EPStartXfer+0x22e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ea0:	b2b3      	uxth	r3, r6
 8002ea2:	8922      	ldrh	r2, [r4, #8]
 8002ea4:	6961      	ldr	r1, [r4, #20]
 8002ea6:	0028      	movs	r0, r5
 8002ea8:	f7ff fed3 	bl	8002c52 <USB_WritePMA>
 8002eac:	e75a      	b.n	8002d64 <USB_EPStartXfer+0xe4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002eae:	334f      	adds	r3, #79	; 0x4f
 8002eb0:	5aea      	ldrh	r2, [r5, r3]
 8002eb2:	7823      	ldrb	r3, [r4, #0]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4945      	ldr	r1, [pc, #276]	; (8002fcc <USB_EPStartXfer+0x34c>)
 8002eb8:	1869      	adds	r1, r5, r1
 8002eba:	1852      	adds	r2, r2, r1
 8002ebc:	189b      	adds	r3, r3, r2
 8002ebe:	b2b2      	uxth	r2, r6
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	e7ed      	b.n	8002ea0 <USB_EPStartXfer+0x220>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ec4:	7862      	ldrb	r2, [r4, #1]
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d128      	bne.n	8002f1c <USB_EPStartXfer+0x29c>
 8002eca:	3250      	adds	r2, #80	; 0x50
 8002ecc:	5aa9      	ldrh	r1, [r5, r2]
 8002ece:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <USB_EPStartXfer+0x34c>)
 8002ed0:	18aa      	adds	r2, r5, r2
 8002ed2:	1852      	adds	r2, r2, r1
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	18d3      	adds	r3, r2, r3
 8002ed8:	2e00      	cmp	r6, #0
 8002eda:	d109      	bne.n	8002ef0 <USB_EPStartXfer+0x270>
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	4936      	ldr	r1, [pc, #216]	; (8002fb8 <USB_EPStartXfer+0x338>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0209      	lsls	r1, r1, #8
 8002eea:	430a      	orrs	r2, r1
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e017      	b.n	8002f20 <USB_EPStartXfer+0x2a0>
 8002ef0:	2e3e      	cmp	r6, #62	; 0x3e
 8002ef2:	d807      	bhi.n	8002f04 <USB_EPStartXfer+0x284>
 8002ef4:	0872      	lsrs	r2, r6, #1
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4031      	ands	r1, r6
 8002efa:	1852      	adds	r2, r2, r1
 8002efc:	0292      	lsls	r2, r2, #10
 8002efe:	b292      	uxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	e00d      	b.n	8002f20 <USB_EPStartXfer+0x2a0>
 8002f04:	0972      	lsrs	r2, r6, #5
 8002f06:	211f      	movs	r1, #31
 8002f08:	4031      	ands	r1, r6
 8002f0a:	4248      	negs	r0, r1
 8002f0c:	4141      	adcs	r1, r0
 8002f0e:	1a52      	subs	r2, r2, r1
 8002f10:	0291      	lsls	r1, r2, #10
 8002f12:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <USB_EPStartXfer+0x358>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	b292      	uxth	r2, r2
 8002f18:	801a      	strh	r2, [r3, #0]
 8002f1a:	e001      	b.n	8002f20 <USB_EPStartXfer+0x2a0>
 8002f1c:	2a01      	cmp	r2, #1
 8002f1e:	d025      	beq.n	8002f6c <USB_EPStartXfer+0x2ec>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f20:	b2b3      	uxth	r3, r6
 8002f22:	8922      	ldrh	r2, [r4, #8]
 8002f24:	6961      	ldr	r1, [r4, #20]
 8002f26:	0028      	movs	r0, r5
 8002f28:	f7ff fe93 	bl	8002c52 <USB_WritePMA>
            ep->xfer_buff += len;
 8002f2c:	6963      	ldr	r3, [r4, #20]
 8002f2e:	199b      	adds	r3, r3, r6
 8002f30:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002f32:	6a23      	ldr	r3, [r4, #32]
 8002f34:	6922      	ldr	r2, [r4, #16]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d922      	bls.n	8002f80 <USB_EPStartXfer+0x300>
              ep->xfer_len_db -= len;
 8002f3a:	1b9b      	subs	r3, r3, r6
 8002f3c:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f3e:	7863      	ldrb	r3, [r4, #1]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d14b      	bne.n	8002fdc <USB_EPStartXfer+0x35c>
 8002f44:	3350      	adds	r3, #80	; 0x50
 8002f46:	5aeb      	ldrh	r3, [r5, r3]
 8002f48:	7822      	ldrb	r2, [r4, #0]
 8002f4a:	00d2      	lsls	r2, r2, #3
 8002f4c:	4919      	ldr	r1, [pc, #100]	; (8002fb4 <USB_EPStartXfer+0x334>)
 8002f4e:	1869      	adds	r1, r5, r1
 8002f50:	185b      	adds	r3, r3, r1
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	2e00      	cmp	r6, #0
 8002f56:	d117      	bne.n	8002f88 <USB_EPStartXfer+0x308>
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	4917      	ldr	r1, [pc, #92]	; (8002fb8 <USB_EPStartXfer+0x338>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0209      	lsls	r1, r1, #8
 8002f66:	430a      	orrs	r2, r1
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	e039      	b.n	8002fe0 <USB_EPStartXfer+0x360>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002f6c:	324f      	adds	r2, #79	; 0x4f
 8002f6e:	5aa9      	ldrh	r1, [r5, r2]
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <USB_EPStartXfer+0x34c>)
 8002f72:	18aa      	adds	r2, r5, r2
 8002f74:	1852      	adds	r2, r2, r1
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	b2b2      	uxth	r2, r6
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e7cf      	b.n	8002f20 <USB_EPStartXfer+0x2a0>
              ep->xfer_len_db = 0U;
 8002f80:	2200      	movs	r2, #0
 8002f82:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002f84:	001e      	movs	r6, r3
 8002f86:	e7da      	b.n	8002f3e <USB_EPStartXfer+0x2be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f88:	2e3e      	cmp	r6, #62	; 0x3e
 8002f8a:	d807      	bhi.n	8002f9c <USB_EPStartXfer+0x31c>
 8002f8c:	0872      	lsrs	r2, r6, #1
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4031      	ands	r1, r6
 8002f92:	1852      	adds	r2, r2, r1
 8002f94:	0292      	lsls	r2, r2, #10
 8002f96:	b292      	uxth	r2, r2
 8002f98:	801a      	strh	r2, [r3, #0]
 8002f9a:	e021      	b.n	8002fe0 <USB_EPStartXfer+0x360>
 8002f9c:	0972      	lsrs	r2, r6, #5
 8002f9e:	211f      	movs	r1, #31
 8002fa0:	4031      	ands	r1, r6
 8002fa2:	4248      	negs	r0, r1
 8002fa4:	4141      	adcs	r1, r0
 8002fa6:	1a52      	subs	r2, r2, r1
 8002fa8:	0291      	lsls	r1, r2, #10
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <USB_EPStartXfer+0x358>)
 8002fac:	430a      	orrs	r2, r1
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	e015      	b.n	8002fe0 <USB_EPStartXfer+0x360>
 8002fb4:	00000406 	.word	0x00000406
 8002fb8:	ffff83ff 	.word	0xffff83ff
 8002fbc:	ffffbf8f 	.word	0xffffbf8f
 8002fc0:	00008080 	.word	0x00008080
 8002fc4:	ffff8f8f 	.word	0xffff8f8f
 8002fc8:	000080c0 	.word	0x000080c0
 8002fcc:	00000402 	.word	0x00000402
 8002fd0:	ffff8fbf 	.word	0xffff8fbf
 8002fd4:	00008180 	.word	0x00008180
 8002fd8:	ffff8000 	.word	0xffff8000
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d006      	beq.n	8002fee <USB_EPStartXfer+0x36e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002fe0:	b2b3      	uxth	r3, r6
 8002fe2:	8962      	ldrh	r2, [r4, #10]
 8002fe4:	6961      	ldr	r1, [r4, #20]
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f7ff fe33 	bl	8002c52 <USB_WritePMA>
 8002fec:	e6ba      	b.n	8002d64 <USB_EPStartXfer+0xe4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fee:	334f      	adds	r3, #79	; 0x4f
 8002ff0:	5aea      	ldrh	r2, [r5, r3]
 8002ff2:	7823      	ldrb	r3, [r4, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	49ac      	ldr	r1, [pc, #688]	; (80032a8 <USB_EPStartXfer+0x628>)
 8002ff8:	1869      	adds	r1, r5, r1
 8002ffa:	1852      	adds	r2, r2, r1
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	b2b2      	uxth	r2, r6
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	e7ed      	b.n	8002fe0 <USB_EPStartXfer+0x360>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003004:	7822      	ldrb	r2, [r4, #0]
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	18aa      	adds	r2, r5, r2
 800300a:	8811      	ldrh	r1, [r2, #0]
 800300c:	48a7      	ldr	r0, [pc, #668]	; (80032ac <USB_EPStartXfer+0x62c>)
 800300e:	4001      	ands	r1, r0
 8003010:	48a7      	ldr	r0, [pc, #668]	; (80032b0 <USB_EPStartXfer+0x630>)
 8003012:	4301      	orrs	r1, r0
 8003014:	8011      	strh	r1, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003016:	2250      	movs	r2, #80	; 0x50
 8003018:	5aa8      	ldrh	r0, [r5, r2]
 800301a:	7822      	ldrb	r2, [r4, #0]
 800301c:	00d2      	lsls	r2, r2, #3
 800301e:	49a5      	ldr	r1, [pc, #660]	; (80032b4 <USB_EPStartXfer+0x634>)
 8003020:	1869      	adds	r1, r5, r1
 8003022:	1809      	adds	r1, r1, r0
 8003024:	1852      	adds	r2, r2, r1
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800302a:	8922      	ldrh	r2, [r4, #8]
 800302c:	6961      	ldr	r1, [r4, #20]
 800302e:	0028      	movs	r0, r5
 8003030:	f7ff fe0f 	bl	8002c52 <USB_WritePMA>
 8003034:	e696      	b.n	8002d64 <USB_EPStartXfer+0xe4>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003036:	2250      	movs	r2, #80	; 0x50
 8003038:	5aa9      	ldrh	r1, [r5, r2]
 800303a:	4a9e      	ldr	r2, [pc, #632]	; (80032b4 <USB_EPStartXfer+0x634>)
 800303c:	18aa      	adds	r2, r5, r2
 800303e:	1852      	adds	r2, r2, r1
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	18d3      	adds	r3, r2, r3
 8003044:	b2b2      	uxth	r2, r6
 8003046:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003048:	8922      	ldrh	r2, [r4, #8]
 800304a:	e668      	b.n	8002d1e <USB_EPStartXfer+0x9e>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800304c:	2b01      	cmp	r3, #1
 800304e:	d000      	beq.n	8003052 <USB_EPStartXfer+0x3d2>
 8003050:	e688      	b.n	8002d64 <USB_EPStartXfer+0xe4>
 8003052:	7823      	ldrb	r3, [r4, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	18eb      	adds	r3, r5, r3
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	4997      	ldr	r1, [pc, #604]	; (80032b8 <USB_EPStartXfer+0x638>)
 800305c:	400a      	ands	r2, r1
 800305e:	4997      	ldr	r1, [pc, #604]	; (80032bc <USB_EPStartXfer+0x63c>)
 8003060:	430a      	orrs	r2, r1
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	e67e      	b.n	8002d64 <USB_EPStartXfer+0xe4>
        ep->xfer_len = 0U;
 8003066:	2200      	movs	r2, #0
 8003068:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800306a:	001a      	movs	r2, r3
 800306c:	e619      	b.n	8002ca2 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800306e:	2a3e      	cmp	r2, #62	; 0x3e
 8003070:	d807      	bhi.n	8003082 <USB_EPStartXfer+0x402>
 8003072:	0851      	lsrs	r1, r2, #1
 8003074:	2001      	movs	r0, #1
 8003076:	4002      	ands	r2, r0
 8003078:	1889      	adds	r1, r1, r2
 800307a:	0289      	lsls	r1, r1, #10
 800307c:	b289      	uxth	r1, r1
 800307e:	8019      	strh	r1, [r3, #0]
 8003080:	e623      	b.n	8002cca <USB_EPStartXfer+0x4a>
 8003082:	0951      	lsrs	r1, r2, #5
 8003084:	201f      	movs	r0, #31
 8003086:	4002      	ands	r2, r0
 8003088:	4250      	negs	r0, r2
 800308a:	4142      	adcs	r2, r0
 800308c:	1a89      	subs	r1, r1, r2
 800308e:	0289      	lsls	r1, r1, #10
 8003090:	4a8b      	ldr	r2, [pc, #556]	; (80032c0 <USB_EPStartXfer+0x640>)
 8003092:	430a      	orrs	r2, r1
 8003094:	b292      	uxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e617      	b.n	8002cca <USB_EPStartXfer+0x4a>
      if (ep->type == EP_TYPE_BULK)
 800309a:	78ca      	ldrb	r2, [r1, #3]
 800309c:	2a02      	cmp	r2, #2
 800309e:	d037      	beq.n	8003110 <USB_EPStartXfer+0x490>
        return HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 80030a2:	2a01      	cmp	r2, #1
 80030a4:	d000      	beq.n	80030a8 <USB_EPStartXfer+0x428>
 80030a6:	e61d      	b.n	8002ce4 <USB_EPStartXfer+0x64>
        if (ep->xfer_len > ep->maxpacket)
 80030a8:	698a      	ldr	r2, [r1, #24]
 80030aa:	6909      	ldr	r1, [r1, #16]
 80030ac:	428a      	cmp	r2, r1
 80030ae:	d800      	bhi.n	80030b2 <USB_EPStartXfer+0x432>
 80030b0:	e0aa      	b.n	8003208 <USB_EPStartXfer+0x588>
          ep->xfer_len -= len;
 80030b2:	1a52      	subs	r2, r2, r1
 80030b4:	61a2      	str	r2, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d000      	beq.n	80030bc <USB_EPStartXfer+0x43c>
 80030ba:	e606      	b.n	8002cca <USB_EPStartXfer+0x4a>
 80030bc:	3350      	adds	r3, #80	; 0x50
 80030be:	5aea      	ldrh	r2, [r5, r3]
 80030c0:	7823      	ldrb	r3, [r4, #0]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	487b      	ldr	r0, [pc, #492]	; (80032b4 <USB_EPStartXfer+0x634>)
 80030c6:	1828      	adds	r0, r5, r0
 80030c8:	1812      	adds	r2, r2, r0
 80030ca:	189a      	adds	r2, r3, r2
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d000      	beq.n	80030d2 <USB_EPStartXfer+0x452>
 80030d0:	e09e      	b.n	8003210 <USB_EPStartXfer+0x590>
 80030d2:	8813      	ldrh	r3, [r2, #0]
 80030d4:	487b      	ldr	r0, [pc, #492]	; (80032c4 <USB_EPStartXfer+0x644>)
 80030d6:	4003      	ands	r3, r0
 80030d8:	8013      	strh	r3, [r2, #0]
 80030da:	8813      	ldrh	r3, [r2, #0]
 80030dc:	2080      	movs	r0, #128	; 0x80
 80030de:	0200      	lsls	r0, r0, #8
 80030e0:	4303      	orrs	r3, r0
 80030e2:	8013      	strh	r3, [r2, #0]
 80030e4:	7862      	ldrb	r2, [r4, #1]
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	d000      	beq.n	80030ec <USB_EPStartXfer+0x46c>
 80030ea:	e0bd      	b.n	8003268 <USB_EPStartXfer+0x5e8>
 80030ec:	2350      	movs	r3, #80	; 0x50
 80030ee:	5aea      	ldrh	r2, [r5, r3]
 80030f0:	7823      	ldrb	r3, [r4, #0]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	496c      	ldr	r1, [pc, #432]	; (80032a8 <USB_EPStartXfer+0x628>)
 80030f6:	1869      	adds	r1, r5, r1
 80030f8:	1852      	adds	r2, r2, r1
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	4971      	ldr	r1, [pc, #452]	; (80032c4 <USB_EPStartXfer+0x644>)
 8003100:	400a      	ands	r2, r1
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	0209      	lsls	r1, r1, #8
 800310a:	430a      	orrs	r2, r1
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	e5dc      	b.n	8002cca <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003110:	2b00      	cmp	r3, #0
 8003112:	d12a      	bne.n	800316a <USB_EPStartXfer+0x4ea>
 8003114:	3350      	adds	r3, #80	; 0x50
 8003116:	5ac3      	ldrh	r3, [r0, r3]
 8003118:	780a      	ldrb	r2, [r1, #0]
 800311a:	00d2      	lsls	r2, r2, #3
 800311c:	4965      	ldr	r1, [pc, #404]	; (80032b4 <USB_EPStartXfer+0x634>)
 800311e:	1841      	adds	r1, r0, r1
 8003120:	185b      	adds	r3, r3, r1
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	6922      	ldr	r2, [r4, #16]
 8003126:	2a00      	cmp	r2, #0
 8003128:	d135      	bne.n	8003196 <USB_EPStartXfer+0x516>
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	4965      	ldr	r1, [pc, #404]	; (80032c4 <USB_EPStartXfer+0x644>)
 800312e:	400a      	ands	r2, r1
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0209      	lsls	r1, r1, #8
 8003138:	430a      	orrs	r2, r1
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	7863      	ldrb	r3, [r4, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d155      	bne.n	80031ee <USB_EPStartXfer+0x56e>
 8003142:	3350      	adds	r3, #80	; 0x50
 8003144:	5aeb      	ldrh	r3, [r5, r3]
 8003146:	7822      	ldrb	r2, [r4, #0]
 8003148:	00d2      	lsls	r2, r2, #3
 800314a:	4957      	ldr	r1, [pc, #348]	; (80032a8 <USB_EPStartXfer+0x628>)
 800314c:	1869      	adds	r1, r5, r1
 800314e:	185b      	adds	r3, r3, r1
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	6922      	ldr	r2, [r4, #16]
 8003154:	2a00      	cmp	r2, #0
 8003156:	d134      	bne.n	80031c2 <USB_EPStartXfer+0x542>
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	495a      	ldr	r1, [pc, #360]	; (80032c4 <USB_EPStartXfer+0x644>)
 800315c:	400a      	ands	r2, r1
 800315e:	801a      	strh	r2, [r3, #0]
 8003160:	881a      	ldrh	r2, [r3, #0]
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0209      	lsls	r1, r1, #8
 8003166:	430a      	orrs	r2, r1
 8003168:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 800316a:	69e3      	ldr	r3, [r4, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d100      	bne.n	8003172 <USB_EPStartXfer+0x4f2>
 8003170:	e5ab      	b.n	8002cca <USB_EPStartXfer+0x4a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003172:	7823      	ldrb	r3, [r4, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	18eb      	adds	r3, r5, r3
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	4953      	ldr	r1, [pc, #332]	; (80032c8 <USB_EPStartXfer+0x648>)
 800317c:	400a      	ands	r2, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800317e:	428a      	cmp	r2, r1
 8003180:	d002      	beq.n	8003188 <USB_EPStartXfer+0x508>
 8003182:	2a00      	cmp	r2, #0
 8003184:	d000      	beq.n	8003188 <USB_EPStartXfer+0x508>
 8003186:	e5a0      	b.n	8002cca <USB_EPStartXfer+0x4a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	494b      	ldr	r1, [pc, #300]	; (80032b8 <USB_EPStartXfer+0x638>)
 800318c:	400a      	ands	r2, r1
 800318e:	494f      	ldr	r1, [pc, #316]	; (80032cc <USB_EPStartXfer+0x64c>)
 8003190:	430a      	orrs	r2, r1
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e599      	b.n	8002cca <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003196:	2a3e      	cmp	r2, #62	; 0x3e
 8003198:	d807      	bhi.n	80031aa <USB_EPStartXfer+0x52a>
 800319a:	0851      	lsrs	r1, r2, #1
 800319c:	2001      	movs	r0, #1
 800319e:	4002      	ands	r2, r0
 80031a0:	1889      	adds	r1, r1, r2
 80031a2:	0289      	lsls	r1, r1, #10
 80031a4:	b289      	uxth	r1, r1
 80031a6:	8019      	strh	r1, [r3, #0]
 80031a8:	e7c8      	b.n	800313c <USB_EPStartXfer+0x4bc>
 80031aa:	0951      	lsrs	r1, r2, #5
 80031ac:	201f      	movs	r0, #31
 80031ae:	4002      	ands	r2, r0
 80031b0:	4250      	negs	r0, r2
 80031b2:	4142      	adcs	r2, r0
 80031b4:	1a89      	subs	r1, r1, r2
 80031b6:	0289      	lsls	r1, r1, #10
 80031b8:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <USB_EPStartXfer+0x640>)
 80031ba:	430a      	orrs	r2, r1
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	e7bc      	b.n	800313c <USB_EPStartXfer+0x4bc>
 80031c2:	2a3e      	cmp	r2, #62	; 0x3e
 80031c4:	d807      	bhi.n	80031d6 <USB_EPStartXfer+0x556>
 80031c6:	0851      	lsrs	r1, r2, #1
 80031c8:	2001      	movs	r0, #1
 80031ca:	4002      	ands	r2, r0
 80031cc:	1889      	adds	r1, r1, r2
 80031ce:	0289      	lsls	r1, r1, #10
 80031d0:	b289      	uxth	r1, r1
 80031d2:	8019      	strh	r1, [r3, #0]
 80031d4:	e7c9      	b.n	800316a <USB_EPStartXfer+0x4ea>
 80031d6:	0951      	lsrs	r1, r2, #5
 80031d8:	201f      	movs	r0, #31
 80031da:	4002      	ands	r2, r0
 80031dc:	4250      	negs	r0, r2
 80031de:	4142      	adcs	r2, r0
 80031e0:	1a89      	subs	r1, r1, r2
 80031e2:	0289      	lsls	r1, r1, #10
 80031e4:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <USB_EPStartXfer+0x640>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e7bd      	b.n	800316a <USB_EPStartXfer+0x4ea>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d1bb      	bne.n	800316a <USB_EPStartXfer+0x4ea>
 80031f2:	334f      	adds	r3, #79	; 0x4f
 80031f4:	5aea      	ldrh	r2, [r5, r3]
 80031f6:	7823      	ldrb	r3, [r4, #0]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	492b      	ldr	r1, [pc, #172]	; (80032a8 <USB_EPStartXfer+0x628>)
 80031fc:	1869      	adds	r1, r5, r1
 80031fe:	1852      	adds	r2, r2, r1
 8003200:	189b      	adds	r3, r3, r2
 8003202:	8a22      	ldrh	r2, [r4, #16]
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	e7b0      	b.n	800316a <USB_EPStartXfer+0x4ea>
          ep->xfer_len = 0U;
 8003208:	2100      	movs	r1, #0
 800320a:	61a1      	str	r1, [r4, #24]
          len = ep->xfer_len;
 800320c:	0011      	movs	r1, r2
 800320e:	e752      	b.n	80030b6 <USB_EPStartXfer+0x436>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003210:	293e      	cmp	r1, #62	; 0x3e
 8003212:	d81b      	bhi.n	800324c <USB_EPStartXfer+0x5cc>
 8003214:	084b      	lsrs	r3, r1, #1
 8003216:	2601      	movs	r6, #1
 8003218:	400e      	ands	r6, r1
 800321a:	0030      	movs	r0, r6
 800321c:	1e47      	subs	r7, r0, #1
 800321e:	41b8      	sbcs	r0, r7
 8003220:	1818      	adds	r0, r3, r0
 8003222:	0280      	lsls	r0, r0, #10
 8003224:	b280      	uxth	r0, r0
 8003226:	8010      	strh	r0, [r2, #0]
 8003228:	7862      	ldrb	r2, [r4, #1]
 800322a:	2a00      	cmp	r2, #0
 800322c:	d11c      	bne.n	8003268 <USB_EPStartXfer+0x5e8>
 800322e:	2250      	movs	r2, #80	; 0x50
 8003230:	5aaa      	ldrh	r2, [r5, r2]
 8003232:	491d      	ldr	r1, [pc, #116]	; (80032a8 <USB_EPStartXfer+0x628>)
 8003234:	1869      	adds	r1, r5, r1
 8003236:	1852      	adds	r2, r2, r1
 8003238:	7821      	ldrb	r1, [r4, #0]
 800323a:	00c9      	lsls	r1, r1, #3
 800323c:	1852      	adds	r2, r2, r1
 800323e:	1e71      	subs	r1, r6, #1
 8003240:	418e      	sbcs	r6, r1
 8003242:	199b      	adds	r3, r3, r6
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]
 800324a:	e53e      	b.n	8002cca <USB_EPStartXfer+0x4a>
 800324c:	094b      	lsrs	r3, r1, #5
 800324e:	201f      	movs	r0, #31
 8003250:	4008      	ands	r0, r1
 8003252:	4246      	negs	r6, r0
 8003254:	4146      	adcs	r6, r0
 8003256:	1b9f      	subs	r7, r3, r6
 8003258:	02bf      	lsls	r7, r7, #10
 800325a:	4e19      	ldr	r6, [pc, #100]	; (80032c0 <USB_EPStartXfer+0x640>)
 800325c:	433e      	orrs	r6, r7
 800325e:	b2b6      	uxth	r6, r6
 8003260:	8016      	strh	r6, [r2, #0]
 8003262:	7862      	ldrb	r2, [r4, #1]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d00e      	beq.n	8003286 <USB_EPStartXfer+0x606>
 8003268:	2a01      	cmp	r2, #1
 800326a:	d000      	beq.n	800326e <USB_EPStartXfer+0x5ee>
 800326c:	e52d      	b.n	8002cca <USB_EPStartXfer+0x4a>
 800326e:	2350      	movs	r3, #80	; 0x50
 8003270:	5aeb      	ldrh	r3, [r5, r3]
 8003272:	7822      	ldrb	r2, [r4, #0]
 8003274:	00d2      	lsls	r2, r2, #3
 8003276:	480c      	ldr	r0, [pc, #48]	; (80032a8 <USB_EPStartXfer+0x628>)
 8003278:	4684      	mov	ip, r0
 800327a:	4463      	add	r3, ip
 800327c:	18d2      	adds	r2, r2, r3
 800327e:	18aa      	adds	r2, r5, r2
 8003280:	b289      	uxth	r1, r1
 8003282:	8011      	strh	r1, [r2, #0]
 8003284:	e521      	b.n	8002cca <USB_EPStartXfer+0x4a>
 8003286:	2250      	movs	r2, #80	; 0x50
 8003288:	5aaa      	ldrh	r2, [r5, r2]
 800328a:	4907      	ldr	r1, [pc, #28]	; (80032a8 <USB_EPStartXfer+0x628>)
 800328c:	1869      	adds	r1, r5, r1
 800328e:	1852      	adds	r2, r2, r1
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	00c9      	lsls	r1, r1, #3
 8003294:	1852      	adds	r2, r2, r1
 8003296:	4241      	negs	r1, r0
 8003298:	4148      	adcs	r0, r1
 800329a:	1a1b      	subs	r3, r3, r0
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <USB_EPStartXfer+0x640>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
 80032a6:	e510      	b.n	8002cca <USB_EPStartXfer+0x4a>
 80032a8:	00000406 	.word	0x00000406
 80032ac:	ffff8e8f 	.word	0xffff8e8f
 80032b0:	00008080 	.word	0x00008080
 80032b4:	00000402 	.word	0x00000402
 80032b8:	ffff8f8f 	.word	0xffff8f8f
 80032bc:	0000c080 	.word	0x0000c080
 80032c0:	ffff8000 	.word	0xffff8000
 80032c4:	ffff83ff 	.word	0xffff83ff
 80032c8:	00004040 	.word	0x00004040
 80032cc:	000080c0 	.word	0x000080c0

080032d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	0014      	movs	r4, r2
 80032d4:	001a      	movs	r2, r3
  uint32_t n = (uint32_t)wNBytes >> 1;
 80032d6:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80032d8:	2580      	movs	r5, #128	; 0x80
 80032da:	00ed      	lsls	r5, r5, #3
 80032dc:	46ac      	mov	ip, r5
 80032de:	4464      	add	r4, ip
 80032e0:	1900      	adds	r0, r0, r4
 80032e2:	0005      	movs	r5, r0

  for (i = n; i != 0U; i--)
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00f      	beq.n	8003308 <USB_ReadPMA+0x38>
  uint8_t *pBuf = pbUsrBuf;
 80032e8:	000d      	movs	r5, r1
  for (i = n; i != 0U; i--)
 80032ea:	001e      	movs	r6, r3
 80032ec:	1a47      	subs	r7, r0, r1
 80032ee:	197c      	adds	r4, r7, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 80032f0:	8824      	ldrh	r4, [r4, #0]
 80032f2:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80032f4:	702c      	strb	r4, [r5, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80032f6:	0a24      	lsrs	r4, r4, #8
 80032f8:	706c      	strb	r4, [r5, #1]
  for (i = n; i != 0U; i--)
 80032fa:	3e01      	subs	r6, #1
    pBuf++;
 80032fc:	3502      	adds	r5, #2
  for (i = n; i != 0U; i--)
 80032fe:	2e00      	cmp	r6, #0
 8003300:	d1f5      	bne.n	80032ee <USB_ReadPMA+0x1e>
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	18c5      	adds	r5, r0, r3
 8003306:	18c9      	adds	r1, r1, r3
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003308:	07d3      	lsls	r3, r2, #31
 800330a:	d501      	bpl.n	8003310 <USB_ReadPMA+0x40>
  {
    temp = *pdwVal;
 800330c:	882b      	ldrh	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800330e:	700b      	strb	r3, [r1, #0]
  }
}
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003314 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003314:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003316:	23af      	movs	r3, #175	; 0xaf
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	58c3      	ldr	r3, [r0, r3]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00f      	beq.n	8003340 <USBD_CDC_EP0_RxReady+0x2c>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003320:	22ae      	movs	r2, #174	; 0xae
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003326:	3ab8      	subs	r2, #184	; 0xb8
 8003328:	5ca0      	ldrb	r0, [r4, r2]
 800332a:	28ff      	cmp	r0, #255	; 0xff
 800332c:	d008      	beq.n	8003340 <USBD_CDC_EP0_RxReady+0x2c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <USBD_CDC_EP0_RxReady+0x30>)
 8003330:	5ca2      	ldrb	r2, [r4, r2]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0021      	movs	r1, r4
 8003336:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	54e2      	strb	r2, [r4, r3]

  }
  return USBD_OK;
}
 8003340:	2000      	movs	r0, #0
 8003342:	bd10      	pop	{r4, pc}
 8003344:	00000201 	.word	0x00000201

08003348 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003348:	2343      	movs	r3, #67	; 0x43
 800334a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800334c:	4800      	ldr	r0, [pc, #0]	; (8003350 <USBD_CDC_GetFSCfgDesc+0x8>)
 800334e:	4770      	bx	lr
 8003350:	20000040 	.word	0x20000040

08003354 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003354:	2343      	movs	r3, #67	; 0x43
 8003356:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003358:	4800      	ldr	r0, [pc, #0]	; (800335c <USBD_CDC_GetHSCfgDesc+0x8>)
 800335a:	4770      	bx	lr
 800335c:	20000084 	.word	0x20000084

08003360 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003360:	2343      	movs	r3, #67	; 0x43
 8003362:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003364:	4800      	ldr	r0, [pc, #0]	; (8003368 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003366:	4770      	bx	lr
 8003368:	200000d4 	.word	0x200000d4

0800336c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800336c:	230a      	movs	r3, #10
 800336e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003370:	4800      	ldr	r0, [pc, #0]	; (8003374 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003372:	4770      	bx	lr
 8003374:	200000c8 	.word	0x200000c8

08003378 <USBD_CDC_DataOut>:
{
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800337c:	26ae      	movs	r6, #174	; 0xae
 800337e:	00b6      	lsls	r6, r6, #2
 8003380:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003382:	f001 faa7 	bl	80048d4 <USBD_LL_GetRxDataSize>
 8003386:	2383      	movs	r3, #131	; 0x83
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 800338c:	59a3      	ldr	r3, [r4, r6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003392:	2383      	movs	r3, #131	; 0x83
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18e9      	adds	r1, r5, r3
 8003398:	3b08      	subs	r3, #8
 800339a:	58e8      	ldr	r0, [r5, r3]
 800339c:	33b8      	adds	r3, #184	; 0xb8
 800339e:	58e3      	ldr	r3, [r4, r3]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4798      	blx	r3
    return USBD_OK;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80033a8:	2002      	movs	r0, #2
 80033aa:	e7fc      	b.n	80033a6 <USBD_CDC_DataOut+0x2e>

080033ac <USBD_CDC_DataIn>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	0005      	movs	r5, r0
 80033b0:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80033b2:	23ae      	movs	r3, #174	; 0xae
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	58c6      	ldr	r6, [r0, r3]
  if (pdev->pClassData != NULL)
 80033b8:	2e00      	cmp	r6, #0
 80033ba:	d025      	beq.n	8003408 <USBD_CDC_DataIn+0x5c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	185b      	adds	r3, r3, r1
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	18c3      	adds	r3, r0, r3
 80033c4:	69d8      	ldr	r0, [r3, #28]
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d00b      	beq.n	80033e2 <USBD_CDC_DataIn+0x36>
 80033ca:	23b0      	movs	r3, #176	; 0xb0
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	58ea      	ldr	r2, [r5, r3]
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	185b      	adds	r3, r3, r1
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033da:	f7fc ff1b 	bl	8000214 <__aeabi_uidivmod>
 80033de:	2900      	cmp	r1, #0
 80033e0:	d005      	beq.n	80033ee <USBD_CDC_DataIn+0x42>
      hcdc->TxState = 0U;
 80033e2:	2385      	movs	r3, #133	; 0x85
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	2200      	movs	r2, #0
 80033e8:	50f2      	str	r2, [r6, r3]
    return USBD_OK;
 80033ea:	2000      	movs	r0, #0
}
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80033ee:	00a3      	lsls	r3, r4, #2
 80033f0:	191b      	adds	r3, r3, r4
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	18eb      	adds	r3, r5, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033fa:	2300      	movs	r3, #0
 80033fc:	0021      	movs	r1, r4
 80033fe:	0028      	movs	r0, r5
 8003400:	f001 fa56 	bl	80048b0 <USBD_LL_Transmit>
    return USBD_OK;
 8003404:	2000      	movs	r0, #0
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003406:	e7f1      	b.n	80033ec <USBD_CDC_DataIn+0x40>
    return USBD_FAIL;
 8003408:	2002      	movs	r0, #2
 800340a:	e7ef      	b.n	80033ec <USBD_CDC_DataIn+0x40>

0800340c <USBD_CDC_Setup>:
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	0005      	movs	r5, r0
 8003412:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003414:	23ae      	movs	r3, #174	; 0xae
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	466a      	mov	r2, sp
 800341e:	71d3      	strb	r3, [r2, #7]
  uint16_t status_info = 0U;
 8003420:	aa01      	add	r2, sp, #4
 8003422:	8013      	strh	r3, [r2, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003424:	7809      	ldrb	r1, [r1, #0]
 8003426:	3360      	adds	r3, #96	; 0x60
 8003428:	400b      	ands	r3, r1
 800342a:	d02c      	beq.n	8003486 <USBD_CDC_Setup+0x7a>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d163      	bne.n	80034f8 <USBD_CDC_Setup+0xec>
      if (req->wLength)
 8003430:	88e2      	ldrh	r2, [r4, #6]
 8003432:	2a00      	cmp	r2, #0
 8003434:	d109      	bne.n	800344a <USBD_CDC_Setup+0x3e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003436:	7860      	ldrb	r0, [r4, #1]
 8003438:	23af      	movs	r3, #175	; 0xaf
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	58eb      	ldr	r3, [r5, r3]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	0021      	movs	r1, r4
 8003444:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003446:	2000      	movs	r0, #0
 8003448:	e05a      	b.n	8003500 <USBD_CDC_Setup+0xf4>
        if (req->bmRequest & 0x80U)
 800344a:	b249      	sxtb	r1, r1
 800344c:	2900      	cmp	r1, #0
 800344e:	da0d      	bge.n	800346c <USBD_CDC_Setup+0x60>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003450:	7860      	ldrb	r0, [r4, #1]
 8003452:	23af      	movs	r3, #175	; 0xaf
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	58eb      	ldr	r3, [r5, r3]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0031      	movs	r1, r6
 800345c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800345e:	88e2      	ldrh	r2, [r4, #6]
 8003460:	0031      	movs	r1, r6
 8003462:	0028      	movs	r0, r5
 8003464:	f000 fdfc 	bl	8004060 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003468:	2000      	movs	r0, #0
 800346a:	e049      	b.n	8003500 <USBD_CDC_Setup+0xf4>
          hcdc->CmdOpCode = req->bRequest;
 800346c:	7862      	ldrb	r2, [r4, #1]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	54f2      	strb	r2, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003474:	88e2      	ldrh	r2, [r4, #6]
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <USBD_CDC_Setup+0xf8>)
 8003478:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800347a:	88e2      	ldrh	r2, [r4, #6]
 800347c:	0031      	movs	r1, r6
 800347e:	f000 fe05 	bl	800408c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003482:	2000      	movs	r0, #0
 8003484:	e03c      	b.n	8003500 <USBD_CDC_Setup+0xf4>
      switch (req->bRequest)
 8003486:	7863      	ldrb	r3, [r4, #1]
 8003488:	2b0a      	cmp	r3, #10
 800348a:	d018      	beq.n	80034be <USBD_CDC_Setup+0xb2>
 800348c:	2b0b      	cmp	r3, #11
 800348e:	d027      	beq.n	80034e0 <USBD_CDC_Setup+0xd4>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <USBD_CDC_Setup+0x92>
          USBD_CtlError(pdev, req);
 8003494:	0021      	movs	r1, r4
 8003496:	f000 fabd 	bl	8003a14 <USBD_CtlError>
          ret = USBD_FAIL;
 800349a:	2002      	movs	r0, #2
          break;
 800349c:	e030      	b.n	8003500 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800349e:	23a7      	movs	r3, #167	; 0xa7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	5cc3      	ldrb	r3, [r0, r3]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d105      	bne.n	80034b4 <USBD_CDC_Setup+0xa8>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80034a8:	2202      	movs	r2, #2
 80034aa:	a901      	add	r1, sp, #4
 80034ac:	f000 fdd8 	bl	8004060 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80034b0:	2000      	movs	r0, #0
 80034b2:	e025      	b.n	8003500 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 80034b4:	0021      	movs	r1, r4
 80034b6:	f000 faad 	bl	8003a14 <USBD_CtlError>
            ret = USBD_FAIL;
 80034ba:	2002      	movs	r0, #2
 80034bc:	e020      	b.n	8003500 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80034be:	23a7      	movs	r3, #167	; 0xa7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	5cc3      	ldrb	r3, [r0, r3]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d106      	bne.n	80034d6 <USBD_CDC_Setup+0xca>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80034c8:	2201      	movs	r2, #1
 80034ca:	466b      	mov	r3, sp
 80034cc:	1dd9      	adds	r1, r3, #7
 80034ce:	f000 fdc7 	bl	8004060 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80034d2:	2000      	movs	r0, #0
 80034d4:	e014      	b.n	8003500 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 80034d6:	0021      	movs	r1, r4
 80034d8:	f000 fa9c 	bl	8003a14 <USBD_CtlError>
            ret = USBD_FAIL;
 80034dc:	2002      	movs	r0, #2
 80034de:	e00f      	b.n	8003500 <USBD_CDC_Setup+0xf4>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80034e0:	23a7      	movs	r3, #167	; 0xa7
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	5cc3      	ldrb	r3, [r0, r3]
  uint8_t ret = USBD_OK;
 80034e6:	2000      	movs	r0, #0
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d009      	beq.n	8003500 <USBD_CDC_Setup+0xf4>
            USBD_CtlError(pdev, req);
 80034ec:	0021      	movs	r1, r4
 80034ee:	0028      	movs	r0, r5
 80034f0:	f000 fa90 	bl	8003a14 <USBD_CtlError>
            ret = USBD_FAIL;
 80034f4:	2002      	movs	r0, #2
 80034f6:	e003      	b.n	8003500 <USBD_CDC_Setup+0xf4>
      USBD_CtlError(pdev, req);
 80034f8:	0021      	movs	r1, r4
 80034fa:	f000 fa8b 	bl	8003a14 <USBD_CtlError>
      ret = USBD_FAIL;
 80034fe:	2002      	movs	r0, #2
}
 8003500:	b002      	add	sp, #8
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	00000201 	.word	0x00000201

08003508 <USBD_CDC_DeInit>:
{
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800350c:	2181      	movs	r1, #129	; 0x81
 800350e:	f001 f992 	bl	8004836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003512:	2500      	movs	r5, #0
 8003514:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003516:	2101      	movs	r1, #1
 8003518:	0020      	movs	r0, r4
 800351a:	f001 f98c 	bl	8004836 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800351e:	23b6      	movs	r3, #182	; 0xb6
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	50e5      	str	r5, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003524:	2182      	movs	r1, #130	; 0x82
 8003526:	0020      	movs	r0, r4
 8003528:	f001 f985 	bl	8004836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800352c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800352e:	23ae      	movs	r3, #174	; 0xae
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	58e3      	ldr	r3, [r4, r3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <USBD_CDC_DeInit+0x48>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003538:	23af      	movs	r3, #175	; 0xaf
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	58e3      	ldr	r3, [r4, r3]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003542:	25ae      	movs	r5, #174	; 0xae
 8003544:	00ad      	lsls	r5, r5, #2
 8003546:	5960      	ldr	r0, [r4, r5]
 8003548:	f001 f9d0 	bl	80048ec <USBD_static_free>
    pdev->pClassData = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	5163      	str	r3, [r4, r5]
}
 8003550:	2000      	movs	r0, #0
 8003552:	bd70      	pop	{r4, r5, r6, pc}

08003554 <USBD_CDC_Init>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003558:	7c03      	ldrb	r3, [r0, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13b      	bne.n	80035d6 <USBD_CDC_Init+0x82>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800355e:	2680      	movs	r6, #128	; 0x80
 8003560:	00b6      	lsls	r6, r6, #2
 8003562:	0033      	movs	r3, r6
 8003564:	2202      	movs	r2, #2
 8003566:	2181      	movs	r1, #129	; 0x81
 8003568:	f001 f959 	bl	800481e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800356c:	2501      	movs	r5, #1
 800356e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003570:	0033      	movs	r3, r6
 8003572:	2202      	movs	r2, #2
 8003574:	2101      	movs	r1, #1
 8003576:	0020      	movs	r0, r4
 8003578:	f001 f951 	bl	800481e <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800357c:	23b6      	movs	r3, #182	; 0xb6
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003582:	2308      	movs	r3, #8
 8003584:	2203      	movs	r2, #3
 8003586:	2182      	movs	r1, #130	; 0x82
 8003588:	0020      	movs	r0, r4
 800358a:	f001 f948 	bl	800481e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800358e:	2301      	movs	r3, #1
 8003590:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003592:	2087      	movs	r0, #135	; 0x87
 8003594:	0080      	lsls	r0, r0, #2
 8003596:	f001 f9a5 	bl	80048e4 <USBD_static_malloc>
 800359a:	0005      	movs	r5, r0
 800359c:	23ae      	movs	r3, #174	; 0xae
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d032      	beq.n	800360c <USBD_CDC_Init+0xb8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80035a6:	3304      	adds	r3, #4
 80035a8:	58e3      	ldr	r3, [r4, r3]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4798      	blx	r3
    hcdc->TxState = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	2285      	movs	r2, #133	; 0x85
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 80035b6:	3204      	adds	r2, #4
 80035b8:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035ba:	7c23      	ldrb	r3, [r4, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <USBD_CDC_Init+0xa4>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80035c0:	2381      	movs	r3, #129	; 0x81
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	58ea      	ldr	r2, [r5, r3]
 80035c6:	3bc5      	subs	r3, #197	; 0xc5
 80035c8:	3bff      	subs	r3, #255	; 0xff
 80035ca:	2101      	movs	r1, #1
 80035cc:	0020      	movs	r0, r4
 80035ce:	f001 f978 	bl	80048c2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80035d2:	2000      	movs	r0, #0
}
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	2202      	movs	r2, #2
 80035da:	2181      	movs	r1, #129	; 0x81
 80035dc:	f001 f91f 	bl	800481e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80035e0:	2501      	movs	r5, #1
 80035e2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	2202      	movs	r2, #2
 80035e8:	2101      	movs	r1, #1
 80035ea:	0020      	movs	r0, r4
 80035ec:	f001 f917 	bl	800481e <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80035f0:	23b6      	movs	r3, #182	; 0xb6
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	50e5      	str	r5, [r4, r3]
 80035f6:	e7c4      	b.n	8003582 <USBD_CDC_Init+0x2e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80035f8:	3380      	adds	r3, #128	; 0x80
 80035fa:	3a14      	subs	r2, #20
 80035fc:	58aa      	ldr	r2, [r5, r2]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	2101      	movs	r1, #1
 8003602:	0020      	movs	r0, r4
 8003604:	f001 f95d 	bl	80048c2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003608:	2000      	movs	r0, #0
 800360a:	e7e3      	b.n	80035d4 <USBD_CDC_Init+0x80>
    ret = 1U;
 800360c:	2001      	movs	r0, #1
 800360e:	e7e1      	b.n	80035d4 <USBD_CDC_Init+0x80>

08003610 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003610:	2900      	cmp	r1, #0
 8003612:	d004      	beq.n	800361e <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8003614:	23af      	movs	r3, #175	; 0xaf
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 800361a:	2000      	movs	r0, #0
  }

  return ret;
}
 800361c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800361e:	2002      	movs	r0, #2
 8003620:	e7fc      	b.n	800361c <USBD_CDC_RegisterInterface+0xc>

08003622 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003622:	23ae      	movs	r3, #174	; 0xae
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8003628:	2082      	movs	r0, #130	; 0x82
 800362a:	0080      	lsls	r0, r0, #2
 800362c:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 800362e:	2184      	movs	r1, #132	; 0x84
 8003630:	0089      	lsls	r1, r1, #2
 8003632:	505a      	str	r2, [r3, r1]

  return USBD_OK;
}
 8003634:	2000      	movs	r0, #0
 8003636:	4770      	bx	lr

08003638 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003638:	23ae      	movs	r3, #174	; 0xae
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	58c2      	ldr	r2, [r0, r3]

  hcdc->RxBuffer = pbuff;
 800363e:	3bb4      	subs	r3, #180	; 0xb4
 8003640:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
}
 8003642:	2000      	movs	r0, #0
 8003644:	4770      	bx	lr

08003646 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8003646:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003648:	23ae      	movs	r3, #174	; 0xae
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	58c2      	ldr	r2, [r0, r3]

  if (pdev->pClassData != NULL)
 800364e:	2a00      	cmp	r2, #0
 8003650:	d017      	beq.n	8003682 <USBD_CDC_TransmitPacket+0x3c>
  {
    if (hcdc->TxState == 0U)
 8003652:	3ba4      	subs	r3, #164	; 0xa4
 8003654:	58d1      	ldr	r1, [r2, r3]

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003656:	2301      	movs	r3, #1
    if (hcdc->TxState == 0U)
 8003658:	2900      	cmp	r1, #0
 800365a:	d001      	beq.n	8003660 <USBD_CDC_TransmitPacket+0x1a>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800365c:	0018      	movs	r0, r3
 800365e:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1U;
 8003660:	2385      	movs	r3, #133	; 0x85
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3101      	adds	r1, #1
 8003666:	50d1      	str	r1, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003668:	3b04      	subs	r3, #4
 800366a:	58d1      	ldr	r1, [r2, r3]
 800366c:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800366e:	5ad3      	ldrh	r3, [r2, r3]
 8003670:	2182      	movs	r1, #130	; 0x82
 8003672:	0089      	lsls	r1, r1, #2
 8003674:	5852      	ldr	r2, [r2, r1]
 8003676:	3988      	subs	r1, #136	; 0x88
 8003678:	39ff      	subs	r1, #255	; 0xff
 800367a:	f001 f919 	bl	80048b0 <USBD_LL_Transmit>
      return USBD_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e7ec      	b.n	800365c <USBD_CDC_TransmitPacket+0x16>
    return USBD_FAIL;
 8003682:	2302      	movs	r3, #2
 8003684:	e7ea      	b.n	800365c <USBD_CDC_TransmitPacket+0x16>

08003686 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003686:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003688:	23ae      	movs	r3, #174	; 0xae
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	58c2      	ldr	r2, [r0, r3]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800368e:	2a00      	cmp	r2, #0
 8003690:	d016      	beq.n	80036c0 <USBD_CDC_ReceivePacket+0x3a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003692:	7c03      	ldrb	r3, [r0, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <USBD_CDC_ReceivePacket+0x26>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003698:	2381      	movs	r3, #129	; 0x81
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	58d2      	ldr	r2, [r2, r3]
 800369e:	3bc5      	subs	r3, #197	; 0xc5
 80036a0:	3bff      	subs	r3, #255	; 0xff
 80036a2:	2101      	movs	r1, #1
 80036a4:	f001 f90d 	bl	80048c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80036a8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80036aa:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80036ac:	3380      	adds	r3, #128	; 0x80
 80036ae:	2181      	movs	r1, #129	; 0x81
 80036b0:	0089      	lsls	r1, r1, #2
 80036b2:	5852      	ldr	r2, [r2, r1]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	2101      	movs	r1, #1
 80036b8:	f001 f903 	bl	80048c2 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80036bc:	2000      	movs	r0, #0
 80036be:	e7f4      	b.n	80036aa <USBD_CDC_ReceivePacket+0x24>
    return USBD_FAIL;
 80036c0:	2002      	movs	r0, #2
 80036c2:	e7f2      	b.n	80036aa <USBD_CDC_ReceivePacket+0x24>

080036c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80036c4:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d016      	beq.n	80036f8 <USBD_Init+0x34>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80036ca:	23ad      	movs	r3, #173	; 0xad
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	58c3      	ldr	r3, [r0, r3]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 80036d4:	23ad      	movs	r3, #173	; 0xad
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	2400      	movs	r4, #0
 80036da:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80036dc:	2900      	cmp	r1, #0
 80036de:	d002      	beq.n	80036e6 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 80036e0:	23ac      	movs	r3, #172	; 0xac
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80036e6:	23a7      	movs	r3, #167	; 0xa7
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	2101      	movs	r1, #1
 80036ec:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80036ee:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80036f0:	f001 f84a 	bl	8004788 <USBD_LL_Init>

  return USBD_OK;
 80036f4:	2000      	movs	r0, #0
}
 80036f6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80036f8:	2002      	movs	r0, #2
 80036fa:	e7fc      	b.n	80036f6 <USBD_Init+0x32>

080036fc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d004      	beq.n	800370a <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003700:	23ad      	movs	r3, #173	; 0xad
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8003706:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 8003708:	4770      	bx	lr
    status = USBD_FAIL;
 800370a:	2002      	movs	r0, #2
 800370c:	e7fc      	b.n	8003708 <USBD_RegisterClass+0xc>

0800370e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800370e:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003710:	f001 f87c 	bl	800480c <USBD_LL_Start>

  return USBD_OK;
}
 8003714:	2000      	movs	r0, #0
 8003716:	bd10      	pop	{r4, pc}

08003718 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003718:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800371a:	23ad      	movs	r3, #173	; 0xad
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	58c3      	ldr	r3, [r0, r3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4798      	blx	r3
    {
      ret = USBD_OK;
 8003728:	1e43      	subs	r3, r0, #1
 800372a:	4198      	sbcs	r0, r3
 800372c:	0040      	lsls	r0, r0, #1
    }
  }

  return ret;
}
 800372e:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003730:	2002      	movs	r0, #2
 8003732:	e7fc      	b.n	800372e <USBD_SetClassConfig+0x16>

08003734 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003734:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003736:	23ad      	movs	r3, #173	; 0xad
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	58c3      	ldr	r3, [r0, r3]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4798      	blx	r3

  return USBD_OK;
}
 8003740:	2000      	movs	r0, #0
 8003742:	bd10      	pop	{r4, pc}

08003744 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003748:	23aa      	movs	r3, #170	; 0xaa
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18c5      	adds	r5, r0, r3
 800374e:	0028      	movs	r0, r5
 8003750:	f000 f94c 	bl	80039ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003754:	23a5      	movs	r3, #165	; 0xa5
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	2201      	movs	r2, #1
 800375a:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <USBD_LL_SetupStage+0x60>)
 800375e:	5ae2      	ldrh	r2, [r4, r3]
 8003760:	3b16      	subs	r3, #22
 8003762:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003764:	3310      	adds	r3, #16
 8003766:	5ce1      	ldrb	r1, [r4, r3]
 8003768:	231f      	movs	r3, #31
 800376a:	400b      	ands	r3, r1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d00f      	beq.n	8003790 <USBD_LL_SetupStage+0x4c>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <USBD_LL_SetupStage+0x40>
 8003774:	2b02      	cmp	r3, #2
 8003776:	d010      	beq.n	800379a <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003778:	237f      	movs	r3, #127	; 0x7f
 800377a:	4399      	bics	r1, r3
 800377c:	0020      	movs	r0, r4
 800377e:	f001 f863 	bl	8004848 <USBD_LL_StallEP>
      break;
 8003782:	e003      	b.n	800378c <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8003784:	0029      	movs	r1, r5
 8003786:	0020      	movs	r0, r4
 8003788:	f000 f94e 	bl	8003a28 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800378c:	2000      	movs	r0, #0
 800378e:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003790:	0029      	movs	r1, r5
 8003792:	0020      	movs	r0, r4
 8003794:	f000 fb32 	bl	8003dfc <USBD_StdItfReq>
      break;
 8003798:	e7f8      	b.n	800378c <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 800379a:	0029      	movs	r1, r5
 800379c:	0020      	movs	r0, r4
 800379e:	f000 fb60 	bl	8003e62 <USBD_StdEPReq>
      break;
 80037a2:	e7f3      	b.n	800378c <USBD_LL_SetupStage+0x48>
 80037a4:	000002ae 	.word	0x000002ae

080037a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80037a8:	b510      	push	{r4, lr}
 80037aa:	0004      	movs	r4, r0
 80037ac:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d13a      	bne.n	8003828 <USBD_LL_DataOutStage+0x80>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80037b2:	23a5      	movs	r3, #165	; 0xa5
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	58e3      	ldr	r3, [r4, r3]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d00c      	beq.n	80037d6 <USBD_LL_DataOutStage+0x2e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80037bc:	2000      	movs	r0, #0
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d140      	bne.n	8003844 <USBD_LL_DataOutStage+0x9c>
        pdev->ep0_state = USBD_EP0_IDLE;
 80037c2:	23a5      	movs	r3, #165	; 0xa5
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	2200      	movs	r2, #0
 80037c8:	50e2      	str	r2, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 80037ca:	2100      	movs	r1, #0
 80037cc:	0020      	movs	r0, r4
 80037ce:	f001 f83b 	bl	8004848 <USBD_LL_StallEP>
  return USBD_OK;
 80037d2:	2000      	movs	r0, #0
 80037d4:	e036      	b.n	8003844 <USBD_LL_DataOutStage+0x9c>
      if (pep->rem_length > pep->maxpacket)
 80037d6:	0022      	movs	r2, r4
 80037d8:	3255      	adds	r2, #85	; 0x55
 80037da:	32ff      	adds	r2, #255	; 0xff
 80037dc:	68d3      	ldr	r3, [r2, #12]
 80037de:	6912      	ldr	r2, [r2, #16]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d90f      	bls.n	8003804 <USBD_LL_DataOutStage+0x5c>
        pep->rem_length -= pep->maxpacket;
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	0021      	movs	r1, r4
 80037e8:	3155      	adds	r1, #85	; 0x55
 80037ea:	31ff      	adds	r1, #255	; 0xff
 80037ec:	60cb      	str	r3, [r1, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d906      	bls.n	8003800 <USBD_LL_DataOutStage+0x58>
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	0001      	movs	r1, r0
 80037f6:	0020      	movs	r0, r4
 80037f8:	f000 fc59 	bl	80040ae <USBD_CtlContinueRx>
  return USBD_OK;
 80037fc:	2000      	movs	r0, #0
 80037fe:	e021      	b.n	8003844 <USBD_LL_DataOutStage+0x9c>
        USBD_CtlContinueRx(pdev, pdata,
 8003800:	b292      	uxth	r2, r2
 8003802:	e7f7      	b.n	80037f4 <USBD_LL_DataOutStage+0x4c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003804:	23ad      	movs	r3, #173	; 0xad
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	58e3      	ldr	r3, [r4, r3]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <USBD_LL_DataOutStage+0x76>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003810:	22a7      	movs	r2, #167	; 0xa7
 8003812:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003814:	5ca2      	ldrb	r2, [r4, r2]
 8003816:	2a03      	cmp	r2, #3
 8003818:	d101      	bne.n	800381e <USBD_LL_DataOutStage+0x76>
          pdev->pClass->EP0_RxReady(pdev);
 800381a:	0020      	movs	r0, r4
 800381c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800381e:	0020      	movs	r0, r4
 8003820:	f000 fc4d 	bl	80040be <USBD_CtlSendStatus>
  return USBD_OK;
 8003824:	2000      	movs	r0, #0
 8003826:	e00d      	b.n	8003844 <USBD_LL_DataOutStage+0x9c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003828:	23ad      	movs	r3, #173	; 0xad
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	58e3      	ldr	r3, [r4, r3]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <USBD_LL_DataOutStage+0x9e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003834:	22a7      	movs	r2, #167	; 0xa7
 8003836:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003838:	5ca2      	ldrb	r2, [r4, r2]
 800383a:	2a03      	cmp	r2, #3
 800383c:	d105      	bne.n	800384a <USBD_LL_DataOutStage+0xa2>
    pdev->pClass->DataOut(pdev, epnum);
 800383e:	0020      	movs	r0, r4
 8003840:	4798      	blx	r3
  return USBD_OK;
 8003842:	2000      	movs	r0, #0
}
 8003844:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003846:	2002      	movs	r0, #2
 8003848:	e7fc      	b.n	8003844 <USBD_LL_DataOutStage+0x9c>
 800384a:	2002      	movs	r0, #2
 800384c:	e7fa      	b.n	8003844 <USBD_LL_DataOutStage+0x9c>

0800384e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800384e:	b570      	push	{r4, r5, r6, lr}
 8003850:	0004      	movs	r4, r0
 8003852:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003854:	2900      	cmp	r1, #0
 8003856:	d159      	bne.n	800390c <USBD_LL_DataInStage+0xbe>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003858:	23a5      	movs	r3, #165	; 0xa5
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	58e3      	ldr	r3, [r4, r3]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d011      	beq.n	8003886 <USBD_LL_DataInStage+0x38>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003862:	2204      	movs	r2, #4
 8003864:	4393      	bics	r3, r2
 8003866:	d103      	bne.n	8003870 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	0020      	movs	r0, r4
 800386c:	f000 ffec 	bl	8004848 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003870:	23a8      	movs	r3, #168	; 0xa8
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	5ce3      	ldrb	r3, [r4, r3]
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003876:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8003878:	2b01      	cmp	r3, #1
 800387a:	d155      	bne.n	8003928 <USBD_LL_DataInStage+0xda>
      pdev->dev_test_mode = 0U;
 800387c:	23a8      	movs	r3, #168	; 0xa8
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	2200      	movs	r2, #0
 8003882:	54e2      	strb	r2, [r4, r3]
 8003884:	e050      	b.n	8003928 <USBD_LL_DataInStage+0xda>
      if (pep->rem_length > pep->maxpacket)
 8003886:	6a22      	ldr	r2, [r4, #32]
 8003888:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800388a:	42aa      	cmp	r2, r5
 800388c:	d822      	bhi.n	80038d4 <USBD_LL_DataInStage+0x86>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800388e:	69e6      	ldr	r6, [r4, #28]
 8003890:	0029      	movs	r1, r5
 8003892:	0030      	movs	r0, r6
 8003894:	f7fc fcbe 	bl	8000214 <__aeabi_uidivmod>
 8003898:	2900      	cmp	r1, #0
 800389a:	d106      	bne.n	80038aa <USBD_LL_DataInStage+0x5c>
 800389c:	42b5      	cmp	r5, r6
 800389e:	d804      	bhi.n	80038aa <USBD_LL_DataInStage+0x5c>
            (pep->total_length < pdev->ep0_data_len))
 80038a0:	23a6      	movs	r3, #166	; 0xa6
 80038a2:	009b      	lsls	r3, r3, #2
            (pep->total_length >= pep->maxpacket) &&
 80038a4:	58e3      	ldr	r3, [r4, r3]
 80038a6:	429e      	cmp	r6, r3
 80038a8:	d322      	bcc.n	80038f0 <USBD_LL_DataInStage+0xa2>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80038aa:	23ad      	movs	r3, #173	; 0xad
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	58e3      	ldr	r3, [r4, r3]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <USBD_LL_DataInStage+0x76>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80038b6:	22a7      	movs	r2, #167	; 0xa7
 80038b8:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80038ba:	5ca2      	ldrb	r2, [r4, r2]
 80038bc:	2a03      	cmp	r2, #3
 80038be:	d101      	bne.n	80038c4 <USBD_LL_DataInStage+0x76>
            pdev->pClass->EP0_TxSent(pdev);
 80038c0:	0020      	movs	r0, r4
 80038c2:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0020      	movs	r0, r4
 80038c8:	f000 ffbe 	bl	8004848 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80038cc:	0020      	movs	r0, r4
 80038ce:	f000 fc02 	bl	80040d6 <USBD_CtlReceiveStatus>
 80038d2:	e7cd      	b.n	8003870 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80038d4:	1b52      	subs	r2, r2, r5
 80038d6:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80038d8:	b292      	uxth	r2, r2
 80038da:	0001      	movs	r1, r0
 80038dc:	0020      	movs	r0, r4
 80038de:	f000 fbcd 	bl	800407c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80038e2:	2300      	movs	r3, #0
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	0020      	movs	r0, r4
 80038ea:	f000 ffea 	bl	80048c2 <USBD_LL_PrepareReceive>
 80038ee:	e7bf      	b.n	8003870 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80038f0:	2200      	movs	r2, #0
 80038f2:	0020      	movs	r0, r4
 80038f4:	f000 fbc2 	bl	800407c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80038f8:	23a6      	movs	r3, #166	; 0xa6
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	2200      	movs	r2, #0
 80038fe:	50e2      	str	r2, [r4, r3]
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003900:	2300      	movs	r3, #0
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f000 ffdc 	bl	80048c2 <USBD_LL_PrepareReceive>
 800390a:	e7b1      	b.n	8003870 <USBD_LL_DataInStage+0x22>
  else if ((pdev->pClass->DataIn != NULL) &&
 800390c:	23ad      	movs	r3, #173	; 0xad
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	58e3      	ldr	r3, [r4, r3]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <USBD_LL_DataInStage+0xdc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003918:	22a7      	movs	r2, #167	; 0xa7
 800391a:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 800391c:	5ca2      	ldrb	r2, [r4, r2]
 800391e:	2a03      	cmp	r2, #3
 8003920:	d105      	bne.n	800392e <USBD_LL_DataInStage+0xe0>
    pdev->pClass->DataIn(pdev, epnum);
 8003922:	0020      	movs	r0, r4
 8003924:	4798      	blx	r3
  return USBD_OK;
 8003926:	2000      	movs	r0, #0
}
 8003928:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800392a:	2002      	movs	r0, #2
 800392c:	e7fc      	b.n	8003928 <USBD_LL_DataInStage+0xda>
 800392e:	2002      	movs	r0, #2
 8003930:	e7fa      	b.n	8003928 <USBD_LL_DataInStage+0xda>

08003932 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003932:	b570      	push	{r4, r5, r6, lr}
 8003934:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003936:	2340      	movs	r3, #64	; 0x40
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	f000 ff6f 	bl	800481e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003940:	2501      	movs	r5, #1
 8003942:	23ac      	movs	r3, #172	; 0xac
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	50e5      	str	r5, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003948:	2640      	movs	r6, #64	; 0x40
 800394a:	330c      	adds	r3, #12
 800394c:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800394e:	3b25      	subs	r3, #37	; 0x25
 8003950:	3bff      	subs	r3, #255	; 0xff
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	0020      	movs	r0, r4
 8003958:	f000 ff61 	bl	800481e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800395c:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800395e:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003960:	23a7      	movs	r3, #167	; 0xa7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003966:	2300      	movs	r3, #0
 8003968:	22a5      	movs	r2, #165	; 0xa5
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
 800396e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003970:	3210      	adds	r2, #16
 8003972:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 8003974:	23ae      	movs	r3, #174	; 0xae
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	58e3      	ldr	r3, [r4, r3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800397e:	23ad      	movs	r3, #173	; 0xad
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	58e3      	ldr	r3, [r4, r3]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2100      	movs	r1, #0
 8003988:	0020      	movs	r0, r4
 800398a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800398c:	2000      	movs	r0, #0
 800398e:	bd70      	pop	{r4, r5, r6, pc}

08003990 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003990:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003992:	2000      	movs	r0, #0
 8003994:	4770      	bx	lr
	...

08003998 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003998:	23a7      	movs	r3, #167	; 0xa7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	5cc1      	ldrb	r1, [r0, r3]
 800399e:	4a03      	ldr	r2, [pc, #12]	; (80039ac <USBD_LL_Suspend+0x14>)
 80039a0:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80039a2:	2204      	movs	r2, #4
 80039a4:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 80039a6:	2000      	movs	r0, #0
 80039a8:	4770      	bx	lr
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	0000029d 	.word	0x0000029d

080039b0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80039b0:	23a7      	movs	r3, #167	; 0xa7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	5cc3      	ldrb	r3, [r0, r3]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d001      	beq.n	80039be <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80039ba:	2000      	movs	r0, #0
 80039bc:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80039be:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <USBD_LL_Resume+0x18>)
 80039c0:	5cc2      	ldrb	r2, [r0, r3]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	54c2      	strb	r2, [r0, r3]
 80039c6:	e7f8      	b.n	80039ba <USBD_LL_Resume+0xa>
 80039c8:	0000029d 	.word	0x0000029d

080039cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80039cc:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039ce:	23a7      	movs	r3, #167	; 0xa7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	5cc3      	ldrb	r3, [r0, r3]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d001      	beq.n	80039dc <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80039d8:	2000      	movs	r0, #0
 80039da:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 80039dc:	23ad      	movs	r3, #173	; 0xad
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	58c3      	ldr	r3, [r0, r3]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f7      	beq.n	80039d8 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80039e8:	4798      	blx	r3
 80039ea:	e7f5      	b.n	80039d8 <USBD_LL_SOF+0xc>

080039ec <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 80039ec:	780b      	ldrb	r3, [r1, #0]
 80039ee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80039f0:	784b      	ldrb	r3, [r1, #1]
 80039f2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80039f4:	78ca      	ldrb	r2, [r1, #3]
 80039f6:	0212      	lsls	r2, r2, #8
 80039f8:	788b      	ldrb	r3, [r1, #2]
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80039fe:	794a      	ldrb	r2, [r1, #5]
 8003a00:	0212      	lsls	r2, r2, #8
 8003a02:	790b      	ldrb	r3, [r1, #4]
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003a08:	79ca      	ldrb	r2, [r1, #7]
 8003a0a:	0212      	lsls	r2, r2, #8
 8003a0c:	798b      	ldrb	r3, [r1, #6]
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	80c3      	strh	r3, [r0, #6]

}
 8003a12:	4770      	bx	lr

08003a14 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8003a14:	b510      	push	{r4, lr}
 8003a16:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	f000 ff15 	bl	8004848 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	0020      	movs	r0, r4
 8003a22:	f000 ff11 	bl	8004848 <USBD_LL_StallEP>
}
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <USBD_StdDevReq>:
{
 8003a28:	b530      	push	{r4, r5, lr}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	0005      	movs	r5, r0
 8003a2e:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a30:	780a      	ldrb	r2, [r1, #0]
 8003a32:	2360      	movs	r3, #96	; 0x60
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d006      	beq.n	8003a48 <USBD_StdDevReq+0x20>
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d004      	beq.n	8003a48 <USBD_StdDevReq+0x20>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 8003a42:	f7ff ffe7 	bl	8003a14 <USBD_CtlError>
      break;
 8003a46:	e006      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8003a48:	23ad      	movs	r3, #173	; 0xad
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	58eb      	ldr	r3, [r5, r3]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	0021      	movs	r1, r4
 8003a52:	0028      	movs	r0, r5
 8003a54:	4798      	blx	r3
}
 8003a56:	2000      	movs	r0, #0
 8003a58:	b003      	add	sp, #12
 8003a5a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8003a5c:	784b      	ldrb	r3, [r1, #1]
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	d900      	bls.n	8003a64 <USBD_StdDevReq+0x3c>
 8003a62:	e1c5      	b.n	8003df0 <USBD_StdDevReq+0x3c8>
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4abe      	ldr	r2, [pc, #760]	; (8003d60 <USBD_StdDevReq+0x338>)
 8003a68:	58d3      	ldr	r3, [r2, r3]
 8003a6a:	469f      	mov	pc, r3
  uint16_t len = 0U;
 8003a6c:	466b      	mov	r3, sp
 8003a6e:	2200      	movs	r2, #0
 8003a70:	80da      	strh	r2, [r3, #6]
  switch (req->wValue >> 8)
 8003a72:	884a      	ldrh	r2, [r1, #2]
 8003a74:	0a13      	lsrs	r3, r2, #8
 8003a76:	b299      	uxth	r1, r3
 8003a78:	2907      	cmp	r1, #7
 8003a7a:	d900      	bls.n	8003a7e <USBD_StdDevReq+0x56>
 8003a7c:	e0b5      	b.n	8003bea <USBD_StdDevReq+0x1c2>
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	49b8      	ldr	r1, [pc, #736]	; (8003d64 <USBD_StdDevReq+0x33c>)
 8003a82:	58cb      	ldr	r3, [r1, r3]
 8003a84:	469f      	mov	pc, r3
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a86:	7c00      	ldrb	r0, [r0, #16]
 8003a88:	23ac      	movs	r3, #172	; 0xac
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	58eb      	ldr	r3, [r5, r3]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	466a      	mov	r2, sp
 8003a92:	1d91      	adds	r1, r2, #6
 8003a94:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003a96:	466b      	mov	r3, sp
 8003a98:	3306      	adds	r3, #6
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d100      	bne.n	8003aa2 <USBD_StdDevReq+0x7a>
 8003aa0:	e0b3      	b.n	8003c0a <USBD_StdDevReq+0x1e2>
 8003aa2:	88e2      	ldrh	r2, [r4, #6]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d000      	beq.n	8003aaa <USBD_StdDevReq+0x82>
 8003aa8:	e0a4      	b.n	8003bf4 <USBD_StdDevReq+0x1cc>
      (void)USBD_CtlSendStatus(pdev);
 8003aaa:	0028      	movs	r0, r5
 8003aac:	f000 fb07 	bl	80040be <USBD_CtlSendStatus>
 8003ab0:	e7d1      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ab2:	7c03      	ldrb	r3, [r0, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <USBD_StdDevReq+0xa4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003ab8:	23ad      	movs	r3, #173	; 0xad
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	58c3      	ldr	r3, [r0, r3]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	466a      	mov	r2, sp
 8003ac2:	1d90      	adds	r0, r2, #6
 8003ac4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	7043      	strb	r3, [r0, #1]
 8003aca:	e7e4      	b.n	8003a96 <USBD_StdDevReq+0x6e>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003acc:	23ad      	movs	r3, #173	; 0xad
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	58c3      	ldr	r3, [r0, r3]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	466a      	mov	r2, sp
 8003ad6:	1d90      	adds	r0, r2, #6
 8003ad8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003ada:	2302      	movs	r3, #2
 8003adc:	7043      	strb	r3, [r0, #1]
 8003ade:	e7da      	b.n	8003a96 <USBD_StdDevReq+0x6e>
      switch ((uint8_t)(req->wValue))
 8003ae0:	b2d3      	uxtb	r3, r2
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	d85d      	bhi.n	8003ba2 <USBD_StdDevReq+0x17a>
 8003ae6:	009a      	lsls	r2, r3, #2
 8003ae8:	4b9f      	ldr	r3, [pc, #636]	; (8003d68 <USBD_StdDevReq+0x340>)
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	469f      	mov	pc, r3
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003aee:	23ac      	movs	r3, #172	; 0xac
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	58c3      	ldr	r3, [r0, r3]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <USBD_StdDevReq+0xdc>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003afa:	7c00      	ldrb	r0, [r0, #16]
 8003afc:	466a      	mov	r2, sp
 8003afe:	1d91      	adds	r1, r2, #6
 8003b00:	4798      	blx	r3
 8003b02:	e7c8      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b04:	0021      	movs	r1, r4
 8003b06:	f7ff ff85 	bl	8003a14 <USBD_CtlError>
 8003b0a:	e7a4      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003b0c:	23ac      	movs	r3, #172	; 0xac
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	58c3      	ldr	r3, [r0, r3]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003b18:	7c00      	ldrb	r0, [r0, #16]
 8003b1a:	466a      	mov	r2, sp
 8003b1c:	1d91      	adds	r1, r2, #6
 8003b1e:	4798      	blx	r3
 8003b20:	e7b9      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b22:	0021      	movs	r1, r4
 8003b24:	f7ff ff76 	bl	8003a14 <USBD_CtlError>
 8003b28:	e795      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003b2a:	23ac      	movs	r3, #172	; 0xac
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	58c3      	ldr	r3, [r0, r3]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <USBD_StdDevReq+0x118>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003b36:	7c00      	ldrb	r0, [r0, #16]
 8003b38:	466a      	mov	r2, sp
 8003b3a:	1d91      	adds	r1, r2, #6
 8003b3c:	4798      	blx	r3
 8003b3e:	e7aa      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b40:	0021      	movs	r1, r4
 8003b42:	f7ff ff67 	bl	8003a14 <USBD_CtlError>
 8003b46:	e786      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003b48:	23ac      	movs	r3, #172	; 0xac
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	58c3      	ldr	r3, [r0, r3]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <USBD_StdDevReq+0x136>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003b54:	7c00      	ldrb	r0, [r0, #16]
 8003b56:	466a      	mov	r2, sp
 8003b58:	1d91      	adds	r1, r2, #6
 8003b5a:	4798      	blx	r3
 8003b5c:	e79b      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b5e:	0021      	movs	r1, r4
 8003b60:	f7ff ff58 	bl	8003a14 <USBD_CtlError>
 8003b64:	e777      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003b66:	23ac      	movs	r3, #172	; 0xac
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	58c3      	ldr	r3, [r0, r3]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <USBD_StdDevReq+0x154>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003b72:	7c00      	ldrb	r0, [r0, #16]
 8003b74:	466a      	mov	r2, sp
 8003b76:	1d91      	adds	r1, r2, #6
 8003b78:	4798      	blx	r3
 8003b7a:	e78c      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b7c:	0021      	movs	r1, r4
 8003b7e:	f7ff ff49 	bl	8003a14 <USBD_CtlError>
 8003b82:	e768      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b84:	23ac      	movs	r3, #172	; 0xac
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	58c3      	ldr	r3, [r0, r3]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <USBD_StdDevReq+0x172>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b90:	7c00      	ldrb	r0, [r0, #16]
 8003b92:	466a      	mov	r2, sp
 8003b94:	1d91      	adds	r1, r2, #6
 8003b96:	4798      	blx	r3
 8003b98:	e77d      	b.n	8003a96 <USBD_StdDevReq+0x6e>
            USBD_CtlError(pdev, req);
 8003b9a:	0021      	movs	r1, r4
 8003b9c:	f7ff ff3a 	bl	8003a14 <USBD_CtlError>
 8003ba0:	e759      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	f7ff ff36 	bl	8003a14 <USBD_CtlError>
 8003ba8:	e755      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003baa:	7c03      	ldrb	r3, [r0, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <USBD_StdDevReq+0x198>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003bb0:	23ad      	movs	r3, #173	; 0xad
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	58c3      	ldr	r3, [r0, r3]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	466a      	mov	r2, sp
 8003bba:	1d90      	adds	r0, r2, #6
 8003bbc:	4798      	blx	r3
 8003bbe:	e76a      	b.n	8003a96 <USBD_StdDevReq+0x6e>
        USBD_CtlError(pdev, req);
 8003bc0:	0021      	movs	r1, r4
 8003bc2:	f7ff ff27 	bl	8003a14 <USBD_CtlError>
 8003bc6:	e746      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bc8:	7c03      	ldrb	r3, [r0, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <USBD_StdDevReq+0x1ba>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003bce:	23ad      	movs	r3, #173	; 0xad
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	58c3      	ldr	r3, [r0, r3]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	466a      	mov	r2, sp
 8003bd8:	1d90      	adds	r0, r2, #6
 8003bda:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003bdc:	2307      	movs	r3, #7
 8003bde:	7043      	strb	r3, [r0, #1]
 8003be0:	e759      	b.n	8003a96 <USBD_StdDevReq+0x6e>
        USBD_CtlError(pdev, req);
 8003be2:	0021      	movs	r1, r4
 8003be4:	f7ff ff16 	bl	8003a14 <USBD_CtlError>
 8003be8:	e735      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003bea:	0021      	movs	r1, r4
 8003bec:	0028      	movs	r0, r5
 8003bee:	f7ff ff11 	bl	8003a14 <USBD_CtlError>
 8003bf2:	e730      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      len = MIN(len, req->wLength);
 8003bf4:	1c19      	adds	r1, r3, #0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d900      	bls.n	8003bfc <USBD_StdDevReq+0x1d4>
 8003bfa:	1c11      	adds	r1, r2, #0
 8003bfc:	b28a      	uxth	r2, r1
 8003bfe:	466b      	mov	r3, sp
 8003c00:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003c02:	0001      	movs	r1, r0
 8003c04:	0028      	movs	r0, r5
 8003c06:	f000 fa2b 	bl	8004060 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003c0a:	88e3      	ldrh	r3, [r4, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d000      	beq.n	8003c12 <USBD_StdDevReq+0x1ea>
 8003c10:	e721      	b.n	8003a56 <USBD_StdDevReq+0x2e>
 8003c12:	e74a      	b.n	8003aaa <USBD_StdDevReq+0x82>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003c14:	888b      	ldrh	r3, [r1, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d123      	bne.n	8003c62 <USBD_StdDevReq+0x23a>
 8003c1a:	88cb      	ldrh	r3, [r1, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d120      	bne.n	8003c62 <USBD_StdDevReq+0x23a>
 8003c20:	884b      	ldrh	r3, [r1, #2]
 8003c22:	2b7f      	cmp	r3, #127	; 0x7f
 8003c24:	d81d      	bhi.n	8003c62 <USBD_StdDevReq+0x23a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c26:	22a7      	movs	r2, #167	; 0xa7
 8003c28:	0092      	lsls	r2, r2, #2
 8003c2a:	5c82      	ldrb	r2, [r0, r2]
 8003c2c:	2a03      	cmp	r2, #3
 8003c2e:	d010      	beq.n	8003c52 <USBD_StdDevReq+0x22a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003c30:	247f      	movs	r4, #127	; 0x7f
 8003c32:	401c      	ands	r4, r3
      pdev->dev_address = dev_addr;
 8003c34:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <USBD_StdDevReq+0x344>)
 8003c36:	54c4      	strb	r4, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003c38:	0021      	movs	r1, r4
 8003c3a:	f000 fe30 	bl	800489e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003c3e:	0028      	movs	r0, r5
 8003c40:	f000 fa3d 	bl	80040be <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003c44:	2c00      	cmp	r4, #0
 8003c46:	d007      	beq.n	8003c58 <USBD_StdDevReq+0x230>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c48:	23a7      	movs	r3, #167	; 0xa7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	54ea      	strb	r2, [r5, r3]
 8003c50:	e701      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003c52:	f7ff fedf 	bl	8003a14 <USBD_CtlError>
 8003c56:	e6fe      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003c58:	23a7      	movs	r3, #167	; 0xa7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	54ea      	strb	r2, [r5, r3]
 8003c60:	e6f9      	b.n	8003a56 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003c62:	0021      	movs	r1, r4
 8003c64:	0028      	movs	r0, r5
 8003c66:	f7ff fed5 	bl	8003a14 <USBD_CtlError>
 8003c6a:	e6f4      	b.n	8003a56 <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 8003c6c:	7889      	ldrb	r1, [r1, #2]
 8003c6e:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <USBD_StdDevReq+0x348>)
 8003c70:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003c72:	2901      	cmp	r1, #1
 8003c74:	d80f      	bhi.n	8003c96 <USBD_StdDevReq+0x26e>
    switch (pdev->dev_state)
 8003c76:	23a7      	movs	r3, #167	; 0xa7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	5cc3      	ldrb	r3, [r0, r3]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00e      	beq.n	8003c9e <USBD_StdDevReq+0x276>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d023      	beq.n	8003ccc <USBD_StdDevReq+0x2a4>
        USBD_CtlError(pdev, req);
 8003c84:	0021      	movs	r1, r4
 8003c86:	f7ff fec5 	bl	8003a14 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <USBD_StdDevReq+0x348>)
 8003c8c:	7819      	ldrb	r1, [r3, #0]
 8003c8e:	0028      	movs	r0, r5
 8003c90:	f7ff fd50 	bl	8003734 <USBD_ClrClassConfig>
 8003c94:	e6df      	b.n	8003a56 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003c96:	0021      	movs	r1, r4
 8003c98:	f7ff febc 	bl	8003a14 <USBD_CtlError>
 8003c9c:	e6db      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        if (cfgidx)
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	d011      	beq.n	8003cc6 <USBD_StdDevReq+0x29e>
          pdev->dev_config = cfgidx;
 8003ca2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003ca4:	23a7      	movs	r3, #167	; 0xa7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	2203      	movs	r2, #3
 8003caa:	54c2      	strb	r2, [r0, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003cac:	f7ff fd34 	bl	8003718 <USBD_SetClassConfig>
 8003cb0:	2802      	cmp	r0, #2
 8003cb2:	d003      	beq.n	8003cbc <USBD_StdDevReq+0x294>
          USBD_CtlSendStatus(pdev);
 8003cb4:	0028      	movs	r0, r5
 8003cb6:	f000 fa02 	bl	80040be <USBD_CtlSendStatus>
 8003cba:	e6cc      	b.n	8003a56 <USBD_StdDevReq+0x2e>
            USBD_CtlError(pdev, req);
 8003cbc:	0021      	movs	r1, r4
 8003cbe:	0028      	movs	r0, r5
 8003cc0:	f7ff fea8 	bl	8003a14 <USBD_CtlError>
 8003cc4:	e6c7      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          USBD_CtlSendStatus(pdev);
 8003cc6:	f000 f9fa 	bl	80040be <USBD_CtlSendStatus>
 8003cca:	e6c4      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        if (cfgidx == 0U)
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d011      	beq.n	8003cf4 <USBD_StdDevReq+0x2cc>
        else if (cfgidx != pdev->dev_config)
 8003cd0:	6843      	ldr	r3, [r0, #4]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	d01f      	beq.n	8003d16 <USBD_StdDevReq+0x2ee>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003cd6:	b2d9      	uxtb	r1, r3
 8003cd8:	f7ff fd2c 	bl	8003734 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <USBD_StdDevReq+0x348>)
 8003cde:	7819      	ldrb	r1, [r3, #0]
 8003ce0:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003ce2:	0028      	movs	r0, r5
 8003ce4:	f7ff fd18 	bl	8003718 <USBD_SetClassConfig>
 8003ce8:	2802      	cmp	r0, #2
 8003cea:	d00f      	beq.n	8003d0c <USBD_StdDevReq+0x2e4>
          USBD_CtlSendStatus(pdev);
 8003cec:	0028      	movs	r0, r5
 8003cee:	f000 f9e6 	bl	80040be <USBD_CtlSendStatus>
 8003cf2:	e6b0      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003cf4:	23a7      	movs	r3, #167	; 0xa7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	54c2      	strb	r2, [r0, r3]
          pdev->dev_config = cfgidx;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6043      	str	r3, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003d00:	f7ff fd18 	bl	8003734 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003d04:	0028      	movs	r0, r5
 8003d06:	f000 f9da 	bl	80040be <USBD_CtlSendStatus>
 8003d0a:	e6a4      	b.n	8003a56 <USBD_StdDevReq+0x2e>
            USBD_CtlError(pdev, req);
 8003d0c:	0021      	movs	r1, r4
 8003d0e:	0028      	movs	r0, r5
 8003d10:	f7ff fe80 	bl	8003a14 <USBD_CtlError>
 8003d14:	e69f      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          USBD_CtlSendStatus(pdev);
 8003d16:	f000 f9d2 	bl	80040be <USBD_CtlSendStatus>
 8003d1a:	e69c      	b.n	8003a56 <USBD_StdDevReq+0x2e>
  if (req->wLength != 1U)
 8003d1c:	88cb      	ldrh	r3, [r1, #6]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10e      	bne.n	8003d40 <USBD_StdDevReq+0x318>
    switch (pdev->dev_state)
 8003d22:	23a7      	movs	r3, #167	; 0xa7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	5cc3      	ldrb	r3, [r0, r3]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d014      	beq.n	8003d56 <USBD_StdDevReq+0x32e>
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	2a02      	cmp	r2, #2
 8003d30:	d909      	bls.n	8003d46 <USBD_StdDevReq+0x31e>
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10f      	bne.n	8003d56 <USBD_StdDevReq+0x32e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003d36:	1d01      	adds	r1, r0, #4
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f000 f991 	bl	8004060 <USBD_CtlSendData>
 8003d3e:	e68a      	b.n	8003a56 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8003d40:	f7ff fe68 	bl	8003a14 <USBD_CtlError>
 8003d44:	e687      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        pdev->dev_default_config = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003d4a:	0001      	movs	r1, r0
 8003d4c:	3108      	adds	r1, #8
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f000 f986 	bl	8004060 <USBD_CtlSendData>
 8003d54:	e67f      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 8003d56:	0021      	movs	r1, r4
 8003d58:	0028      	movs	r0, r5
 8003d5a:	f7ff fe5b 	bl	8003a14 <USBD_CtlError>
 8003d5e:	e67a      	b.n	8003a56 <USBD_StdDevReq+0x2e>
 8003d60:	08004d6c 	.word	0x08004d6c
 8003d64:	08004d94 	.word	0x08004d94
 8003d68:	08004db4 	.word	0x08004db4
 8003d6c:	0000029e 	.word	0x0000029e
 8003d70:	2000019c 	.word	0x2000019c
  switch (pdev->dev_state)
 8003d74:	23a7      	movs	r3, #167	; 0xa7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	5cc3      	ldrb	r3, [r0, r3]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d815      	bhi.n	8003dac <USBD_StdDevReq+0x384>
      if (req->wLength != 0x2U)
 8003d80:	88cb      	ldrh	r3, [r1, #6]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d10f      	bne.n	8003da6 <USBD_StdDevReq+0x37e>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003d86:	2301      	movs	r3, #1
 8003d88:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003d8a:	23a9      	movs	r3, #169	; 0xa9
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	58c3      	ldr	r3, [r0, r3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <USBD_StdDevReq+0x370>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003d94:	2303      	movs	r3, #3
 8003d96:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003d98:	0029      	movs	r1, r5
 8003d9a:	310c      	adds	r1, #12
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	0028      	movs	r0, r5
 8003da0:	f000 f95e 	bl	8004060 <USBD_CtlSendData>
 8003da4:	e657      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 8003da6:	f7ff fe35 	bl	8003a14 <USBD_CtlError>
 8003daa:	e654      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003dac:	f7ff fe32 	bl	8003a14 <USBD_CtlError>
 8003db0:	e651      	b.n	8003a56 <USBD_StdDevReq+0x2e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003db2:	884b      	ldrh	r3, [r1, #2]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d000      	beq.n	8003dba <USBD_StdDevReq+0x392>
 8003db8:	e64d      	b.n	8003a56 <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 8003dba:	23a9      	movs	r3, #169	; 0xa9
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	50c2      	str	r2, [r0, r3]
    USBD_CtlSendStatus(pdev);
 8003dc2:	f000 f97c 	bl	80040be <USBD_CtlSendStatus>
 8003dc6:	e646      	b.n	8003a56 <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 8003dc8:	23a7      	movs	r3, #167	; 0xa7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	5cc3      	ldrb	r3, [r0, r3]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d80a      	bhi.n	8003dea <USBD_StdDevReq+0x3c2>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003dd4:	884b      	ldrh	r3, [r1, #2]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d000      	beq.n	8003ddc <USBD_StdDevReq+0x3b4>
 8003dda:	e63c      	b.n	8003a56 <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 8003ddc:	23a9      	movs	r3, #169	; 0xa9
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	2200      	movs	r2, #0
 8003de2:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 8003de4:	f000 f96b 	bl	80040be <USBD_CtlSendStatus>
 8003de8:	e635      	b.n	8003a56 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8003dea:	f7ff fe13 	bl	8003a14 <USBD_CtlError>
 8003dee:	e632      	b.n	8003a56 <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 8003df0:	0021      	movs	r1, r4
 8003df2:	0028      	movs	r0, r5
 8003df4:	f7ff fe0e 	bl	8003a14 <USBD_CtlError>
          break;
 8003df8:	e62d      	b.n	8003a56 <USBD_StdDevReq+0x2e>
 8003dfa:	46c0      	nop			; (mov r8, r8)

08003dfc <USBD_StdItfReq>:
{
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	0005      	movs	r5, r0
 8003e00:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e02:	780a      	ldrb	r2, [r1, #0]
 8003e04:	2360      	movs	r3, #96	; 0x60
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d007      	beq.n	8003e1c <USBD_StdItfReq+0x20>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d005      	beq.n	8003e1c <USBD_StdItfReq+0x20>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8003e14:	f7ff fdfe 	bl	8003a14 <USBD_CtlError>
}
 8003e18:	2000      	movs	r0, #0
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8003e1c:	23a7      	movs	r3, #167	; 0xa7
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	5ceb      	ldrb	r3, [r5, r3]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d817      	bhi.n	8003e58 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003e28:	7923      	ldrb	r3, [r4, #4]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d80f      	bhi.n	8003e4e <USBD_StdItfReq+0x52>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e2e:	23ad      	movs	r3, #173	; 0xad
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	58eb      	ldr	r3, [r5, r3]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0021      	movs	r1, r4
 8003e38:	0028      	movs	r0, r5
 8003e3a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003e3c:	88e3      	ldrh	r3, [r4, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ea      	bne.n	8003e18 <USBD_StdItfReq+0x1c>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d1e8      	bne.n	8003e18 <USBD_StdItfReq+0x1c>
              USBD_CtlSendStatus(pdev);
 8003e46:	0028      	movs	r0, r5
 8003e48:	f000 f939 	bl	80040be <USBD_CtlSendStatus>
 8003e4c:	e7e4      	b.n	8003e18 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8003e4e:	0021      	movs	r1, r4
 8003e50:	0028      	movs	r0, r5
 8003e52:	f7ff fddf 	bl	8003a14 <USBD_CtlError>
 8003e56:	e7df      	b.n	8003e18 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8003e58:	0021      	movs	r1, r4
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	f7ff fdda 	bl	8003a14 <USBD_CtlError>
          break;
 8003e60:	e7da      	b.n	8003e18 <USBD_StdItfReq+0x1c>

08003e62 <USBD_StdEPReq>:
{
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e66:	780a      	ldrb	r2, [r1, #0]
 8003e68:	2360      	movs	r3, #96	; 0x60
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d006      	beq.n	8003e7e <USBD_StdEPReq+0x1c>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d004      	beq.n	8003e7e <USBD_StdEPReq+0x1c>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <USBD_StdEPReq+0x2c>
      USBD_CtlError(pdev, req);
 8003e78:	f7ff fdcc 	bl	8003a14 <USBD_CtlError>
      break;
 8003e7c:	e005      	b.n	8003e8a <USBD_StdEPReq+0x28>
      pdev->pClass->Setup(pdev, req);
 8003e7e:	23ad      	movs	r3, #173	; 0xad
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	58e3      	ldr	r3, [r4, r3]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0020      	movs	r0, r4
 8003e88:	4798      	blx	r3
}
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8003e8e:	888a      	ldrh	r2, [r1, #4]
 8003e90:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8003e92:	784b      	ldrb	r3, [r1, #1]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d02f      	beq.n	8003ef8 <USBD_StdEPReq+0x96>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d055      	beq.n	8003f48 <USBD_StdEPReq+0xe6>
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d000      	beq.n	8003ea2 <USBD_StdEPReq+0x40>
 8003ea0:	e0b6      	b.n	8004010 <USBD_StdEPReq+0x1ae>
          switch (pdev->dev_state)
 8003ea2:	23a7      	movs	r3, #167	; 0xa7
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	5ce3      	ldrb	r3, [r4, r3]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d005      	beq.n	8003eb8 <USBD_StdEPReq+0x56>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d012      	beq.n	8003ed6 <USBD_StdEPReq+0x74>
              USBD_CtlError(pdev, req);
 8003eb0:	0020      	movs	r0, r4
 8003eb2:	f7ff fdaf 	bl	8003a14 <USBD_CtlError>
              break;
 8003eb6:	e7e8      	b.n	8003e8a <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003eb8:	0643      	lsls	r3, r0, #25
 8003eba:	d008      	beq.n	8003ece <USBD_StdEPReq+0x6c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003ebc:	0001      	movs	r1, r0
 8003ebe:	0020      	movs	r0, r4
 8003ec0:	f000 fcc2 	bl	8004848 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	f000 fcbe 	bl	8004848 <USBD_LL_StallEP>
 8003ecc:	e7dd      	b.n	8003e8a <USBD_StdEPReq+0x28>
                USBD_CtlError(pdev, req);
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f7ff fda0 	bl	8003a14 <USBD_CtlError>
 8003ed4:	e7d9      	b.n	8003e8a <USBD_StdEPReq+0x28>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ed6:	884b      	ldrh	r3, [r1, #2]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8003edc:	0643      	lsls	r3, r0, #25
 8003ede:	d002      	beq.n	8003ee6 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003ee0:	88cb      	ldrh	r3, [r1, #6]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8003ee6:	0020      	movs	r0, r4
 8003ee8:	f000 f8e9 	bl	80040be <USBD_CtlSendStatus>
              break;
 8003eec:	e7cd      	b.n	8003e8a <USBD_StdEPReq+0x28>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003eee:	0001      	movs	r1, r0
 8003ef0:	0020      	movs	r0, r4
 8003ef2:	f000 fca9 	bl	8004848 <USBD_LL_StallEP>
 8003ef6:	e7f6      	b.n	8003ee6 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8003ef8:	23a7      	movs	r3, #167	; 0xa7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	5ce3      	ldrb	r3, [r4, r3]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d005      	beq.n	8003f0e <USBD_StdEPReq+0xac>
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d012      	beq.n	8003f2c <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8003f06:	0020      	movs	r0, r4
 8003f08:	f7ff fd84 	bl	8003a14 <USBD_CtlError>
              break;
 8003f0c:	e7bd      	b.n	8003e8a <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f0e:	0643      	lsls	r3, r0, #25
 8003f10:	d008      	beq.n	8003f24 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8003f12:	0001      	movs	r1, r0
 8003f14:	0020      	movs	r0, r4
 8003f16:	f000 fc97 	bl	8004848 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	0020      	movs	r0, r4
 8003f1e:	f000 fc93 	bl	8004848 <USBD_LL_StallEP>
 8003f22:	e7b2      	b.n	8003e8a <USBD_StdEPReq+0x28>
                USBD_CtlError(pdev, req);
 8003f24:	0020      	movs	r0, r4
 8003f26:	f7ff fd75 	bl	8003a14 <USBD_CtlError>
 8003f2a:	e7ae      	b.n	8003e8a <USBD_StdEPReq+0x28>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f2c:	884b      	ldrh	r3, [r1, #2]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ab      	bne.n	8003e8a <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003f32:	0643      	lsls	r3, r0, #25
 8003f34:	d103      	bne.n	8003f3e <USBD_StdEPReq+0xdc>
                USBD_CtlSendStatus(pdev);
 8003f36:	0020      	movs	r0, r4
 8003f38:	f000 f8c1 	bl	80040be <USBD_CtlSendStatus>
 8003f3c:	e7a5      	b.n	8003e8a <USBD_StdEPReq+0x28>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f3e:	0001      	movs	r1, r0
 8003f40:	0020      	movs	r0, r4
 8003f42:	f000 fc8a 	bl	800485a <USBD_LL_ClearStallEP>
 8003f46:	e7f6      	b.n	8003f36 <USBD_StdEPReq+0xd4>
          switch (pdev->dev_state)
 8003f48:	23a7      	movs	r3, #167	; 0xa7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	5ce3      	ldrb	r3, [r4, r3]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d005      	beq.n	8003f5e <USBD_StdEPReq+0xfc>
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d018      	beq.n	8003f88 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8003f56:	0020      	movs	r0, r4
 8003f58:	f7ff fd5c 	bl	8003a14 <USBD_CtlError>
              break;
 8003f5c:	e795      	b.n	8003e8a <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f5e:	0643      	lsls	r3, r0, #25
 8003f60:	d003      	beq.n	8003f6a <USBD_StdEPReq+0x108>
                USBD_CtlError(pdev, req);
 8003f62:	0020      	movs	r0, r4
 8003f64:	f7ff fd56 	bl	8003a14 <USBD_CtlError>
                break;
 8003f68:	e78f      	b.n	8003e8a <USBD_StdEPReq+0x28>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f6a:	0021      	movs	r1, r4
 8003f6c:	3155      	adds	r1, #85	; 0x55
 8003f6e:	31ff      	adds	r1, #255	; 0xff
 8003f70:	0613      	lsls	r3, r2, #24
 8003f72:	d406      	bmi.n	8003f82 <USBD_StdEPReq+0x120>
              pep->status = 0x0000U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f78:	2202      	movs	r2, #2
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f000 f870 	bl	8004060 <USBD_CtlSendData>
              break;
 8003f80:	e783      	b.n	8003e8a <USBD_StdEPReq+0x28>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f82:	3941      	subs	r1, #65	; 0x41
 8003f84:	39ff      	subs	r1, #255	; 0xff
 8003f86:	e7f5      	b.n	8003f74 <USBD_StdEPReq+0x112>
              if ((ep_addr & 0x80U) == 0x80U)
 8003f88:	0613      	lsls	r3, r2, #24
 8003f8a:	d41c      	bmi.n	8003fc6 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	4002      	ands	r2, r0
 8003f90:	0093      	lsls	r3, r2, #2
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	18e3      	adds	r3, r4, r3
 8003f98:	3359      	adds	r3, #89	; 0x59
 8003f9a:	33ff      	adds	r3, #255	; 0xff
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d026      	beq.n	8003ff0 <USBD_StdEPReq+0x18e>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003fa2:	237f      	movs	r3, #127	; 0x7f
 8003fa4:	4003      	ands	r3, r0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fa6:	009d      	lsls	r5, r3, #2
 8003fa8:	18ed      	adds	r5, r5, r3
 8003faa:	00ad      	lsls	r5, r5, #2
 8003fac:	3555      	adds	r5, #85	; 0x55
 8003fae:	35ff      	adds	r5, #255	; 0xff
 8003fb0:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003fb2:	0643      	lsls	r3, r0, #25
 8003fb4:	d120      	bne.n	8003ff8 <USBD_StdEPReq+0x196>
                pep->status = 0x0000U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003fba:	2202      	movs	r2, #2
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f000 f84e 	bl	8004060 <USBD_CtlSendData>
              break;
 8003fc4:	e761      	b.n	8003e8a <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	4002      	ands	r2, r0
 8003fca:	0093      	lsls	r3, r2, #2
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18e3      	adds	r3, r4, r3
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <USBD_StdEPReq+0x186>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fd8:	257f      	movs	r5, #127	; 0x7f
 8003fda:	4005      	ands	r5, r0
 8003fdc:	1c6b      	adds	r3, r5, #1
 8003fde:	009d      	lsls	r5, r3, #2
 8003fe0:	18ed      	adds	r5, r5, r3
 8003fe2:	00ad      	lsls	r5, r5, #2
 8003fe4:	1965      	adds	r5, r4, r5
 8003fe6:	e7e4      	b.n	8003fb2 <USBD_StdEPReq+0x150>
                  USBD_CtlError(pdev, req);
 8003fe8:	0020      	movs	r0, r4
 8003fea:	f7ff fd13 	bl	8003a14 <USBD_CtlError>
                  break;
 8003fee:	e74c      	b.n	8003e8a <USBD_StdEPReq+0x28>
                  USBD_CtlError(pdev, req);
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	f7ff fd0f 	bl	8003a14 <USBD_CtlError>
                  break;
 8003ff6:	e748      	b.n	8003e8a <USBD_StdEPReq+0x28>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003ff8:	0001      	movs	r1, r0
 8003ffa:	0020      	movs	r0, r4
 8003ffc:	f000 fc36 	bl	800486c <USBD_LL_IsStallEP>
 8004000:	2800      	cmp	r0, #0
 8004002:	d002      	beq.n	800400a <USBD_StdEPReq+0x1a8>
                pep->status = 0x0001U;
 8004004:	2301      	movs	r3, #1
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	e7d7      	b.n	8003fba <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 800400a:	2300      	movs	r3, #0
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	e7d4      	b.n	8003fba <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8004010:	0020      	movs	r0, r4
 8004012:	f7ff fcff 	bl	8003a14 <USBD_CtlError>
          break;
 8004016:	e738      	b.n	8003e8a <USBD_StdEPReq+0x28>

08004018 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004018:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800401a:	2800      	cmp	r0, #0
 800401c:	d01f      	beq.n	800405e <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800401e:	7803      	ldrb	r3, [r0, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <USBD_GetString+0x1c>
 8004024:	0004      	movs	r4, r0
  uint8_t  len = 0U;
 8004026:	2300      	movs	r3, #0
  {
    len++;
 8004028:	3301      	adds	r3, #1
 800402a:	b2db      	uxtb	r3, r3
    buf++;
 800402c:	3401      	adds	r4, #1
  while (*buf != '\0')
 800402e:	7825      	ldrb	r5, [r4, #0]
 8004030:	2d00      	cmp	r5, #0
 8004032:	d1f9      	bne.n	8004028 <USBD_GetString+0x10>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004034:	3301      	adds	r3, #1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800403a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800403c:	2303      	movs	r3, #3
 800403e:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8004040:	7804      	ldrb	r4, [r0, #0]
 8004042:	2c00      	cmp	r4, #0
 8004044:	d00b      	beq.n	800405e <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004046:	3b01      	subs	r3, #1
      unicode[idx++] =  0U;
 8004048:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800404a:	3001      	adds	r0, #1
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8004052:	3302      	adds	r3, #2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004058:	7804      	ldrb	r4, [r0, #0]
 800405a:	2c00      	cmp	r4, #0
 800405c:	d1f5      	bne.n	800404a <USBD_GetString+0x32>
}
 800405e:	bd30      	pop	{r4, r5, pc}

08004060 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004060:	b510      	push	{r4, lr}
 8004062:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004064:	22a5      	movs	r2, #165	; 0xa5
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	2402      	movs	r4, #2
 800406a:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 800406c:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800406e:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004070:	000a      	movs	r2, r1
 8004072:	2100      	movs	r1, #0
 8004074:	f000 fc1c 	bl	80048b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	bd10      	pop	{r4, pc}

0800407c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800407c:	b510      	push	{r4, lr}
 800407e:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004080:	000a      	movs	r2, r1
 8004082:	2100      	movs	r1, #0
 8004084:	f000 fc14 	bl	80048b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004088:	2000      	movs	r0, #0
 800408a:	bd10      	pop	{r4, pc}

0800408c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800408c:	b510      	push	{r4, lr}
 800408e:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004090:	22a5      	movs	r2, #165	; 0xa5
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	2403      	movs	r4, #3
 8004096:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8004098:	3a39      	subs	r2, #57	; 0x39
 800409a:	3aff      	subs	r2, #255	; 0xff
 800409c:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 800409e:	3204      	adds	r2, #4
 80040a0:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80040a2:	000a      	movs	r2, r1
 80040a4:	2100      	movs	r1, #0
 80040a6:	f000 fc0c 	bl	80048c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040aa:	2000      	movs	r0, #0
 80040ac:	bd10      	pop	{r4, pc}

080040ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80040ae:	b510      	push	{r4, lr}
 80040b0:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80040b2:	000a      	movs	r2, r1
 80040b4:	2100      	movs	r1, #0
 80040b6:	f000 fc04 	bl	80048c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040ba:	2000      	movs	r0, #0
 80040bc:	bd10      	pop	{r4, pc}

080040be <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80040be:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80040c0:	23a5      	movs	r3, #165	; 0xa5
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	2204      	movs	r2, #4
 80040c6:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80040c8:	2300      	movs	r3, #0
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	f000 fbef 	bl	80048b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80040d2:	2000      	movs	r0, #0
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80040d6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80040d8:	23a5      	movs	r3, #165	; 0xa5
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	2205      	movs	r2, #5
 80040de:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040e0:	2300      	movs	r3, #0
 80040e2:	2200      	movs	r2, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	f000 fbec 	bl	80048c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040ea:	2000      	movs	r0, #0
 80040ec:	bd10      	pop	{r4, pc}

080040ee <baca_protocol_encode>:
 *	@param payload_size length of the payload buffer
 *	@param data_id ID of the device which sends the payload
 *	@return The lenght of the baca buffer. Generaly, it should be payload_size + 4
 */
uint8_t baca_protocol_encode(uint8_t* buffer, uint8_t* payload, uint8_t payload_size, uint8_t data_id)
{
 80040ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t checksum = (uint8_t) 'b';
  uint8_t buffer_length = 0;
  checksum += payload_size + 1;
 80040f0:	0016      	movs	r6, r2
 80040f2:	3663      	adds	r6, #99	; 0x63
 80040f4:	b2f6      	uxtb	r6, r6

  buffer[buffer_length++] = 'b';
 80040f6:	2462      	movs	r4, #98	; 0x62
 80040f8:	7004      	strb	r4, [r0, #0]
  buffer[buffer_length++] = payload_size + 1; // Add one for useless byte
 80040fa:	1c54      	adds	r4, r2, #1
 80040fc:	7044      	strb	r4, [r0, #1]
  buffer[buffer_length++] = data_id;
 80040fe:	7083      	strb	r3, [r0, #2]
  for (int i = 0; i < payload_size; i++)
 8004100:	2a00      	cmp	r2, #0
 8004102:	d012      	beq.n	800412a <baca_protocol_encode+0x3c>
 8004104:	000b      	movs	r3, r1
 8004106:	1889      	adds	r1, r1, r2
  buffer[buffer_length++] = data_id;
 8004108:	2503      	movs	r5, #3
  {
	  buffer[buffer_length++] = payload[i];
 800410a:	1c6f      	adds	r7, r5, #1
 800410c:	781c      	ldrb	r4, [r3, #0]
 800410e:	5544      	strb	r4, [r0, r5]
	  checksum += payload[i];
 8004110:	781c      	ldrb	r4, [r3, #0]
 8004112:	1936      	adds	r6, r6, r4
 8004114:	b2f6      	uxtb	r6, r6
 8004116:	3301      	adds	r3, #1
	  buffer[buffer_length++] = payload[i];
 8004118:	b2fd      	uxtb	r5, r7
  for (int i = 0; i < payload_size; i++)
 800411a:	428b      	cmp	r3, r1
 800411c:	d1f5      	bne.n	800410a <baca_protocol_encode+0x1c>
 800411e:	3203      	adds	r2, #3
 8004120:	b2d2      	uxtb	r2, r2
  }
  buffer[buffer_length++] = checksum;
 8004122:	5486      	strb	r6, [r0, r2]
 8004124:	3201      	adds	r2, #1

  return buffer_length;
 8004126:	b2d0      	uxtb	r0, r2
}
 8004128:	bdf0      	pop	{r4, r5, r6, r7, pc}
  buffer[buffer_length++] = data_id;
 800412a:	2203      	movs	r2, #3
 800412c:	e7f9      	b.n	8004122 <baca_protocol_encode+0x34>

0800412e <baca_protocol_decode>:
 *	@param buffer Buffer with the encoded message
 *	@param payload Buffer to store payload bytes
 *	@return the struct with the payload and its properties
 */
struct baca_payload baca_protocol_decode(uint8_t* buffer, uint8_t buffer_size)
{
 800412e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004130:	b0c3      	sub	sp, #268	; 0x10c
 8004132:	0004      	movs	r4, r0
	struct baca_payload ret;
	ret.data_correct = 0;

	// is a baca message with at least one byte
	if ((buffer[0] == 'b') && (buffer_size >= 4))
 8004134:	780b      	ldrb	r3, [r1, #0]
 8004136:	2b62      	cmp	r3, #98	; 0x62
 8004138:	d00b      	beq.n	8004152 <baca_protocol_decode+0x24>
				return ret;
			}
		}
	} else
	{
		return ret;
 800413a:	a901      	add	r1, sp, #4
 800413c:	2300      	movs	r3, #0
 800413e:	700b      	strb	r3, [r1, #0]
 8004140:	704b      	strb	r3, [r1, #1]
 8004142:	2202      	movs	r2, #2
 8004144:	32ff      	adds	r2, #255	; 0xff
 8004146:	0020      	movs	r0, r4
 8004148:	f000 fde2 	bl	8004d10 <memcpy>
	}
}
 800414c:	0020      	movs	r0, r4
 800414e:	b043      	add	sp, #268	; 0x10c
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((buffer[0] == 'b') && (buffer_size >= 4))
 8004152:	2a03      	cmp	r2, #3
 8004154:	d9f1      	bls.n	800413a <baca_protocol_decode+0xc>
		uint8_t payload_buffer_size = buffer[1];
 8004156:	784f      	ldrb	r7, [r1, #1]
		if (buffer_size >= payload_buffer_size + 3)
 8004158:	1cfb      	adds	r3, r7, #3
 800415a:	429a      	cmp	r2, r3
 800415c:	dbf6      	blt.n	800414c <baca_protocol_decode+0x1e>
			uint8_t checksum = (uint8_t) 'b' + payload_buffer_size;
 800415e:	003a      	movs	r2, r7
 8004160:	3262      	adds	r2, #98	; 0x62
 8004162:	b2d2      	uxtb	r2, r2
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 8004164:	2f00      	cmp	r7, #0
 8004166:	d00b      	beq.n	8004180 <baca_protocol_decode+0x52>
 8004168:	1e7d      	subs	r5, r7, #1
 800416a:	b2ed      	uxtb	r5, r5
 800416c:	3503      	adds	r5, #3
 800416e:	2302      	movs	r3, #2
				ret.payload[i] = buffer[i+2];
 8004170:	ae01      	add	r6, sp, #4
 8004172:	5cc8      	ldrb	r0, [r1, r3]
 8004174:	5598      	strb	r0, [r3, r6]
				checksum += buffer[i+2];
 8004176:	1882      	adds	r2, r0, r2
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	3301      	adds	r3, #1
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 800417c:	42ab      	cmp	r3, r5
 800417e:	d1f8      	bne.n	8004172 <baca_protocol_decode+0x44>
			uint8_t checksum_sent = buffer[payload_buffer_size+2];
 8004180:	19c9      	adds	r1, r1, r7
			if (checksum == checksum_sent)
 8004182:	788b      	ldrb	r3, [r1, #2]
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <baca_protocol_decode+0x6e>
				return ret;
 8004188:	a901      	add	r1, sp, #4
 800418a:	2300      	movs	r3, #0
 800418c:	700b      	strb	r3, [r1, #0]
 800418e:	704f      	strb	r7, [r1, #1]
 8004190:	2202      	movs	r2, #2
 8004192:	32ff      	adds	r2, #255	; 0xff
 8004194:	0020      	movs	r0, r4
 8004196:	f000 fdbb 	bl	8004d10 <memcpy>
 800419a:	e7d7      	b.n	800414c <baca_protocol_decode+0x1e>
				return ret;
 800419c:	a901      	add	r1, sp, #4
 800419e:	2301      	movs	r3, #1
 80041a0:	700b      	strb	r3, [r1, #0]
 80041a2:	704f      	strb	r7, [r1, #1]
 80041a4:	2202      	movs	r2, #2
 80041a6:	32ff      	adds	r2, #255	; 0xff
 80041a8:	0020      	movs	r0, r4
 80041aa:	f000 fdb1 	bl	8004d10 <memcpy>
 80041ae:	e7cd      	b.n	800414c <baca_protocol_decode+0x1e>

080041b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041b0:	b510      	push	{r4, lr}
 80041b2:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041b4:	2230      	movs	r2, #48	; 0x30
 80041b6:	2100      	movs	r1, #0
 80041b8:	a80c      	add	r0, sp, #48	; 0x30
 80041ba:	f000 fdb2 	bl	8004d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041be:	2210      	movs	r2, #16
 80041c0:	2100      	movs	r1, #0
 80041c2:	a807      	add	r0, sp, #28
 80041c4:	f000 fdad 	bl	8004d22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041c8:	2218      	movs	r2, #24
 80041ca:	2100      	movs	r1, #0
 80041cc:	a801      	add	r0, sp, #4
 80041ce:	f000 fda8 	bl	8004d22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80041d2:	2320      	movs	r3, #32
 80041d4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80041d6:	3b1f      	subs	r3, #31
 80041d8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041da:	a80b      	add	r0, sp, #44	; 0x2c
 80041dc:	f7fd fbb4 	bl	8001948 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e0:	2307      	movs	r3, #7
 80041e2:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80041e4:	3b04      	subs	r3, #4
 80041e6:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041e8:	2400      	movs	r4, #0
 80041ea:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ec:	940a      	str	r4, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041ee:	2101      	movs	r1, #1
 80041f0:	a807      	add	r0, sp, #28
 80041f2:	f7fd feb9 	bl	8001f68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80041fc:	9406      	str	r4, [sp, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041fe:	a801      	add	r0, sp, #4
 8004200:	f7fd ff56 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004204:	b018      	add	sp, #96	; 0x60
 8004206:	bd10      	pop	{r4, pc}

08004208 <main>:
{
 8004208:	b530      	push	{r4, r5, lr}
 800420a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800420c:	f7fc f918 	bl	8000440 <HAL_Init>
  SystemClock_Config();
 8004210:	f7ff ffce 	bl	80041b0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	2214      	movs	r2, #20
 8004216:	2100      	movs	r1, #0
 8004218:	a805      	add	r0, sp, #20
 800421a:	f000 fd82 	bl	8004d22 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <main+0xf4>)
 8004220:	6959      	ldr	r1, [r3, #20]
 8004222:	2080      	movs	r0, #128	; 0x80
 8004224:	03c0      	lsls	r0, r0, #15
 8004226:	4301      	orrs	r1, r0
 8004228:	6159      	str	r1, [r3, #20]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	4002      	ands	r2, r0
 800422e:	9201      	str	r2, [sp, #4]
 8004230:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0289      	lsls	r1, r1, #10
 8004238:	430a      	orrs	r2, r1
 800423a:	615a      	str	r2, [r3, #20]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	400b      	ands	r3, r1
 8004240:	9302      	str	r3, [sp, #8]
 8004242:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8004244:	2490      	movs	r4, #144	; 0x90
 8004246:	05e4      	lsls	r4, r4, #23
 8004248:	2200      	movs	r2, #0
 800424a:	21ff      	movs	r1, #255	; 0xff
 800424c:	0020      	movs	r0, r4
 800424e:	f7fc fba9 	bl	80009a4 <HAL_GPIO_WritePin>
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : UV_LED_0_Pin UV_LED_1_Pin UV_LED_2_Pin UV_LED_3_Pin
                           UV_LED_4_Pin UV_LED_5_Pin UV_LED_6_Pin UV_LED_7_Pin */
  GPIO_InitStruct.Pin = UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8004252:	23ff      	movs	r3, #255	; 0xff
 8004254:	9305      	str	r3, [sp, #20]
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004256:	3bfe      	subs	r3, #254	; 0xfe
 8004258:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2500      	movs	r5, #0
 800425c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800425e:	3302      	adds	r3, #2
 8004260:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004262:	a905      	add	r1, sp, #20
 8004264:	0020      	movs	r0, r4
 8004266:	f7fc fabb 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004270:	4b23      	ldr	r3, [pc, #140]	; (8004300 <main+0xf8>)
 8004272:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8004276:	a905      	add	r1, sp, #20
 8004278:	0020      	movs	r0, r4
 800427a:	f7fc fab1 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <main+0xfc>)
 8004286:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800428a:	a905      	add	r1, sp, #20
 800428c:	0020      	movs	r0, r4
 800428e:	f7fc faa7 	bl	80007e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2100      	movs	r1, #0
 8004296:	2007      	movs	r0, #7
 8004298:	f7fc f8f4 	bl	8000484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800429c:	2007      	movs	r0, #7
 800429e:	f7fc f923 	bl	80004e8 <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 80042a2:	f000 f8fd 	bl	80044a0 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042a6:	2210      	movs	r2, #16
 80042a8:	2100      	movs	r1, #0
 80042aa:	a805      	add	r0, sp, #20
 80042ac:	f000 fd39 	bl	8004d22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b0:	2208      	movs	r2, #8
 80042b2:	2100      	movs	r1, #0
 80042b4:	a803      	add	r0, sp, #12
 80042b6:	f000 fd34 	bl	8004d22 <memset>
  htim3.Instance = TIM3;
 80042ba:	4c13      	ldr	r4, [pc, #76]	; (8004308 <main+0x100>)
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <main+0x104>)
 80042be:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48-1;
 80042c0:	232f      	movs	r3, #47	; 0x2f
 80042c2:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c4:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 100-1;
 80042c6:	3334      	adds	r3, #52	; 0x34
 80042c8:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ca:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042cc:	331d      	adds	r3, #29
 80042ce:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042d0:	0020      	movs	r0, r4
 80042d2:	f7fe f8f7 	bl	80024c4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	015b      	lsls	r3, r3, #5
 80042da:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042dc:	a905      	add	r1, sp, #20
 80042de:	0020      	movs	r0, r4
 80042e0:	f7fe f928 	bl	8002534 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e4:	9503      	str	r5, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e6:	9504      	str	r5, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042e8:	a903      	add	r1, sp, #12
 80042ea:	0020      	movs	r0, r4
 80042ec:	f7fe f9cc 	bl	8002688 <HAL_TIMEx_MasterConfigSynchronization>
  uv_led_init();
 80042f0:	f000 fb90 	bl	8004a14 <uv_led_init>
  HAL_TIM_Base_Start_IT(&htim3);
 80042f4:	0020      	movs	r0, r4
 80042f6:	f7fd ff83 	bl	8002200 <HAL_TIM_Base_Start_IT>
 80042fa:	e7fe      	b.n	80042fa <main+0xf2>
 80042fc:	40021000 	.word	0x40021000
 8004300:	10110000 	.word	0x10110000
 8004304:	10310000 	.word	0x10310000
 8004308:	2000052c 	.word	0x2000052c
 800430c:	40000400 	.word	0x40000400

08004310 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	// If the Interrupt came from SWITCH Pin
	if (GPIO_Pin == SWITCH_Pin)
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4298      	cmp	r0, r3
 8004316:	d000      	beq.n	800431a <HAL_GPIO_EXTI_Callback+0xa>
	{
		// Toggle the UVLEDs global enable flag
		enable_global = !enable_global;
	}
}
 8004318:	4770      	bx	lr
		enable_global = !enable_global;
 800431a:	4a03      	ldr	r2, [pc, #12]	; (8004328 <HAL_GPIO_EXTI_Callback+0x18>)
 800431c:	7813      	ldrb	r3, [r2, #0]
 800431e:	4259      	negs	r1, r3
 8004320:	414b      	adcs	r3, r1
 8004322:	7013      	strb	r3, [r2, #0]
}
 8004324:	e7f8      	b.n	8004318 <HAL_GPIO_EXTI_Callback+0x8>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	200003e8 	.word	0x200003e8

0800432c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	46c6      	mov	lr, r8
 8004330:	b500      	push	{lr}
 8004332:	0007      	movs	r7, r0
 /* USER CODE BEGIN Callback 0 */
	// Check if the callback came from TIM3
	if (htim->Instance == TIM3)
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004336:	6802      	ldr	r2, [r0, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d002      	beq.n	8004342 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 }
 /* USER CODE BEGIN Callback 1 */

 /* USER CODE END Callback 1 */
}
 800433c:	bc04      	pop	{r2}
 800433e:	4690      	mov	r8, r2
 8004340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004342:	4d10      	ldr	r5, [pc, #64]	; (8004384 <HAL_TIM_PeriodElapsedCallback+0x58>)
		for (int i = 0; i < 8; i++)
 8004344:	2400      	movs	r4, #0
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 8004346:	4e10      	ldr	r6, [pc, #64]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x5c>)
				uv_led_counter[i] = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	4698      	mov	r8, r3
 800434c:	e008      	b.n	8004360 <HAL_TIM_PeriodElapsedCallback+0x34>
				uv_led_toggle(i);
 800434e:	b2e0      	uxtb	r0, r4
 8004350:	f000 fc52 	bl	8004bf8 <uv_led_toggle>
				uv_led_counter[i] = 0;
 8004354:	4643      	mov	r3, r8
 8004356:	602b      	str	r3, [r5, #0]
		for (int i = 0; i < 8; i++)
 8004358:	3401      	adds	r4, #1
 800435a:	3504      	adds	r5, #4
 800435c:	2c08      	cmp	r4, #8
 800435e:	d007      	beq.n	8004370 <HAL_TIM_PeriodElapsedCallback+0x44>
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	00a2      	lsls	r2, r4, #2
 8004364:	58b2      	ldr	r2, [r6, r2]
 8004366:	4293      	cmp	r3, r2
 8004368:	d2f1      	bcs.n	800434e <HAL_TIM_PeriodElapsedCallback+0x22>
				uv_led_counter[i]++;
 800436a:	3301      	adds	r3, #1
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	e7f3      	b.n	8004358 <HAL_TIM_PeriodElapsedCallback+0x2c>
 if (htim->Instance == TIM3) {
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d1e1      	bne.n	800433c <HAL_TIM_PeriodElapsedCallback+0x10>
   HAL_IncTick();
 8004378:	f7fc f872 	bl	8000460 <HAL_IncTick>
}
 800437c:	e7de      	b.n	800433c <HAL_TIM_PeriodElapsedCallback+0x10>
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	40000400 	.word	0x40000400
 8004384:	2000058c 	.word	0x2000058c
 8004388:	2000050c 	.word	0x2000050c

0800438c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800438c:	4770      	bx	lr
	...

08004390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004390:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_MspInit+0x2c>)
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	2201      	movs	r2, #1
 8004398:	4311      	orrs	r1, r2
 800439a:	6199      	str	r1, [r3, #24]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	400a      	ands	r2, r1
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	0549      	lsls	r1, r1, #21
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	400b      	ands	r3, r1
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043b6:	b002      	add	sp, #8
 80043b8:	4770      	bx	lr
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043c0:	b500      	push	{lr}
 80043c2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_TIM_Base_MspInit+0x34>)
 80043c6:	6802      	ldr	r2, [r0, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043cc:	b003      	add	sp, #12
 80043ce:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_TIM_Base_MspInit+0x38>)
 80043d2:	69d1      	ldr	r1, [r2, #28]
 80043d4:	2302      	movs	r3, #2
 80043d6:	4319      	orrs	r1, r3
 80043d8:	61d1      	str	r1, [r2, #28]
 80043da:	69d2      	ldr	r2, [r2, #28]
 80043dc:	4013      	ands	r3, r2
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	2010      	movs	r0, #16
 80043e8:	f7fc f84c 	bl	8000484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043ec:	2010      	movs	r0, #16
 80043ee:	f7fc f87b 	bl	80004e8 <HAL_NVIC_EnableIRQ>
}
 80043f2:	e7eb      	b.n	80043cc <HAL_TIM_Base_MspInit+0xc>
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40021000 	.word	0x40021000

080043fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80043fc:	4770      	bx	lr

080043fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043fe:	e7fe      	b.n	80043fe <HardFault_Handler>

08004400 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004400:	4770      	bx	lr

08004402 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004402:	4770      	bx	lr

08004404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004404:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004406:	f7fc f82b 	bl	8000460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800440a:	bd10      	pop	{r4, pc}

0800440c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800440c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800440e:	2080      	movs	r0, #128	; 0x80
 8004410:	0040      	lsls	r0, r0, #1
 8004412:	f7fc facd 	bl	80009b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004416:	2080      	movs	r0, #128	; 0x80
 8004418:	00c0      	lsls	r0, r0, #3
 800441a:	f7fc fac9 	bl	80009b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800441e:	bd10      	pop	{r4, pc}

08004420 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004420:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004422:	4802      	ldr	r0, [pc, #8]	; (800442c <TIM3_IRQHandler+0xc>)
 8004424:	f7fd ff22 	bl	800226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004428:	bd10      	pop	{r4, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	2000052c 	.word	0x2000052c

08004430 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004430:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004432:	4802      	ldr	r0, [pc, #8]	; (800443c <USB_IRQHandler+0xc>)
 8004434:	f7fc fb76 	bl	8000b24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004438:	bd10      	pop	{r4, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	20000c70 	.word	0x20000c70

08004440 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <SystemInit+0x48>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	480f      	ldr	r0, [pc, #60]	; (800448c <SystemInit+0x4c>)
 800444e:	4002      	ands	r2, r0
 8004450:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	480e      	ldr	r0, [pc, #56]	; (8004490 <SystemInit+0x50>)
 8004456:	4002      	ands	r2, r0
 8004458:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <SystemInit+0x54>)
 800445e:	4002      	ands	r2, r0
 8004460:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	480c      	ldr	r0, [pc, #48]	; (8004498 <SystemInit+0x58>)
 8004466:	4002      	ands	r2, r0
 8004468:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	200f      	movs	r0, #15
 800446e:	4382      	bics	r2, r0
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8004472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004474:	4809      	ldr	r0, [pc, #36]	; (800449c <SystemInit+0x5c>)
 8004476:	4002      	ands	r2, r0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800447a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447c:	438a      	bics	r2, r1
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]

}
 8004484:	4770      	bx	lr
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	40021000 	.word	0x40021000
 800448c:	08ffb80c 	.word	0x08ffb80c
 8004490:	fef6ffff 	.word	0xfef6ffff
 8004494:	fffbffff 	.word	0xfffbffff
 8004498:	ffc0ffff 	.word	0xffc0ffff
 800449c:	fffffe2c 	.word	0xfffffe2c

080044a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80044a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80044a2:	2200      	movs	r2, #0
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <MX_USB_DEVICE_Init+0x4c>)
 80044a6:	4812      	ldr	r0, [pc, #72]	; (80044f0 <MX_USB_DEVICE_Init+0x50>)
 80044a8:	f7ff f90c 	bl	80036c4 <USBD_Init>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d111      	bne.n	80044d4 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80044b0:	4910      	ldr	r1, [pc, #64]	; (80044f4 <MX_USB_DEVICE_Init+0x54>)
 80044b2:	480f      	ldr	r0, [pc, #60]	; (80044f0 <MX_USB_DEVICE_Init+0x50>)
 80044b4:	f7ff f922 	bl	80036fc <USBD_RegisterClass>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d10e      	bne.n	80044da <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <MX_USB_DEVICE_Init+0x58>)
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <MX_USB_DEVICE_Init+0x50>)
 80044c0:	f7ff f8a6 	bl	8003610 <USBD_CDC_RegisterInterface>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d10b      	bne.n	80044e0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80044c8:	4809      	ldr	r0, [pc, #36]	; (80044f0 <MX_USB_DEVICE_Init+0x50>)
 80044ca:	f7ff f920 	bl	800370e <USBD_Start>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d109      	bne.n	80044e6 <MX_USB_DEVICE_Init+0x46>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80044d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80044d4:	f7ff ff5a 	bl	800438c <Error_Handler>
 80044d8:	e7ea      	b.n	80044b0 <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 80044da:	f7ff ff57 	bl	800438c <Error_Handler>
 80044de:	e7ed      	b.n	80044bc <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 80044e0:	f7ff ff54 	bl	800438c <Error_Handler>
 80044e4:	e7f0      	b.n	80044c8 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 80044e6:	f7ff ff51 	bl	800438c <Error_Handler>
}
 80044ea:	e7f2      	b.n	80044d2 <MX_USB_DEVICE_Init+0x32>
 80044ec:	2000012c 	.word	0x2000012c
 80044f0:	200005ac 	.word	0x200005ac
 80044f4:	20000008 	.word	0x20000008
 80044f8:	2000011c 	.word	0x2000011c

080044fc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80044fc:	2000      	movs	r0, #0
 80044fe:	4770      	bx	lr

08004500 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004500:	2000      	movs	r0, #0
 8004502:	4770      	bx	lr

08004504 <CDC_Init_FS>:
{
 8004504:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004506:	4c06      	ldr	r4, [pc, #24]	; (8004520 <CDC_Init_FS+0x1c>)
 8004508:	2200      	movs	r2, #0
 800450a:	4906      	ldr	r1, [pc, #24]	; (8004524 <CDC_Init_FS+0x20>)
 800450c:	0020      	movs	r0, r4
 800450e:	f7ff f888 	bl	8003622 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004512:	4905      	ldr	r1, [pc, #20]	; (8004528 <CDC_Init_FS+0x24>)
 8004514:	0020      	movs	r0, r4
 8004516:	f7ff f88f 	bl	8003638 <USBD_CDC_SetRxBuffer>
}
 800451a:	2000      	movs	r0, #0
 800451c:	bd10      	pop	{r4, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	200005ac 	.word	0x200005ac
 8004524:	20000a70 	.word	0x20000a70
 8004528:	20000870 	.word	0x20000870

0800452c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	0005      	movs	r5, r0
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <CDC_Transmit_FS+0x2c>)
 8004532:	23ae      	movs	r3, #174	; 0xae
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	58c4      	ldr	r4, [r0, r3]
  if (hcdc->TxState != 0){
 8004538:	3ba4      	subs	r3, #164	; 0xa4
 800453a:	58e3      	ldr	r3, [r4, r3]
    return USBD_BUSY;
 800453c:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 800453e:	2b00      	cmp	r3, #0
 8004540:	d000      	beq.n	8004544 <CDC_Transmit_FS+0x18>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004542:	bd70      	pop	{r4, r5, r6, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004544:	4c04      	ldr	r4, [pc, #16]	; (8004558 <CDC_Transmit_FS+0x2c>)
 8004546:	000a      	movs	r2, r1
 8004548:	0029      	movs	r1, r5
 800454a:	0020      	movs	r0, r4
 800454c:	f7ff f869 	bl	8003622 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004550:	0020      	movs	r0, r4
 8004552:	f7ff f878 	bl	8003646 <USBD_CDC_TransmitPacket>
  return result;
 8004556:	e7f4      	b.n	8004542 <CDC_Transmit_FS+0x16>
 8004558:	200005ac 	.word	0x200005ac

0800455c <CDC_Receive_FS>:
{
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	b0c6      	sub	sp, #280	; 0x118
 8004560:	000c      	movs	r4, r1
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004562:	4d3b      	ldr	r5, [pc, #236]	; (8004650 <CDC_Receive_FS+0xf4>)
 8004564:	0001      	movs	r1, r0
 8004566:	0028      	movs	r0, r5
 8004568:	f7ff f866 	bl	8003638 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800456c:	0028      	movs	r0, r5
 800456e:	f7ff f88a 	bl	8003686 <USBD_CDC_ReceivePacket>
	struct baca_payload received_message = baca_protocol_decode(UserRxBufferFS, (uint8_t) Len);
 8004572:	ad05      	add	r5, sp, #20
 8004574:	b2e2      	uxtb	r2, r4
 8004576:	4937      	ldr	r1, [pc, #220]	; (8004654 <CDC_Receive_FS+0xf8>)
 8004578:	0028      	movs	r0, r5
 800457a:	f7ff fdd8 	bl	800412e <baca_protocol_decode>
	if (received_message.data_correct == 1)
 800457e:	782b      	ldrb	r3, [r5, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d002      	beq.n	800458a <CDC_Receive_FS+0x2e>
}
 8004584:	2000      	movs	r0, #0
 8004586:	b046      	add	sp, #280	; 0x118
 8004588:	bd70      	pop	{r4, r5, r6, pc}
	struct baca_payload received_message = baca_protocol_decode(UserRxBufferFS, (uint8_t) Len);
 800458a:	ab05      	add	r3, sp, #20
 800458c:	7859      	ldrb	r1, [r3, #1]
		switch (baca_id)
 800458e:	789b      	ldrb	r3, [r3, #2]
 8004590:	3370      	adds	r3, #112	; 0x70
 8004592:	b2da      	uxtb	r2, r3
 8004594:	2a06      	cmp	r2, #6
 8004596:	d8f5      	bhi.n	8004584 <CDC_Receive_FS+0x28>
 8004598:	0093      	lsls	r3, r2, #2
 800459a:	4a2f      	ldr	r2, [pc, #188]	; (8004658 <CDC_Receive_FS+0xfc>)
 800459c:	58d3      	ldr	r3, [r2, r3]
 800459e:	469f      	mov	pc, r3
				enable_global = !enable_global;
 80045a0:	4a2e      	ldr	r2, [pc, #184]	; (800465c <CDC_Receive_FS+0x100>)
 80045a2:	7813      	ldrb	r3, [r2, #0]
 80045a4:	4259      	negs	r1, r3
 80045a6:	414b      	adcs	r3, r1
 80045a8:	7013      	strb	r3, [r2, #0]
				break;
 80045aa:	e7eb      	b.n	8004584 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 9)
 80045ac:	2909      	cmp	r1, #9
 80045ae:	d1e9      	bne.n	8004584 <CDC_Receive_FS+0x28>
 80045b0:	2400      	movs	r4, #0
						uv_led_enable(i, (uint8_t) received_message.payload[i+1]);
 80045b2:	ab05      	add	r3, sp, #20
 80045b4:	191b      	adds	r3, r3, r4
 80045b6:	78d9      	ldrb	r1, [r3, #3]
 80045b8:	b2e0      	uxtb	r0, r4
 80045ba:	f000 facd 	bl	8004b58 <uv_led_enable>
 80045be:	3401      	adds	r4, #1
					for (uint8_t i = 0; i < 8; i++)
 80045c0:	2c08      	cmp	r4, #8
 80045c2:	d1f6      	bne.n	80045b2 <CDC_Receive_FS+0x56>
 80045c4:	e7de      	b.n	8004584 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 9)
 80045c6:	2909      	cmp	r1, #9
 80045c8:	d1dc      	bne.n	8004584 <CDC_Receive_FS+0x28>
 80045ca:	2400      	movs	r4, #0
 80045cc:	e002      	b.n	80045d4 <CDC_Receive_FS+0x78>
 80045ce:	3401      	adds	r4, #1
					for (uint8_t i = 0; i < 8; i++)
 80045d0:	2c08      	cmp	r4, #8
 80045d2:	d0d7      	beq.n	8004584 <CDC_Receive_FS+0x28>
 80045d4:	b2e0      	uxtb	r0, r4
 80045d6:	ab05      	add	r3, sp, #20
 80045d8:	191b      	adds	r3, r3, r4
						if (received_message.payload[i] != 0)
 80045da:	789a      	ldrb	r2, [r3, #2]
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d0f6      	beq.n	80045ce <CDC_Receive_FS+0x72>
							uv_led_set_frequency(i, (uint32_t) received_message.payload[i+1]);
 80045e0:	78d9      	ldrb	r1, [r3, #3]
 80045e2:	f000 fa6b 	bl	8004abc <uv_led_set_frequency>
 80045e6:	e7f2      	b.n	80045ce <CDC_Receive_FS+0x72>
				if (received_message.payload_size == 3)
 80045e8:	2903      	cmp	r1, #3
 80045ea:	d1cb      	bne.n	8004584 <CDC_Receive_FS+0x28>
					uv_led_enable((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 80045ec:	ab05      	add	r3, sp, #20
 80045ee:	7919      	ldrb	r1, [r3, #4]
 80045f0:	78d8      	ldrb	r0, [r3, #3]
 80045f2:	f000 fab1 	bl	8004b58 <uv_led_enable>
 80045f6:	e7c5      	b.n	8004584 <CDC_Receive_FS+0x28>
				if (received_message.payload_size == 3)
 80045f8:	2903      	cmp	r1, #3
 80045fa:	d1c3      	bne.n	8004584 <CDC_Receive_FS+0x28>
					uv_led_set_frequency((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 80045fc:	ab05      	add	r3, sp, #20
 80045fe:	7919      	ldrb	r1, [r3, #4]
 8004600:	78d8      	ldrb	r0, [r3, #3]
 8004602:	f000 fa5b 	bl	8004abc <uv_led_set_frequency>
 8004606:	e7bd      	b.n	8004584 <CDC_Receive_FS+0x28>
					baca_protocol_encode(baca_buffer, uv_led_enabled, 8, 0x95);
 8004608:	2395      	movs	r3, #149	; 0x95
 800460a:	2208      	movs	r2, #8
 800460c:	4914      	ldr	r1, [pc, #80]	; (8004660 <CDC_Receive_FS+0x104>)
 800460e:	a802      	add	r0, sp, #8
 8004610:	f7ff fd6d 	bl	80040ee <baca_protocol_encode>
					CDC_Transmit_FS(baca_buffer, baca_buffer_length);
 8004614:	210c      	movs	r1, #12
 8004616:	a802      	add	r0, sp, #8
 8004618:	f7ff ff88 	bl	800452c <CDC_Transmit_FS>
				break;
 800461c:	e7b2      	b.n	8004584 <CDC_Receive_FS+0x28>
		switch (baca_id)
 800461e:	2400      	movs	r4, #0
						frequencies_to_send[j] = (uint8_t)(TIMER_FREQ/(2*uv_led_periods_ms[j]));
 8004620:	4e10      	ldr	r6, [pc, #64]	; (8004664 <CDC_Receive_FS+0x108>)
 8004622:	4d11      	ldr	r5, [pc, #68]	; (8004668 <CDC_Receive_FS+0x10c>)
 8004624:	00a3      	lsls	r3, r4, #2
 8004626:	58f1      	ldr	r1, [r6, r3]
 8004628:	0049      	lsls	r1, r1, #1
 800462a:	0028      	movs	r0, r5
 800462c:	f7fb fd6c 	bl	8000108 <__udivsi3>
 8004630:	466b      	mov	r3, sp
 8004632:	54e0      	strb	r0, [r4, r3]
 8004634:	3401      	adds	r4, #1
					for (uint8_t j = 0; j < 8; j++)
 8004636:	2c08      	cmp	r4, #8
 8004638:	d1f4      	bne.n	8004624 <CDC_Receive_FS+0xc8>
					baca_protocol_encode(baca_buffer, frequencies_to_send , 8, 0x96);
 800463a:	2396      	movs	r3, #150	; 0x96
 800463c:	2208      	movs	r2, #8
 800463e:	4669      	mov	r1, sp
 8004640:	a802      	add	r0, sp, #8
 8004642:	f7ff fd54 	bl	80040ee <baca_protocol_encode>
					CDC_Transmit_FS(baca_buffer, baca_buffer_length);
 8004646:	210c      	movs	r1, #12
 8004648:	a802      	add	r0, sp, #8
 800464a:	f7ff ff6f 	bl	800452c <CDC_Transmit_FS>
				break;
 800464e:	e799      	b.n	8004584 <CDC_Receive_FS+0x28>
 8004650:	200005ac 	.word	0x200005ac
 8004654:	20000870 	.word	0x20000870
 8004658:	08004ddc 	.word	0x08004ddc
 800465c:	200003e8 	.word	0x200003e8
 8004660:	20000584 	.word	0x20000584
 8004664:	2000050c 	.word	0x2000050c
 8004668:	00002710 	.word	0x00002710

0800466c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800466c:	2800      	cmp	r0, #0
 800466e:	d004      	beq.n	800467a <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004670:	3802      	subs	r0, #2
 8004672:	1e43      	subs	r3, r0, #1
 8004674:	4198      	sbcs	r0, r3
 8004676:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004678:	4770      	bx	lr
      usb_status = USBD_OK;
 800467a:	2000      	movs	r0, #0
 800467c:	e7fc      	b.n	8004678 <USBD_Get_USB_Status+0xc>
	...

08004680 <HAL_PCD_MspInit>:
{
 8004680:	b500      	push	{lr}
 8004682:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <HAL_PCD_MspInit+0x38>)
 8004686:	6802      	ldr	r2, [r0, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_PCD_MspInit+0x10>
}
 800468c:	b003      	add	sp, #12
 800468e:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_PCD_MspInit+0x3c>)
 8004692:	69d1      	ldr	r1, [r2, #28]
 8004694:	2080      	movs	r0, #128	; 0x80
 8004696:	0400      	lsls	r0, r0, #16
 8004698:	4301      	orrs	r1, r0
 800469a:	61d1      	str	r1, [r2, #28]
 800469c:	69d3      	ldr	r3, [r2, #28]
 800469e:	4003      	ands	r3, r0
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	201f      	movs	r0, #31
 80046aa:	f7fb feeb 	bl	8000484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80046ae:	201f      	movs	r0, #31
 80046b0:	f7fb ff1a 	bl	80004e8 <HAL_NVIC_EnableIRQ>
}
 80046b4:	e7ea      	b.n	800468c <HAL_PCD_MspInit+0xc>
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	40005c00 	.word	0x40005c00
 80046bc:	40021000 	.word	0x40021000

080046c0 <HAL_PCD_SetupStageCallback>:
{
 80046c0:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80046c2:	23ac      	movs	r3, #172	; 0xac
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18c1      	adds	r1, r0, r3
 80046c8:	3340      	adds	r3, #64	; 0x40
 80046ca:	58c0      	ldr	r0, [r0, r3]
 80046cc:	f7ff f83a 	bl	8003744 <USBD_LL_SetupStage>
}
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <HAL_PCD_DataOutStageCallback>:
{
 80046d2:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	185b      	adds	r3, r3, r1
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	337d      	adds	r3, #125	; 0x7d
 80046de:	33ff      	adds	r3, #255	; 0xff
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	23bc      	movs	r3, #188	; 0xbc
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	58c0      	ldr	r0, [r0, r3]
 80046e8:	f7ff f85e 	bl	80037a8 <USBD_LL_DataOutStage>
}
 80046ec:	bd10      	pop	{r4, pc}

080046ee <HAL_PCD_DataInStageCallback>:
{
 80046ee:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80046f0:	008b      	lsls	r3, r1, #2
 80046f2:	185b      	adds	r3, r3, r1
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	18c3      	adds	r3, r0, r3
 80046f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fa:	23bc      	movs	r3, #188	; 0xbc
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	58c0      	ldr	r0, [r0, r3]
 8004700:	f7ff f8a5 	bl	800384e <USBD_LL_DataInStage>
}
 8004704:	bd10      	pop	{r4, pc}

08004706 <HAL_PCD_SOFCallback>:
{
 8004706:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004708:	23bc      	movs	r3, #188	; 0xbc
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	58c0      	ldr	r0, [r0, r3]
 800470e:	f7ff f95d 	bl	80039cc <USBD_LL_SOF>
}
 8004712:	bd10      	pop	{r4, pc}

08004714 <HAL_PCD_ResetCallback>:
{
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004718:	6883      	ldr	r3, [r0, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d001      	beq.n	8004722 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800471e:	f7ff fe35 	bl	800438c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004722:	25bc      	movs	r5, #188	; 0xbc
 8004724:	00ad      	lsls	r5, r5, #2
 8004726:	2101      	movs	r1, #1
 8004728:	5960      	ldr	r0, [r4, r5]
 800472a:	f7ff f931 	bl	8003990 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800472e:	5960      	ldr	r0, [r4, r5]
 8004730:	f7ff f8ff 	bl	8003932 <USBD_LL_Reset>
}
 8004734:	bd70      	pop	{r4, r5, r6, pc}
	...

08004738 <HAL_PCD_SuspendCallback>:
{
 8004738:	b510      	push	{r4, lr}
 800473a:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800473c:	23bc      	movs	r3, #188	; 0xbc
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	58c0      	ldr	r0, [r0, r3]
 8004742:	f7ff f929 	bl	8003998 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004746:	69a3      	ldr	r3, [r4, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_PCD_SuspendCallback+0x20>)
 800474e:	6913      	ldr	r3, [r2, #16]
 8004750:	2106      	movs	r1, #6
 8004752:	430b      	orrs	r3, r1
 8004754:	6113      	str	r3, [r2, #16]
}
 8004756:	bd10      	pop	{r4, pc}
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <HAL_PCD_ResumeCallback>:
{
 800475c:	b510      	push	{r4, lr}
 800475e:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004766:	23bc      	movs	r3, #188	; 0xbc
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	58e0      	ldr	r0, [r4, r3]
 800476c:	f7ff f920 	bl	80039b0 <USBD_LL_Resume>
}
 8004770:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_PCD_ResumeCallback+0x28>)
 8004774:	6913      	ldr	r3, [r2, #16]
 8004776:	2106      	movs	r1, #6
 8004778:	438b      	bics	r3, r1
 800477a:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 800477c:	f7ff fd18 	bl	80041b0 <SystemClock_Config>
 8004780:	e7f1      	b.n	8004766 <HAL_PCD_ResumeCallback+0xa>
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <USBD_LL_Init>:
{
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 800478c:	481d      	ldr	r0, [pc, #116]	; (8004804 <USBD_LL_Init+0x7c>)
 800478e:	23bc      	movs	r3, #188	; 0xbc
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8004794:	3b30      	subs	r3, #48	; 0x30
 8004796:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <USBD_LL_Init+0x80>)
 800479a:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800479c:	2308      	movs	r3, #8
 800479e:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80047a0:	3b06      	subs	r3, #6
 80047a2:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80047a4:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80047aa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80047ac:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80047ae:	f7fc f90d 	bl	80009cc <HAL_PCD_Init>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d123      	bne.n	80047fe <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80047b6:	25b0      	movs	r5, #176	; 0xb0
 80047b8:	00ad      	lsls	r5, r5, #2
 80047ba:	2318      	movs	r3, #24
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	5960      	ldr	r0, [r4, r5]
 80047c2:	f7fd f88f 	bl	80018e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80047c6:	2358      	movs	r3, #88	; 0x58
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	5960      	ldr	r0, [r4, r5]
 80047ce:	f7fd f889 	bl	80018e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	2200      	movs	r2, #0
 80047d6:	2181      	movs	r1, #129	; 0x81
 80047d8:	5960      	ldr	r0, [r4, r5]
 80047da:	f7fd f883 	bl	80018e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80047de:	2388      	movs	r3, #136	; 0x88
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2200      	movs	r2, #0
 80047e4:	2101      	movs	r1, #1
 80047e6:	5960      	ldr	r0, [r4, r5]
 80047e8:	f7fd f87c 	bl	80018e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	5960      	ldr	r0, [r4, r5]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2200      	movs	r2, #0
 80047f4:	2182      	movs	r1, #130	; 0x82
 80047f6:	f7fd f875 	bl	80018e4 <HAL_PCDEx_PMAConfig>
}
 80047fa:	2000      	movs	r0, #0
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80047fe:	f7ff fdc5 	bl	800438c <Error_Handler>
 8004802:	e7d8      	b.n	80047b6 <USBD_LL_Init+0x2e>
 8004804:	20000c70 	.word	0x20000c70
 8004808:	40005c00 	.word	0x40005c00

0800480c <USBD_LL_Start>:
{
 800480c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800480e:	23b0      	movs	r3, #176	; 0xb0
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	58c0      	ldr	r0, [r0, r3]
 8004814:	f7fc f958 	bl	8000ac8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004818:	f7ff ff28 	bl	800466c <USBD_Get_USB_Status>
}
 800481c:	bd10      	pop	{r4, pc}

0800481e <USBD_LL_OpenEP>:
{
 800481e:	b510      	push	{r4, lr}
 8004820:	0014      	movs	r4, r2
 8004822:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004824:	23b0      	movs	r3, #176	; 0xb0
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	58c0      	ldr	r0, [r0, r3]
 800482a:	0023      	movs	r3, r4
 800482c:	f7fc ff1c 	bl	8001668 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004830:	f7ff ff1c 	bl	800466c <USBD_Get_USB_Status>
}
 8004834:	bd10      	pop	{r4, pc}

08004836 <USBD_LL_CloseEP>:
{
 8004836:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004838:	23b0      	movs	r3, #176	; 0xb0
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	58c0      	ldr	r0, [r0, r3]
 800483e:	f7fc ff52 	bl	80016e6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004842:	f7ff ff13 	bl	800466c <USBD_Get_USB_Status>
}
 8004846:	bd10      	pop	{r4, pc}

08004848 <USBD_LL_StallEP>:
{
 8004848:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800484a:	23b0      	movs	r3, #176	; 0xb0
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	58c0      	ldr	r0, [r0, r3]
 8004850:	f7fc ffd6 	bl	8001800 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004854:	f7ff ff0a 	bl	800466c <USBD_Get_USB_Status>
}
 8004858:	bd10      	pop	{r4, pc}

0800485a <USBD_LL_ClearStallEP>:
{
 800485a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800485c:	23b0      	movs	r3, #176	; 0xb0
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	58c0      	ldr	r0, [r0, r3]
 8004862:	f7fd f803 	bl	800186c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004866:	f7ff ff01 	bl	800466c <USBD_Get_USB_Status>
}
 800486a:	bd10      	pop	{r4, pc}

0800486c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800486c:	23b0      	movs	r3, #176	; 0xb0
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8004872:	b24a      	sxtb	r2, r1
 8004874:	2a00      	cmp	r2, #0
 8004876:	db09      	blt.n	800488c <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004878:	227f      	movs	r2, #127	; 0x7f
 800487a:	400a      	ands	r2, r1
 800487c:	0091      	lsls	r1, r2, #2
 800487e:	1889      	adds	r1, r1, r2
 8004880:	00c9      	lsls	r1, r1, #3
 8004882:	185b      	adds	r3, r3, r1
 8004884:	336b      	adds	r3, #107	; 0x6b
 8004886:	33ff      	adds	r3, #255	; 0xff
 8004888:	7818      	ldrb	r0, [r3, #0]
}
 800488a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800488c:	227f      	movs	r2, #127	; 0x7f
 800488e:	400a      	ands	r2, r1
 8004890:	3201      	adds	r2, #1
 8004892:	0091      	lsls	r1, r2, #2
 8004894:	1889      	adds	r1, r1, r2
 8004896:	00c9      	lsls	r1, r1, #3
 8004898:	185b      	adds	r3, r3, r1
 800489a:	7898      	ldrb	r0, [r3, #2]
 800489c:	e7f5      	b.n	800488a <USBD_LL_IsStallEP+0x1e>

0800489e <USBD_LL_SetUSBAddress>:
{
 800489e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80048a0:	23b0      	movs	r3, #176	; 0xb0
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	58c0      	ldr	r0, [r0, r3]
 80048a6:	f7fc f926 	bl	8000af6 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048aa:	f7ff fedf 	bl	800466c <USBD_Get_USB_Status>
}
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <USBD_LL_Transmit>:
{
 80048b0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80048b2:	24b0      	movs	r4, #176	; 0xb0
 80048b4:	00a4      	lsls	r4, r4, #2
 80048b6:	5900      	ldr	r0, [r0, r4]
 80048b8:	f7fc ff7e 	bl	80017b8 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048bc:	f7ff fed6 	bl	800466c <USBD_Get_USB_Status>
}
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <USBD_LL_PrepareReceive>:
{
 80048c2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80048c4:	24b0      	movs	r4, #176	; 0xb0
 80048c6:	00a4      	lsls	r4, r4, #2
 80048c8:	5900      	ldr	r0, [r0, r4]
 80048ca:	f7fc ff40 	bl	800174e <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048ce:	f7ff fecd 	bl	800466c <USBD_Get_USB_Status>
}
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <USBD_LL_GetRxDataSize>:
{
 80048d4:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80048d6:	23b0      	movs	r3, #176	; 0xb0
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	58c0      	ldr	r0, [r0, r3]
 80048dc:	f7fc ff62 	bl	80017a4 <HAL_PCD_EP_GetRxCount>
}
 80048e0:	bd10      	pop	{r4, pc}
	...

080048e4 <USBD_static_malloc>:
}
 80048e4:	4800      	ldr	r0, [pc, #0]	; (80048e8 <USBD_static_malloc+0x4>)
 80048e6:	4770      	bx	lr
 80048e8:	200001a0 	.word	0x200001a0

080048ec <USBD_static_free>:
}
 80048ec:	4770      	bx	lr
	...

080048f0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80048f0:	2312      	movs	r3, #18
 80048f2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80048f4:	4800      	ldr	r0, [pc, #0]	; (80048f8 <USBD_FS_DeviceDescriptor+0x8>)
 80048f6:	4770      	bx	lr
 80048f8:	20000148 	.word	0x20000148

080048fc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80048fc:	2304      	movs	r3, #4
 80048fe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004900:	4800      	ldr	r0, [pc, #0]	; (8004904 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004902:	4770      	bx	lr
 8004904:	2000015c 	.word	0x2000015c

08004908 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004908:	b510      	push	{r4, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800490a:	2a00      	cmp	r2, #0
 800490c:	d014      	beq.n	8004938 <IntToUnicode+0x30>
 800490e:	000b      	movs	r3, r1
 8004910:	3a01      	subs	r2, #1
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	0052      	lsls	r2, r2, #1
 8004916:	3102      	adds	r1, #2
 8004918:	1851      	adds	r1, r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800491a:	2400      	movs	r4, #0
 800491c:	e006      	b.n	800492c <IntToUnicode+0x24>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800491e:	3237      	adds	r2, #55	; 0x37
 8004920:	701a      	strb	r2, [r3, #0]
    value = value << 4;
 8004922:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004924:	705c      	strb	r4, [r3, #1]
 8004926:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 8004928:	428b      	cmp	r3, r1
 800492a:	d005      	beq.n	8004938 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800492c:	0f02      	lsrs	r2, r0, #28
 800492e:	2a09      	cmp	r2, #9
 8004930:	d8f5      	bhi.n	800491e <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004932:	3230      	adds	r2, #48	; 0x30
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e7f4      	b.n	8004922 <IntToUnicode+0x1a>
  }
}
 8004938:	bd10      	pop	{r4, pc}
	...

0800493c <USBD_FS_SerialStrDescriptor>:
{
 800493c:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800493e:	231a      	movs	r3, #26
 8004940:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <USBD_FS_SerialStrDescriptor+0x34>)
 8004944:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <USBD_FS_SerialStrDescriptor+0x38>)
  deviceserial0 += deviceserial2;
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800494c:	2800      	cmp	r0, #0
 800494e:	d101      	bne.n	8004954 <USBD_FS_SerialStrDescriptor+0x18>
}
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004952:	bd70      	pop	{r4, r5, r6, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <USBD_FS_SerialStrDescriptor+0x40>)
 8004956:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004958:	4c07      	ldr	r4, [pc, #28]	; (8004978 <USBD_FS_SerialStrDescriptor+0x3c>)
 800495a:	1ca1      	adds	r1, r4, #2
 800495c:	2208      	movs	r2, #8
 800495e:	f7ff ffd3 	bl	8004908 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004962:	0021      	movs	r1, r4
 8004964:	3112      	adds	r1, #18
 8004966:	2204      	movs	r2, #4
 8004968:	0028      	movs	r0, r5
 800496a:	f7ff ffcd 	bl	8004908 <IntToUnicode>
 800496e:	e7ef      	b.n	8004950 <USBD_FS_SerialStrDescriptor+0x14>
 8004970:	1ffff7ac 	.word	0x1ffff7ac
 8004974:	1ffff7b4 	.word	0x1ffff7b4
 8004978:	20000160 	.word	0x20000160
 800497c:	1ffff7b0 	.word	0x1ffff7b0

08004980 <USBD_FS_ProductStrDescriptor>:
{
 8004980:	b510      	push	{r4, lr}
 8004982:	000a      	movs	r2, r1
  if(speed == 0)
 8004984:	2800      	cmp	r0, #0
 8004986:	d005      	beq.n	8004994 <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004988:	4905      	ldr	r1, [pc, #20]	; (80049a0 <USBD_FS_ProductStrDescriptor+0x20>)
 800498a:	4806      	ldr	r0, [pc, #24]	; (80049a4 <USBD_FS_ProductStrDescriptor+0x24>)
 800498c:	f7ff fb44 	bl	8004018 <USBD_GetString>
}
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <USBD_FS_ProductStrDescriptor+0x20>)
 8004992:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004994:	4902      	ldr	r1, [pc, #8]	; (80049a0 <USBD_FS_ProductStrDescriptor+0x20>)
 8004996:	4803      	ldr	r0, [pc, #12]	; (80049a4 <USBD_FS_ProductStrDescriptor+0x24>)
 8004998:	f7ff fb3e 	bl	8004018 <USBD_GetString>
 800499c:	e7f8      	b.n	8004990 <USBD_FS_ProductStrDescriptor+0x10>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	20000f64 	.word	0x20000f64
 80049a4:	08004e24 	.word	0x08004e24

080049a8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80049a8:	b510      	push	{r4, lr}
 80049aa:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80049ac:	4c03      	ldr	r4, [pc, #12]	; (80049bc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80049ae:	0021      	movs	r1, r4
 80049b0:	4803      	ldr	r0, [pc, #12]	; (80049c0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80049b2:	f7ff fb31 	bl	8004018 <USBD_GetString>
}
 80049b6:	0020      	movs	r0, r4
 80049b8:	bd10      	pop	{r4, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20000f64 	.word	0x20000f64
 80049c0:	08004e14 	.word	0x08004e14

080049c4 <USBD_FS_ConfigStrDescriptor>:
{
 80049c4:	b510      	push	{r4, lr}
 80049c6:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d005      	beq.n	80049d8 <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049cc:	4905      	ldr	r1, [pc, #20]	; (80049e4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80049ce:	4806      	ldr	r0, [pc, #24]	; (80049e8 <USBD_FS_ConfigStrDescriptor+0x24>)
 80049d0:	f7ff fb22 	bl	8004018 <USBD_GetString>
}
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80049d6:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049d8:	4902      	ldr	r1, [pc, #8]	; (80049e4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80049da:	4803      	ldr	r0, [pc, #12]	; (80049e8 <USBD_FS_ConfigStrDescriptor+0x24>)
 80049dc:	f7ff fb1c 	bl	8004018 <USBD_GetString>
 80049e0:	e7f8      	b.n	80049d4 <USBD_FS_ConfigStrDescriptor+0x10>
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	20000f64 	.word	0x20000f64
 80049e8:	08004df8 	.word	0x08004df8

080049ec <USBD_FS_InterfaceStrDescriptor>:
{
 80049ec:	b510      	push	{r4, lr}
 80049ee:	000a      	movs	r2, r1
  if(speed == 0)
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d005      	beq.n	8004a00 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80049f4:	4905      	ldr	r1, [pc, #20]	; (8004a0c <USBD_FS_InterfaceStrDescriptor+0x20>)
 80049f6:	4806      	ldr	r0, [pc, #24]	; (8004a10 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80049f8:	f7ff fb0e 	bl	8004018 <USBD_GetString>
}
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <USBD_FS_InterfaceStrDescriptor+0x20>)
 80049fe:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a00:	4902      	ldr	r1, [pc, #8]	; (8004a0c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a02:	4803      	ldr	r0, [pc, #12]	; (8004a10 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8004a04:	f7ff fb08 	bl	8004018 <USBD_GetString>
 8004a08:	e7f8      	b.n	80049fc <USBD_FS_InterfaceStrDescriptor+0x10>
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000f64 	.word	0x20000f64
 8004a10:	08004e04 	.word	0x08004e04

08004a14 <uv_led_init>:
 *
 * @param Void
 * @ return Void
 */
void uv_led_init( void )
{
 8004a14:	b510      	push	{r4, lr}
	// bind the ports and pins to the arrays
	uv_led_ports[0] = UV_LED_0_GPIO_Port;
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <uv_led_init+0x7c>)
 8004a18:	2290      	movs	r2, #144	; 0x90
 8004a1a:	05d2      	lsls	r2, r2, #23
 8004a1c:	601a      	str	r2, [r3, #0]
	uv_led_ports[1] = UV_LED_1_GPIO_Port;
 8004a1e:	605a      	str	r2, [r3, #4]
	uv_led_ports[2] = UV_LED_2_GPIO_Port;
 8004a20:	609a      	str	r2, [r3, #8]
	uv_led_ports[3] = UV_LED_3_GPIO_Port;
 8004a22:	60da      	str	r2, [r3, #12]
	uv_led_ports[4] = UV_LED_4_GPIO_Port;
 8004a24:	611a      	str	r2, [r3, #16]
	uv_led_ports[5] = UV_LED_5_GPIO_Port;
 8004a26:	615a      	str	r2, [r3, #20]
	uv_led_ports[6] = UV_LED_6_GPIO_Port;
 8004a28:	619a      	str	r2, [r3, #24]
	uv_led_ports[7] = UV_LED_7_GPIO_Port;
 8004a2a:	61da      	str	r2, [r3, #28]

	uv_led_pins[0] = UV_LED_0_Pin;
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <uv_led_init+0x80>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	801a      	strh	r2, [r3, #0]
	uv_led_pins[1] = UV_LED_1_Pin;
 8004a32:	3201      	adds	r2, #1
 8004a34:	805a      	strh	r2, [r3, #2]
	uv_led_pins[2] = UV_LED_2_Pin;
 8004a36:	3202      	adds	r2, #2
 8004a38:	809a      	strh	r2, [r3, #4]
	uv_led_pins[3] = UV_LED_3_Pin;
 8004a3a:	3204      	adds	r2, #4
 8004a3c:	80da      	strh	r2, [r3, #6]
	uv_led_pins[4] = UV_LED_4_Pin;
 8004a3e:	3208      	adds	r2, #8
 8004a40:	811a      	strh	r2, [r3, #8]
	uv_led_pins[5] = UV_LED_5_Pin;
 8004a42:	3210      	adds	r2, #16
 8004a44:	815a      	strh	r2, [r3, #10]
	uv_led_pins[6] = UV_LED_6_Pin;
 8004a46:	3220      	adds	r2, #32
 8004a48:	819a      	strh	r2, [r3, #12]
	uv_led_pins[7] = UV_LED_7_Pin;
 8004a4a:	3240      	adds	r2, #64	; 0x40
 8004a4c:	81da      	strh	r2, [r3, #14]

	// UVLEDs global enable flag is disabled by default
	enable_global = 0;
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <uv_led_init+0x84>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <uv_led_init+0x88>)

	// Read setup from FLASH
	// Load uv_led_enabled values from FLASH
	uint32_t flash_address_enabled = FLASH_UVLEDS_ENABLED_ADDR;
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <uv_led_init+0x8c>)

	for(uint8_t i = 0; i < 8; i++)
 8004a58:	4812      	ldr	r0, [pc, #72]	; (8004aa4 <uv_led_init+0x90>)
	{
		uv_led_enabled[i] = *(uint16_t *)flash_address_enabled;
 8004a5a:	8819      	ldrh	r1, [r3, #0]
 8004a5c:	7011      	strb	r1, [r2, #0]
		flash_address_enabled += 2;
 8004a5e:	3302      	adds	r3, #2
 8004a60:	3201      	adds	r2, #1
	for(uint8_t i = 0; i < 8; i++)
 8004a62:	4283      	cmp	r3, r0
 8004a64:	d1f9      	bne.n	8004a5a <uv_led_init+0x46>
	}

	// Load uv_led_periods_ms values from FLASH
	uint32_t flash_address_periods = FLASH_UVLEDS_PERIODS_ADDR;
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <uv_led_init+0x94>)

	for(uint8_t i = 0; i < 8; i++)
	{
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 8004a68:	4c10      	ldr	r4, [pc, #64]	; (8004aac <uv_led_init+0x98>)
	for(uint8_t i = 0; i < 8; i++)
 8004a6a:	4811      	ldr	r0, [pc, #68]	; (8004ab0 <uv_led_init+0x9c>)
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 8004a6c:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <uv_led_init+0xa0>)
 8004a6e:	189a      	adds	r2, r3, r2
 8004a70:	8819      	ldrh	r1, [r3, #0]
 8004a72:	50a1      	str	r1, [r4, r2]
		flash_address_periods += 4;
 8004a74:	3304      	adds	r3, #4
	for(uint8_t i = 0; i < 8; i++)
 8004a76:	4283      	cmp	r3, r0
 8004a78:	d1f8      	bne.n	8004a6c <uv_led_init+0x58>
	}

	// Reset the counters
	for (uint8_t i = 0; i < 8; i++)
	{
		uv_led_counter[i] = 0;
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <uv_led_init+0xa4>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	611a      	str	r2, [r3, #16]
 8004a88:	615a      	str	r2, [r3, #20]
 8004a8a:	619a      	str	r2, [r3, #24]
 8004a8c:	61da      	str	r2, [r3, #28]
	}
}
 8004a8e:	bd10      	pop	{r4, pc}
 8004a90:	200003ec 	.word	0x200003ec
 8004a94:	20000574 	.word	0x20000574
 8004a98:	200003e8 	.word	0x200003e8
 8004a9c:	20000584 	.word	0x20000584
 8004aa0:	08007000 	.word	0x08007000
 8004aa4:	08007010 	.word	0x08007010
 8004aa8:	08007400 	.word	0x08007400
 8004aac:	2000050c 	.word	0x2000050c
 8004ab0:	08007420 	.word	0x08007420
 8004ab4:	f7ff8c00 	.word	0xf7ff8c00
 8004ab8:	2000058c 	.word	0x2000058c

08004abc <uv_led_set_frequency>:
 * @param led_id ID of the LED (0-7)
 * @param frequency frequency of the UV LED
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_set_frequency( uint8_t led_id, uint8_t frequency)
{
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	b084      	sub	sp, #16
			HAL_FLASH_Lock();
			return 1;
		}
		return 0;
	}
	return 0;
 8004ac0:	2300      	movs	r3, #0
	if ((0 <= led_id) && (led_id < 8))
 8004ac2:	2807      	cmp	r0, #7
 8004ac4:	d802      	bhi.n	8004acc <uv_led_set_frequency+0x10>
		if ((UV_LED_FREQ_MIN <= frequency) && (frequency <= UV_LED_FREQ_MAX)) {
 8004ac6:	1e4a      	subs	r2, r1, #1
 8004ac8:	2a3b      	cmp	r2, #59	; 0x3b
 8004aca:	d902      	bls.n	8004ad2 <uv_led_set_frequency+0x16>
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	b004      	add	sp, #16
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
			uv_led_periods_ms[(uint8_t)led_id] = (uint32_t)period;
 8004ad2:	0084      	lsls	r4, r0, #2
			uint32_t period = (TIMER_FREQ/frequency)/2;
 8004ad4:	4819      	ldr	r0, [pc, #100]	; (8004b3c <uv_led_set_frequency+0x80>)
 8004ad6:	f7fb fba1 	bl	800021c <__divsi3>
			uv_led_periods_ms[(uint8_t)led_id] = (uint32_t)period;
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <uv_led_set_frequency+0x84>)
 8004adc:	50e0      	str	r0, [r4, r3]
			uv_led_counter [(uint8_t)led_id] = 0;
 8004ade:	2500      	movs	r5, #0
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <uv_led_set_frequency+0x88>)
 8004ae2:	50e5      	str	r5, [r4, r3]
			HAL_FLASH_Unlock();
 8004ae4:	f7fb fd46 	bl	8000574 <HAL_FLASH_Unlock>
			uint32_t PAGEError = 0;
 8004ae8:	9500      	str	r5, [sp, #0]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004aea:	9501      	str	r5, [sp, #4]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_PERIODS_ADDR;
 8004aec:	4c16      	ldr	r4, [pc, #88]	; (8004b48 <uv_led_set_frequency+0x8c>)
 8004aee:	9402      	str	r4, [sp, #8]
			EraseInitStruct.NbPages     = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	9303      	str	r3, [sp, #12]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8004af4:	4669      	mov	r1, sp
 8004af6:	a801      	add	r0, sp, #4
 8004af8:	f7fb fe12 	bl	8000720 <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <uv_led_set_frequency+0x90>)
 8004afe:	6913      	ldr	r3, [r2, #16]
 8004b00:	2102      	movs	r1, #2
 8004b02:	438b      	bics	r3, r1
 8004b04:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004b06:	f7fb fd49 	bl	800059c <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8004b0a:	f7fb fd33 	bl	8000574 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, uv_led_periods_ms[i]);
 8004b0e:	4e0c      	ldr	r6, [pc, #48]	; (8004b40 <uv_led_set_frequency+0x84>)
			for(int i = 0; i <8; i++)
 8004b10:	4d0f      	ldr	r5, [pc, #60]	; (8004b50 <uv_led_set_frequency+0x94>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, uv_led_periods_ms[i]);
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <uv_led_set_frequency+0x98>)
 8004b14:	18e3      	adds	r3, r4, r3
 8004b16:	58f2      	ldr	r2, [r6, r3]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	0021      	movs	r1, r4
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	f7fb fd75 	bl	800060c <HAL_FLASH_Program>
				flashAddress += 4;
 8004b22:	3404      	adds	r4, #4
			for(int i = 0; i <8; i++)
 8004b24:	42ac      	cmp	r4, r5
 8004b26:	d1f4      	bne.n	8004b12 <uv_led_set_frequency+0x56>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <uv_led_set_frequency+0x90>)
 8004b2a:	6913      	ldr	r3, [r2, #16]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	438b      	bics	r3, r1
 8004b30:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004b32:	f7fb fd33 	bl	800059c <HAL_FLASH_Lock>
			return 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e7c8      	b.n	8004acc <uv_led_set_frequency+0x10>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	00001388 	.word	0x00001388
 8004b40:	2000050c 	.word	0x2000050c
 8004b44:	2000058c 	.word	0x2000058c
 8004b48:	08007400 	.word	0x08007400
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	08007420 	.word	0x08007420
 8004b54:	f7ff8c00 	.word	0xf7ff8c00

08004b58 <uv_led_enable>:
 * @param led_id ID of the LED (0-7)
 * @param enable 1 if the LED is enables, otherwise 0
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_enable(uint8_t led_id, uint8_t enable)
{
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	b084      	sub	sp, #16
			HAL_FLASH_Lock();
			return 1;
		}
		return 0;
	}
	return 0;
 8004b5c:	2300      	movs	r3, #0
	if ((0 <= led_id) && (led_id < 8))
 8004b5e:	2807      	cmp	r0, #7
 8004b60:	d801      	bhi.n	8004b66 <uv_led_enable+0xe>
		if ((enable == 0) || (enable == 1))
 8004b62:	2901      	cmp	r1, #1
 8004b64:	d902      	bls.n	8004b6c <uv_led_enable+0x14>
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	b004      	add	sp, #16
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
			uv_led_enabled[led_id] = enable;
 8004b6c:	4d1b      	ldr	r5, [pc, #108]	; (8004bdc <uv_led_enable+0x84>)
 8004b6e:	5429      	strb	r1, [r5, r0]
			uv_led_counter [(uint8_t)led_id] = 0;
 8004b70:	0083      	lsls	r3, r0, #2
 8004b72:	2400      	movs	r4, #0
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <uv_led_enable+0x88>)
 8004b76:	509c      	str	r4, [r3, r2]
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], enable);
 8004b78:	0040      	lsls	r0, r0, #1
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <uv_led_enable+0x8c>)
 8004b7c:	5a86      	ldrh	r6, [r0, r2]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <uv_led_enable+0x90>)
 8004b80:	5898      	ldr	r0, [r3, r2]
 8004b82:	000a      	movs	r2, r1
 8004b84:	0031      	movs	r1, r6
 8004b86:	f7fb ff0d 	bl	80009a4 <HAL_GPIO_WritePin>
			HAL_FLASH_Unlock();
 8004b8a:	f7fb fcf3 	bl	8000574 <HAL_FLASH_Unlock>
			uint32_t PAGEError = 0;
 8004b8e:	9400      	str	r4, [sp, #0]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004b90:	9401      	str	r4, [sp, #4]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_ENABLED_ADDR;
 8004b92:	4c16      	ldr	r4, [pc, #88]	; (8004bec <uv_led_enable+0x94>)
 8004b94:	9402      	str	r4, [sp, #8]
			EraseInitStruct.NbPages     = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	9303      	str	r3, [sp, #12]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8004b9a:	4669      	mov	r1, sp
 8004b9c:	a801      	add	r0, sp, #4
 8004b9e:	f7fb fdbf 	bl	8000720 <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <uv_led_enable+0x98>)
 8004ba4:	6913      	ldr	r3, [r2, #16]
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	438b      	bics	r3, r1
 8004baa:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004bac:	f7fb fcf6 	bl	800059c <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8004bb0:	f7fb fce0 	bl	8000574 <HAL_FLASH_Unlock>
			for(int i = 0; i <8; i++)
 8004bb4:	4e0f      	ldr	r6, [pc, #60]	; (8004bf4 <uv_led_enable+0x9c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, uv_led_enabled[i]);
 8004bb6:	782a      	ldrb	r2, [r5, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	0021      	movs	r1, r4
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7fb fd25 	bl	800060c <HAL_FLASH_Program>
				flashAddress += 2;
 8004bc2:	3402      	adds	r4, #2
 8004bc4:	3501      	adds	r5, #1
			for(int i = 0; i <8; i++)
 8004bc6:	42b4      	cmp	r4, r6
 8004bc8:	d1f5      	bne.n	8004bb6 <uv_led_enable+0x5e>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <uv_led_enable+0x98>)
 8004bcc:	6913      	ldr	r3, [r2, #16]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	438b      	bics	r3, r1
 8004bd2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Lock();
 8004bd4:	f7fb fce2 	bl	800059c <HAL_FLASH_Lock>
			return 1;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e7c4      	b.n	8004b66 <uv_led_enable+0xe>
 8004bdc:	20000584 	.word	0x20000584
 8004be0:	2000058c 	.word	0x2000058c
 8004be4:	20000574 	.word	0x20000574
 8004be8:	200003ec 	.word	0x200003ec
 8004bec:	08007000 	.word	0x08007000
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	08007010 	.word	0x08007010

08004bf8 <uv_led_toggle>:
 *
 * 	@param led_id ID of the LED to be toggled
 * 	@return Void
 */
void uv_led_toggle(uint8_t led_id)
{
 8004bf8:	b570      	push	{r4, r5, r6, lr}
		if ((uv_led_enabled[led_id]))
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <uv_led_toggle+0x3c>)
 8004bfc:	5c1b      	ldrb	r3, [r3, r0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d100      	bne.n	8004c04 <uv_led_toggle+0xc>
		{
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
		}
}
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
 8004c04:	0082      	lsls	r2, r0, #2
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <uv_led_toggle+0x40>)
 8004c08:	58d4      	ldr	r4, [r2, r3]
 8004c0a:	0040      	lsls	r0, r0, #1
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <uv_led_toggle+0x44>)
 8004c0e:	5ac5      	ldrh	r5, [r0, r3]
 8004c10:	0029      	movs	r1, r5
 8004c12:	0020      	movs	r0, r4
 8004c14:	f7fb fec0 	bl	8000998 <HAL_GPIO_ReadPin>
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d103      	bne.n	8004c26 <uv_led_toggle+0x2e>
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <uv_led_toggle+0x48>)
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	1e53      	subs	r3, r2, #1
 8004c24:	419a      	sbcs	r2, r3
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	0029      	movs	r1, r5
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	f7fb feba 	bl	80009a4 <HAL_GPIO_WritePin>
}
 8004c30:	e7e7      	b.n	8004c02 <uv_led_toggle+0xa>
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	20000584 	.word	0x20000584
 8004c38:	200003ec 	.word	0x200003ec
 8004c3c:	20000574 	.word	0x20000574
 8004c40:	200003e8 	.word	0x200003e8

08004c44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c44:	4813      	ldr	r0, [pc, #76]	; (8004c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c46:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004c48:	4813      	ldr	r0, [pc, #76]	; (8004c98 <LoopForever+0x6>)
    LDR R1, [R0]
 8004c4a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004c4c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <LoopForever+0xa>)
    CMP R1, R2
 8004c50:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004c52:	d105      	bne.n	8004c60 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004c54:	4812      	ldr	r0, [pc, #72]	; (8004ca0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004c56:	4913      	ldr	r1, [pc, #76]	; (8004ca4 <LoopForever+0x12>)
    STR R1, [R0]
 8004c58:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004c5a:	4813      	ldr	r0, [pc, #76]	; (8004ca8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004c5c:	4913      	ldr	r1, [pc, #76]	; (8004cac <LoopForever+0x1a>)
    STR R1, [R0]
 8004c5e:	6001      	str	r1, [r0, #0]

08004c60 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c60:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004c62:	4914      	ldr	r1, [pc, #80]	; (8004cb4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <LoopForever+0x26>)
  movs r3, #0
 8004c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c68:	e002      	b.n	8004c70 <LoopCopyDataInit>

08004c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c6e:	3304      	adds	r3, #4

08004c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c74:	d3f9      	bcc.n	8004c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c76:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004c78:	4c11      	ldr	r4, [pc, #68]	; (8004cc0 <LoopForever+0x2e>)
  movs r3, #0
 8004c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c7c:	e001      	b.n	8004c82 <LoopFillZerobss>

08004c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c80:	3204      	adds	r2, #4

08004c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c84:	d3fb      	bcc.n	8004c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c86:	f7ff fbdb 	bl	8004440 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004c8a:	f000 f81d 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c8e:	f7ff fabb 	bl	8004208 <main>

08004c92 <LoopForever>:

LoopForever:
    b LoopForever
 8004c92:	e7fe      	b.n	8004c92 <LoopForever>
  ldr   r0, =_estack
 8004c94:	200017ff 	.word	0x200017ff
    LDR R0,=0x00000004
 8004c98:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004c9c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004ca0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004ca4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004ca8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004cac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cb4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8004cb8:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 8004cbc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8004cc0:	20001164 	.word	0x20001164

08004cc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cc4:	e7fe      	b.n	8004cc4 <ADC1_IRQHandler>
	...

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	2600      	movs	r6, #0
 8004ccc:	4d0c      	ldr	r5, [pc, #48]	; (8004d00 <__libc_init_array+0x38>)
 8004cce:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	2600      	movs	r6, #0
 8004cda:	f000 f82b 	bl	8004d34 <_init>
 8004cde:	4d0a      	ldr	r5, [pc, #40]	; (8004d08 <__libc_init_array+0x40>)
 8004ce0:	4c0a      	ldr	r4, [pc, #40]	; (8004d0c <__libc_init_array+0x44>)
 8004ce2:	1b64      	subs	r4, r4, r5
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	00b3      	lsls	r3, r6, #2
 8004cee:	58eb      	ldr	r3, [r5, r3]
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	00b3      	lsls	r3, r6, #2
 8004cf8:	58eb      	ldr	r3, [r5, r3]
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004e38 	.word	0x08004e38
 8004d04:	08004e38 	.word	0x08004e38
 8004d08:	08004e38 	.word	0x08004e38
 8004d0c:	08004e3c 	.word	0x08004e3c

08004d10 <memcpy>:
 8004d10:	2300      	movs	r3, #0
 8004d12:	b510      	push	{r4, lr}
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d100      	bne.n	8004d1a <memcpy+0xa>
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	5ccc      	ldrb	r4, [r1, r3]
 8004d1c:	54c4      	strb	r4, [r0, r3]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	e7f8      	b.n	8004d14 <memcpy+0x4>

08004d22 <memset>:
 8004d22:	0003      	movs	r3, r0
 8004d24:	1812      	adds	r2, r2, r0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d100      	bne.n	8004d2c <memset+0xa>
 8004d2a:	4770      	bx	lr
 8004d2c:	7019      	strb	r1, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	e7f9      	b.n	8004d26 <memset+0x4>
	...

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
