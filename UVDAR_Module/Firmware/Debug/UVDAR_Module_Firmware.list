
UVDAR_Module_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004908  08004908  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004908  08004908  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000010  0800491c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800491c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd70  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225f  00000000  00000000  0002cda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  0002fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190b6  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0f5  00000000  00000000  00049c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009125a  00000000  00000000  00055d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000e6ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800489c 	.word	0x0800489c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800489c 	.word	0x0800489c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_Init+0x24>)
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f003 feaf 	bl	800416c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <HAL_InitTick+0x5c>)
 8000426:	681c      	ldr	r4, [r3, #0]
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_InitTick+0x60>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	0019      	movs	r1, r3
 800042e:	23fa      	movs	r3, #250	; 0xfa
 8000430:	0098      	lsls	r0, r3, #2
 8000432:	f7ff fe69 	bl	8000108 <__udivsi3>
 8000436:	0003      	movs	r3, r0
 8000438:	0019      	movs	r1, r3
 800043a:	0020      	movs	r0, r4
 800043c:	f7ff fe64 	bl	8000108 <__udivsi3>
 8000440:	0003      	movs	r3, r0
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f92d 	bl	80006a2 <HAL_SYSTICK_Config>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	e00f      	b.n	8000470 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d80b      	bhi.n	800046e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	2301      	movs	r3, #1
 800045a:	425b      	negs	r3, r3
 800045c:	2200      	movs	r2, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f8fa 	bl	8000658 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_InitTick+0x64>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	b003      	add	sp, #12
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	20000008 	.word	0x20000008
 800047c:	20000004 	.word	0x20000004
 8000480:	20000000 	.word	0x20000000

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	18d2      	adds	r2, r2, r3
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <HAL_IncTick+0x20>)
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000004 	.word	0x20000004
 80004a4:	20000030 	.word	0x20000030

080004a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <HAL_GetTick+0x10>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000030 	.word	0x20000030

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c4:	f7ff fff0 	bl	80004a8 <HAL_GetTick>
 80004c8:	0003      	movs	r3, r0
 80004ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	d005      	beq.n	80004e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_Delay+0x40>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	f7ff ffe0 	bl	80004a8 <HAL_GetTick>
 80004e8:	0002      	movs	r2, r0
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d8f7      	bhi.n	80004e4 <HAL_Delay+0x28>
  {
  }
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000004 	.word	0x20000004

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b7f      	cmp	r3, #127	; 0x7f
 8000512:	d809      	bhi.n	8000528 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	231f      	movs	r3, #31
 800051c:	401a      	ands	r2, r3
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__NVIC_EnableIRQ+0x30>)
 8000520:	2101      	movs	r1, #1
 8000522:	4091      	lsls	r1, r2
 8000524:	000a      	movs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
  }
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	e000e100 	.word	0xe000e100

08000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b7f      	cmp	r3, #127	; 0x7f
 8000548:	d828      	bhi.n	800059c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054a:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	33c0      	adds	r3, #192	; 0xc0
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	589b      	ldr	r3, [r3, r2]
 800055a:	1dfa      	adds	r2, r7, #7
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	0011      	movs	r1, r2
 8000560:	2203      	movs	r2, #3
 8000562:	400a      	ands	r2, r1
 8000564:	00d2      	lsls	r2, r2, #3
 8000566:	21ff      	movs	r1, #255	; 0xff
 8000568:	4091      	lsls	r1, r2
 800056a:	000a      	movs	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	401a      	ands	r2, r3
 8000570:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	019b      	lsls	r3, r3, #6
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	401a      	ands	r2, r3
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	2303      	movs	r3, #3
 8000582:	4003      	ands	r3, r0
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000588:	481f      	ldr	r0, [pc, #124]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	089b      	lsrs	r3, r3, #2
 8000592:	430a      	orrs	r2, r1
 8000594:	33c0      	adds	r3, #192	; 0xc0
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800059a:	e031      	b.n	8000600 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <__NVIC_SetPriority+0xd8>)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	0019      	movs	r1, r3
 80005a4:	230f      	movs	r3, #15
 80005a6:	400b      	ands	r3, r1
 80005a8:	3b08      	subs	r3, #8
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	3306      	adds	r3, #6
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	3304      	adds	r3, #4
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	0011      	movs	r1, r2
 80005bc:	2203      	movs	r2, #3
 80005be:	400a      	ands	r2, r1
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	21ff      	movs	r1, #255	; 0xff
 80005c4:	4091      	lsls	r1, r2
 80005c6:	000a      	movs	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	401a      	ands	r2, r3
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	0018      	movs	r0, r3
 80005dc:	2303      	movs	r3, #3
 80005de:	4003      	ands	r3, r0
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <__NVIC_SetPriority+0xd8>)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	001c      	movs	r4, r3
 80005ec:	230f      	movs	r3, #15
 80005ee:	4023      	ands	r3, r4
 80005f0:	3b08      	subs	r3, #8
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	430a      	orrs	r2, r1
 80005f6:	3306      	adds	r3, #6
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	18c3      	adds	r3, r0, r3
 80005fc:	3304      	adds	r3, #4
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <SysTick_Config+0x40>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d901      	bls.n	8000626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2301      	movs	r3, #1
 8000624:	e010      	b.n	8000648 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SysTick_Config+0x44>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	3a01      	subs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	2103      	movs	r1, #3
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff7d 	bl	8000534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SysTick_Config+0x44>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SysTick_Config+0x44>)
 8000642:	2207      	movs	r2, #7
 8000644:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000646:	2300      	movs	r3, #0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	00ffffff 	.word	0x00ffffff
 8000654:	e000e010 	.word	0xe000e010

08000658 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	210f      	movs	r1, #15
 8000664:	187b      	adds	r3, r7, r1
 8000666:	1c02      	adds	r2, r0, #0
 8000668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff5d 	bl	8000534 <__NVIC_SetPriority>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	0002      	movs	r2, r0
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ff33 	bl	8000500 <__NVIC_EnableIRQ>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ffaf 	bl	8000610 <SysTick_Config>
 80006b2:	0003      	movs	r3, r0
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e036      	b.n	8000740 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2221      	movs	r2, #33	; 0x21
 80006d6:	2102      	movs	r1, #2
 80006d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <HAL_DMA_Init+0x8c>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80006f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800070a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	4313      	orrs	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	0018      	movs	r0, r3
 8000724:	f000 f9ce 	bl	8000ac4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2221      	movs	r2, #33	; 0x21
 8000732:	2101      	movs	r1, #1
 8000734:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}  
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b004      	add	sp, #16
 8000746:	bd80      	pop	{r7, pc}
 8000748:	ffffc00f 	.word	0xffffc00f

0800074c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800075a:	2317      	movs	r3, #23
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2220      	movs	r2, #32
 8000766:	5c9b      	ldrb	r3, [r3, r2]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d101      	bne.n	8000770 <HAL_DMA_Start_IT+0x24>
 800076c:	2302      	movs	r3, #2
 800076e:	e04f      	b.n	8000810 <HAL_DMA_Start_IT+0xc4>
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2220      	movs	r2, #32
 8000774:	2101      	movs	r1, #1
 8000776:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2221      	movs	r2, #33	; 0x21
 800077c:	5c9b      	ldrb	r3, [r3, r2]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b01      	cmp	r3, #1
 8000782:	d13a      	bne.n	80007fa <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2221      	movs	r2, #33	; 0x21
 8000788:	2102      	movs	r1, #2
 800078a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2200      	movs	r2, #0
 8000790:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	438a      	bics	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 f95f 	bl	8000a6c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	210e      	movs	r1, #14
 80007c2:	430a      	orrs	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e00f      	b.n	80007e8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	210a      	movs	r1, #10
 80007d4:	430a      	orrs	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2104      	movs	r1, #4
 80007e4:	438a      	bics	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2101      	movs	r1, #1
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e007      	b.n	800080a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2220      	movs	r2, #32
 80007fe:	2100      	movs	r1, #0
 8000800:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000802:	2317      	movs	r3, #23
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800080a:	2317      	movs	r3, #23
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781b      	ldrb	r3, [r3, #0]
} 
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b006      	add	sp, #24
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2221      	movs	r2, #33	; 0x21
 8000824:	5c9b      	ldrb	r3, [r3, r2]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b02      	cmp	r3, #2
 800082a:	d008      	beq.n	800083e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2204      	movs	r2, #4
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2220      	movs	r2, #32
 8000836:	2100      	movs	r1, #0
 8000838:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e020      	b.n	8000880 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	210e      	movs	r1, #14
 800084a:	438a      	bics	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	438a      	bics	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000866:	2101      	movs	r1, #1
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2221      	movs	r2, #33	; 0x21
 8000872:	2101      	movs	r1, #1
 8000874:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2220      	movs	r2, #32
 800087a:	2100      	movs	r1, #0
 800087c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2221      	movs	r2, #33	; 0x21
 800089c:	5c9b      	ldrb	r3, [r3, r2]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d007      	beq.n	80008b4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2204      	movs	r2, #4
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008aa:	230f      	movs	r3, #15
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e028      	b.n	8000906 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	210e      	movs	r1, #14
 80008c0:	438a      	bics	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2101      	movs	r1, #1
 80008d0:	438a      	bics	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008dc:	2101      	movs	r1, #1
 80008de:	4091      	lsls	r1, r2
 80008e0:	000a      	movs	r2, r1
 80008e2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2221      	movs	r2, #33	; 0x21
 80008e8:	2101      	movs	r1, #1
 80008ea:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2220      	movs	r2, #32
 80008f0:	2100      	movs	r1, #0
 80008f2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	0010      	movs	r0, r2
 8000904:	4798      	blx	r3
    } 
  }
  return status;
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b004      	add	sp, #16
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	2204      	movs	r2, #4
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4013      	ands	r3, r2
 800093a:	d024      	beq.n	8000986 <HAL_DMA_IRQHandler+0x72>
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2204      	movs	r2, #4
 8000940:	4013      	ands	r3, r2
 8000942:	d020      	beq.n	8000986 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2220      	movs	r2, #32
 800094c:	4013      	ands	r3, r2
 800094e:	d107      	bne.n	8000960 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2104      	movs	r1, #4
 800095c:	438a      	bics	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000968:	2104      	movs	r1, #4
 800096a:	4091      	lsls	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <HAL_DMA_IRQHandler+0x66>
 8000978:	e06a      	b.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	0010      	movs	r0, r2
 8000982:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000984:	e064      	b.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	2202      	movs	r2, #2
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4013      	ands	r3, r2
 8000994:	d02b      	beq.n	80009ee <HAL_DMA_IRQHandler+0xda>
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2202      	movs	r2, #2
 800099a:	4013      	ands	r3, r2
 800099c:	d027      	beq.n	80009ee <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2220      	movs	r2, #32
 80009a6:	4013      	ands	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	210a      	movs	r1, #10
 80009b6:	438a      	bics	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2221      	movs	r2, #33	; 0x21
 80009be:	2101      	movs	r1, #1
 80009c0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ca:	2102      	movs	r1, #2
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2220      	movs	r2, #32
 80009d6:	2100      	movs	r1, #0
 80009d8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d036      	beq.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	0010      	movs	r0, r2
 80009ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80009ec:	e030      	b.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	2208      	movs	r2, #8
 80009f4:	409a      	lsls	r2, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	4013      	ands	r3, r2
 80009fc:	d028      	beq.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	2208      	movs	r2, #8
 8000a02:	4013      	ands	r3, r2
 8000a04:	d024      	beq.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	210e      	movs	r1, #14
 8000a12:	438a      	bics	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2221      	movs	r2, #33	; 0x21
 8000a30:	2101      	movs	r1, #1
 8000a32:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2220      	movs	r2, #32
 8000a38:	2100      	movs	r1, #0
 8000a3a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	4798      	blx	r3
    }
   }
}  
 8000a4e:	e7ff      	b.n	8000a50 <HAL_DMA_IRQHandler+0x13c>
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	2101      	movs	r1, #1
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	d108      	bne.n	8000aac <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000aaa:	e007      	b.n	8000abc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b004      	add	sp, #16
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <DMA_CalcBaseAndBitshift+0x30>)
 8000ad2:	4694      	mov	ip, r2
 8000ad4:	4463      	add	r3, ip
 8000ad6:	2114      	movs	r1, #20
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fb15 	bl	8000108 <__udivsi3>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	009a      	lsls	r2, r3, #2
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <DMA_CalcBaseAndBitshift+0x34>)
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	bffdfff8 	.word	0xbffdfff8
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	603a      	str	r2, [r7, #0]
 8000b08:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b0a:	2317      	movs	r3, #23
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000b12:	2316      	movs	r3, #22
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <HAL_FLASH_Program+0x120>)
 8000b24:	7e1b      	ldrb	r3, [r3, #24]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <HAL_FLASH_Program+0x32>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e072      	b.n	8000c14 <HAL_FLASH_Program+0x118>
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <HAL_FLASH_Program+0x120>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b34:	2317      	movs	r3, #23
 8000b36:	18fe      	adds	r6, r7, r3
 8000b38:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <HAL_FLASH_Program+0x124>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f8c4 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000b40:	0003      	movs	r3, r0
 8000b42:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000b44:	2317      	movs	r3, #23
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d15c      	bne.n	8000c08 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d104      	bne.n	8000b5e <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000b54:	2315      	movs	r3, #21
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e00b      	b.n	8000b76 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d104      	bne.n	8000b6e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b64:	2315      	movs	r3, #21
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	2202      	movs	r2, #2
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e003      	b.n	8000b76 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b6e:	2315      	movs	r3, #21
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	2204      	movs	r2, #4
 8000b74:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b76:	2316      	movs	r3, #22
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e039      	b.n	8000bf4 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b80:	2116      	movs	r1, #22
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	005a      	lsls	r2, r3, #1
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	18d0      	adds	r0, r2, r3
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	001a      	movs	r2, r3
 8000b94:	3a20      	subs	r2, #32
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	db03      	blt.n	8000ba2 <HAL_FLASH_Program+0xa6>
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	40d1      	lsrs	r1, r2
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	e008      	b.n	8000bb4 <HAL_FLASH_Program+0xb8>
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	40d9      	lsrs	r1, r3
 8000bb0:	000c      	movs	r4, r1
 8000bb2:	4314      	orrs	r4, r2
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	40da      	lsrs	r2, r3
 8000bb8:	0015      	movs	r5, r2
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	f000 f867 	bl	8000c90 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bc2:	2317      	movs	r3, #23
 8000bc4:	18fe      	adds	r6, r7, r3
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_FLASH_Program+0x124>)
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f87d 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_FLASH_Program+0x128>)
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_FLASH_Program+0x128>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	438a      	bics	r2, r1
 8000bdc:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000bde:	2317      	movs	r3, #23
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10e      	bne.n	8000c06 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000be8:	2116      	movs	r1, #22
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	3201      	adds	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	2316      	movs	r3, #22
 8000bf6:	18fa      	adds	r2, r7, r3
 8000bf8:	2315      	movs	r3, #21
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3bd      	bcc.n	8000b80 <HAL_FLASH_Program+0x84>
 8000c04:	e000      	b.n	8000c08 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000c06:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <HAL_FLASH_Program+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]

  return status;
 8000c0e:	2317      	movs	r3, #23
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b007      	add	sp, #28
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1c:	20000038 	.word	0x20000038
 8000c20:	0000c350 	.word	0x0000c350
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_FLASH_Unlock+0x40>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d00d      	beq.n	8000c5a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_FLASH_Unlock+0x40>)
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_FLASH_Unlock+0x44>)
 8000c42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_FLASH_Unlock+0x40>)
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_FLASH_Unlock+0x48>)
 8000c48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_FLASH_Unlock+0x40>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	4013      	ands	r3, r2
 8000c52:	d002      	beq.n	8000c5a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40022000 	.word	0x40022000
 8000c6c:	45670123 	.word	0x45670123
 8000c70:	cdef89ab 	.word	0xcdef89ab

08000c74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_FLASH_Lock+0x18>)
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_FLASH_Lock+0x18>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	430a      	orrs	r2, r1
 8000c82:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40022000 	.word	0x40022000

08000c90 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	000a      	movs	r2, r1
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <FLASH_Program_HalfWord+0x30>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <FLASH_Program_HalfWord+0x34>)
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <FLASH_Program_HalfWord+0x34>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	1cba      	adds	r2, r7, #2
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	801a      	strh	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000038 	.word	0x20000038
 8000cc4:	40022000 	.word	0x40022000

08000cc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fbea 	bl	80004a8 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cd8:	e00f      	b.n	8000cfa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	d00c      	beq.n	8000cfa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <FLASH_WaitForLastOperation+0x2e>
 8000ce6:	f7ff fbdf 	bl	80004a8 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d201      	bcs.n	8000cfa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e01f      	b.n	8000d3a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <FLASH_WaitForLastOperation+0x7c>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d0e9      	beq.n	8000cda <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <FLASH_WaitForLastOperation+0x7c>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b20      	cmp	r3, #32
 8000d10:	d102      	bne.n	8000d18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <FLASH_WaitForLastOperation+0x7c>)
 8000d14:	2220      	movs	r2, #32
 8000d16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <FLASH_WaitForLastOperation+0x7c>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d005      	beq.n	8000d30 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <FLASH_WaitForLastOperation+0x7c>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d103      	bne.n	8000d38 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d30:	f000 f80a 	bl	8000d48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40022000 	.word	0x40022000

08000d48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <FLASH_SetErrorCode+0x58>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2210      	movs	r2, #16
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d109      	bne.n	8000d72 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <FLASH_SetErrorCode+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	2202      	movs	r2, #2
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <FLASH_SetErrorCode+0x5c>)
 8000d68:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <FLASH_SetErrorCode+0x58>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2204      	movs	r2, #4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d109      	bne.n	8000d92 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <FLASH_SetErrorCode+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2201      	movs	r2, #1
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <FLASH_SetErrorCode+0x5c>)
 8000d88:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d92:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <FLASH_SetErrorCode+0x58>)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	60da      	str	r2, [r3, #12]
}  
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000
 8000da4:	20000038 	.word	0x20000038

08000da8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000db2:	230f      	movs	r3, #15
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <HAL_FLASHEx_Erase+0xe0>)
 8000dc0:	7e1b      	ldrb	r3, [r3, #24]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <HAL_FLASHEx_Erase+0x22>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e05a      	b.n	8000e80 <HAL_FLASHEx_Erase+0xd8>
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_FLASHEx_Erase+0xe0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d116      	bne.n	8000e06 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_FLASHEx_Erase+0xe4>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff74 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d147      	bne.n	8000e74 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000de4:	f000 f856 	bl	8000e94 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fc      	adds	r4, r7, r3
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_FLASHEx_Erase+0xe4>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff ff6a 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000df4:	0003      	movs	r3, r0
 8000df6:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000df8:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <HAL_FLASHEx_Erase+0xe8>)
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_FLASHEx_Erase+0xe8>)
 8000dfe:	2104      	movs	r1, #4
 8000e00:	438a      	bics	r2, r1
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	e036      	b.n	8000e74 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_FLASHEx_Erase+0xe4>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d130      	bne.n	8000e74 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4252      	negs	r2, r2
 8000e18:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	e01f      	b.n	8000e62 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 f84d 	bl	8000ec4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e2a:	250f      	movs	r5, #15
 8000e2c:	197c      	adds	r4, r7, r5
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_FLASHEx_Erase+0xe4>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff ff49 	bl	8000cc8 <FLASH_WaitForLastOperation>
 8000e36:	0003      	movs	r3, r0
 8000e38:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_FLASHEx_Erase+0xe8>)
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_FLASHEx_Erase+0xe8>)
 8000e40:	2102      	movs	r1, #2
 8000e42:	438a      	bics	r2, r1
 8000e44:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000e46:	197b      	adds	r3, r7, r5
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	601a      	str	r2, [r3, #0]
            break;
 8000e54:	e00e      	b.n	8000e74 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	00d2      	lsls	r2, r2, #3
 8000e5c:	4694      	mov	ip, r2
 8000e5e:	4463      	add	r3, ip
 8000e60:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	029a      	lsls	r2, r3, #10
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3d6      	bcc.n	8000e22 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_FLASHEx_Erase+0xe0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]

  return status;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b004      	add	sp, #16
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	20000038 	.word	0x20000038
 8000e8c:	0000c350 	.word	0x0000c350
 8000e90:	40022000 	.word	0x40022000

08000e94 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <FLASH_MassErase+0x28>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <FLASH_MassErase+0x2c>)
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <FLASH_MassErase+0x2c>)
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <FLASH_MassErase+0x2c>)
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <FLASH_MassErase+0x2c>)
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000038 	.word	0x20000038
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <FLASH_PageErase+0x34>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <FLASH_PageErase+0x38>)
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <FLASH_PageErase+0x38>)
 8000ed8:	2102      	movs	r1, #2
 8000eda:	430a      	orrs	r2, r1
 8000edc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <FLASH_PageErase+0x38>)
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <FLASH_PageErase+0x38>)
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <FLASH_PageErase+0x38>)
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	430a      	orrs	r2, r1
 8000eee:	611a      	str	r2, [r3, #16]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000038 	.word	0x20000038
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e149      	b.n	80011a4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x28>
 8000f26:	e13a      	b.n	800119e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d00b      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3c:	2b11      	cmp	r3, #17
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	2201      	movs	r2, #1
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0xea>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	58d3      	ldr	r3, [r2, r3]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2107      	movs	r1, #7
 8001016:	400b      	ands	r3, r1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	401a      	ands	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	055b      	lsls	r3, r3, #21
 800106e:	4013      	ands	r3, r2
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x174>
 8001072:	e094      	b.n	800119e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x2bc>)
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_GPIO_Init+0x2bc>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x2bc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	2201      	movs	r2, #1
 8001086:	4013      	ands	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x2c0>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	589b      	ldr	r3, [r3, r2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	2390      	movs	r3, #144	; 0x90
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x1d2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_GPIO_Init+0x2c8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x1ce>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010d6:	2300      	movs	r3, #0
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	2103      	movs	r1, #3
 80010dc:	400a      	ands	r2, r1
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2c0>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	035b      	lsls	r3, r3, #13
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	039b      	lsls	r3, r3, #14
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	40da      	lsrs	r2, r3
 80011ac:	1e13      	subs	r3, r2, #0
 80011ae:	d000      	beq.n	80011b2 <HAL_GPIO_Init+0x2b2>
 80011b0:	e6ae      	b.n	8000f10 <HAL_GPIO_Init+0x10>
  } 
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b006      	add	sp, #24
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	48000800 	.word	0x48000800
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	000a      	movs	r2, r1
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	1cba      	adds	r2, r7, #2
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	d004      	beq.n	80011f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
  }
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	0008      	movs	r0, r1
 8001214:	0011      	movs	r1, r2
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	1c02      	adds	r2, r0, #0
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	1c7b      	adds	r3, r7, #1
 800121e:	1c0a      	adds	r2, r1, #0
 8001220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001222:	1c7b      	adds	r3, r7, #1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001232:	e003      	b.n	800123c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	000a      	movs	r2, r1
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	1cb9      	adds	r1, r7, #2
 8001268:	8809      	ldrh	r1, [r1, #0]
 800126a:	400b      	ands	r3, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dbb      	adds	r3, r7, #6
 8001286:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	1dba      	adds	r2, r7, #6
 800128e:	8812      	ldrh	r2, [r2, #0]
 8001290:	4013      	ands	r3, r2
 8001292:	d008      	beq.n	80012a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001296:	1dba      	adds	r2, r7, #6
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f002 fd9d 	bl	8003de0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f000 fb76 	bl	80019b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4013      	ands	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x20>
 80012d2:	e08e      	b.n	80013f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012d4:	4bc5      	ldr	r3, [pc, #788]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	220c      	movs	r2, #12
 80012da:	4013      	ands	r3, r2
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d00e      	beq.n	80012fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e0:	4bc2      	ldr	r3, [pc, #776]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d117      	bne.n	800131c <HAL_RCC_OscConfig+0x68>
 80012ec:	4bbf      	ldr	r3, [pc, #764]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	23c0      	movs	r3, #192	; 0xc0
 80012f2:	025b      	lsls	r3, r3, #9
 80012f4:	401a      	ands	r2, r3
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d10e      	bne.n	800131c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fe:	4bbb      	ldr	r3, [pc, #748]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d100      	bne.n	800130c <HAL_RCC_OscConfig+0x58>
 800130a:	e071      	b.n	80013f0 <HAL_RCC_OscConfig+0x13c>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d000      	beq.n	8001316 <HAL_RCC_OscConfig+0x62>
 8001314:	e06c      	b.n	80013f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f000 fb4c 	bl	80019b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x80>
 8001324:	4bb1      	ldr	r3, [pc, #708]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4bb0      	ldr	r3, [pc, #704]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e02f      	b.n	8001394 <HAL_RCC_OscConfig+0xe0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <HAL_RCC_OscConfig+0xa2>
 800133c:	4bab      	ldr	r3, [pc, #684]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4baa      	ldr	r3, [pc, #680]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001342:	49ab      	ldr	r1, [pc, #684]	; (80015f0 <HAL_RCC_OscConfig+0x33c>)
 8001344:	400a      	ands	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	4ba8      	ldr	r3, [pc, #672]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4ba7      	ldr	r3, [pc, #668]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800134e:	49a9      	ldr	r1, [pc, #676]	; (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e01e      	b.n	8001394 <HAL_RCC_OscConfig+0xe0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10e      	bne.n	800137c <HAL_RCC_OscConfig+0xc8>
 800135e:	4ba3      	ldr	r3, [pc, #652]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba2      	ldr	r3, [pc, #648]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	02c9      	lsls	r1, r1, #11
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	4b9f      	ldr	r3, [pc, #636]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	0249      	lsls	r1, r1, #9
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xe0>
 800137c:	4b9b      	ldr	r3, [pc, #620]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b9a      	ldr	r3, [pc, #616]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001382:	499b      	ldr	r1, [pc, #620]	; (80015f0 <HAL_RCC_OscConfig+0x33c>)
 8001384:	400a      	ands	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	4b98      	ldr	r3, [pc, #608]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b97      	ldr	r3, [pc, #604]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800138e:	4999      	ldr	r1, [pc, #612]	; (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d014      	beq.n	80013c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff f884 	bl	80004a8 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a6:	f7ff f87f 	bl	80004a8 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e2fd      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0xf2>
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff f86f 	bl	80004a8 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff f86a 	bl	80004a8 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e2e8      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	4013      	ands	r3, r2
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x11c>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x14a>
 80013fc:	e06c      	b.n	80014d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	220c      	movs	r2, #12
 8001404:	4013      	ands	r3, r2
 8001406:	d00e      	beq.n	8001426 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001408:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	220c      	movs	r2, #12
 800140e:	4013      	ands	r3, r2
 8001410:	2b08      	cmp	r3, #8
 8001412:	d11f      	bne.n	8001454 <HAL_RCC_OscConfig+0x1a0>
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	23c0      	movs	r3, #192	; 0xc0
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	401a      	ands	r2, r3
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	429a      	cmp	r2, r3
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x188>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2bb      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	22f8      	movs	r2, #248	; 0xf8
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00da      	lsls	r2, r3, #3
 800144c:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e041      	b.n	80014d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d024      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001462:	2101      	movs	r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f81e 	bl	80004a8 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff f819 	bl	80004a8 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e297      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d0f1      	beq.n	8001472 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	22f8      	movs	r2, #248	; 0xf8
 8001494:	4393      	bics	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00da      	lsls	r2, r3, #3
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7fe fff9 	bl	80004a8 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7fe fff4 	bl	80004a8 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e272      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d1f1      	bne.n	80014bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2208      	movs	r2, #8
 80014de:	4013      	ands	r3, r2
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7fe ffd7 	bl	80004a8 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001500:	f7fe ffd2 	bl	80004a8 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e250      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d0f1      	beq.n	8001500 <HAL_RCC_OscConfig+0x24c>
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001524:	2101      	movs	r1, #1
 8001526:	438a      	bics	r2, r1
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7fe ffbd 	bl	80004a8 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7fe ffb8 	bl	80004a8 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e236      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d1f1      	bne.n	8001534 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2204      	movs	r2, #4
 8001556:	4013      	ands	r3, r2
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800155a:	e0b5      	b.n	80016c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155c:	231f      	movs	r3, #31
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	055b      	lsls	r3, r3, #21
 800156c:	4013      	ands	r3, r2
 800156e:	d111      	bne.n	8001594 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0549      	lsls	r1, r1, #21
 800157a:	430a      	orrs	r2, r1
 800157c:	61da      	str	r2, [r3, #28]
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	055b      	lsls	r3, r3, #21
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158c:	231f      	movs	r3, #31
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_RCC_OscConfig+0x344>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4013      	ands	r3, r2
 800159e:	d11a      	bne.n	80015d6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x344>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_OscConfig+0x344>)
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	0049      	lsls	r1, r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7fe ff7b 	bl	80004a8 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7fe ff76 	bl	80004a8 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1f4      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x344>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10e      	bne.n	80015fc <HAL_RCC_OscConfig+0x348>
 80015de:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_RCC_OscConfig+0x338>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	621a      	str	r2, [r3, #32]
 80015ea:	e035      	b.n	8001658 <HAL_RCC_OscConfig+0x3a4>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	fffeffff 	.word	0xfffeffff
 80015f4:	fffbffff 	.word	0xfffbffff
 80015f8:	40007000 	.word	0x40007000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x36a>
 8001604:	4bca      	ldr	r3, [pc, #808]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	4bc9      	ldr	r3, [pc, #804]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	4bc7      	ldr	r3, [pc, #796]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	4bc6      	ldr	r3, [pc, #792]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	621a      	str	r2, [r3, #32]
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x3a4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x38c>
 8001626:	4bc2      	ldr	r3, [pc, #776]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001628:	6a1a      	ldr	r2, [r3, #32]
 800162a:	4bc1      	ldr	r3, [pc, #772]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800162c:	2104      	movs	r1, #4
 800162e:	430a      	orrs	r2, r1
 8001630:	621a      	str	r2, [r3, #32]
 8001632:	4bbf      	ldr	r3, [pc, #764]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	4bbe      	ldr	r3, [pc, #760]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001638:	2101      	movs	r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	621a      	str	r2, [r3, #32]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x3a4>
 8001640:	4bbb      	ldr	r3, [pc, #748]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	4bba      	ldr	r3, [pc, #744]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001646:	2101      	movs	r1, #1
 8001648:	438a      	bics	r2, r1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	4bb8      	ldr	r3, [pc, #736]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4bb7      	ldr	r3, [pc, #732]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001652:	2104      	movs	r1, #4
 8001654:	438a      	bics	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7fe ff22 	bl	80004a8 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e009      	b.n	800167e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7fe ff1d 	bl	80004a8 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4aaf      	ldr	r2, [pc, #700]	; (8001934 <HAL_RCC_OscConfig+0x680>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e19a      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4bac      	ldr	r3, [pc, #688]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x3b6>
 8001688:	e013      	b.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7fe ff0d 	bl	80004a8 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e009      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7fe ff08 	bl	80004a8 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4aa5      	ldr	r2, [pc, #660]	; (8001934 <HAL_RCC_OscConfig+0x680>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e185      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4ba1      	ldr	r3, [pc, #644]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b2:	231f      	movs	r3, #31
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	4b9b      	ldr	r3, [pc, #620]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016c2:	499d      	ldr	r1, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x684>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	4013      	ands	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12a      	bne.n	8001730 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016da:	4b95      	ldr	r3, [pc, #596]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	2104      	movs	r1, #4
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016e6:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7fe fed9 	bl	80004a8 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016fc:	f7fe fed4 	bl	80004a8 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e152      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0f1      	beq.n	80016fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001718:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	22f8      	movs	r2, #248	; 0xf8
 800171e:	4393      	bics	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	00da      	lsls	r2, r3, #3
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
 800172e:	e034      	b.n	800179a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	3305      	adds	r3, #5
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001738:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800173e:	2104      	movs	r1, #4
 8001740:	438a      	bics	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001744:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	22f8      	movs	r2, #248	; 0xf8
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	00da      	lsls	r2, r3, #3
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
 800175a:	e01e      	b.n	800179a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800175c:	4b74      	ldr	r3, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001762:	2104      	movs	r1, #4
 8001764:	430a      	orrs	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001768:	4b71      	ldr	r3, [pc, #452]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800176a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe fe98 	bl	80004a8 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800177e:	f7fe fe93 	bl	80004a8 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e111      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001790:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d1f1      	bne.n	800177e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2220      	movs	r2, #32
 80017a0:	4013      	ands	r3, r2
 80017a2:	d05c      	beq.n	800185e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	220c      	movs	r2, #12
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b0c      	cmp	r3, #12
 80017ae:	d00e      	beq.n	80017ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	220c      	movs	r2, #12
 80017b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d114      	bne.n	80017e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017bc:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	23c0      	movs	r3, #192	; 0xc0
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	401a      	ands	r2, r3
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	4013      	ands	r3, r2
 80017d8:	d040      	beq.n	800185c <HAL_RCC_OscConfig+0x5a8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d03c      	beq.n	800185c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0e6      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01b      	beq.n	8001826 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	430a      	orrs	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7fe fe54 	bl	80004a8 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001806:	f7fe fe4f 	bl	80004a8 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0cd      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800181a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x552>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001826:	4b42      	ldr	r3, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800182c:	4943      	ldr	r1, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x688>)
 800182e:	400a      	ands	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7fe fe39 	bl	80004a8 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183c:	f7fe fe34 	bl	80004a8 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0b2      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x588>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800185c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	2b00      	cmp	r3, #0
 8001864:	d100      	bne.n	8001868 <HAL_RCC_OscConfig+0x5b4>
 8001866:	e0a4      	b.n	80019b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	220c      	movs	r2, #12
 800186e:	4013      	ands	r3, r2
 8001870:	2b08      	cmp	r3, #8
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x5c2>
 8001874:	e078      	b.n	8001968 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b02      	cmp	r3, #2
 800187c:	d14c      	bne.n	8001918 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 8001884:	492e      	ldr	r1, [pc, #184]	; (8001940 <HAL_RCC_OscConfig+0x68c>)
 8001886:	400a      	ands	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7fe fe0d 	bl	80004a8 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7fe fe08 	bl	80004a8 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e086      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	049b      	lsls	r3, r3, #18
 80018ae:	4013      	ands	r3, r2
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	220f      	movs	r2, #15
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x690>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	431a      	orrs	r2, r3
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0449      	lsls	r1, r1, #17
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7fe fddb 	bl	80004a8 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe fdd6 	bl	80004a8 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e054      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	049b      	lsls	r3, r3, #18
 8001912:	4013      	ands	r3, r2
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x644>
 8001916:	e04c      	b.n	80019b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCC_OscConfig+0x67c>)
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <HAL_RCC_OscConfig+0x68c>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7fe fdc0 	bl	80004a8 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e015      	b.n	800195a <HAL_RCC_OscConfig+0x6a6>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	fffeffff 	.word	0xfffeffff
 8001940:	feffffff 	.word	0xfeffffff
 8001944:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7fe fdae 	bl	80004a8 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e02c      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_OscConfig+0x708>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049b      	lsls	r3, r3, #18
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x694>
 8001966:	e024      	b.n	80019b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e01f      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_RCC_OscConfig+0x708>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_OscConfig+0x708>)
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	429a      	cmp	r2, r3
 800198e:	d10e      	bne.n	80019ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	220f      	movs	r2, #15
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	23f0      	movs	r3, #240	; 0xf0
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b008      	add	sp, #32
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0bf      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d911      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	4b5b      	ldr	r3, [pc, #364]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0a6      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d015      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d006      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a1a:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a20:	21e0      	movs	r1, #224	; 0xe0
 8001a22:	00c9      	lsls	r1, r1, #3
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	22f0      	movs	r2, #240	; 0xf0
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d04c      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d120      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07a      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d114      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06e      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	4013      	ands	r3, r2
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e062      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e05b      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe fcfa 	bl	80004a8 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe fcf5 	bl	80004a8 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_RCC_ClockConfig+0x1a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e042      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1ec      	bne.n	8001aba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d211      	bcs.n	8001b12 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e020      	b.n	8001b54 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2204      	movs	r2, #4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_RCC_ClockConfig+0x1a8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b30:	f000 f820 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b34:	0001      	movs	r1, r0
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1a0>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1ac>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	000a      	movs	r2, r1
 8001b46:	40da      	lsrs	r2, r3
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1b0>)
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7fe fc65 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b004      	add	sp, #16
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	00001388 	.word	0x00001388
 8001b68:	fffff8ff 	.word	0xfffff8ff
 8001b6c:	080048f0 	.word	0x080048f0
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b08f      	sub	sp, #60	; 0x3c
 8001b78:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b82:	c313      	stmia	r3!, {r0, r1, r4}
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b8e:	c313      	stmia	r3!, {r0, r1, r4}
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d006      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x52>
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d043      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xd0>
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d144      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc4:	e044      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	0c9b      	lsrs	r3, r3, #18
 8001bca:	220f      	movs	r2, #15
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2214      	movs	r2, #20
 8001bd0:	18ba      	adds	r2, r7, r2
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	220f      	movs	r2, #15
 8001bdc:	4013      	ands	r3, r2
 8001bde:	1d3a      	adds	r2, r7, #4
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be6:	23c0      	movs	r3, #192	; 0xc0
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	401a      	ands	r2, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf6:	481c      	ldr	r0, [pc, #112]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bf8:	f7fe fa86 	bl	8000108 <__udivsi3>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	001a      	movs	r2, r3
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	4353      	muls	r3, r2
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
 8001c06:	e01a      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	401a      	ands	r2, r3
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d109      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1c:	f7fe fa74 	bl	8000108 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	001a      	movs	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	4353      	muls	r3, r2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2e:	4810      	ldr	r0, [pc, #64]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c30:	f7fe fa6a 	bl	8000108 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4353      	muls	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c48:	e002      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b00f      	add	sp, #60	; 0x3c
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	080048b4 	.word	0x080048b4
 8001c60:	080048c4 	.word	0x080048c4
 8001c64:	40021000 	.word	0x40021000
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	02dc6c00 	.word	0x02dc6c00
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000008 	.word	0x20000008

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c8c:	f7ff fff2 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c90:	0001      	movs	r1, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	40d9      	lsrs	r1, r3
 8001ca2:	000b      	movs	r3, r1
}    
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08004900 	.word	0x08004900

08001cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	025b      	lsls	r3, r3, #9
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cd0:	e08f      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2317      	movs	r3, #23
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d111      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	61da      	str	r2, [r3, #28]
 8001cf4:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	055b      	lsls	r3, r3, #21
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d11a      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0049      	lsls	r1, r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7fe fbc0 	bl	80004a8 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7fe fbbb 	bl	80004a8 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e097      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d034      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d6e:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a43      	ldr	r2, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0249      	lsls	r1, r1, #9
 8001d82:	430a      	orrs	r2, r1
 8001d84:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d8c:	493d      	ldr	r1, [pc, #244]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fb82 	bl	80004a8 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	e009      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe fb7d 	bl	80004a8 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e058      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dec:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	2203      	movs	r2, #3
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	2210      	movs	r2, #16
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	029b      	lsls	r3, r3, #10
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b006      	add	sp, #24
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	fffffcff 	.word	0xfffffcff
 8001e84:	fffeffff 	.word	0xfffeffff
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	efffffff 	.word	0xefffffff

08001e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e042      	b.n	8001f28 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	223d      	movs	r2, #61	; 0x3d
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223c      	movs	r2, #60	; 0x3c
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f002 f97b 	bl	80041b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	223d      	movs	r2, #61	; 0x3d
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	0019      	movs	r1, r3
 8001ed0:	0010      	movs	r0, r2
 8001ed2:	f000 fa6d 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2246      	movs	r2, #70	; 0x46
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223e      	movs	r2, #62	; 0x3e
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2241      	movs	r2, #65	; 0x41
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2242      	movs	r2, #66	; 0x42
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2243      	movs	r2, #67	; 0x43
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2244      	movs	r2, #68	; 0x44
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2245      	movs	r2, #69	; 0x45
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223d      	movs	r2, #61	; 0x3d
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	223d      	movs	r2, #61	; 0x3d
 8001f3c:	5c9b      	ldrb	r3, [r3, r2]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e036      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223d      	movs	r2, #61	; 0x3d
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_TIM_Base_Start_IT+0x90>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00a      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x50>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x50>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_TIM_Base_Start_IT+0x94>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2101      	movs	r1, #1
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b004      	add	sp, #16
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d124      	bne.n	8002028 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d11d      	bne.n	8002028 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2203      	movs	r2, #3
 8002004:	4013      	ands	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0018      	movs	r0, r3
 800200c:	f000 f9b8 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002010:	e007      	b.n	8002022 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 f9ab 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f9b7 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	2b04      	cmp	r3, #4
 8002034:	d125      	bne.n	8002082 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2204      	movs	r2, #4
 800203e:	4013      	ands	r3, r2
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11e      	bne.n	8002082 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2205      	movs	r2, #5
 800204a:	4252      	negs	r2, r2
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	23c0      	movs	r3, #192	; 0xc0
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f98b 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800206a:	e007      	b.n	800207c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 f97e 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f98a 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d124      	bne.n	80020da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2208      	movs	r2, #8
 8002098:	4013      	ands	r3, r2
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11d      	bne.n	80020da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2209      	movs	r2, #9
 80020a4:	4252      	negs	r2, r2
 80020a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4013      	ands	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f95f 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80020c2:	e007      	b.n	80020d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 f952 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f95e 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2210      	movs	r2, #16
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d125      	bne.n	8002134 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2210      	movs	r2, #16
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d11e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2211      	movs	r2, #17
 80020fc:	4252      	negs	r2, r2
 80020fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2208      	movs	r2, #8
 8002104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f932 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800211c:	e007      	b.n	800212e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f925 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f931 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10f      	bne.n	8002162 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	2b01      	cmp	r3, #1
 800214e:	d108      	bne.n	8002162 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	4252      	negs	r2, r2
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f001 fe59 	bl	8003e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	4013      	ands	r3, r2
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d10f      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	4013      	ands	r3, r2
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d108      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2281      	movs	r2, #129	; 0x81
 8002184:	4252      	negs	r2, r2
 8002186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fa80 	bl	8002690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	4013      	ands	r3, r2
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d10f      	bne.n	80021be <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d108      	bne.n	80021be <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2241      	movs	r2, #65	; 0x41
 80021b2:	4252      	negs	r2, r2
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f8f1 	bl	80023a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2220      	movs	r2, #32
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d10f      	bne.n	80021ec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d108      	bne.n	80021ec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2221      	movs	r2, #33	; 0x21
 80021e0:	4252      	negs	r2, r2
 80021e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fa4a 	bl	8002680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	223c      	movs	r2, #60	; 0x3c
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_TIM_ConfigClockSource+0x18>
 8002208:	2302      	movs	r3, #2
 800220a:	e0ab      	b.n	8002364 <HAL_TIM_ConfigClockSource+0x170>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	223c      	movs	r2, #60	; 0x3c
 8002210:	2101      	movs	r1, #1
 8002212:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	223d      	movs	r2, #61	; 0x3d
 8002218:	2102      	movs	r1, #2
 800221a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2277      	movs	r2, #119	; 0x77
 8002228:	4393      	bics	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a4f      	ldr	r2, [pc, #316]	; (800236c <HAL_TIM_ConfigClockSource+0x178>)
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d100      	bne.n	8002246 <HAL_TIM_ConfigClockSource+0x52>
 8002244:	e06b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x12a>
 8002246:	d80e      	bhi.n	8002266 <HAL_TIM_ConfigClockSource+0x72>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d100      	bne.n	800224e <HAL_TIM_ConfigClockSource+0x5a>
 800224c:	e077      	b.n	800233e <HAL_TIM_ConfigClockSource+0x14a>
 800224e:	d803      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x64>
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <HAL_TIM_ConfigClockSource+0x62>
 8002254:	e073      	b.n	800233e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002256:	e07c      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002258:	2b20      	cmp	r3, #32
 800225a:	d100      	bne.n	800225e <HAL_TIM_ConfigClockSource+0x6a>
 800225c:	e06f      	b.n	800233e <HAL_TIM_ConfigClockSource+0x14a>
 800225e:	2b30      	cmp	r3, #48	; 0x30
 8002260:	d100      	bne.n	8002264 <HAL_TIM_ConfigClockSource+0x70>
 8002262:	e06c      	b.n	800233e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002264:	e075      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002266:	2b70      	cmp	r3, #112	; 0x70
 8002268:	d00e      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 800226a:	d804      	bhi.n	8002276 <HAL_TIM_ConfigClockSource+0x82>
 800226c:	2b50      	cmp	r3, #80	; 0x50
 800226e:	d036      	beq.n	80022de <HAL_TIM_ConfigClockSource+0xea>
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d044      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002274:	e06d      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	0152      	lsls	r2, r2, #5
 800227a:	4293      	cmp	r3, r2
 800227c:	d068      	beq.n	8002350 <HAL_TIM_ConfigClockSource+0x15c>
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	0192      	lsls	r2, r2, #6
 8002282:	4293      	cmp	r3, r2
 8002284:	d017      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002286:	e064      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f000 f97a 	bl	8002590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2277      	movs	r2, #119	; 0x77
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
      break;
 80022b4:	e04d      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 f963 	bl	8002590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	01c9      	lsls	r1, r1, #7
 80022d8:	430a      	orrs	r2, r1
 80022da:	609a      	str	r2, [r3, #8]
      break;
 80022dc:	e039      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	001a      	movs	r2, r3
 80022ec:	f000 f8d6 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2150      	movs	r1, #80	; 0x50
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f930 	bl	800255c <TIM_ITRx_SetConfig>
      break;
 80022fc:	e029      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	001a      	movs	r2, r3
 800230c:	f000 f8f4 	bl	80024f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2160      	movs	r1, #96	; 0x60
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f920 	bl	800255c <TIM_ITRx_SetConfig>
      break;
 800231c:	e019      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	001a      	movs	r2, r3
 800232c:	f000 f8b6 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f910 	bl	800255c <TIM_ITRx_SetConfig>
      break;
 800233c:	e009      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0019      	movs	r1, r3
 8002348:	0010      	movs	r0, r2
 800234a:	f000 f907 	bl	800255c <TIM_ITRx_SetConfig>
        break;
 800234e:	e000      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002350:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223d      	movs	r2, #61	; 0x3d
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223c      	movs	r2, #60	; 0x3c
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b004      	add	sp, #16
 800236a:	bd80      	pop	{r7, pc}
 800236c:	ffff00ff 	.word	0xffff00ff

08002370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <TIM_Base_SetConfig+0xd4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d008      	beq.n	80023da <TIM_Base_SetConfig+0x2a>
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x2a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <TIM_Base_SetConfig+0xd8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2270      	movs	r2, #112	; 0x70
 80023de:	4393      	bics	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <TIM_Base_SetConfig+0xd4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d014      	beq.n	800241e <TIM_Base_SetConfig+0x6e>
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	05db      	lsls	r3, r3, #23
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d00f      	beq.n	800241e <TIM_Base_SetConfig+0x6e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <TIM_Base_SetConfig+0xd8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00b      	beq.n	800241e <TIM_Base_SetConfig+0x6e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <TIM_Base_SetConfig+0xdc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0x6e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <TIM_Base_SetConfig+0xe0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0x6e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <TIM_Base_SetConfig+0xe4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d108      	bne.n	8002430 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <TIM_Base_SetConfig+0xe8>)
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	4393      	bics	r3, r2
 8002436:	001a      	movs	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <TIM_Base_SetConfig+0xd4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0xbe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <TIM_Base_SetConfig+0xe0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0xbe>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <TIM_Base_SetConfig+0xe4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d103      	bne.n	8002476 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	615a      	str	r2, [r3, #20]
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40002000 	.word	0x40002000
 8002490:	40014400 	.word	0x40014400
 8002494:	40014800 	.word	0x40014800
 8002498:	fffffcff 	.word	0xfffffcff

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4393      	bics	r3, r2
 80024b6:	001a      	movs	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	22f0      	movs	r2, #240	; 0xf0
 80024c6:	4393      	bics	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	220a      	movs	r2, #10
 80024d8:	4393      	bics	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	621a      	str	r2, [r3, #32]
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b006      	add	sp, #24
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	2210      	movs	r2, #16
 800250a:	4393      	bics	r3, r2
 800250c:	001a      	movs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <TIM_TI2_ConfigInputStage+0x60>)
 8002522:	4013      	ands	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	031b      	lsls	r3, r3, #12
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	22a0      	movs	r2, #160	; 0xa0
 8002534:	4393      	bics	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b006      	add	sp, #24
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	ffff0fff 	.word	0xffff0fff

0800255c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2270      	movs	r2, #112	; 0x70
 8002570:	4393      	bics	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	2207      	movs	r2, #7
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <TIM_ETR_SetConfig+0x3c>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b006      	add	sp, #24
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	ffff00ff 	.word	0xffff00ff

080025d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	223c      	movs	r2, #60	; 0x3c
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e042      	b.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223c      	movs	r2, #60	; 0x3c
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	; 0x3d
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2270      	movs	r2, #112	; 0x70
 800260c:	4393      	bics	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00a      	beq.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	429a      	cmp	r2, r3
 8002636:	d004      	beq.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	4393      	bics	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4313      	orrs	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	223d      	movs	r2, #61	; 0x3d
 8002660:	2101      	movs	r1, #1
 8002662:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	223c      	movs	r2, #60	; 0x3c
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400

08002680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e044      	b.n	800273c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2274      	movs	r2, #116	; 0x74
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f001 fd9b 	bl	8004200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	438a      	bics	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fbca 	bl	8002e7c <UART_SetConfig>
 80026e8:	0003      	movs	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e024      	b.n	800273c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fcfb 	bl	80030f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	490d      	ldr	r1, [pc, #52]	; (8002744 <HAL_UART_Init+0xa4>)
 800270e:	400a      	ands	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	212a      	movs	r1, #42	; 0x2a
 800271e:	438a      	bics	r2, r1
 8002720:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 fd93 	bl	8003260 <UART_CheckIdleState>
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}
 8002744:	ffffb7ff 	.word	0xffffb7ff

08002748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275c:	2b20      	cmp	r3, #32
 800275e:	d000      	beq.n	8002762 <HAL_UART_Transmit+0x1a>
 8002760:	e096      	b.n	8002890 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_UART_Transmit+0x28>
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e08e      	b.n	8002892 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	015b      	lsls	r3, r3, #5
 800277c:	429a      	cmp	r2, r3
 800277e:	d109      	bne.n	8002794 <HAL_UART_Transmit+0x4c>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d001      	beq.n	8002794 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e07e      	b.n	8002892 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2274      	movs	r2, #116	; 0x74
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Transmit+0x5a>
 800279e:	2302      	movs	r3, #2
 80027a0:	e077      	b.n	8002892 <HAL_UART_Transmit+0x14a>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2274      	movs	r2, #116	; 0x74
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	2100      	movs	r1, #0
 80027b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b8:	f7fd fe76 	bl	80004a8 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	2150      	movs	r1, #80	; 0x50
 80027c6:	8812      	ldrh	r2, [r2, #0]
 80027c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1dba      	adds	r2, r7, #6
 80027ce:	2152      	movs	r1, #82	; 0x52
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	015b      	lsls	r3, r3, #5
 80027dc:	429a      	cmp	r2, r3
 80027de:	d108      	bne.n	80027f2 <HAL_UART_Transmit+0xaa>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	e003      	b.n	80027fa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2274      	movs	r2, #116	; 0x74
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002802:	e02d      	b.n	8002860 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	0013      	movs	r3, r2
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	f000 fd6f 	bl	80032f4 <UART_WaitOnFlagUntilTimeout>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e039      	b.n	8002892 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	05d2      	lsls	r2, r2, #23
 800282e:	0dd2      	lsrs	r2, r2, #23
 8002830:	b292      	uxth	r2, r2
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	3302      	adds	r3, #2
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e008      	b.n	800284e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b292      	uxth	r2, r2
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2252      	movs	r2, #82	; 0x52
 8002852:	5a9b      	ldrh	r3, [r3, r2]
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b299      	uxth	r1, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2252      	movs	r2, #82	; 0x52
 800285e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2252      	movs	r2, #82	; 0x52
 8002864:	5a9b      	ldrh	r3, [r3, r2]
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1cb      	bne.n	8002804 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	0013      	movs	r3, r2
 8002876:	2200      	movs	r2, #0
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	f000 fd3b 	bl	80032f4 <UART_WaitOnFlagUntilTimeout>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e005      	b.n	8002892 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b008      	add	sp, #32
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	1dbb      	adds	r3, r7, #6
 80028a6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d13f      	bne.n	8002930 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_UART_Receive_DMA+0x24>
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e037      	b.n	8002932 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	015b      	lsls	r3, r3, #5
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d109      	bne.n	80028e2 <HAL_UART_Receive_DMA+0x48>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2201      	movs	r2, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e027      	b.n	8002932 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2274      	movs	r2, #116	; 0x74
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_UART_Receive_DMA+0x56>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e020      	b.n	8002932 <HAL_UART_Receive_DMA+0x98>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2274      	movs	r2, #116	; 0x74
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	4013      	ands	r3, r2
 800290a:	d008      	beq.n	800291e <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	04c9      	lsls	r1, r1, #19
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	881a      	ldrh	r2, [r3, #0]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 fd62 	bl	80033f0 <UART_Start_Receive_DMA>
 800292c:	0003      	movs	r3, r0
 800292e:	e000      	b.n	8002932 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002946:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	4013      	ands	r3, r2
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d127      	bne.n	80029ac <HAL_UART_DMAStop+0x72>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b21      	cmp	r3, #33	; 0x21
 8002960:	d124      	bne.n	80029ac <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	438a      	bics	r2, r1
 8002970:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d014      	beq.n	80029a4 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	0018      	movs	r0, r3
 8002980:	f7fd ff4a 	bl	8000818 <HAL_DMA_Abort>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298c:	0018      	movs	r0, r3
 800298e:	f7fe f863 	bl	8000a58 <HAL_DMA_GetError>
 8002992:	0003      	movs	r3, r0
 8002994:	2b20      	cmp	r3, #32
 8002996:	d105      	bne.n	80029a4 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	2110      	movs	r1, #16
 800299e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e033      	b.n	8002a0c <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fd90 	bl	80034cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d127      	bne.n	8002a0a <HAL_UART_DMAStop+0xd0>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b22      	cmp	r3, #34	; 0x22
 80029be:	d124      	bne.n	8002a0a <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2140      	movs	r1, #64	; 0x40
 80029cc:	438a      	bics	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <HAL_UART_DMAStop+0xc8>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fd ff1b 	bl	8000818 <HAL_DMA_Abort>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_UART_DMAStop+0xc8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fe f834 	bl	8000a58 <HAL_DMA_GetError>
 80029f0:	0003      	movs	r3, r0
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d105      	bne.n	8002a02 <HAL_UART_DMAStop+0xc8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	2110      	movs	r1, #16
 80029fc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fd75 	bl	80034f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4ab5      	ldr	r2, [pc, #724]	; (8002d0c <HAL_UART_IRQHandler+0x2f8>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d112      	bne.n	8002a68 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4013      	ands	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d00a      	beq.n	8002a68 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d100      	bne.n	8002a5c <HAL_UART_IRQHandler+0x48>
 8002a5a:	e1d4      	b.n	8002e06 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	0010      	movs	r0, r2
 8002a64:	4798      	blx	r3
      }
      return;
 8002a66:	e1ce      	b.n	8002e06 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d100      	bne.n	8002a70 <HAL_UART_IRQHandler+0x5c>
 8002a6e:	e0d9      	b.n	8002c24 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d104      	bne.n	8002a82 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4aa5      	ldr	r2, [pc, #660]	; (8002d10 <HAL_UART_IRQHandler+0x2fc>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <HAL_UART_IRQHandler+0x6e>
 8002a80:	e0d0      	b.n	8002c24 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d010      	beq.n	8002aac <HAL_UART_IRQHandler+0x98>
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d00b      	beq.n	8002aac <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	589b      	ldr	r3, [r3, r2]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00f      	beq.n	8002ad4 <HAL_UART_IRQHandler+0xc0>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	589b      	ldr	r3, [r3, r2]
 8002aca:	2204      	movs	r2, #4
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d00f      	beq.n	8002afc <HAL_UART_IRQHandler+0xe8>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	589b      	ldr	r3, [r3, r2]
 8002af2:	2202      	movs	r2, #2
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2208      	movs	r2, #8
 8002b00:	4013      	ands	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2220      	movs	r2, #32
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b12:	d00b      	beq.n	8002b2c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	589b      	ldr	r3, [r3, r2]
 8002b22:	2208      	movs	r2, #8
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d011      	beq.n	8002b5a <HAL_UART_IRQHandler+0x146>
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	04db      	lsls	r3, r3, #19
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d00c      	beq.n	8002b5a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	589b      	ldr	r3, [r3, r2]
 8002b50:	2220      	movs	r2, #32
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	589b      	ldr	r3, [r3, r2]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <HAL_UART_IRQHandler+0x152>
 8002b64:	e151      	b.n	8002e0a <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d00c      	beq.n	8002b88 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2220      	movs	r2, #32
 8002b72:	4013      	ands	r3, r2
 8002b74:	d008      	beq.n	8002b88 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	0010      	movs	r0, r2
 8002b86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	589b      	ldr	r3, [r3, r2]
 8002b8e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d003      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	d033      	beq.n	8002c0e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fca3 	bl	80034f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d123      	bne.n	8002c04 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	438a      	bics	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_UART_IRQHandler+0x300>)
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7fd fe51 	bl	8000888 <HAL_DMA_Abort_IT>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d01a      	beq.n	8002c20 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e012      	b.n	8002c20 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 f929 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c02:	e00d      	b.n	8002c20 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 f924 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	e008      	b.n	8002c20 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f91f 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c1e:	e0f4      	b.n	8002e0a <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	46c0      	nop			; (mov r8, r8)
    return;
 8002c22:	e0f2      	b.n	8002e0a <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d000      	beq.n	8002c2e <HAL_UART_IRQHandler+0x21a>
 8002c2c:	e0b7      	b.n	8002d9e <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_UART_IRQHandler+0x224>
 8002c36:	e0b2      	b.n	8002d9e <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_UART_IRQHandler+0x22e>
 8002c40:	e0ad      	b.n	8002d9e <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d161      	bne.n	8002d1c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	2108      	movs	r1, #8
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d100      	bne.n	8002c70 <HAL_UART_IRQHandler+0x25c>
 8002c6e:	e0ce      	b.n	8002e0e <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2258      	movs	r2, #88	; 0x58
 8002c74:	5a9b      	ldrh	r3, [r3, r2]
 8002c76:	2208      	movs	r2, #8
 8002c78:	18ba      	adds	r2, r7, r2
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d300      	bcc.n	8002c82 <HAL_UART_IRQHandler+0x26e>
 8002c80:	e0c5      	b.n	8002e0e <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	18ba      	adds	r2, r7, r2
 8002c88:	215a      	movs	r1, #90	; 0x5a
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d02a      	beq.n	8002cee <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	491d      	ldr	r1, [pc, #116]	; (8002d18 <HAL_UART_IRQHandler+0x304>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2110      	movs	r1, #16
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fd95 	bl	8000818 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2258      	movs	r2, #88	; 0x58
 8002cf2:	5a9a      	ldrh	r2, [r3, r2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	215a      	movs	r1, #90	; 0x5a
 8002cf8:	5a5b      	ldrh	r3, [r3, r1]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f8ad 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d0a:	e080      	b.n	8002e0e <HAL_UART_IRQHandler+0x3fa>
 8002d0c:	0000080f 	.word	0x0000080f
 8002d10:	04000120 	.word	0x04000120
 8002d14:	080036af 	.word	0x080036af
 8002d18:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2258      	movs	r2, #88	; 0x58
 8002d20:	5a99      	ldrh	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	225a      	movs	r2, #90	; 0x5a
 8002d26:	5a9b      	ldrh	r3, [r3, r2]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	1a8a      	subs	r2, r1, r2
 8002d30:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	225a      	movs	r2, #90	; 0x5a
 8002d36:	5a9b      	ldrh	r3, [r3, r2]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d100      	bne.n	8002d40 <HAL_UART_IRQHandler+0x32c>
 8002d3e:	e068      	b.n	8002e12 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8002d40:	230a      	movs	r3, #10
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d063      	beq.n	8002e12 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4932      	ldr	r1, [pc, #200]	; (8002e20 <HAL_UART_IRQHandler+0x40c>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	438a      	bics	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2110      	movs	r1, #16
 8002d88:	438a      	bics	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d8c:	230a      	movs	r3, #10
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f864 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d9c:	e039      	b.n	8002e12 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	035b      	lsls	r3, r3, #13
 8002da4:	4013      	ands	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x3b2>
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	03db      	lsls	r3, r3, #15
 8002dae:	4013      	ands	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	0352      	lsls	r2, r2, #13
 8002dba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fca6 	bl	8003710 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dc4:	e028      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01b      	beq.n	8002e16 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	0010      	movs	r0, r2
 8002de6:	4798      	blx	r3
    }
    return;
 8002de8:	e015      	b.n	8002e16 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	4013      	ands	r3, r2
 8002df0:	d012      	beq.n	8002e18 <HAL_UART_IRQHandler+0x404>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 fc6d 	bl	80036dc <UART_EndTransmit_IT>
    return;
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	e008      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
      return;
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	e006      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
    return;
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	e004      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
      return;
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	e002      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
      return;
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	e000      	b.n	8002e18 <HAL_UART_IRQHandler+0x404>
    return;
 8002e16:	46c0      	nop			; (mov r8, r8)
  }

}
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b008      	add	sp, #32
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	fffffedf 	.word	0xfffffedf

08002e24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	000a      	movs	r2, r1
 8002e6e:	1cbb      	adds	r3, r7, #2
 8002e70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e84:	231e      	movs	r3, #30
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a8b      	ldr	r2, [pc, #556]	; (80030d8 <UART_SetConfig+0x25c>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a86      	ldr	r2, [pc, #536]	; (80030dc <UART_SetConfig+0x260>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <UART_SetConfig+0x264>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a79      	ldr	r2, [pc, #484]	; (80030e4 <UART_SetConfig+0x268>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d125      	bne.n	8002f4e <UART_SetConfig+0xd2>
 8002f02:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <UART_SetConfig+0x26c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2203      	movs	r2, #3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d00f      	beq.n	8002f2e <UART_SetConfig+0xb2>
 8002f0e:	d304      	bcc.n	8002f1a <UART_SetConfig+0x9e>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d011      	beq.n	8002f38 <UART_SetConfig+0xbc>
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d005      	beq.n	8002f24 <UART_SetConfig+0xa8>
 8002f18:	e013      	b.n	8002f42 <UART_SetConfig+0xc6>
 8002f1a:	231f      	movs	r3, #31
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e022      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f24:	231f      	movs	r3, #31
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e01d      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f2e:	231f      	movs	r3, #31
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2204      	movs	r2, #4
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e018      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f38:	231f      	movs	r3, #31
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e013      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f42:	231f      	movs	r3, #31
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2210      	movs	r2, #16
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	e00d      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a66      	ldr	r2, [pc, #408]	; (80030ec <UART_SetConfig+0x270>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d104      	bne.n	8002f62 <UART_SetConfig+0xe6>
 8002f58:	231f      	movs	r3, #31
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e003      	b.n	8002f6a <UART_SetConfig+0xee>
 8002f62:	231f      	movs	r3, #31
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2210      	movs	r2, #16
 8002f68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d15c      	bne.n	8003030 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8002f76:	231f      	movs	r3, #31
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d00d      	beq.n	8002f9c <UART_SetConfig+0x120>
 8002f80:	dc02      	bgt.n	8002f88 <UART_SetConfig+0x10c>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <UART_SetConfig+0x116>
 8002f86:	e015      	b.n	8002fb4 <UART_SetConfig+0x138>
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d00a      	beq.n	8002fa2 <UART_SetConfig+0x126>
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <UART_SetConfig+0x130>
 8002f90:	e010      	b.n	8002fb4 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7fe fe79 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]
        break;
 8002f9a:	e012      	b.n	8002fc2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b54      	ldr	r3, [pc, #336]	; (80030f0 <UART_SetConfig+0x274>)
 8002f9e:	61bb      	str	r3, [r7, #24]
        break;
 8002fa0:	e00f      	b.n	8002fc2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7fe fde7 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	61bb      	str	r3, [r7, #24]
        break;
 8002faa:	e00a      	b.n	8002fc2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	61bb      	str	r3, [r7, #24]
        break;
 8002fb2:	e006      	b.n	8002fc2 <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb8:	231e      	movs	r3, #30
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
        break;
 8002fc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d100      	bne.n	8002fca <UART_SetConfig+0x14e>
 8002fc8:	e079      	b.n	80030be <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	005a      	lsls	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	18d2      	adds	r2, r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0019      	movs	r1, r3
 8002fdc:	0010      	movs	r0, r2
 8002fde:	f7fd f893 	bl	8000108 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d91b      	bls.n	8003026 <UART_SetConfig+0x1aa>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <UART_SetConfig+0x278>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d817      	bhi.n	8003026 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	200e      	movs	r0, #14
 8002ffc:	183b      	adds	r3, r7, r0
 8002ffe:	210f      	movs	r1, #15
 8003000:	438a      	bics	r2, r1
 8003002:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	b29b      	uxth	r3, r3
 800300a:	2207      	movs	r2, #7
 800300c:	4013      	ands	r3, r2
 800300e:	b299      	uxth	r1, r3
 8003010:	183b      	adds	r3, r7, r0
 8003012:	183a      	adds	r2, r7, r0
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	183a      	adds	r2, r7, r0
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	e04b      	b.n	80030be <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8003026:	231e      	movs	r3, #30
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e046      	b.n	80030be <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003030:	231f      	movs	r3, #31
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d00d      	beq.n	8003056 <UART_SetConfig+0x1da>
 800303a:	dc02      	bgt.n	8003042 <UART_SetConfig+0x1c6>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <UART_SetConfig+0x1d0>
 8003040:	e015      	b.n	800306e <UART_SetConfig+0x1f2>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00a      	beq.n	800305c <UART_SetConfig+0x1e0>
 8003046:	2b08      	cmp	r3, #8
 8003048:	d00d      	beq.n	8003066 <UART_SetConfig+0x1ea>
 800304a:	e010      	b.n	800306e <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304c:	f7fe fe1c 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8003050:	0003      	movs	r3, r0
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e012      	b.n	800307c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <UART_SetConfig+0x274>)
 8003058:	61bb      	str	r3, [r7, #24]
        break;
 800305a:	e00f      	b.n	800307c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305c:	f7fe fd8a 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8003060:	0003      	movs	r3, r0
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e00a      	b.n	800307c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	61bb      	str	r3, [r7, #24]
        break;
 800306c:	e006      	b.n	800307c <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003072:	231e      	movs	r3, #30
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
        break;
 800307a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01d      	beq.n	80030be <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	085a      	lsrs	r2, r3, #1
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	18d2      	adds	r2, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0019      	movs	r1, r3
 8003092:	0010      	movs	r0, r2
 8003094:	f7fd f838 	bl	8000108 <__udivsi3>
 8003098:	0003      	movs	r3, r0
 800309a:	b29b      	uxth	r3, r3
 800309c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d908      	bls.n	80030b6 <UART_SetConfig+0x23a>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <UART_SetConfig+0x278>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d804      	bhi.n	80030b6 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e003      	b.n	80030be <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80030b6:	231e      	movs	r3, #30
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030ca:	231e      	movs	r3, #30
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b008      	add	sp, #32
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	efff69f3 	.word	0xefff69f3
 80030dc:	ffffcfff 	.word	0xffffcfff
 80030e0:	fffff4ff 	.word	0xfffff4ff
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40004400 	.word	0x40004400
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	0000ffff 	.word	0x0000ffff

080030f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <UART_AdvFeatureConfig+0x144>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	d00b      	beq.n	8003144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a43      	ldr	r2, [pc, #268]	; (8003240 <UART_AdvFeatureConfig+0x148>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2204      	movs	r2, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <UART_AdvFeatureConfig+0x14c>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2208      	movs	r2, #8
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a34      	ldr	r2, [pc, #208]	; (8003248 <UART_AdvFeatureConfig+0x150>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d00b      	beq.n	80031aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a2c      	ldr	r2, [pc, #176]	; (800324c <UART_AdvFeatureConfig+0x154>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2220      	movs	r2, #32
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a25      	ldr	r2, [pc, #148]	; (8003250 <UART_AdvFeatureConfig+0x158>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	d01d      	beq.n	8003212 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <UART_AdvFeatureConfig+0x15c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10b      	bne.n	8003212 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <UART_AdvFeatureConfig+0x160>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	4013      	ands	r3, r2
 800321a:	d00b      	beq.n	8003234 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a0e      	ldr	r2, [pc, #56]	; (800325c <UART_AdvFeatureConfig+0x164>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
  }
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fffdffff 	.word	0xfffdffff
 8003240:	fffeffff 	.word	0xfffeffff
 8003244:	fffbffff 	.word	0xfffbffff
 8003248:	ffff7fff 	.word	0xffff7fff
 800324c:	ffffefff 	.word	0xffffefff
 8003250:	ffffdfff 	.word	0xffffdfff
 8003254:	ffefffff 	.word	0xffefffff
 8003258:	ff9fffff 	.word	0xff9fffff
 800325c:	fff7ffff 	.word	0xfff7ffff

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	2100      	movs	r1, #0
 800326e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003270:	f7fd f91a 	bl	80004a8 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2208      	movs	r2, #8
 8003280:	4013      	ands	r3, r2
 8003282:	2b08      	cmp	r3, #8
 8003284:	d10d      	bne.n	80032a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	0399      	lsls	r1, r3, #14
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <UART_CheckIdleState+0x90>)
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	0013      	movs	r3, r2
 8003294:	2200      	movs	r2, #0
 8003296:	f000 f82d 	bl	80032f4 <UART_WaitOnFlagUntilTimeout>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e022      	b.n	80032e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2204      	movs	r2, #4
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d10d      	bne.n	80032cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	03d9      	lsls	r1, r3, #15
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <UART_CheckIdleState+0x90>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	0013      	movs	r3, r2
 80032be:	2200      	movs	r2, #0
 80032c0:	f000 f818 	bl	80032f4 <UART_WaitOnFlagUntilTimeout>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e00d      	b.n	80032e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2274      	movs	r2, #116	; 0x74
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	01ffffff 	.word	0x01ffffff

080032f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003304:	e05e      	b.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3301      	adds	r3, #1
 800330a:	d05b      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330c:	f7fd f8cc 	bl	80004a8 <HAL_GetTick>
 8003310:	0002      	movs	r2, r0
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <UART_WaitOnFlagUntilTimeout+0x2e>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11b      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	492f      	ldr	r1, [pc, #188]	; (80033ec <UART_WaitOnFlagUntilTimeout+0xf8>)
 800332e:	400a      	ands	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2274      	movs	r2, #116	; 0x74
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e044      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2204      	movs	r2, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d02e      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	401a      	ands	r2, r3
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	429a      	cmp	r2, r3
 8003378:	d124      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4917      	ldr	r1, [pc, #92]	; (80033ec <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	438a      	bics	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	2120      	movs	r1, #32
 80033b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2274      	movs	r2, #116	; 0x74
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e00f      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	425a      	negs	r2, r3
 80033d4:	4153      	adcs	r3, r2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	001a      	movs	r2, r3
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d091      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	fffffe5f 	.word	0xfffffe5f

080033f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	1dbb      	adds	r3, r7, #6
 80033fc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1dba      	adds	r2, r7, #6
 8003408:	2158      	movs	r1, #88	; 0x58
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	2100      	movs	r1, #0
 8003414:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2222      	movs	r2, #34	; 0x22
 800341a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	2b00      	cmp	r3, #0
 8003422:	d02b      	beq.n	800347c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a25      	ldr	r2, [pc, #148]	; (80034c0 <UART_Start_Receive_DMA+0xd0>)
 800342a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <UART_Start_Receive_DMA+0xd4>)
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <UART_Start_Receive_DMA+0xd8>)
 800343a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	2200      	movs	r2, #0
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3324      	adds	r3, #36	; 0x24
 800344e:	0019      	movs	r1, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	001a      	movs	r2, r3
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f7fd f977 	bl	800074c <HAL_DMA_Start_IT>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d00c      	beq.n	800347c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	2110      	movs	r1, #16
 8003468:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2274      	movs	r2, #116	; 0x74
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01d      	b.n	80034b8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2274      	movs	r2, #116	; 0x74
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	0049      	lsls	r1, r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	08003555 	.word	0x08003555
 80034c4:	080035f1 	.word	0x080035f1
 80034c8:	0800362d 	.word	0x0800362d

080034cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	21c0      	movs	r1, #192	; 0xc0
 80034e0:	438a      	bics	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4912      	ldr	r1, [pc, #72]	; (8003550 <UART_EndRxTransfer+0x5c>)
 8003508:	400a      	ands	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2110      	movs	r1, #16
 8003530:	438a      	bics	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	fffffedf 	.word	0xfffffedf

08003554 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b20      	cmp	r3, #32
 8003568:	d02a      	beq.n	80035c0 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	225a      	movs	r2, #90	; 0x5a
 800356e:	2100      	movs	r1, #0
 8003570:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	491b      	ldr	r1, [pc, #108]	; (80035ec <UART_DMAReceiveCplt+0x98>)
 800357e:	400a      	ands	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	438a      	bics	r2, r1
 8003590:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	438a      	bics	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2110      	movs	r1, #16
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d108      	bne.n	80035da <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2258      	movs	r2, #88	; 0x58
 80035cc:	5a9a      	ldrh	r2, [r3, r2]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0011      	movs	r1, r2
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff fc46 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035d8:	e003      	b.n	80035e2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fc29 	bl	8002e34 <HAL_UART_RxCpltCallback>
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	fffffeff 	.word	0xfffffeff

080035f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10a      	bne.n	800361c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2258      	movs	r2, #88	; 0x58
 800360a:	5a9b      	ldrh	r3, [r3, r2]
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	0011      	movs	r1, r2
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff fc25 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800361a:	e003      	b.n	8003624 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	0018      	movs	r0, r3
 8003620:	f7ff fc10 	bl	8002e44 <HAL_UART_RxHalfCpltCallback>
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	4013      	ands	r3, r2
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d10a      	bne.n	800366a <UART_DMAError+0x3e>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b21      	cmp	r3, #33	; 0x21
 8003658:	d107      	bne.n	800366a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2252      	movs	r2, #82	; 0x52
 800365e:	2100      	movs	r1, #0
 8003660:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff ff31 	bl	80034cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	4013      	ands	r3, r2
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d10a      	bne.n	800368e <UART_DMAError+0x62>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b22      	cmp	r3, #34	; 0x22
 800367c:	d107      	bne.n	800368e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	225a      	movs	r2, #90	; 0x5a
 8003682:	2100      	movs	r1, #0
 8003684:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	0018      	movs	r0, r3
 800368a:	f7ff ff33 	bl	80034f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	2210      	movs	r2, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff fbd7 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b006      	add	sp, #24
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	225a      	movs	r2, #90	; 0x5a
 80036c0:	2100      	movs	r1, #0
 80036c2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2252      	movs	r2, #82	; 0x52
 80036c8:	2100      	movs	r1, #0
 80036ca:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff fbc0 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	438a      	bics	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fb8e 	bl	8002e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <baca_protocol_encode>:
 *	@param payload_size length of the payload buffer
 *	@param data_id ID of the device which sends the payload
 *	@return The lenght of the baca buffer. Generaly, it should be payload_size + 4
 */
uint8_t baca_protocol_encode(uint8_t* buffer, uint8_t* payload, uint8_t payload_size, uint8_t data_id)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	0019      	movs	r1, r3
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	1dbb      	adds	r3, r7, #6
 8003732:	1c0a      	adds	r2, r1, #0
 8003734:	701a      	strb	r2, [r3, #0]
  uint8_t checksum = (uint8_t) 'b';
 8003736:	2017      	movs	r0, #23
 8003738:	183b      	adds	r3, r7, r0
 800373a:	2262      	movs	r2, #98	; 0x62
 800373c:	701a      	strb	r2, [r3, #0]
  uint8_t buffer_length = 0;
 800373e:	2116      	movs	r1, #22
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
  checksum += payload_size + 1;
 8003746:	1dfa      	adds	r2, r7, #7
 8003748:	183b      	adds	r3, r7, r0
 800374a:	7812      	ldrb	r2, [r2, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	18d3      	adds	r3, r2, r3
 8003750:	b2da      	uxtb	r2, r3
 8003752:	183b      	adds	r3, r7, r0
 8003754:	3201      	adds	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]

  buffer[buffer_length++] = 'b';
 8003758:	0008      	movs	r0, r1
 800375a:	183b      	adds	r3, r7, r0
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	183a      	adds	r2, r7, r0
 8003760:	1c59      	adds	r1, r3, #1
 8003762:	7011      	strb	r1, [r2, #0]
 8003764:	001a      	movs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	189b      	adds	r3, r3, r2
 800376a:	2262      	movs	r2, #98	; 0x62
 800376c:	701a      	strb	r2, [r3, #0]
  buffer[buffer_length++] = payload_size + 1; // Add one for useless byte
 800376e:	183b      	adds	r3, r7, r0
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	183a      	adds	r2, r7, r0
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	7011      	strb	r1, [r2, #0]
 8003778:	001a      	movs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	189b      	adds	r3, r3, r2
 800377e:	1dfa      	adds	r2, r7, #7
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	3201      	adds	r2, #1
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
  buffer[buffer_length++] = data_id;
 8003788:	183b      	adds	r3, r7, r0
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	183a      	adds	r2, r7, r0
 800378e:	1c59      	adds	r1, r3, #1
 8003790:	7011      	strb	r1, [r2, #0]
 8003792:	001a      	movs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	189b      	adds	r3, r3, r2
 8003798:	1dba      	adds	r2, r7, #6
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < payload_size; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e01a      	b.n	80037da <baca_protocol_encode+0xba>
  {
	  buffer[buffer_length++] = payload[i];
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	2116      	movs	r1, #22
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	1879      	adds	r1, r7, r1
 80037b2:	1c58      	adds	r0, r3, #1
 80037b4:	7008      	strb	r0, [r1, #0]
 80037b6:	0019      	movs	r1, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	185b      	adds	r3, r3, r1
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	701a      	strb	r2, [r3, #0]
	  checksum += payload[i];
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	2217      	movs	r2, #23
 80037ca:	18bb      	adds	r3, r7, r2
 80037cc:	18ba      	adds	r2, r7, r2
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	188a      	adds	r2, r1, r2
 80037d2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < payload_size; i++)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3301      	adds	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	dbdf      	blt.n	80037a4 <baca_protocol_encode+0x84>
  }
  buffer[buffer_length++] = checksum;
 80037e4:	2016      	movs	r0, #22
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	183a      	adds	r2, r7, r0
 80037ec:	1c59      	adds	r1, r3, #1
 80037ee:	7011      	strb	r1, [r2, #0]
 80037f0:	001a      	movs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	2217      	movs	r2, #23
 80037f8:	18ba      	adds	r2, r7, r2
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]

  return buffer_length;
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	781b      	ldrb	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b006      	add	sp, #24
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <baca_protocol_decode>:
 *	@param buffer Buffer with the encoded message
 *	@param payload Buffer to store payload bytes
 *	@return the struct with the payload and its properties
 */
struct baca_payload baca_protocol_decode(uint8_t* buffer, uint8_t buffer_size)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b0c7      	sub	sp, #284	; 0x11c
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <baca_protocol_decode+0x198>)
 8003818:	218c      	movs	r1, #140	; 0x8c
 800381a:	0049      	lsls	r1, r1, #1
 800381c:	468c      	mov	ip, r1
 800381e:	44bc      	add	ip, r7
 8003820:	4463      	add	r3, ip
 8003822:	701a      	strb	r2, [r3, #0]
	struct baca_payload ret;
	ret.data_correct = 0;
 8003824:	4b60      	ldr	r3, [pc, #384]	; (80039a8 <baca_protocol_decode+0x19c>)
 8003826:	228c      	movs	r2, #140	; 0x8c
 8003828:	0052      	lsls	r2, r2, #1
 800382a:	4694      	mov	ip, r2
 800382c:	44bc      	add	ip, r7
 800382e:	4463      	add	r3, ip
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]

	// is a baca message with at least one byte
	if ((buffer[0] == 'b') && (buffer_size >= 4))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b62      	cmp	r3, #98	; 0x62
 800383a:	d000      	beq.n	800383e <baca_protocol_decode+0x32>
 800383c:	e09d      	b.n	800397a <baca_protocol_decode+0x16e>
 800383e:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <baca_protocol_decode+0x198>)
 8003840:	228c      	movs	r2, #140	; 0x8c
 8003842:	0052      	lsls	r2, r2, #1
 8003844:	4694      	mov	ip, r2
 8003846:	44bc      	add	ip, r7
 8003848:	4463      	add	r3, ip
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d800      	bhi.n	8003852 <baca_protocol_decode+0x46>
 8003850:	e093      	b.n	800397a <baca_protocol_decode+0x16e>
	{
		// read the size of the payload (2nd byte)
		uint8_t payload_buffer_size = buffer[1];
 8003852:	2116      	movs	r1, #22
 8003854:	31ff      	adds	r1, #255	; 0xff
 8003856:	187b      	adds	r3, r7, r1
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	7852      	ldrb	r2, [r2, #1]
 800385c:	701a      	strb	r2, [r3, #0]
		// if the buffer is large enough to accommodate the payload
		if (buffer_size >= payload_buffer_size + 3)
 800385e:	4b51      	ldr	r3, [pc, #324]	; (80039a4 <baca_protocol_decode+0x198>)
 8003860:	228c      	movs	r2, #140	; 0x8c
 8003862:	0052      	lsls	r2, r2, #1
 8003864:	4694      	mov	ip, r2
 8003866:	44bc      	add	ip, r7
 8003868:	4463      	add	r3, ip
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	187b      	adds	r3, r7, r1
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3303      	adds	r3, #3
 8003872:	429a      	cmp	r2, r3
 8003874:	da00      	bge.n	8003878 <baca_protocol_decode+0x6c>
 8003876:	e08f      	b.n	8003998 <baca_protocol_decode+0x18c>
		{
			// write the size of the payload
			ret.payload_size = payload_buffer_size;
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <baca_protocol_decode+0x19c>)
 800387a:	228c      	movs	r2, #140	; 0x8c
 800387c:	0052      	lsls	r2, r2, #1
 800387e:	4694      	mov	ip, r2
 8003880:	44bc      	add	ip, r7
 8003882:	4463      	add	r3, ip
 8003884:	2116      	movs	r1, #22
 8003886:	31ff      	adds	r1, #255	; 0xff
 8003888:	187a      	adds	r2, r7, r1
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	705a      	strb	r2, [r3, #1]

			// start calculating checksum
			uint8_t checksum = (uint8_t) 'b' + payload_buffer_size;
 800388e:	2318      	movs	r3, #24
 8003890:	33ff      	adds	r3, #255	; 0xff
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	187a      	adds	r2, r7, r1
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	3262      	adds	r2, #98	; 0x62
 800389a:	701a      	strb	r2, [r3, #0]
			// copy the payload and calculate the checksum
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 800389c:	238b      	movs	r3, #139	; 0x8b
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e024      	b.n	80038f2 <baca_protocol_decode+0xe6>
			{
				ret.payload[i] = buffer[i+2];
 80038a8:	208b      	movs	r0, #139	; 0x8b
 80038aa:	0040      	lsls	r0, r0, #1
 80038ac:	183b      	adds	r3, r7, r0
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3302      	adds	r3, #2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	18d2      	adds	r2, r2, r3
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	7811      	ldrb	r1, [r2, #0]
 80038bc:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <baca_protocol_decode+0x19c>)
 80038be:	248c      	movs	r4, #140	; 0x8c
 80038c0:	0064      	lsls	r4, r4, #1
 80038c2:	46a4      	mov	ip, r4
 80038c4:	44bc      	add	ip, r7
 80038c6:	4462      	add	r2, ip
 80038c8:	18d3      	adds	r3, r2, r3
 80038ca:	1c0a      	adds	r2, r1, #0
 80038cc:	709a      	strb	r2, [r3, #2]
				checksum += buffer[i+2];
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	3302      	adds	r3, #2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	7819      	ldrb	r1, [r3, #0]
 80038da:	2218      	movs	r2, #24
 80038dc:	32ff      	adds	r2, #255	; 0xff
 80038de:	18bb      	adds	r3, r7, r2
 80038e0:	18ba      	adds	r2, r7, r2
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	188a      	adds	r2, r1, r2
 80038e6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < payload_buffer_size; i ++)
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	183b      	adds	r3, r7, r0
 80038ee:	3201      	adds	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	238b      	movs	r3, #139	; 0x8b
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	18fa      	adds	r2, r7, r3
 80038f8:	2316      	movs	r3, #22
 80038fa:	33ff      	adds	r3, #255	; 0xff
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3d0      	bcc.n	80038a8 <baca_protocol_decode+0x9c>
			}
			// read the checksum sent (last byte)
			uint8_t checksum_sent = buffer[payload_buffer_size+2];
 8003906:	2316      	movs	r3, #22
 8003908:	33ff      	adds	r3, #255	; 0xff
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	3302      	adds	r3, #2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	18d2      	adds	r2, r2, r3
 8003914:	218a      	movs	r1, #138	; 0x8a
 8003916:	0049      	lsls	r1, r1, #1
 8003918:	187b      	adds	r3, r7, r1
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	701a      	strb	r2, [r3, #0]
			 // If the sent checksum is correct set the data correct flag
			if (checksum == checksum_sent)
 800391e:	2318      	movs	r3, #24
 8003920:	33ff      	adds	r3, #255	; 0xff
 8003922:	18fa      	adds	r2, r7, r3
 8003924:	187b      	adds	r3, r7, r1
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d116      	bne.n	800395c <baca_protocol_decode+0x150>
			{
				ret.data_correct = 1;
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <baca_protocol_decode+0x19c>)
 8003930:	228c      	movs	r2, #140	; 0x8c
 8003932:	0052      	lsls	r2, r2, #1
 8003934:	4694      	mov	ip, r2
 8003936:	44bc      	add	ip, r7
 8003938:	4463      	add	r3, ip
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
				return ret;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <baca_protocol_decode+0x19c>)
 8003942:	218c      	movs	r1, #140	; 0x8c
 8003944:	0049      	lsls	r1, r1, #1
 8003946:	468c      	mov	ip, r1
 8003948:	44bc      	add	ip, r7
 800394a:	4463      	add	r3, ip
 800394c:	0010      	movs	r0, r2
 800394e:	0019      	movs	r1, r3
 8003950:	2302      	movs	r3, #2
 8003952:	33ff      	adds	r3, #255	; 0xff
 8003954:	001a      	movs	r2, r3
 8003956:	f000 ff8f 	bl	8004878 <memcpy>
 800395a:	e01f      	b.n	800399c <baca_protocol_decode+0x190>
			} else
			{
				return ret;
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <baca_protocol_decode+0x19c>)
 8003960:	218c      	movs	r1, #140	; 0x8c
 8003962:	0049      	lsls	r1, r1, #1
 8003964:	468c      	mov	ip, r1
 8003966:	44bc      	add	ip, r7
 8003968:	4463      	add	r3, ip
 800396a:	0010      	movs	r0, r2
 800396c:	0019      	movs	r1, r3
 800396e:	2302      	movs	r3, #2
 8003970:	33ff      	adds	r3, #255	; 0xff
 8003972:	001a      	movs	r2, r3
 8003974:	f000 ff80 	bl	8004878 <memcpy>
 8003978:	e010      	b.n	800399c <baca_protocol_decode+0x190>
			}
		}
	} else
	{
		return ret;
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <baca_protocol_decode+0x19c>)
 800397e:	218c      	movs	r1, #140	; 0x8c
 8003980:	0049      	lsls	r1, r1, #1
 8003982:	468c      	mov	ip, r1
 8003984:	44bc      	add	ip, r7
 8003986:	4463      	add	r3, ip
 8003988:	0010      	movs	r0, r2
 800398a:	0019      	movs	r1, r3
 800398c:	2302      	movs	r3, #2
 800398e:	33ff      	adds	r3, #255	; 0xff
 8003990:	001a      	movs	r2, r3
 8003992:	f000 ff71 	bl	8004878 <memcpy>
 8003996:	e001      	b.n	800399c <baca_protocol_decode+0x190>
	{
 8003998:	46c0      	nop			; (mov r8, r8)
	}
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	46bd      	mov	sp, r7
 80039a0:	b047      	add	sp, #284	; 0x11c
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	fffffeef 	.word	0xfffffeef
 80039a8:	fffffef8 	.word	0xfffffef8

080039ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b0:	f7fc fd20 	bl	80003f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039b4:	f000 f824 	bl	8003a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039b8:	f000 f928 	bl	8003c0c <MX_GPIO_Init>
  MX_DMA_Init();
 80039bc:	f000 f908 	bl	8003bd0 <MX_DMA_Init>
  MX_TIM3_Init();
 80039c0:	f000 f872 	bl	8003aa8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80039c4:	f000 f8c4 	bl	8003b50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize UV LEDs - sets pins and loads values from FLASH
  uv_led_init();
 80039c8:	f000 fd12 	bl	80043f0 <uv_led_init>

  // Start UART RX using DMA
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)uart_rx_buff, BUFFER_SIZE);
 80039cc:	4908      	ldr	r1, [pc, #32]	; (80039f0 <main+0x44>)
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <main+0x48>)
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fe ff61 	bl	800289a <HAL_UART_Receive_DMA>

  // Start TIM3
  HAL_TIM_Base_Start_IT(&htim3);
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <main+0x4c>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fe faa8 	bl	8001f30 <HAL_TIM_Base_Start_IT>

  // Turn on the LED to signal the initialization is done
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <main+0x50>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	2102      	movs	r1, #2
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7fd fc0f 	bl	800120a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <main+0x40>
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	200001e4 	.word	0x200001e4
 80039f4:	20000138 	.word	0x20000138
 80039f8:	2000009c 	.word	0x2000009c
 80039fc:	48000400 	.word	0x48000400

08003a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b099      	sub	sp, #100	; 0x64
 8003a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a06:	242c      	movs	r4, #44	; 0x2c
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	2334      	movs	r3, #52	; 0x34
 8003a0e:	001a      	movs	r2, r3
 8003a10:	2100      	movs	r1, #0
 8003a12:	f000 ff3a 	bl	800488a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a16:	231c      	movs	r3, #28
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	001a      	movs	r2, r3
 8003a20:	2100      	movs	r1, #0
 8003a22:	f000 ff32 	bl	800488a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	0018      	movs	r0, r3
 8003a2a:	2318      	movs	r3, #24
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f000 ff2b 	bl	800488a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003a34:	193b      	adds	r3, r7, r4
 8003a36:	2220      	movs	r2, #32
 8003a38:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fd fc33 	bl	80012b4 <HAL_RCC_OscConfig>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8003a52:	f000 fb7d 	bl	8004150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a56:	211c      	movs	r1, #28
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2203      	movs	r2, #3
 8003a62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2101      	movs	r1, #1
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fd ffa3 	bl	80019c0 <HAL_RCC_ClockConfig>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d001      	beq.n	8003a82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003a7e:	f000 fb67 	bl	8004150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7fe f90f 	bl	8001cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d001      	beq.n	8003a9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003a9a:	f000 fb59 	bl	8004150 <Error_Handler>
  }
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b019      	add	sp, #100	; 0x64
 8003aa4:	bd90      	pop	{r4, r7, pc}
	...

08003aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aae:	2308      	movs	r3, #8
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f000 fee6 	bl	800488a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abe:	003b      	movs	r3, r7
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f000 fedf 	bl	800488a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003acc:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003ace:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <MX_TIM3_Init+0xa4>)
 8003ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003ad4:	222f      	movs	r2, #47	; 0x2f
 8003ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003ae0:	2263      	movs	r2, #99	; 0x63
 8003ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fe f9cc 	bl	8001e90 <HAL_TIM_Base_Init>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003afc:	f000 fb28 	bl	8004150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b00:	2108      	movs	r1, #8
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	0152      	lsls	r2, r2, #5
 8003b08:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b0a:	187a      	adds	r2, r7, r1
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fe fb6f 	bl	80021f4 <HAL_TIM_ConfigClockSource>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003b1a:	f000 fb19 	bl	8004150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1e:	003b      	movs	r3, r7
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b24:	003b      	movs	r3, r7
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b2a:	003a      	movs	r2, r7
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <MX_TIM3_Init+0xa0>)
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fe fd4d 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003b3a:	f000 fb09 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	2000009c 	.word	0x2000009c
 8003b4c:	40000400 	.word	0x40000400

08003b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b54:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <MX_USART1_UART_Init+0x7c>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b5c:	22e1      	movs	r2, #225	; 0xe1
 8003b5e:	0252      	lsls	r2, r2, #9
 8003b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7fe fd83 	bl	80026a0 <HAL_UART_Init>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b9e:	f000 fad7 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // Enable serial port idle interrupt
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <MX_USART1_UART_Init+0x78>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2110      	movs	r1, #16
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	201b      	movs	r0, #27
 8003bb8:	f7fc fd4e 	bl	8000658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bbc:	201b      	movs	r0, #27
 8003bbe:	f7fc fd60 	bl	8000682 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000138 	.word	0x20000138
 8003bcc:	40013800 	.word	0x40013800

08003bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <MX_DMA_Init+0x38>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <MX_DMA_Init+0x38>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <MX_DMA_Init+0x38>)
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4013      	ands	r3, r2
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	f7fc fd30 	bl	8000658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003bf8:	200a      	movs	r0, #10
 8003bfa:	f7fc fd42 	bl	8000682 <HAL_NVIC_EnableIRQ>

}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000

08003c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c12:	240c      	movs	r4, #12
 8003c14:	193b      	adds	r3, r7, r4
 8003c16:	0018      	movs	r0, r3
 8003c18:	2314      	movs	r3, #20
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f000 fe34 	bl	800488a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	03c9      	lsls	r1, r1, #15
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	615a      	str	r2, [r3, #20]
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	03db      	lsls	r3, r3, #15
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	0289      	lsls	r1, r1, #10
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	615a      	str	r2, [r3, #20]
 8003c4c:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	02c9      	lsls	r1, r1, #11
 8003c64:	430a      	orrs	r2, r1
 8003c66:	615a      	str	r2, [r3, #20]
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <MX_GPIO_Init+0x110>)
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	02db      	lsls	r3, r3, #11
 8003c70:	4013      	ands	r3, r2
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8003c76:	2390      	movs	r3, #144	; 0x90
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	21ff      	movs	r1, #255	; 0xff
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fd fac3 	bl	800120a <HAL_GPIO_WritePin>
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <MX_GPIO_Init+0x114>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	2102      	movs	r1, #2
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7fd fabd 	bl	800120a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UV_LED_0_Pin UV_LED_1_Pin UV_LED_2_Pin UV_LED_3_Pin
                           UV_LED_4_Pin UV_LED_5_Pin UV_LED_6_Pin UV_LED_7_Pin */
  GPIO_InitStruct.Pin = UV_LED_0_Pin|UV_LED_1_Pin|UV_LED_2_Pin|UV_LED_3_Pin
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	601a      	str	r2, [r3, #0]
                          |UV_LED_4_Pin|UV_LED_5_Pin|UV_LED_6_Pin|UV_LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	2201      	movs	r2, #1
 8003c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	193a      	adds	r2, r7, r4
 8003caa:	2390      	movs	r3, #144	; 0x90
 8003cac:	05db      	lsls	r3, r3, #23
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fd f925 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003cb6:	0021      	movs	r1, r4
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	2202      	movs	r2, #2
 8003cbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	000c      	movs	r4, r1
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <MX_GPIO_Init+0x114>)
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	0010      	movs	r0, r2
 8003cda:	f7fd f911 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8003cde:	0021      	movs	r1, r4
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	0052      	lsls	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <MX_GPIO_Init+0x118>)
 8003cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003cf4:	187a      	adds	r2, r7, r1
 8003cf6:	2390      	movs	r3, #144	; 0x90
 8003cf8:	05db      	lsls	r3, r3, #23
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fd f8ff 	bl	8000f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	2007      	movs	r0, #7
 8003d08:	f7fc fca6 	bl	8000658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003d0c:	2007      	movs	r0, #7
 8003d0e:	f7fc fcb8 	bl	8000682 <HAL_NVIC_EnableIRQ>

}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b009      	add	sp, #36	; 0x24
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	10210000 	.word	0x10210000

08003d28 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    HAL_UART_IRQHandler(&huart1);
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <USART1_IRQHandler+0x1c>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fe fe70 	bl	8002a14 <HAL_UART_IRQHandler>

    // Function to handle the IDLE INTERRUPT
    USER_UART_IRQHandler(&huart1);
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <USART1_IRQHandler+0x1c>)
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 f806 	bl	8003d48 <USER_UART_IRQHandler>
    /* USER CODE END USART1_IRQn 1 */
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	20000138 	.word	0x20000138

08003d48 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	// Check if the interrupt came from USART1
    if(USART1 == huart1.Instance)
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <USER_UART_IRQHandler+0x38>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <USER_UART_IRQHandler+0x3c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10e      	bne.n	8003d78 <USER_UART_IRQHandler+0x30>
    {
    	// Check if the interrupt is IDLE INTERRUPT
        if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <USER_UART_IRQHandler+0x38>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	2210      	movs	r2, #16
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d107      	bne.n	8003d78 <USER_UART_IRQHandler+0x30>
        {
        	// Clear the IDLE INTERRUPT flag
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <USER_UART_IRQHandler+0x38>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	621a      	str	r2, [r3, #32]
            // Call the interrupt Handler
            USAR_UART_IDLECallback(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 f808 	bl	8003d88 <USAR_UART_IDLECallback>
        }
    }
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000138 	.word	0x20000138
 8003d84:	40013800 	.word	0x40013800

08003d88 <USAR_UART_IDLECallback>:

void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	//Stop UART DMA
    HAL_UART_DMAStop(&huart1);
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <USAR_UART_IDLECallback+0x48>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fe fdd1 	bl	800293a <HAL_UART_DMAStop>
	//Calculate the length of the received data
	uart_rx_buff_size  = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <USAR_UART_IDLECallback+0x4c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <USAR_UART_IDLECallback+0x50>)
 8003da6:	701a      	strb	r2, [r3, #0]
	// Process the message
	process_uart_message();
 8003da8:	f000 f876 	bl	8003e98 <process_uart_message>
	// Clear Receiving Buffer
	memset(uart_rx_buff, 0, uart_rx_buff_size);
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <USAR_UART_IDLECallback+0x50>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	001a      	movs	r2, r3
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <USAR_UART_IDLECallback+0x54>)
 8003db4:	2100      	movs	r1, #0
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 fd67 	bl	800488a <memset>
    //Restart to start DMA USART RX
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)uart_rx_buff, BUFFER_SIZE);
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <USAR_UART_IDLECallback+0x54>)
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <USAR_UART_IDLECallback+0x48>)
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fe fd69 	bl	800289a <HAL_UART_Receive_DMA>
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000138 	.word	0x20000138
 8003dd4:	200000e4 	.word	0x200000e4
 8003dd8:	2000002c 	.word	0x2000002c
 8003ddc:	200001e4 	.word	0x200001e4

08003de0 <HAL_GPIO_EXTI_Callback>:
{
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	0002      	movs	r2, r0
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	801a      	strh	r2, [r3, #0]
	// If the Interrupt came from SWITCH Pin
	if (GPIO_Pin == SWITCH_Pin)
 8003dec:	1dbb      	adds	r3, r7, #6
 8003dee:	881a      	ldrh	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d107      	bne.n	8003e08 <HAL_GPIO_EXTI_Callback+0x28>
	{
		// Toggle the UVLEDs global enable flag
		enable_global = !enable_global;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_GPIO_EXTI_Callback+0x30>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	425a      	negs	r2, r3
 8003dfe:	4153      	adcs	r3, r2
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <HAL_GPIO_EXTI_Callback+0x30>)
 8003e06:	701a      	strb	r2, [r3, #0]
	}
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000058 	.word	0x20000058

08003e14 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN Callback 0 */
	// Check if the callback came from TIM3
	if (htim->Instance == TIM3)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d126      	bne.n	8003e74 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		// Check UVLED toggle counters
		for (int i = 0; i < 8; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e020      	b.n	8003e6e <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			// If toggle counter reached the max value toggle the UVLED and reset counter
			if (uv_led_counter[i] >= uv_led_periods_ms[i])
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	58d2      	ldr	r2, [r2, r3]
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	0089      	lsls	r1, r1, #2
 8003e3a:	58cb      	ldr	r3, [r1, r3]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d30a      	bcc.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				uv_led_toggle(i);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fc73 	bl	8004730 <uv_led_toggle>
				uv_led_counter[i] = 0;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	0092      	lsls	r2, r2, #2
 8003e50:	2100      	movs	r1, #0
 8003e52:	50d1      	str	r1, [r2, r3]
 8003e54:	e008      	b.n	8003e68 <HAL_TIM_PeriodElapsedCallback+0x54>
			// increment counter
			} else{
				uv_led_counter[i]++;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	58d3      	ldr	r3, [r2, r3]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	50d1      	str	r1, [r2, r3]
		for (int i = 0; i < 8; i++)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b07      	cmp	r3, #7
 8003e72:	dddb      	ble.n	8003e2c <HAL_TIM_PeriodElapsedCallback+0x18>
			}
		}
	}
 /* USER CODE END Callback 0 */
 if (htim->Instance == TIM3) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_PeriodElapsedCallback+0x6e>
   HAL_IncTick();
 8003e7e:	f7fc fb01 	bl	8000484 <HAL_IncTick>
 }
 /* USER CODE BEGIN Callback 1 */

 /* USER CODE END Callback 1 */
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	200001c4 	.word	0x200001c4
 8003e94:	2000007c 	.word	0x2000007c

08003e98 <process_uart_message>:

void process_uart_message(void)
{
 8003e98:	b5b0      	push	{r4, r5, r7, lr}
 8003e9a:	b0ca      	sub	sp, #296	; 0x128
 8003e9c:	af00      	add	r7, sp, #0
	// Decode the received message
	struct baca_payload received_message = baca_protocol_decode(uart_rx_buff, uart_rx_buff_size);
 8003e9e:	4ba2      	ldr	r3, [pc, #648]	; (8004128 <process_uart_message+0x290>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	4ba2      	ldr	r3, [pc, #648]	; (800412c <process_uart_message+0x294>)
 8003ea4:	2194      	movs	r1, #148	; 0x94
 8003ea6:	0049      	lsls	r1, r1, #1
 8003ea8:	468c      	mov	ip, r1
 8003eaa:	44bc      	add	ip, r7
 8003eac:	4463      	add	r3, ip
 8003eae:	49a0      	ldr	r1, [pc, #640]	; (8004130 <process_uart_message+0x298>)
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fcab 	bl	800380c <baca_protocol_decode>
	// if the received message is correct (is a baca protocol message)
	if (received_message.data_correct == 1)
 8003eb6:	4b9d      	ldr	r3, [pc, #628]	; (800412c <process_uart_message+0x294>)
 8003eb8:	2294      	movs	r2, #148	; 0x94
 8003eba:	0052      	lsls	r2, r2, #1
 8003ebc:	4694      	mov	ip, r2
 8003ebe:	44bc      	add	ip, r7
 8003ec0:	4463      	add	r3, ip
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d000      	beq.n	8003eca <process_uart_message+0x32>
 8003ec8:	e11e      	b.n	8004108 <process_uart_message+0x270>
	{
		// Get the message ID
		uint8_t baca_id = received_message.payload[0];
 8003eca:	2192      	movs	r1, #146	; 0x92
 8003ecc:	0049      	lsls	r1, r1, #1
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	4a96      	ldr	r2, [pc, #600]	; (800412c <process_uart_message+0x294>)
 8003ed2:	2094      	movs	r0, #148	; 0x94
 8003ed4:	0040      	lsls	r0, r0, #1
 8003ed6:	4684      	mov	ip, r0
 8003ed8:	44bc      	add	ip, r7
 8003eda:	4462      	add	r2, ip
 8003edc:	7892      	ldrb	r2, [r2, #2]
 8003ede:	701a      	strb	r2, [r3, #0]
		switch (baca_id)
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	3b90      	subs	r3, #144	; 0x90
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d900      	bls.n	8003eec <process_uart_message+0x54>
 8003eea:	e10f      	b.n	800410c <process_uart_message+0x274>
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	4b91      	ldr	r3, [pc, #580]	; (8004134 <process_uart_message+0x29c>)
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	469f      	mov	pc, r3
		{
			// Message to toggle the global enable flag
			case 0x90:
				enable_global = !enable_global;
 8003ef6:	4b90      	ldr	r3, [pc, #576]	; (8004138 <process_uart_message+0x2a0>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	425a      	negs	r2, r3
 8003efc:	4153      	adcs	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	001a      	movs	r2, r3
 8003f02:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <process_uart_message+0x2a0>)
 8003f04:	701a      	strb	r2, [r3, #0]
				break;
 8003f06:	e10a      	b.n	800411e <process_uart_message+0x286>

			// Message to enable UVLEDs
			case 0x91:
				// Check if the payload has corect size (message id + 8 data bytes)
				if (received_message.payload_size == 9)
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <process_uart_message+0x294>)
 8003f0a:	2294      	movs	r2, #148	; 0x94
 8003f0c:	0052      	lsls	r2, r2, #1
 8003f0e:	4694      	mov	ip, r2
 8003f10:	44bc      	add	ip, r7
 8003f12:	4463      	add	r3, ip
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d000      	beq.n	8003f1c <process_uart_message+0x84>
 8003f1a:	e0f9      	b.n	8004110 <process_uart_message+0x278>
				{
					for (uint8_t i = 0; i < 8; i++)
 8003f1c:	2328      	movs	r3, #40	; 0x28
 8003f1e:	33ff      	adds	r3, #255	; 0xff
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e019      	b.n	8003f5c <process_uart_message+0xc4>
					{
						uv_led_enable(i, (uint8_t) received_message.payload[i+1]);
 8003f28:	2128      	movs	r1, #40	; 0x28
 8003f2a:	31ff      	adds	r1, #255	; 0xff
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <process_uart_message+0x294>)
 8003f34:	2094      	movs	r0, #148	; 0x94
 8003f36:	0040      	lsls	r0, r0, #1
 8003f38:	4684      	mov	ip, r0
 8003f3a:	44bc      	add	ip, r7
 8003f3c:	4462      	add	r2, ip
 8003f3e:	18d3      	adds	r3, r2, r3
 8003f40:	789a      	ldrb	r2, [r3, #2]
 8003f42:	000c      	movs	r4, r1
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 fb68 	bl	8004620 <uv_led_enable>
					for (uint8_t i = 0; i < 8; i++)
 8003f50:	0021      	movs	r1, r4
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	187b      	adds	r3, r7, r1
 8003f58:	3201      	adds	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	2328      	movs	r3, #40	; 0x28
 8003f5e:	33ff      	adds	r3, #255	; 0xff
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d9df      	bls.n	8003f28 <process_uart_message+0x90>
					}
				}
				break;
 8003f68:	e0d2      	b.n	8004110 <process_uart_message+0x278>
			// Message to set frequencies of UVLEDs
			case 0x92:
				// Check if the payload has corect size (message id + 8 data bytes)
				if (received_message.payload_size == 9)
 8003f6a:	4b70      	ldr	r3, [pc, #448]	; (800412c <process_uart_message+0x294>)
 8003f6c:	2294      	movs	r2, #148	; 0x94
 8003f6e:	0052      	lsls	r2, r2, #1
 8003f70:	4694      	mov	ip, r2
 8003f72:	44bc      	add	ip, r7
 8003f74:	4463      	add	r3, ip
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b09      	cmp	r3, #9
 8003f7a:	d000      	beq.n	8003f7e <process_uart_message+0xe6>
 8003f7c:	e0ca      	b.n	8004114 <process_uart_message+0x27c>
				{
					for (uint8_t i = 0; i < 8; i++)
 8003f7e:	2393      	movs	r3, #147	; 0x93
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e027      	b.n	8003fda <process_uart_message+0x142>
					{
						if (received_message.payload[i] != 0)
 8003f8a:	2393      	movs	r3, #147	; 0x93
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4a66      	ldr	r2, [pc, #408]	; (800412c <process_uart_message+0x294>)
 8003f94:	2194      	movs	r1, #148	; 0x94
 8003f96:	0049      	lsls	r1, r1, #1
 8003f98:	468c      	mov	ip, r1
 8003f9a:	44bc      	add	ip, r7
 8003f9c:	4462      	add	r2, ip
 8003f9e:	18d3      	adds	r3, r2, r3
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <process_uart_message+0x134>
						{
							uv_led_set_frequency(i, (uint32_t) received_message.payload[i+1]);
 8003fa6:	2193      	movs	r1, #147	; 0x93
 8003fa8:	0049      	lsls	r1, r1, #1
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a5e      	ldr	r2, [pc, #376]	; (800412c <process_uart_message+0x294>)
 8003fb2:	2094      	movs	r0, #148	; 0x94
 8003fb4:	0040      	lsls	r0, r0, #1
 8003fb6:	4684      	mov	ip, r0
 8003fb8:	44bc      	add	ip, r7
 8003fba:	4462      	add	r2, ip
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	789a      	ldrb	r2, [r3, #2]
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	0011      	movs	r1, r2
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 faac 	bl	8004524 <uv_led_set_frequency>
					for (uint8_t i = 0; i < 8; i++)
 8003fcc:	2193      	movs	r1, #147	; 0x93
 8003fce:	0049      	lsls	r1, r1, #1
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	2393      	movs	r3, #147	; 0x93
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d9d1      	bls.n	8003f8a <process_uart_message+0xf2>
						}
					}
				}
				break;
 8003fe6:	e095      	b.n	8004114 <process_uart_message+0x27c>
			// Message to enable an individual UVLED
			case 0x93:
				// Check if the payload has corect size (message id + 2 data bytes)
				if (received_message.payload_size == 3)
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <process_uart_message+0x294>)
 8003fea:	2294      	movs	r2, #148	; 0x94
 8003fec:	0052      	lsls	r2, r2, #1
 8003fee:	4694      	mov	ip, r2
 8003ff0:	44bc      	add	ip, r7
 8003ff2:	4463      	add	r3, ip
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d000      	beq.n	8003ffc <process_uart_message+0x164>
 8003ffa:	e08d      	b.n	8004118 <process_uart_message+0x280>
				{
					uv_led_enable((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <process_uart_message+0x294>)
 8003ffe:	2294      	movs	r2, #148	; 0x94
 8004000:	0052      	lsls	r2, r2, #1
 8004002:	4694      	mov	ip, r2
 8004004:	44bc      	add	ip, r7
 8004006:	4463      	add	r3, ip
 8004008:	78da      	ldrb	r2, [r3, #3]
 800400a:	4b48      	ldr	r3, [pc, #288]	; (800412c <process_uart_message+0x294>)
 800400c:	2194      	movs	r1, #148	; 0x94
 800400e:	0049      	lsls	r1, r1, #1
 8004010:	468c      	mov	ip, r1
 8004012:	44bc      	add	ip, r7
 8004014:	4463      	add	r3, ip
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	0019      	movs	r1, r3
 800401a:	0010      	movs	r0, r2
 800401c:	f000 fb00 	bl	8004620 <uv_led_enable>
				}
				break;
 8004020:	e07a      	b.n	8004118 <process_uart_message+0x280>
			// Message to set frequency of an individual UVLED
			case 0x94:
				// Check if the payload has corect size (message id + 2 data bytes)
				if (received_message.payload_size == 3)
 8004022:	4b42      	ldr	r3, [pc, #264]	; (800412c <process_uart_message+0x294>)
 8004024:	2294      	movs	r2, #148	; 0x94
 8004026:	0052      	lsls	r2, r2, #1
 8004028:	4694      	mov	ip, r2
 800402a:	44bc      	add	ip, r7
 800402c:	4463      	add	r3, ip
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d173      	bne.n	800411c <process_uart_message+0x284>
				{
					uv_led_set_frequency((uint8_t)received_message.payload[1],(uint8_t) received_message.payload[2]);
 8004034:	4b3d      	ldr	r3, [pc, #244]	; (800412c <process_uart_message+0x294>)
 8004036:	2294      	movs	r2, #148	; 0x94
 8004038:	0052      	lsls	r2, r2, #1
 800403a:	4694      	mov	ip, r2
 800403c:	44bc      	add	ip, r7
 800403e:	4463      	add	r3, ip
 8004040:	78da      	ldrb	r2, [r3, #3]
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <process_uart_message+0x294>)
 8004044:	2194      	movs	r1, #148	; 0x94
 8004046:	0049      	lsls	r1, r1, #1
 8004048:	468c      	mov	ip, r1
 800404a:	44bc      	add	ip, r7
 800404c:	4463      	add	r3, ip
 800404e:	791b      	ldrb	r3, [r3, #4]
 8004050:	0019      	movs	r1, r3
 8004052:	0010      	movs	r0, r2
 8004054:	f000 fa66 	bl	8004524 <uv_led_set_frequency>
				}
				break;
 8004058:	e060      	b.n	800411c <process_uart_message+0x284>
			// Message to return the enable flags of UVLEDs
			case 0x95:
				{
					uint8_t baca_buffer[12];
					uint8_t baca_buffer_length = 12;
 800405a:	2491      	movs	r4, #145	; 0x91
 800405c:	0064      	lsls	r4, r4, #1
 800405e:	193b      	adds	r3, r7, r4
 8004060:	220c      	movs	r2, #12
 8004062:	701a      	strb	r2, [r3, #0]
					// Encode the data using baca protocol
					baca_protocol_encode(baca_buffer, uv_led_enabled, 8, 0x95);
 8004064:	4935      	ldr	r1, [pc, #212]	; (800413c <process_uart_message+0x2a4>)
 8004066:	2514      	movs	r5, #20
 8004068:	1978      	adds	r0, r7, r5
 800406a:	2395      	movs	r3, #149	; 0x95
 800406c:	2208      	movs	r2, #8
 800406e:	f7ff fb57 	bl	8003720 <baca_protocol_encode>
					// Transmit the data
					HAL_UART_Transmit(&huart1, baca_buffer, baca_buffer_length, 100);
 8004072:	193b      	adds	r3, r7, r4
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	1979      	adds	r1, r7, r5
 800407a:	4831      	ldr	r0, [pc, #196]	; (8004140 <process_uart_message+0x2a8>)
 800407c:	2364      	movs	r3, #100	; 0x64
 800407e:	f7fe fb63 	bl	8002748 <HAL_UART_Transmit>
				}
				break;
 8004082:	e04c      	b.n	800411e <process_uart_message+0x286>
			// Message to return frequencies of UVLEDs
			case 0x96:
				{
					uint8_t baca_buffer[12];
					uint8_t baca_buffer_length = 12;
 8004084:	2324      	movs	r3, #36	; 0x24
 8004086:	33ff      	adds	r3, #255	; 0xff
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	220c      	movs	r2, #12
 800408c:	701a      	strb	r2, [r3, #0]
					uint8_t frequencies_to_send[8];
					// Calculate the frequency from set ticks
					for (uint8_t j = 0; j < 8; j++)
 800408e:	2326      	movs	r3, #38	; 0x26
 8004090:	33ff      	adds	r3, #255	; 0xff
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e01e      	b.n	80040d8 <process_uart_message+0x240>
					{
						frequencies_to_send[j] = (uint8_t)(TIMER_FREQ/(2*uv_led_periods_ms[j]));
 800409a:	2026      	movs	r0, #38	; 0x26
 800409c:	30ff      	adds	r0, #255	; 0xff
 800409e:	0004      	movs	r4, r0
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <process_uart_message+0x2ac>)
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	58d3      	ldr	r3, [r2, r3]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	0019      	movs	r1, r3
 80040ae:	4826      	ldr	r0, [pc, #152]	; (8004148 <process_uart_message+0x2b0>)
 80040b0:	f7fc f82a 	bl	8000108 <__udivsi3>
 80040b4:	0003      	movs	r3, r0
 80040b6:	001a      	movs	r2, r3
 80040b8:	0020      	movs	r0, r4
 80040ba:	183b      	adds	r3, r7, r0
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b2d1      	uxtb	r1, r2
 80040c0:	4a22      	ldr	r2, [pc, #136]	; (800414c <process_uart_message+0x2b4>)
 80040c2:	2494      	movs	r4, #148	; 0x94
 80040c4:	0064      	lsls	r4, r4, #1
 80040c6:	46a4      	mov	ip, r4
 80040c8:	44bc      	add	ip, r7
 80040ca:	4462      	add	r2, ip
 80040cc:	54d1      	strb	r1, [r2, r3]
					for (uint8_t j = 0; j < 8; j++)
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	183b      	adds	r3, r7, r0
 80040d4:	3201      	adds	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	2326      	movs	r3, #38	; 0x26
 80040da:	33ff      	adds	r3, #255	; 0xff
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b07      	cmp	r3, #7
 80040e2:	d9da      	bls.n	800409a <process_uart_message+0x202>
					}
					// Encode the data using baca protocol
					baca_protocol_encode(baca_buffer, frequencies_to_send , 8, 0x96);
 80040e4:	0039      	movs	r1, r7
 80040e6:	2408      	movs	r4, #8
 80040e8:	1938      	adds	r0, r7, r4
 80040ea:	2396      	movs	r3, #150	; 0x96
 80040ec:	2208      	movs	r2, #8
 80040ee:	f7ff fb17 	bl	8003720 <baca_protocol_encode>
					// Transmit the data
					HAL_UART_Transmit(&huart1, baca_buffer, baca_buffer_length, 100);
 80040f2:	2324      	movs	r3, #36	; 0x24
 80040f4:	33ff      	adds	r3, #255	; 0xff
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	1939      	adds	r1, r7, r4
 80040fe:	4810      	ldr	r0, [pc, #64]	; (8004140 <process_uart_message+0x2a8>)
 8004100:	2364      	movs	r3, #100	; 0x64
 8004102:	f7fe fb21 	bl	8002748 <HAL_UART_Transmit>
				}
				break;
 8004106:	e00a      	b.n	800411e <process_uart_message+0x286>
			// Something else: Do nothing
			default:
				break;
		}
	}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	e008      	b.n	800411e <process_uart_message+0x286>
				break;
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	e006      	b.n	800411e <process_uart_message+0x286>
				break;
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	e004      	b.n	800411e <process_uart_message+0x286>
				break;
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	e002      	b.n	800411e <process_uart_message+0x286>
				break;
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	e000      	b.n	800411e <process_uart_message+0x286>
				break;
 800411c:	46c0      	nop			; (mov r8, r8)
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b04a      	add	sp, #296	; 0x128
 8004124:	bdb0      	pop	{r4, r5, r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	2000002c 	.word	0x2000002c
 800412c:	fffffef8 	.word	0xfffffef8
 8004130:	200001e4 	.word	0x200001e4
 8004134:	080048d4 	.word	0x080048d4
 8004138:	20000058 	.word	0x20000058
 800413c:	200001bc 	.word	0x200001bc
 8004140:	20000138 	.word	0x20000138
 8004144:	2000007c 	.word	0x2000007c
 8004148:	00002710 	.word	0x00002710
 800414c:	fffffed8 	.word	0xfffffed8

08004150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	// Just blink the LED
	while (1)
	{
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <Error_Handler+0x18>)
 8004156:	2102      	movs	r1, #2
 8004158:	0018      	movs	r0, r3
 800415a:	f7fd f873 	bl	8001244 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 800415e:	20fa      	movs	r0, #250	; 0xfa
 8004160:	f7fc f9ac 	bl	80004bc <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004164:	e7f6      	b.n	8004154 <Error_Handler+0x4>
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	48000400 	.word	0x48000400

0800416c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_MspInit+0x44>)
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_MspInit+0x44>)
 8004178:	2101      	movs	r1, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_MspInit+0x44>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_MspInit+0x44>)
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <HAL_MspInit+0x44>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0549      	lsls	r1, r1, #21
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_MspInit+0x44>)
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b002      	add	sp, #8
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_TIM_Base_MspInit+0x44>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d113      	bne.n	80041ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_TIM_Base_MspInit+0x48>)
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_TIM_Base_MspInit+0x48>)
 80041cc:	2102      	movs	r1, #2
 80041ce:	430a      	orrs	r2, r1
 80041d0:	61da      	str	r2, [r3, #28]
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_TIM_Base_MspInit+0x48>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	2202      	movs	r2, #2
 80041d8:	4013      	ands	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2100      	movs	r1, #0
 80041e2:	2010      	movs	r0, #16
 80041e4:	f7fc fa38 	bl	8000658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041e8:	2010      	movs	r0, #16
 80041ea:	f7fc fa4a 	bl	8000682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b004      	add	sp, #16
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40021000 	.word	0x40021000

08004200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	2314      	movs	r3, #20
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	0018      	movs	r0, r3
 800420e:	2314      	movs	r3, #20
 8004210:	001a      	movs	r2, r3
 8004212:	2100      	movs	r1, #0
 8004214:	f000 fb39 	bl	800488a <memset>
  if(huart->Instance==USART1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <HAL_UART_MspInit+0xe0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d15a      	bne.n	80042d8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	01c9      	lsls	r1, r1, #7
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	01db      	lsls	r3, r3, #7
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 8004244:	2180      	movs	r1, #128	; 0x80
 8004246:	0289      	lsls	r1, r1, #10
 8004248:	430a      	orrs	r2, r1
 800424a:	615a      	str	r2, [r3, #20]
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_UART_MspInit+0xe4>)
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	029b      	lsls	r3, r3, #10
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800425a:	2114      	movs	r1, #20
 800425c:	187b      	adds	r3, r7, r1
 800425e:	22c0      	movs	r2, #192	; 0xc0
 8004260:	00d2      	lsls	r2, r2, #3
 8004262:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2202      	movs	r2, #2
 8004268:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	187b      	adds	r3, r7, r1
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2203      	movs	r2, #3
 8004274:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2201      	movs	r2, #1
 800427a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	187a      	adds	r2, r7, r1
 800427e:	2390      	movs	r3, #144	; 0x90
 8004280:	05db      	lsls	r3, r3, #23
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7fc fe3b 	bl	8000f00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <HAL_UART_MspInit+0xec>)
 800428e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 8004292:	2200      	movs	r2, #0
 8004294:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042b0:	2220      	movs	r2, #32
 80042b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	0152      	lsls	r2, r2, #5
 80042ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fc f9fc 	bl	80006bc <HAL_DMA_Init>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d001      	beq.n	80042cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80042c8:	f7ff ff42 	bl	8004150 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042d0:	671a      	str	r2, [r3, #112]	; 0x70
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_UART_MspInit+0xe8>)
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b00a      	add	sp, #40	; 0x28
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40021000 	.word	0x40021000
 80042e8:	200000e4 	.word	0x200000e4
 80042ec:	40020030 	.word	0x40020030

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042fe:	e7fe      	b.n	80042fe <HardFault_Handler+0x4>

08004300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004318:	f7fc f8b4 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	0018      	movs	r0, r3
 800432c:	f7fc ffa6 	bl	800127c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <DMA1_Channel2_3_IRQHandler+0x14>)
 800433e:	0018      	movs	r0, r3
 8004340:	f7fc fae8 	bl	8000914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	200000e4 	.word	0x200000e4

08004350 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <TIM3_IRQHandler+0x14>)
 8004356:	0018      	movs	r0, r3
 8004358:	f7fd fe36 	bl	8001fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	2000009c 	.word	0x2000009c

08004368 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <SystemInit+0x70>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <SystemInit+0x70>)
 8004372:	2101      	movs	r1, #1
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <SystemInit+0x70>)
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <SystemInit+0x70>)
 800437e:	4917      	ldr	r1, [pc, #92]	; (80043dc <SystemInit+0x74>)
 8004380:	400a      	ands	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <SystemInit+0x70>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <SystemInit+0x70>)
 800438a:	4915      	ldr	r1, [pc, #84]	; (80043e0 <SystemInit+0x78>)
 800438c:	400a      	ands	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <SystemInit+0x70>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <SystemInit+0x70>)
 8004396:	4913      	ldr	r1, [pc, #76]	; (80043e4 <SystemInit+0x7c>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <SystemInit+0x70>)
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <SystemInit+0x70>)
 80043a2:	4911      	ldr	r1, [pc, #68]	; (80043e8 <SystemInit+0x80>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <SystemInit+0x70>)
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <SystemInit+0x70>)
 80043ae:	210f      	movs	r1, #15
 80043b0:	438a      	bics	r2, r1
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <SystemInit+0x70>)
 80043b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <SystemInit+0x70>)
 80043ba:	490c      	ldr	r1, [pc, #48]	; (80043ec <SystemInit+0x84>)
 80043bc:	400a      	ands	r2, r1
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <SystemInit+0x70>)
 80043c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SystemInit+0x70>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	438a      	bics	r2, r1
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <SystemInit+0x70>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]

}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	08ffb80c 	.word	0x08ffb80c
 80043e0:	fef6ffff 	.word	0xfef6ffff
 80043e4:	fffbffff 	.word	0xfffbffff
 80043e8:	ffc0ffff 	.word	0xffc0ffff
 80043ec:	fffffe2c 	.word	0xfffffe2c

080043f0 <uv_led_init>:
 *
 * @param Void
 * @ return Void
 */
void uv_led_init( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
	// bind the ports and pins to the arrays
	uv_led_ports[0] = UV_LED_0_GPIO_Port;
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <uv_led_init+0x114>)
 80043f8:	2290      	movs	r2, #144	; 0x90
 80043fa:	05d2      	lsls	r2, r2, #23
 80043fc:	601a      	str	r2, [r3, #0]
	uv_led_ports[1] = UV_LED_1_GPIO_Port;
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <uv_led_init+0x114>)
 8004400:	2290      	movs	r2, #144	; 0x90
 8004402:	05d2      	lsls	r2, r2, #23
 8004404:	605a      	str	r2, [r3, #4]
	uv_led_ports[2] = UV_LED_2_GPIO_Port;
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <uv_led_init+0x114>)
 8004408:	2290      	movs	r2, #144	; 0x90
 800440a:	05d2      	lsls	r2, r2, #23
 800440c:	609a      	str	r2, [r3, #8]
	uv_led_ports[3] = UV_LED_3_GPIO_Port;
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <uv_led_init+0x114>)
 8004410:	2290      	movs	r2, #144	; 0x90
 8004412:	05d2      	lsls	r2, r2, #23
 8004414:	60da      	str	r2, [r3, #12]
	uv_led_ports[4] = UV_LED_4_GPIO_Port;
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <uv_led_init+0x114>)
 8004418:	2290      	movs	r2, #144	; 0x90
 800441a:	05d2      	lsls	r2, r2, #23
 800441c:	611a      	str	r2, [r3, #16]
	uv_led_ports[5] = UV_LED_5_GPIO_Port;
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <uv_led_init+0x114>)
 8004420:	2290      	movs	r2, #144	; 0x90
 8004422:	05d2      	lsls	r2, r2, #23
 8004424:	615a      	str	r2, [r3, #20]
	uv_led_ports[6] = UV_LED_6_GPIO_Port;
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <uv_led_init+0x114>)
 8004428:	2290      	movs	r2, #144	; 0x90
 800442a:	05d2      	lsls	r2, r2, #23
 800442c:	619a      	str	r2, [r3, #24]
	uv_led_ports[7] = UV_LED_7_GPIO_Port;
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <uv_led_init+0x114>)
 8004430:	2290      	movs	r2, #144	; 0x90
 8004432:	05d2      	lsls	r2, r2, #23
 8004434:	61da      	str	r2, [r3, #28]

	uv_led_pins[0] = UV_LED_0_Pin;
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <uv_led_init+0x118>)
 8004438:	2201      	movs	r2, #1
 800443a:	801a      	strh	r2, [r3, #0]
	uv_led_pins[1] = UV_LED_1_Pin;
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <uv_led_init+0x118>)
 800443e:	2202      	movs	r2, #2
 8004440:	805a      	strh	r2, [r3, #2]
	uv_led_pins[2] = UV_LED_2_Pin;
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <uv_led_init+0x118>)
 8004444:	2204      	movs	r2, #4
 8004446:	809a      	strh	r2, [r3, #4]
	uv_led_pins[3] = UV_LED_3_Pin;
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <uv_led_init+0x118>)
 800444a:	2208      	movs	r2, #8
 800444c:	80da      	strh	r2, [r3, #6]
	uv_led_pins[4] = UV_LED_4_Pin;
 800444e:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <uv_led_init+0x118>)
 8004450:	2210      	movs	r2, #16
 8004452:	811a      	strh	r2, [r3, #8]
	uv_led_pins[5] = UV_LED_5_Pin;
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <uv_led_init+0x118>)
 8004456:	2220      	movs	r2, #32
 8004458:	815a      	strh	r2, [r3, #10]
	uv_led_pins[6] = UV_LED_6_Pin;
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <uv_led_init+0x118>)
 800445c:	2240      	movs	r2, #64	; 0x40
 800445e:	819a      	strh	r2, [r3, #12]
	uv_led_pins[7] = UV_LED_7_Pin;
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <uv_led_init+0x118>)
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	81da      	strh	r2, [r3, #14]

	// UVLEDs global enable flag is disabled by default
	enable_global = 0;
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <uv_led_init+0x11c>)
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]

	// Read setup from FLASH
	// Load uv_led_enabled values from FLASH
	uint32_t flash_address_enabled = FLASH_UVLEDS_ENABLED_ADDR;
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <uv_led_init+0x120>)
 800446e:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < 8; i++)
 8004470:	230b      	movs	r3, #11
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e00f      	b.n	800449a <uv_led_init+0xaa>
	{
		uv_led_enabled[i] = *(uint16_t *)flash_address_enabled;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	200b      	movs	r0, #11
 8004480:	183b      	adds	r3, r7, r0
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2d1      	uxtb	r1, r2
 8004486:	4a23      	ldr	r2, [pc, #140]	; (8004514 <uv_led_init+0x124>)
 8004488:	54d1      	strb	r1, [r2, r3]
		flash_address_enabled += 2;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3302      	adds	r3, #2
 800448e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 8; i++)
 8004490:	183b      	adds	r3, r7, r0
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	183b      	adds	r3, r7, r0
 8004496:	3201      	adds	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	230b      	movs	r3, #11
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d9ea      	bls.n	800447a <uv_led_init+0x8a>
	}

	// Load uv_led_periods_ms values from FLASH
	uint32_t flash_address_periods = FLASH_UVLEDS_PERIODS_ADDR;
 80044a4:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <uv_led_init+0x128>)
 80044a6:	607b      	str	r3, [r7, #4]

	for(uint8_t i = 0; i < 8; i++)
 80044a8:	1cfb      	adds	r3, r7, #3
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e00e      	b.n	80044ce <uv_led_init+0xde>
	{
		uv_led_periods_ms[i] = *(uint16_t *)flash_address_periods;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8819      	ldrh	r1, [r3, #0]
 80044b4:	1cfb      	adds	r3, r7, #3
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	4b18      	ldr	r3, [pc, #96]	; (800451c <uv_led_init+0x12c>)
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	50d1      	str	r1, [r2, r3]
		flash_address_periods += 4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 80044c4:	1cfb      	adds	r3, r7, #3
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	1cfb      	adds	r3, r7, #3
 80044ca:	3201      	adds	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	1cfb      	adds	r3, r7, #3
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b07      	cmp	r3, #7
 80044d4:	d9ec      	bls.n	80044b0 <uv_led_init+0xc0>
	}

	// Reset the counters
	for (uint8_t i = 0; i < 8; i++)
 80044d6:	1cbb      	adds	r3, r7, #2
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e00a      	b.n	80044f4 <uv_led_init+0x104>
	{
		uv_led_counter[i] = 0;
 80044de:	1cbb      	adds	r3, r7, #2
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <uv_led_init+0x130>)
 80044e4:	0092      	lsls	r2, r2, #2
 80044e6:	2100      	movs	r1, #0
 80044e8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	1cbb      	adds	r3, r7, #2
 80044f0:	3201      	adds	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	1cbb      	adds	r3, r7, #2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b07      	cmp	r3, #7
 80044fa:	d9f0      	bls.n	80044de <uv_led_init+0xee>
	}
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000005c 	.word	0x2000005c
 8004508:	20000128 	.word	0x20000128
 800450c:	20000058 	.word	0x20000058
 8004510:	08007000 	.word	0x08007000
 8004514:	200001bc 	.word	0x200001bc
 8004518:	08007400 	.word	0x08007400
 800451c:	2000007c 	.word	0x2000007c
 8004520:	200001c4 	.word	0x200001c4

08004524 <uv_led_set_frequency>:
 * @param led_id ID of the LED (0-7)
 * @param frequency frequency of the UV LED
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_set_frequency( uint8_t led_id, uint8_t frequency)
{
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	1c0a      	adds	r2, r1, #0
 8004534:	701a      	strb	r2, [r3, #0]
	// Check if the UVLED ID is valid
	if ((0 <= led_id) && (led_id < 8))
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b07      	cmp	r3, #7
 800453c:	d861      	bhi.n	8004602 <uv_led_set_frequency+0xde>
	{
		// Check if the frequency to be set is from valid range
		if ((UV_LED_FREQ_MIN <= frequency) && (frequency <= UV_LED_FREQ_MAX)) {
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d05b      	beq.n	80045fe <uv_led_set_frequency+0xda>
 8004546:	1dbb      	adds	r3, r7, #6
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b3c      	cmp	r3, #60	; 0x3c
 800454c:	d857      	bhi.n	80045fe <uv_led_set_frequency+0xda>
			// calculate the number of ticks needed to toggle the LED
			uint32_t period = (TIMER_FREQ/frequency)/2;
 800454e:	1dbb      	adds	r3, r7, #6
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	0019      	movs	r1, r3
 8004554:	482d      	ldr	r0, [pc, #180]	; (800460c <uv_led_set_frequency+0xe8>)
 8004556:	f7fb fe61 	bl	800021c <__divsi3>
 800455a:	0003      	movs	r3, r0
 800455c:	61fb      	str	r3, [r7, #28]
			uv_led_periods_ms[(uint8_t)led_id] = (uint32_t)period;
 800455e:	1dfb      	adds	r3, r7, #7
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <uv_led_set_frequency+0xec>)
 8004564:	0092      	lsls	r2, r2, #2
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	50d1      	str	r1, [r2, r3]
			uv_led_counter [(uint8_t)led_id] = 0;
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <uv_led_set_frequency+0xf0>)
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	2100      	movs	r1, #0
 8004574:	50d1      	str	r1, [r2, r3]

			// Write the setup to the FLASH
			// Erase the FLASH Page with the periods
			HAL_FLASH_Unlock();
 8004576:	f7fc fb57 	bl	8000c28 <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t PAGEError = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800457e:	2110      	movs	r1, #16
 8004580:	187b      	adds	r3, r7, r1
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_PERIODS_ADDR;
 8004586:	187b      	adds	r3, r7, r1
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <uv_led_set_frequency+0xf4>)
 800458a:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages     = 1;
 800458c:	187b      	adds	r3, r7, r1
 800458e:	2201      	movs	r2, #1
 8004590:	609a      	str	r2, [r3, #8]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8004592:	230c      	movs	r3, #12
 8004594:	18fa      	adds	r2, r7, r3
 8004596:	187b      	adds	r3, r7, r1
 8004598:	0011      	movs	r1, r2
 800459a:	0018      	movs	r0, r3
 800459c:	f7fc fc04 	bl	8000da8 <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <uv_led_set_frequency+0xf8>)
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <uv_led_set_frequency+0xf8>)
 80045a6:	2102      	movs	r1, #2
 80045a8:	438a      	bics	r2, r1
 80045aa:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 80045ac:	f7fc fb62 	bl	8000c74 <HAL_FLASH_Lock>

			// Write to the USER FLASH
			HAL_FLASH_Unlock();
 80045b0:	f7fc fb3a 	bl	8000c28 <HAL_FLASH_Unlock>
			uint32_t flashAddress = FLASH_UVLEDS_PERIODS_ADDR;
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <uv_led_set_frequency+0xf4>)
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i = 0; i <8; i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	e012      	b.n	80045e4 <uv_led_set_frequency+0xc0>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, uv_led_periods_ms[i]);
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <uv_led_set_frequency+0xec>)
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	58d3      	ldr	r3, [r2, r3]
 80045c6:	001c      	movs	r4, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	001d      	movs	r5, r3
 80045cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ce:	0022      	movs	r2, r4
 80045d0:	002b      	movs	r3, r5
 80045d2:	2002      	movs	r0, #2
 80045d4:	f7fc fa92 	bl	8000afc <HAL_FLASH_Program>
				flashAddress += 4;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	3304      	adds	r3, #4
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i = 0; i <8; i++)
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	3301      	adds	r3, #1
 80045e2:	623b      	str	r3, [r7, #32]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	dde9      	ble.n	80045be <uv_led_set_frequency+0x9a>
			}
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <uv_led_set_frequency+0xf8>)
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <uv_led_set_frequency+0xf8>)
 80045f0:	2101      	movs	r1, #1
 80045f2:	438a      	bics	r2, r1
 80045f4:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 80045f6:	f7fc fb3d 	bl	8000c74 <HAL_FLASH_Lock>
			return 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e002      	b.n	8004604 <uv_led_set_frequency+0xe0>
		}
		return 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <uv_led_set_frequency+0xe0>
	}
	return 0;
 8004602:	2300      	movs	r3, #0
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b00a      	add	sp, #40	; 0x28
 800460a:	bdb0      	pop	{r4, r5, r7, pc}
 800460c:	00001388 	.word	0x00001388
 8004610:	2000007c 	.word	0x2000007c
 8004614:	200001c4 	.word	0x200001c4
 8004618:	08007400 	.word	0x08007400
 800461c:	40022000 	.word	0x40022000

08004620 <uv_led_enable>:
 * @param led_id ID of the LED (0-7)
 * @param enable 1 if the LED is enables, otherwise 0
 * @return 1 if success, otherwise 0
 */
uint8_t uv_led_enable(uint8_t led_id, uint8_t enable)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	0002      	movs	r2, r0
 8004628:	1dfb      	adds	r3, r7, #7
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	1c0a      	adds	r2, r1, #0
 8004630:	701a      	strb	r2, [r3, #0]
	// Check if the UVLED ID is valid
	if ((0 <= led_id) && (led_id < 8))
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b07      	cmp	r3, #7
 8004638:	d868      	bhi.n	800470c <uv_led_enable+0xec>
	{
		// Check if the value is valid
		if ((enable == 0) || (enable == 1))
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <uv_led_enable+0x2a>
 8004642:	1dbb      	adds	r3, r7, #6
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d15e      	bne.n	8004708 <uv_led_enable+0xe8>
		{
			uv_led_enabled[led_id] = enable;
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4a32      	ldr	r2, [pc, #200]	; (8004718 <uv_led_enable+0xf8>)
 8004650:	1db9      	adds	r1, r7, #6
 8004652:	7809      	ldrb	r1, [r1, #0]
 8004654:	54d1      	strb	r1, [r2, r3]
			uv_led_counter [(uint8_t)led_id] = 0;
 8004656:	1dfb      	adds	r3, r7, #7
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <uv_led_enable+0xfc>)
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	2100      	movs	r1, #0
 8004660:	50d1      	str	r1, [r2, r3]
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], enable);
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <uv_led_enable+0x100>)
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	58d0      	ldr	r0, [r2, r3]
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <uv_led_enable+0x104>)
 8004672:	0052      	lsls	r2, r2, #1
 8004674:	5ad1      	ldrh	r1, [r2, r3]
 8004676:	1dbb      	adds	r3, r7, #6
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	001a      	movs	r2, r3
 800467c:	f7fc fdc5 	bl	800120a <HAL_GPIO_WritePin>

			// Erase the USER FLASH
			HAL_FLASH_Unlock();
 8004680:	f7fc fad2 	bl	8000c28 <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t PAGEError = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
			EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004688:	210c      	movs	r1, #12
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = FLASH_UVLEDS_ENABLED_ADDR;
 8004690:	187b      	adds	r3, r7, r1
 8004692:	4a25      	ldr	r2, [pc, #148]	; (8004728 <uv_led_enable+0x108>)
 8004694:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages     = 1;
 8004696:	187b      	adds	r3, r7, r1
 8004698:	2201      	movs	r2, #1
 800469a:	609a      	str	r2, [r3, #8]
			HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 800469c:	2308      	movs	r3, #8
 800469e:	18fa      	adds	r2, r7, r3
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fc fb7f 	bl	8000da8 <HAL_FLASHEx_Erase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <uv_led_enable+0x10c>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <uv_led_enable+0x10c>)
 80046b0:	2102      	movs	r1, #2
 80046b2:	438a      	bics	r2, r1
 80046b4:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 80046b6:	f7fc fadd 	bl	8000c74 <HAL_FLASH_Lock>

			// Write to the USER FLASH
			HAL_FLASH_Unlock();
 80046ba:	f7fc fab5 	bl	8000c28 <HAL_FLASH_Unlock>
			uint32_t flashAddress = FLASH_UVLEDS_ENABLED_ADDR;
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <uv_led_enable+0x108>)
 80046c0:	61fb      	str	r3, [r7, #28]
			for(int i = 0; i <8; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e012      	b.n	80046ee <uv_led_enable+0xce>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, uv_led_enabled[i]);
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <uv_led_enable+0xf8>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	18d3      	adds	r3, r2, r3
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	001c      	movs	r4, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	001d      	movs	r5, r3
 80046d6:	69f9      	ldr	r1, [r7, #28]
 80046d8:	0022      	movs	r2, r4
 80046da:	002b      	movs	r3, r5
 80046dc:	2001      	movs	r0, #1
 80046de:	f7fc fa0d 	bl	8000afc <HAL_FLASH_Program>
				flashAddress += 2;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3302      	adds	r3, #2
 80046e6:	61fb      	str	r3, [r7, #28]
			for(int i = 0; i <8; i++)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3301      	adds	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	dde9      	ble.n	80046c8 <uv_led_enable+0xa8>
			}
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <uv_led_enable+0x10c>)
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <uv_led_enable+0x10c>)
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	611a      	str	r2, [r3, #16]
			HAL_FLASH_Lock();
 8004700:	f7fc fab8 	bl	8000c74 <HAL_FLASH_Lock>
			return 1;
 8004704:	2301      	movs	r3, #1
 8004706:	e002      	b.n	800470e <uv_led_enable+0xee>
		}
		return 0;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <uv_led_enable+0xee>
	}
	return 0;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b008      	add	sp, #32
 8004714:	bdb0      	pop	{r4, r5, r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	200001bc 	.word	0x200001bc
 800471c:	200001c4 	.word	0x200001c4
 8004720:	2000005c 	.word	0x2000005c
 8004724:	20000128 	.word	0x20000128
 8004728:	08007000 	.word	0x08007000
 800472c:	40022000 	.word	0x40022000

08004730 <uv_led_toggle>:
 *
 * 	@param led_id ID of the LED to be toggled
 * 	@return Void
 */
void uv_led_toggle(uint8_t led_id)
{
 8004730:	b5b0      	push	{r4, r5, r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	0002      	movs	r2, r0
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	701a      	strb	r2, [r3, #0]
		if ((uv_led_enabled[led_id]))
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <uv_led_toggle+0x6c>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d025      	beq.n	8004794 <uv_led_toggle+0x64>
		{
			HAL_GPIO_WritePin(uv_led_ports[led_id], uv_led_pins[led_id], !HAL_GPIO_ReadPin(uv_led_ports[led_id], uv_led_pins[led_id]) && enable_global);
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <uv_led_toggle+0x70>)
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	58d4      	ldr	r4, [r2, r3]
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <uv_led_toggle+0x74>)
 8004758:	0052      	lsls	r2, r2, #1
 800475a:	5ad5      	ldrh	r5, [r2, r3]
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <uv_led_toggle+0x70>)
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	58d0      	ldr	r0, [r2, r3]
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <uv_led_toggle+0x74>)
 800476c:	0052      	lsls	r2, r2, #1
 800476e:	5ad3      	ldrh	r3, [r2, r3]
 8004770:	0019      	movs	r1, r3
 8004772:	f7fc fd2d 	bl	80011d0 <HAL_GPIO_ReadPin>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d105      	bne.n	8004786 <uv_led_toggle+0x56>
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <uv_led_toggle+0x78>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <uv_led_toggle+0x56>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <uv_led_toggle+0x58>
 8004786:	2300      	movs	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	001a      	movs	r2, r3
 800478c:	0029      	movs	r1, r5
 800478e:	0020      	movs	r0, r4
 8004790:	f7fc fd3b 	bl	800120a <HAL_GPIO_WritePin>
		}
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bdb0      	pop	{r4, r5, r7, pc}
 800479c:	200001bc 	.word	0x200001bc
 80047a0:	2000005c 	.word	0x2000005c
 80047a4:	20000128 	.word	0x20000128
 80047a8:	20000058 	.word	0x20000058

080047ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047ac:	4813      	ldr	r0, [pc, #76]	; (80047fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047ae:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80047b0:	4813      	ldr	r0, [pc, #76]	; (8004800 <LoopForever+0x6>)
    LDR R1, [R0]
 80047b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80047b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <LoopForever+0xa>)
    CMP R1, R2
 80047b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80047ba:	d105      	bne.n	80047c8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80047bc:	4812      	ldr	r0, [pc, #72]	; (8004808 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80047be:	4913      	ldr	r1, [pc, #76]	; (800480c <LoopForever+0x12>)
    STR R1, [R0]
 80047c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80047c2:	4813      	ldr	r0, [pc, #76]	; (8004810 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80047c4:	4913      	ldr	r1, [pc, #76]	; (8004814 <LoopForever+0x1a>)
    STR R1, [R0]
 80047c6:	6001      	str	r1, [r0, #0]

080047c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047c8:	4813      	ldr	r0, [pc, #76]	; (8004818 <LoopForever+0x1e>)
  ldr r1, =_edata
 80047ca:	4914      	ldr	r1, [pc, #80]	; (800481c <LoopForever+0x22>)
  ldr r2, =_sidata
 80047cc:	4a14      	ldr	r2, [pc, #80]	; (8004820 <LoopForever+0x26>)
  movs r3, #0
 80047ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047d0:	e002      	b.n	80047d8 <LoopCopyDataInit>

080047d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047d6:	3304      	adds	r3, #4

080047d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047dc:	d3f9      	bcc.n	80047d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047de:	4a11      	ldr	r2, [pc, #68]	; (8004824 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80047e0:	4c11      	ldr	r4, [pc, #68]	; (8004828 <LoopForever+0x2e>)
  movs r3, #0
 80047e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047e4:	e001      	b.n	80047ea <LoopFillZerobss>

080047e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e8:	3204      	adds	r2, #4

080047ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047ec:	d3fb      	bcc.n	80047e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80047ee:	f7ff fdbb 	bl	8004368 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80047f2:	f000 f81d 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047f6:	f7ff f8d9 	bl	80039ac <main>

080047fa <LoopForever>:

LoopForever:
    b LoopForever
 80047fa:	e7fe      	b.n	80047fa <LoopForever>
  ldr   r0, =_estack
 80047fc:	200017ff 	.word	0x200017ff
    LDR R0,=0x00000004
 8004800:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004804:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004808:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800480c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004810:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004814:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800481c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004820:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 8004824:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004828:	200002e4 	.word	0x200002e4

0800482c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800482c:	e7fe      	b.n	800482c <ADC1_IRQHandler>
	...

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2600      	movs	r6, #0
 8004834:	4d0c      	ldr	r5, [pc, #48]	; (8004868 <__libc_init_array+0x38>)
 8004836:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	2600      	movs	r6, #0
 8004842:	f000 f82b 	bl	800489c <_init>
 8004846:	4d0a      	ldr	r5, [pc, #40]	; (8004870 <__libc_init_array+0x40>)
 8004848:	4c0a      	ldr	r4, [pc, #40]	; (8004874 <__libc_init_array+0x44>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	00b3      	lsls	r3, r6, #2
 8004856:	58eb      	ldr	r3, [r5, r3]
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	00b3      	lsls	r3, r6, #2
 8004860:	58eb      	ldr	r3, [r5, r3]
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	08004908 	.word	0x08004908
 800486c:	08004908 	.word	0x08004908
 8004870:	08004908 	.word	0x08004908
 8004874:	0800490c 	.word	0x0800490c

08004878 <memcpy>:
 8004878:	2300      	movs	r3, #0
 800487a:	b510      	push	{r4, lr}
 800487c:	429a      	cmp	r2, r3
 800487e:	d100      	bne.n	8004882 <memcpy+0xa>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	5ccc      	ldrb	r4, [r1, r3]
 8004884:	54c4      	strb	r4, [r0, r3]
 8004886:	3301      	adds	r3, #1
 8004888:	e7f8      	b.n	800487c <memcpy+0x4>

0800488a <memset>:
 800488a:	0003      	movs	r3, r0
 800488c:	1812      	adds	r2, r2, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	d100      	bne.n	8004894 <memset+0xa>
 8004892:	4770      	bx	lr
 8004894:	7019      	strb	r1, [r3, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	e7f9      	b.n	800488e <memset+0x4>
	...

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
